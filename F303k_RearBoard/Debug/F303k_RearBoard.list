
F303k_RearBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008504  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08008698  08008698  00018698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a00  08008a00  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008a00  08008a00  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a00  08008a00  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a00  08008a00  00018a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a04  08008a04  00018a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001dc  08008be4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08008be4  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014254  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bac  00000000  00000000  00034460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aaaa  00000000  00000000  00038d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e033  00000000  00000000  00053832  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f7c5  00000000  00000000  00061865  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f102a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d3c  00000000  00000000  000f10a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800867c 	.word	0x0800867c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800867c 	.word	0x0800867c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bae:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <MX_CAN_Init+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bb4:	2206      	movs	r2, #6
 8000bb6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bc6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000bca:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_CAN_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_CAN_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_CAN_Init+0x64>)
 8000bf8:	f001 f886 	bl	8001d08 <HAL_CAN_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000c02:	f000 fbe7 	bl	80013d4 <Error_Handler>
  }

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000204 	.word	0x20000204
 8000c10:	40006400 	.word	0x40006400

08000c14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <HAL_CAN_MspInit+0xb0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d141      	bne.n	8000cba <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <HAL_CAN_MspInit+0xb4>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <HAL_CAN_MspInit+0xb4>)
 8000c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_CAN_MspInit+0xb4>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_CAN_MspInit+0xb4>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <HAL_CAN_MspInit+0xb4>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_CAN_MspInit+0xb4>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000c78:	2309      	movs	r3, #9
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f001 ffcb 	bl	8002c20 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 1, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2013      	movs	r0, #19
 8000c90:	f001 ff8f 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000c94:	2013      	movs	r0, #19
 8000c96:	f001 ffa8 	bl	8002bea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 2, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2014      	movs	r0, #20
 8000ca0:	f001 ff87 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ca4:	2014      	movs	r0, #20
 8000ca6:	f001 ffa0 	bl	8002bea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 3, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2103      	movs	r1, #3
 8000cae:	2015      	movs	r0, #21
 8000cb0:	f001 ff7f 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000cb4:	2015      	movs	r0, #21
 8000cb6:	f001 ff98 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40006400 	.word	0x40006400
 8000cc8:	40021000 	.word	0x40021000

08000ccc <can_init>:
#include "can_ibis.h"




void can_init(CAN_HandleTypeDef* handler){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	  CAN_ibis = handler;
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <can_init+0x78>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
	  CAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.FilterBank = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterMode =  CAN_FILTERMODE_IDMASK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
	  sFilterConfig.FilterIdHigh = 0x000;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIdLow = 0x000;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterMaskIdHigh = 0x000;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterMaskIdLow = 0x000;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterActivation = ENABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
	  sFilterConfig.SlaveStartFilterBank = 14;
 8000cfe:	230e      	movs	r3, #14
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){  Error_Handler();}
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <can_init+0x7c>)
 8000d0a:	f001 f8f8 	bl	8001efe <HAL_CAN_ConfigFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <can_init+0x4c>
 8000d14:	f000 fb5e 	bl	80013d4 <Error_Handler>
	  if (HAL_CAN_Start(&hcan) != HAL_OK){ Error_Handler();}
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <can_init+0x7c>)
 8000d1a:	f001 f9ba 	bl	8002092 <HAL_CAN_Start>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <can_init+0x5c>
 8000d24:	f000 fb56 	bl	80013d4 <Error_Handler>
	  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {Error_Handler(); }
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <can_init+0x7c>)
 8000d2c:	f001 fc17 	bl	800255e <HAL_CAN_ActivateNotification>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <can_init+0x6e>
 8000d36:	f000 fb4d 	bl	80013d4 <Error_Handler>
}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	; 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000260 	.word	0x20000260
 8000d48:	20000204 	.word	0x20000204

08000d4c <can_send>:

void can_send(int id, uint8_t senddata[8]){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]

	TxHeader.StdId = id;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <can_send+0x68>)
 8000d5a:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <can_send+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <can_send+0x68>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <can_send+0x68>)
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <can_send+0x68>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	751a      	strb	r2, [r3, #20]

	/* Request transmission */
	if(HAL_CAN_AddTxMessage(&hcan,&TxHeader,senddata, &TxMailbox) != HAL_OK)
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <can_send+0x6c>)
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	490e      	ldr	r1, [pc, #56]	; (8000db4 <can_send+0x68>)
 8000d7a:	4810      	ldr	r0, [pc, #64]	; (8000dbc <can_send+0x70>)
 8000d7c:	f001 f9cd 	bl	800211a <HAL_CAN_AddTxMessage>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <can_send+0x4a>
	{
		Error_Handler();
 8000d86:	f000 fb25 	bl	80013d4 <Error_Handler>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 8000d8a:	e004      	b.n	8000d96 <can_send+0x4a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2101      	movs	r1, #1
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <can_send+0x74>)
 8000d92:	f002 f8b7 	bl	8002f04 <HAL_GPIO_WritePin>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <can_send+0x70>)
 8000d98:	f001 fa9a 	bl	80022d0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d1f4      	bne.n	8000d8c <can_send+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2101      	movs	r1, #1
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <can_send+0x74>)
 8000da8:	f002 f8ac 	bl	8002f04 <HAL_GPIO_WritePin>

}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200002f4 	.word	0x200002f4
 8000db8:	200002bc 	.word	0x200002bc
 8000dbc:	20000204 	.word	0x20000204
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	211d      	movs	r1, #29
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f002 f86b 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2103      	movs	r1, #3
 8000e32:	4819      	ldr	r0, [pc, #100]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e34:	f002 f866 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000e38:	231d      	movs	r3, #29
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f001 fee5 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e6e:	f001 fed7 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e72:	2310      	movs	r3, #16
 8000e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e86:	f001 fecb 	bl	8002c20 <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400

08000e9c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_IWDG_Init+0x34>)
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <MX_IWDG_Init+0x38>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_IWDG_Init+0x34>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_IWDG_Init+0x34>)
 8000eae:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000eb2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_IWDG_Init+0x34>)
 8000eb6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000eba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_IWDG_Init+0x34>)
 8000ebe:	f002 f853 	bl	8002f68 <HAL_IWDG_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000ec8:	f000 fa84 	bl	80013d4 <Error_Handler>
  }

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000330 	.word	0x20000330
 8000ed4:	40003000 	.word	0x40003000

08000ed8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <__NVIC_SystemReset+0x20>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ee8:	4903      	ldr	r1, [pc, #12]	; (8000ef8 <__NVIC_SystemReset+0x20>)
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_SystemReset+0x24>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60cb      	str	r3, [r1, #12]
 8000ef0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <__NVIC_SystemReset+0x1c>
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0004 	.word	0x05fa0004

08000f00 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8000f0a:	1df9      	adds	r1, r7, #7
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <__io_putchar+0x20>)
 8000f12:	f004 fbca 	bl	80056aa <HAL_UART_Transmit>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000420 	.word	0x20000420

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b598      	push	{r3, r4, r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fe66 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f8c4 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f7ff ff48 	bl	8000dc4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f34:	f7ff fe38 	bl	8000ba8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000f38:	f000 fd88 	bl	8001a4c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f3c:	f000 fb98 	bl	8001670 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000f40:	f000 fbec 	bl	800171c <MX_TIM7_Init>
  MX_TIM15_Init();
 8000f44:	f000 fc20 	bl	8001788 <MX_TIM15_Init>
  MX_IWDG_Init();
 8000f48:	f7ff ffa8 	bl	8000e9c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8000f4c:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <main+0x120>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 fc29 	bl	80067ac <setbuf>
  can_init(&hcan);
 8000f5a:	483b      	ldr	r0, [pc, #236]	; (8001048 <main+0x124>)
 8000f5c:	f7ff feb6 	bl	8000ccc <can_init>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f60:	483a      	ldr	r0, [pc, #232]	; (800104c <main+0x128>)
 8000f62:	f003 fae7 	bl	8004534 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Init(&htim15);
 8000f66:	483a      	ldr	r0, [pc, #232]	; (8001050 <main+0x12c>)
 8000f68:	f003 fb0e 	bl	8004588 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4838      	ldr	r0, [pc, #224]	; (8001050 <main+0x12c>)
 8000f70:	f003 fb36 	bl	80045e0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1001);
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <main+0x12c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4833      	ldr	r0, [pc, #204]	; (8001050 <main+0x12c>)
 8000f82:	f004 f9eb 	bl	800535c <HAL_TIMEx_PWMN_Start>
  TIM2->CNT=2000000;
 8000f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8a:	4a32      	ldr	r2, [pc, #200]	; (8001054 <main+0x130>)
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f8e:	213c      	movs	r1, #60	; 0x3c
 8000f90:	4831      	ldr	r0, [pc, #196]	; (8001058 <main+0x134>)
 8000f92:	f003 fc09 	bl	80047a8 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" slot=%f",slot);
 8000f96:	4b31      	ldr	r3, [pc, #196]	; (800105c <main+0x138>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fad4 	bl	8000548 <__aeabi_f2d>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	482d      	ldr	r0, [pc, #180]	; (8001060 <main+0x13c>)
 8000faa:	f005 fb83 	bl	80066b4 <iprintf>
	  printf(" state=%d",state);
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <main+0x140>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	482c      	ldr	r0, [pc, #176]	; (8001068 <main+0x144>)
 8000fb6:	f005 fb7d 	bl	80066b4 <iprintf>
	  printf(" C=%d",Craction_in);
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <main+0x148>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	482b      	ldr	r0, [pc, #172]	; (8001070 <main+0x14c>)
 8000fc2:	f005 fb77 	bl	80066b4 <iprintf>
	  printf(" F=%d",Flont_Lamp_in);
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <main+0x150>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	482a      	ldr	r0, [pc, #168]	; (8001078 <main+0x154>)
 8000fce:	f005 fb71 	bl	80066b4 <iprintf>
	  printf(" B=%d",Break_in);
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <main+0x158>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4829      	ldr	r0, [pc, #164]	; (8001080 <main+0x15c>)
 8000fda:	f005 fb6b 	bl	80066b4 <iprintf>
	  printf(" L=%d",Winker_L_in);
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <main+0x160>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4828      	ldr	r0, [pc, #160]	; (8001088 <main+0x164>)
 8000fe6:	f005 fb65 	bl	80066b4 <iprintf>
	  printf(" R=%d",Winker_R_in);
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <main+0x168>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4827      	ldr	r0, [pc, #156]	; (8001090 <main+0x16c>)
 8000ff2:	f005 fb5f 	bl	80066b4 <iprintf>
	  printf(" K=%d",Key_in);
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <main+0x170>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4826      	ldr	r0, [pc, #152]	; (8001098 <main+0x174>)
 8000ffe:	f005 fb59 	bl	80066b4 <iprintf>
	  printf(" E=%d",EX_in);
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <main+0x178>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	4825      	ldr	r0, [pc, #148]	; (80010a0 <main+0x17c>)
 800100a:	f005 fb53 	bl	80066b4 <iprintf>
	  printf(" speed=%f",speed);
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <main+0x180>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	4603      	mov	r3, r0
 800101a:	460c      	mov	r4, r1
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <main+0x184>)
 8001022:	f005 fb47 	bl	80066b4 <iprintf>
	  printf(" speed_count=%d",(TIM2->CNT));
 8001026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	481f      	ldr	r0, [pc, #124]	; (80010ac <main+0x188>)
 8001030:	f005 fb40 	bl	80066b4 <iprintf>
	  printf("\r\n");
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <main+0x18c>)
 8001036:	f005 fbb1 	bl	800679c <puts>
	  HAL_IWDG_Refresh(&hiwdg);
 800103a:	481e      	ldr	r0, [pc, #120]	; (80010b4 <main+0x190>)
 800103c:	f001 ffda 	bl	8002ff4 <HAL_IWDG_Refresh>
	  printf(" slot=%f",slot);
 8001040:	e7a9      	b.n	8000f96 <main+0x72>
 8001042:	bf00      	nop
 8001044:	2000000c 	.word	0x2000000c
 8001048:	20000204 	.word	0x20000204
 800104c:	200003e0 	.word	0x200003e0
 8001050:	20000360 	.word	0x20000360
 8001054:	001e8480 	.word	0x001e8480
 8001058:	200003a0 	.word	0x200003a0
 800105c:	2000035c 	.word	0x2000035c
 8001060:	08008698 	.word	0x08008698
 8001064:	20000345 	.word	0x20000345
 8001068:	080086a4 	.word	0x080086a4
 800106c:	20000350 	.word	0x20000350
 8001070:	080086b0 	.word	0x080086b0
 8001074:	20000340 	.word	0x20000340
 8001078:	080086b8 	.word	0x080086b8
 800107c:	20000342 	.word	0x20000342
 8001080:	080086c0 	.word	0x080086c0
 8001084:	20000359 	.word	0x20000359
 8001088:	080086c8 	.word	0x080086c8
 800108c:	20000358 	.word	0x20000358
 8001090:	080086d0 	.word	0x080086d0
 8001094:	20000343 	.word	0x20000343
 8001098:	080086d8 	.word	0x080086d8
 800109c:	20000341 	.word	0x20000341
 80010a0:	080086e0 	.word	0x080086e0
 80010a4:	20000354 	.word	0x20000354
 80010a8:	080086e8 	.word	0x080086e8
 80010ac:	080086f4 	.word	0x080086f4
 80010b0:	08008704 	.word	0x08008704
 80010b4:	20000330 	.word	0x20000330

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b096      	sub	sp, #88	; 0x58
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c2:	2228      	movs	r2, #40	; 0x28
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fe90 	bl	8005dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010ec:	230a      	movs	r3, #10
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	2310      	movs	r3, #16
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001104:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001108:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110e:	4618      	mov	r0, r3
 8001110:	f001 ff80 	bl	8003014 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800111a:	f000 f95b 	bl	80013d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fe72 	bl	8003e24 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001146:	f000 f945 	bl	80013d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f89b 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001160:	f000 f938 	bl	80013d4 <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3758      	adds	r7, #88	; 0x58
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001178:	2100      	movs	r1, #0
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f001 f8dd 	bl	800233a <HAL_CAN_GetRxMessage>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  	{
	    		Error_Handler();
 8001186:	f000 f925 	bl	80013d4 <Error_Handler>
	  	}

	switch (RxHeader.StdId){
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001192:	d008      	beq.n	80011a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
 8001194:	f240 1201 	movw	r2, #257	; 0x101
 8001198:	4293      	cmp	r3, r2
 800119a:	d009      	beq.n	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 800119c:	2b00      	cmp	r3, #0
 800119e:	d000      	beq.n	80011a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
		slot=uchar4_to_float(RxData);
		break;

	}

}
 80011a0:	e00f      	b.n	80011c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		NVIC_SystemReset();
 80011a2:	f7ff fe99 	bl	8000ed8 <__NVIC_SystemReset>
		state=RxData[0];
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80011ac:	701a      	strb	r2, [r3, #0]
		break;
 80011ae:	e008      	b.n	80011c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		slot=uchar4_to_float(RxData);
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011b2:	f000 fcbf 	bl	8001b34 <uchar4_to_float>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]
		break;
 80011c0:	bf00      	nop
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002ec 	.word	0x200002ec
 80011d0:	2000030c 	.word	0x2000030c
 80011d4:	20000345 	.word	0x20000345
 80011d8:	2000035c 	.word	0x2000035c

080011dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

	if(counter>10){
 80011e4:	4b6b      	ldr	r3, [pc, #428]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b0a      	cmp	r3, #10
 80011ea:	dd1d      	ble.n	8001228 <HAL_TIM_PeriodElapsedCallback+0x4c>
		speed_count= (TIM2->CNT)-2000000;
 80011ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f5a3 13f4 	sub.w	r3, r3, #1998848	; 0x1e8000
 80011f6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011fe:	601a      	str	r2, [r3, #0]
		TIM2->CNT=2000000;
 8001200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001204:	4a65      	ldr	r2, [pc, #404]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
		speed=(float)speed_count/100.0;
 8001208:	4b63      	ldr	r3, [pc, #396]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001214:	eddf 6a62 	vldr	s13, [pc, #392]	; 80013a0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800121e:	edc3 7a00 	vstr	s15, [r3]
		counter=0;
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
	}
	counter++;
 8001228:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	4a59      	ldr	r2, [pc, #356]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001230:	6013      	str	r3, [r2, #0]

	float_to_uchar4(TxData,speed);
 8001232:	4b5c      	ldr	r3, [pc, #368]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	eeb0 0a67 	vmov.f32	s0, s15
 800123c:	485a      	ldr	r0, [pc, #360]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800123e:	f000 fc93 	bl	8001b68 <float_to_uchar4>
	can_send(0x102,(uint8_t*)TxData);
 8001242:	4959      	ldr	r1, [pc, #356]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001244:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001248:	f7ff fd80 	bl	8000d4c <can_send>


	Winker_L_in=  (state & 0b01000000)>>6;
 800124c:	4b57      	ldr	r3, [pc, #348]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	119b      	asrs	r3, r3, #6
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800125c:	701a      	strb	r2, [r3, #0]
	Winker_R_in=  (state & 0b00100000)>>5;
 800125e:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	115b      	asrs	r3, r3, #5
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800126e:	701a      	strb	r2, [r3, #0]
	Craction_in=  (state & 0b00010000)>>4;
 8001270:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	111b      	asrs	r3, r3, #4
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001280:	701a      	strb	r2, [r3, #0]
	Break_in=     (state & 0b00001000)>>3;
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	10db      	asrs	r3, r3, #3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001292:	701a      	strb	r2, [r3, #0]
	Flont_Lamp_in=(state & 0b00000100)>>2;
 8001294:	4b45      	ldr	r3, [pc, #276]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	109b      	asrs	r3, r3, #2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80012a4:	701a      	strb	r2, [r3, #0]
	Key_in=       (state & 0b00000010)>>1;
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	105b      	asrs	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012b6:	701a      	strb	r2, [r3, #0]
	EX_in=        (state & 0b00000001);
 80012b8:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80012c4:	701a      	strb	r2, [r3, #0]

	if(Flont_Lamp_in==0){
 80012c6:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d11c      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x12c>
		if(Break_in==1){
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d108      	bne.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x10c>
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 80012de:	2100      	movs	r1, #0
 80012e0:	483a      	ldr	r0, [pc, #232]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012e2:	f004 f83b 	bl	800535c <HAL_TIMEx_PWMN_Start>
 80012e6:	e008      	b.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x11e>
		}
		else{
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 700);
 80012e8:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 80012f2:	2100      	movs	r1, #0
 80012f4:	4835      	ldr	r0, [pc, #212]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012f6:	f004 f831 	bl	800535c <HAL_TIMEx_PWMN_Start>
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2108      	movs	r1, #8
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f001 fdff 	bl	8002f04 <HAL_GPIO_WritePin>
 8001306:	e01b      	b.n	8001340 <HAL_TIM_PeriodElapsedCallback+0x164>
	}
	else{
		if(Break_in==1){
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_TIM_PeriodElapsedCallback+0x146>
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0);
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8001318:	2100      	movs	r1, #0
 800131a:	482c      	ldr	r0, [pc, #176]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800131c:	f004 f81e 	bl	800535c <HAL_TIMEx_PWMN_Start>
 8001320:	e008      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else{
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1001);
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800132a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 800132c:	2100      	movs	r1, #0
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001330:	f004 f814 	bl	800535c <HAL_TIMEx_PWMN_Start>
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2108      	movs	r1, #8
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f001 fde2 	bl	8002f04 <HAL_GPIO_WritePin>
	}


	if(Winker_L_in==0){
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x17a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,1);
 8001348:	2201      	movs	r2, #1
 800134a:	2104      	movs	r1, #4
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f001 fdd8 	bl	8002f04 <HAL_GPIO_WritePin>
 8001354:	e005      	b.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x186>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,0);
 8001356:	2200      	movs	r2, #0
 8001358:	2104      	movs	r1, #4
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f001 fdd1 	bl	8002f04 <HAL_GPIO_WritePin>
	}

	if(Winker_R_in==0){
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_TIM_PeriodElapsedCallback+0x19c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,1);
 800136a:	2201      	movs	r2, #1
 800136c:	2110      	movs	r1, #16
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f001 fdc7 	bl	8002f04 <HAL_GPIO_WritePin>
 8001376:	e005      	b.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x1a8>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
 8001378:	2200      	movs	r2, #0
 800137a:	2110      	movs	r1, #16
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f001 fdc0 	bl	8002f04 <HAL_GPIO_WritePin>
	}



	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001384:	2102      	movs	r1, #2
 8001386:	4812      	ldr	r0, [pc, #72]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001388:	f001 fdd4 	bl	8002f34 <HAL_GPIO_TogglePin>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000034c 	.word	0x2000034c
 8001398:	20000348 	.word	0x20000348
 800139c:	001e8480 	.word	0x001e8480
 80013a0:	42c80000 	.word	0x42c80000
 80013a4:	20000354 	.word	0x20000354
 80013a8:	200002b0 	.word	0x200002b0
 80013ac:	20000345 	.word	0x20000345
 80013b0:	20000359 	.word	0x20000359
 80013b4:	20000358 	.word	0x20000358
 80013b8:	20000350 	.word	0x20000350
 80013bc:	20000342 	.word	0x20000342
 80013c0:	20000340 	.word	0x20000340
 80013c4:	20000343 	.word	0x20000343
 80013c8:	20000341 	.word	0x20000341
 80013cc:	20000360 	.word	0x20000360
 80013d0:	48000400 	.word	0x48000400

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	TxData[0]=0x03;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <Error_Handler+0x2c>)
 80013da:	2203      	movs	r2, #3
 80013dc:	701a      	strb	r2, [r3, #0]
	TxData[1]=0xFF;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <Error_Handler+0x2c>)
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	705a      	strb	r2, [r3, #1]
	can_send(0x000,(uint8_t*)TxData);
 80013e4:	4906      	ldr	r1, [pc, #24]	; (8001400 <Error_Handler+0x2c>)
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fcb0 	bl	8000d4c <can_send>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80013ec:	2101      	movs	r1, #1
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <Error_Handler+0x30>)
 80013f0:	f001 fda0 	bl	8002f34 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80013f4:	2064      	movs	r0, #100	; 0x64
 80013f6:	f000 fc65 	bl	8001cc4 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002b0 	.word	0x200002b0
 8001404:	48000400 	.word	0x48000400

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_MspInit+0x44>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_MspInit+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_MspInit+0x44>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x44>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x44>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x44>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 fbee 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <CAN_TX_IRQHandler+0x10>)
 80014b2:	f001 f87a 	bl	80025aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000204 	.word	0x20000204

080014c0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <CAN_RX0_IRQHandler+0x10>)
 80014c6:	f001 f870 	bl	80025aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000204 	.word	0x20000204

080014d4 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <CAN_RX1_IRQHandler+0x10>)
 80014da:	f001 f866 	bl	80025aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000204 	.word	0x20000204

080014e8 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM7_DAC2_IRQHandler+0x10>)
 80014ee:	f003 f992 	bl	8004816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200003e0 	.word	0x200003e0

080014fc <_read>:
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e00a      	b.n	8001524 <_read+0x28>
 800150e:	f3af 8000 	nop.w
 8001512:	4601      	mov	r1, r0
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	b2ca      	uxtb	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbf0      	blt.n	800150e <_read+0x12>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_write>:
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e009      	b.n	800155c <_write+0x26>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	60ba      	str	r2, [r7, #8]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fcd5 	bl	8000f00 <__io_putchar>
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbf1      	blt.n	8001548 <_write+0x12>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_close>:
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_fstat>:
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_isatty>:
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	2301      	movs	r3, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_lseek>:
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	2300      	movs	r3, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <_sbrk>:
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
 8001608:	f004 fbc6 	bl	8005d98 <__errno>
 800160c:	4602      	mov	r2, r0
 800160e:	230c      	movs	r3, #12
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20003000 	.word	0x20003000
 8001638:	00000400 	.word	0x00000400
 800163c:	200001f8 	.word	0x200001f8
 8001640:	200004a8 	.word	0x200004a8

08001644 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <SystemInit+0x28>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <SystemInit+0x28>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SystemInit+0x28>)
 800165a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165e:	609a      	str	r2, [r3, #8]
#endif
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	2224      	movs	r2, #36	; 0x24
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fbb4 	bl	8005dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <MX_TIM2_Init+0xa4>)
 8001690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001694:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_TIM2_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_TIM2_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000000000;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_TIM2_Init+0xa4>)
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <MX_TIM2_Init+0xa8>)
 80016a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_TIM2_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_TIM2_Init+0xa4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_TIM2_Init+0xa4>)
 80016e0:	f002 ffd0 	bl	8004684 <HAL_TIM_Encoder_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ea:	f7ff fe73 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	4619      	mov	r1, r3
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <MX_TIM2_Init+0xa4>)
 80016fc:	f003 fe5e 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001706:	f7ff fe65 	bl	80013d4 <Error_Handler>
  }

}
 800170a:	bf00      	nop
 800170c:	3730      	adds	r7, #48	; 0x30
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200003a0 	.word	0x200003a0
 8001718:	77359400 	.word	0x77359400

0800171c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_TIM7_Init+0x64>)
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <MX_TIM7_Init+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_TIM7_Init+0x64>)
 8001734:	2248      	movs	r2, #72	; 0x48
 8001736:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_TIM7_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_TIM7_Init+0x64>)
 8001740:	f242 7210 	movw	r2, #10000	; 0x2710
 8001744:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_TIM7_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_TIM7_Init+0x64>)
 800174e:	f002 fec5 	bl	80044dc <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001758:	f7ff fe3c 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_TIM7_Init+0x64>)
 800176a:	f003 fe27 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001774:	f7ff fe2e 	bl	80013d4 <Error_Handler>
  }

}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200003e0 	.word	0x200003e0
 8001784:	40001400 	.word	0x40001400

08001788 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b096      	sub	sp, #88	; 0x58
 800178c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	615a      	str	r2, [r3, #20]
 80017ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	222c      	movs	r2, #44	; 0x2c
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fb19 	bl	8005dec <memset>

  htim15.Instance = TIM15;
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <MX_TIM15_Init+0x104>)
 80017bc:	4a34      	ldr	r2, [pc, #208]	; (8001890 <MX_TIM15_Init+0x108>)
 80017be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <MX_TIM15_Init+0x104>)
 80017c2:	2248      	movs	r2, #72	; 0x48
 80017c4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <MX_TIM15_Init+0x104>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <MX_TIM15_Init+0x104>)
 80017ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <MX_TIM15_Init+0x104>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <MX_TIM15_Init+0x104>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_TIM15_Init+0x104>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017e6:	4829      	ldr	r0, [pc, #164]	; (800188c <MX_TIM15_Init+0x104>)
 80017e8:	f002 fece 	bl	8004588 <HAL_TIM_PWM_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f7ff fdef 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001802:	4619      	mov	r1, r3
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_TIM15_Init+0x104>)
 8001806:	f003 fdd9 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001810:	f7ff fde0 	bl	80013d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	; 0x60
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	4814      	ldr	r0, [pc, #80]	; (800188c <MX_TIM15_Init+0x104>)
 800183a:	f003 f90b 	bl	8004a54 <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001844:	f7ff fdc6 	bl	80013d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800185c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001860:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <MX_TIM15_Init+0x104>)
 8001870:	f003 fe12 	bl	8005498 <HAL_TIMEx_ConfigBreakDeadTime>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800187a:	f7ff fdab 	bl	80013d4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <MX_TIM15_Init+0x104>)
 8001880:	f000 f8ae 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3758      	adds	r7, #88	; 0x58
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000360 	.word	0x20000360
 8001890:	40014000 	.word	0x40014000

08001894 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b4:	d145      	bne.n	8001942 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	6153      	str	r3, [r2, #20]
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6153      	str	r3, [r2, #20]
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_TIM_Encoder_MspInit+0xb8>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001910:	2301      	movs	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191e:	f001 f97f 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001922:	2308      	movs	r3, #8
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001932:	2301      	movs	r3, #1
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <HAL_TIM_Encoder_MspInit+0xbc>)
 800193e:	f001 f96f 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	48000400 	.word	0x48000400

08001954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_TIM_Base_MspInit+0x44>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d113      	bne.n	800198e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_TIM_Base_MspInit+0x48>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a0c      	ldr	r2, [pc, #48]	; (800199c <HAL_TIM_Base_MspInit+0x48>)
 800196c:	f043 0320 	orr.w	r3, r3, #32
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_TIM_Base_MspInit+0x48>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 5, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2105      	movs	r1, #5
 8001982:	2037      	movs	r0, #55	; 0x37
 8001984:	f001 f915 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001988:	2037      	movs	r0, #55	; 0x37
 800198a:	f001 f92e 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40001400 	.word	0x40001400
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_TIM_PWM_MspInit+0x38>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10b      	bne.n	80019ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_TIM_PWM_MspInit+0x3c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_TIM_PWM_MspInit+0x3c>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_TIM_PWM_MspInit+0x3c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40014000 	.word	0x40014000
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_TIM_MspPostInit+0x64>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11c      	bne.n	8001a3c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_TIM_MspPostInit+0x68>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_TIM_MspPostInit+0x68>)
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_TIM_MspPostInit+0x68>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA1     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f001 f8f2 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40014000 	.word	0x40014000
 8001a48:	40021000 	.word	0x40021000

08001a4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <MX_USART1_UART_Init+0x5c>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_USART1_UART_Init+0x58>)
 8001a90:	f003 fdbd 	bl	800560e <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a9a:	f7ff fc9b 	bl	80013d4 <Error_Handler>
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000420 	.word	0x20000420
 8001aa8:	40013800 	.word	0x40013800

08001aac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_UART_MspInit+0x80>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d129      	bne.n	8001b22 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001afe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b10:	2307      	movs	r3, #7
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f001 f87f 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40021000 	.word	0x40021000

08001b34 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	789b      	ldrb	r3, [r3, #2]
 8001b4c:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	78db      	ldrb	r3, [r3, #3]
 8001b52:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	ee07 3a90 	vmov	s15, r3
}
 8001b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	ed87 0a00 	vstr	s0, [r7]
    Float_char4 tmp;
    tmp.float_value=float_value;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	60fb      	str	r3, [r7, #12]
    value[0]=tmp.char4_value[0];
 8001b78:	7b3a      	ldrb	r2, [r7, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	701a      	strb	r2, [r3, #0]
    value[1]=tmp.char4_value[1];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3301      	adds	r3, #1
 8001b82:	7b7a      	ldrb	r2, [r7, #13]
 8001b84:	701a      	strb	r2, [r3, #0]
    value[2]=tmp.char4_value[2];
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	7bba      	ldrb	r2, [r7, #14]
 8001b8c:	701a      	strb	r2, [r3, #0]
    value[3]=tmp.char4_value[3];
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3303      	adds	r3, #3
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	701a      	strb	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <Reset_Handler>:
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopForever+0x2>
 8001ba8:	2100      	movs	r1, #0
 8001baa:	e003      	b.n	8001bb4 <LoopCopyDataInit>

08001bac <CopyDataInit>:
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LoopForever+0x6>)
 8001bae:	585b      	ldr	r3, [r3, r1]
 8001bb0:	5043      	str	r3, [r0, r1]
 8001bb2:	3104      	adds	r1, #4

08001bb4 <LoopCopyDataInit>:
 8001bb4:	480b      	ldr	r0, [pc, #44]	; (8001be4 <LoopForever+0xa>)
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <LoopForever+0xe>)
 8001bb8:	1842      	adds	r2, r0, r1
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3f6      	bcc.n	8001bac <CopyDataInit>
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LoopForever+0x12>)
 8001bc0:	e002      	b.n	8001bc8 <LoopFillZerobss>

08001bc2 <FillZerobss>:
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f842 3b04 	str.w	r3, [r2], #4

08001bc8 <LoopFillZerobss>:
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <LoopForever+0x16>)
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3f9      	bcc.n	8001bc2 <FillZerobss>
 8001bce:	f7ff fd39 	bl	8001644 <SystemInit>
 8001bd2:	f004 f8e7 	bl	8005da4 <__libc_init_array>
 8001bd6:	f7ff f9a5 	bl	8000f24 <main>

08001bda <LoopForever>:
 8001bda:	e7fe      	b.n	8001bda <LoopForever>
 8001bdc:	20003000 	.word	0x20003000
 8001be0:	08008a08 	.word	0x08008a08
 8001be4:	20000000 	.word	0x20000000
 8001be8:	200001dc 	.word	0x200001dc
 8001bec:	200001dc 	.word	0x200001dc
 8001bf0:	200004a8 	.word	0x200004a8

08001bf4 <ADC1_2_IRQHandler>:
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_2_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x28>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 ffc7 	bl	8002b9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fbf8 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 ffdf 	bl	8002c06 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 ffa7 	bl	8002bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	200004a0 	.word	0x200004a0

08001cac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200004a0 	.word	0x200004a0

08001cc4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_Delay+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000008 	.word	0x20000008

08001d08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0ed      	b.n	8001ef6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe ff74 	bl	8000c14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0202 	bic.w	r2, r2, #2
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3c:	f7ff ffb6 	bl	8001cac <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d42:	e012      	b.n	8001d6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d44:	f7ff ffb2 	bl	8001cac <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b0a      	cmp	r3, #10
 8001d50:	d90b      	bls.n	8001d6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2205      	movs	r2, #5
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0c5      	b.n	8001ef6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e5      	bne.n	8001d44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d88:	f7ff ff90 	bl	8001cac <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d8e:	e012      	b.n	8001db6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d90:	f7ff ff8c 	bl	8001cac <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b0a      	cmp	r3, #10
 8001d9c:	d90b      	bls.n	8001db6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2205      	movs	r2, #5
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e09f      	b.n	8001ef6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0e5      	beq.n	8001d90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7e1b      	ldrb	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d108      	bne.n	8001dde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e007      	b.n	8001dee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7e5b      	ldrb	r3, [r3, #25]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d108      	bne.n	8001e08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e9b      	ldrb	r3, [r3, #26]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d108      	bne.n	8001e32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0220 	orr.w	r2, r2, #32
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e007      	b.n	8001e42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0220 	bic.w	r2, r2, #32
 8001e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7edb      	ldrb	r3, [r3, #27]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0210 	bic.w	r2, r2, #16
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e007      	b.n	8001e6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0210 	orr.w	r2, r2, #16
 8001e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7f1b      	ldrb	r3, [r3, #28]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d108      	bne.n	8001e86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0208 	orr.w	r2, r2, #8
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e007      	b.n	8001e96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7f5b      	ldrb	r3, [r3, #29]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e007      	b.n	8001ec0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0204 	bic.w	r2, r2, #4
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	ea42 0103 	orr.w	r1, r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f16:	7cfb      	ldrb	r3, [r7, #19]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d003      	beq.n	8001f24 <HAL_CAN_ConfigFilter+0x26>
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	f040 80aa 	bne.w	8002078 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d123      	bne.n	8001fa6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	401a      	ands	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3248      	adds	r2, #72	; 0x48
 8001f86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f9c:	6979      	ldr	r1, [r7, #20]
 8001f9e:	3348      	adds	r3, #72	; 0x48
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d122      	bne.n	8001ff4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3248      	adds	r2, #72	; 0x48
 8001fd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fea:	6979      	ldr	r1, [r7, #20]
 8001fec:	3348      	adds	r3, #72	; 0x48
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800200e:	e007      	b.n	8002020 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800203a:	e007      	b.n	800204c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	431a      	orrs	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d107      	bne.n	8002064 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800206a:	f023 0201 	bic.w	r2, r3, #1
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e006      	b.n	8002086 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
  }
}
 8002086:	4618      	mov	r0, r3
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d12e      	bne.n	8002104 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020be:	f7ff fdf5 	bl	8001cac <HAL_GetTick>
 80020c2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020c4:	e012      	b.n	80020ec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020c6:	f7ff fdf1 	bl	8001cac <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	d90b      	bls.n	80020ec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2205      	movs	r2, #5
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e012      	b.n	8002112 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e5      	bne.n	80020c6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e006      	b.n	8002112 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
  }
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800211a:	b480      	push	{r7}
 800211c:	b089      	sub	sp, #36	; 0x24
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002138:	7ffb      	ldrb	r3, [r7, #31]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d003      	beq.n	8002146 <HAL_CAN_AddTxMessage+0x2c>
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	2b02      	cmp	r3, #2
 8002142:	f040 80b8 	bne.w	80022b6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002156:	2b00      	cmp	r3, #0
 8002158:	d105      	bne.n	8002166 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a0 	beq.w	80022a6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	0e1b      	lsrs	r3, r3, #24
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d907      	bls.n	8002186 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e09e      	b.n	80022c4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002186:	2201      	movs	r2, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	6809      	ldr	r1, [r1, #0]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3318      	adds	r3, #24
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	440b      	add	r3, r1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e00f      	b.n	80021d4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021be:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021c8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3318      	adds	r3, #24
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3318      	adds	r3, #24
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	440b      	add	r3, r1
 80021e4:	3304      	adds	r3, #4
 80021e6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	7d1b      	ldrb	r3, [r3, #20]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d111      	bne.n	8002214 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3318      	adds	r3, #24
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6811      	ldr	r1, [r2, #0]
 8002204:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3318      	adds	r3, #24
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	440b      	add	r3, r1
 8002210:	3304      	adds	r3, #4
 8002212:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3307      	adds	r3, #7
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	061a      	lsls	r2, r3, #24
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3306      	adds	r3, #6
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3305      	adds	r3, #5
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	4313      	orrs	r3, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	3204      	adds	r2, #4
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	4610      	mov	r0, r2
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	6811      	ldr	r1, [r2, #0]
 800223c:	ea43 0200 	orr.w	r2, r3, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	440b      	add	r3, r1
 8002246:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800224a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3303      	adds	r3, #3
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	061a      	lsls	r2, r3, #24
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3302      	adds	r3, #2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3301      	adds	r3, #1
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	4313      	orrs	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	4610      	mov	r0, r2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	6811      	ldr	r1, [r2, #0]
 8002272:	ea43 0200 	orr.w	r2, r3, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	440b      	add	r3, r1
 800227c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002280:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3318      	adds	r3, #24
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6811      	ldr	r1, [r2, #0]
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3318      	adds	r3, #24
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	440b      	add	r3, r1
 80022a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e00e      	b.n	80022c4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e006      	b.n	80022c4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3724      	adds	r7, #36	; 0x24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d002      	beq.n	80022f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d11d      	bne.n	800232c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3301      	adds	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800232c:	68fb      	ldr	r3, [r7, #12]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800233a:	b480      	push	{r7}
 800233c:	b087      	sub	sp, #28
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d003      	beq.n	800235e <HAL_CAN_GetRxMessage+0x24>
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	2b02      	cmp	r3, #2
 800235a:	f040 80f3 	bne.w	8002544 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10e      	bne.n	8002382 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0e7      	b.n	8002552 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0d8      	b.n	8002552 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	331b      	adds	r3, #27
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0204 	and.w	r2, r3, #4
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	331b      	adds	r3, #27
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	4413      	add	r3, r2
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	331b      	adds	r3, #27
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	08db      	lsrs	r3, r3, #3
 80023e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	331b      	adds	r3, #27
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0202 	and.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	331b      	adds	r3, #27
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 020f 	and.w	r2, r3, #15
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	331b      	adds	r3, #27
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	331b      	adds	r3, #27
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	4413      	add	r3, r2
 8002458:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4413      	add	r3, r2
 800246e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0a1a      	lsrs	r2, r3, #8
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0c1a      	lsrs	r2, r3, #16
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3302      	adds	r3, #2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e1a      	lsrs	r2, r3, #24
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	3303      	adds	r3, #3
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	3304      	adds	r3, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0a1a      	lsrs	r2, r3, #8
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	3305      	adds	r3, #5
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0c1a      	lsrs	r2, r3, #16
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3306      	adds	r3, #6
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	4413      	add	r3, r2
 8002508:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0e1a      	lsrs	r2, r3, #24
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	3307      	adds	r3, #7
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0220 	orr.w	r2, r2, #32
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	e007      	b.n	8002540 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0220 	orr.w	r2, r2, #32
 800253e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e006      	b.n	8002552 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d002      	beq.n	800257c <HAL_CAN_ActivateNotification+0x1e>
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d109      	bne.n	8002590 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6959      	ldr	r1, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e006      	b.n	800259e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b08a      	sub	sp, #40	; 0x28
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d07c      	beq.n	80026ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d023      	beq.n	8002642 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f97d 	bl	800290c <HAL_CAN_TxMailbox0CompleteCallback>
 8002612:	e016      	b.n	8002642 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	e00c      	b.n	8002642 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e002      	b.n	8002642 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f983 	bl	8002948 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d024      	beq.n	8002696 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002654:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f95d 	bl	8002920 <HAL_CAN_TxMailbox1CompleteCallback>
 8002666:	e016      	b.n	8002696 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e00c      	b.n	8002696 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	e002      	b.n	8002696 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f963 	bl	800295c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d024      	beq.n	80026ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f93d 	bl	8002934 <HAL_CAN_TxMailbox2CompleteCallback>
 80026ba:	e016      	b.n	80026ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e00c      	b.n	80026ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	e002      	b.n	80026ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f943 	bl	8002970 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002704:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2210      	movs	r2, #16
 800270c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2208      	movs	r2, #8
 8002728:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f92a 	bl	8002984 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fe fd0f 	bl	800116c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00c      	beq.n	8002772 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2210      	movs	r2, #16
 8002770:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2208      	movs	r2, #8
 800278c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f90c 	bl	80029ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f8f3 	bl	8002998 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2210      	movs	r2, #16
 80027cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8f6 	bl	80029c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2208      	movs	r2, #8
 80027ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f8ef 	bl	80029d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d075      	beq.n	80028ec <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d06c      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002864:	2b00      	cmp	r3, #0
 8002866:	d03d      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800286e:	2b00      	cmp	r3, #0
 8002870:	d038      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	d017      	beq.n	80028ac <HAL_CAN_IRQHandler+0x302>
 800287c:	2b30      	cmp	r3, #48	; 0x30
 800287e:	d804      	bhi.n	800288a <HAL_CAN_IRQHandler+0x2e0>
 8002880:	2b10      	cmp	r3, #16
 8002882:	d009      	beq.n	8002898 <HAL_CAN_IRQHandler+0x2ee>
 8002884:	2b20      	cmp	r3, #32
 8002886:	d00c      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002888:	e024      	b.n	80028d4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800288a:	2b50      	cmp	r3, #80	; 0x50
 800288c:	d018      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x316>
 800288e:	2b60      	cmp	r3, #96	; 0x60
 8002890:	d01b      	beq.n	80028ca <HAL_CAN_IRQHandler+0x320>
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d00f      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002896:	e01d      	b.n	80028d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f043 0308 	orr.w	r3, r3, #8
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028a0:	e018      	b.n	80028d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f043 0310 	orr.w	r3, r3, #16
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028aa:	e013      	b.n	80028d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f043 0320 	orr.w	r3, r3, #32
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028b4:	e00e      	b.n	80028d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028be:	e009      	b.n	80028d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028c8:	e004      	b.n	80028d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2204      	movs	r2, #4
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f872 	bl	80029e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <__NVIC_SetPriorityGrouping>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_GetPriorityGrouping>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <__NVIC_GetPriorityGrouping+0x18>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 0307 	and.w	r3, r3, #7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_EnableIRQ>:
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	db0b      	blt.n	8002a8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <__NVIC_EnableIRQ+0x38>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2001      	movs	r0, #1
 8002a82:	fa00 f202 	lsl.w	r2, r0, r2
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000e100 	.word	0xe000e100

08002a9c <__NVIC_SetPriority>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	db0a      	blt.n	8002ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	490c      	ldr	r1, [pc, #48]	; (8002ae8 <__NVIC_SetPriority+0x4c>)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	0112      	lsls	r2, r2, #4
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ac4:	e00a      	b.n	8002adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4908      	ldr	r1, [pc, #32]	; (8002aec <__NVIC_SetPriority+0x50>)
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	3b04      	subs	r3, #4
 8002ad4:	0112      	lsls	r2, r2, #4
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	440b      	add	r3, r1
 8002ada:	761a      	strb	r2, [r3, #24]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000e100 	.word	0xe000e100
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <NVIC_EncodePriority>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f1c3 0307 	rsb	r3, r3, #7
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	bf28      	it	cs
 8002b0e:	2304      	movcs	r3, #4
 8002b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3304      	adds	r3, #4
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d902      	bls.n	8002b20 <NVIC_EncodePriority+0x30>
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3b03      	subs	r3, #3
 8002b1e:	e000      	b.n	8002b22 <NVIC_EncodePriority+0x32>
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	401a      	ands	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b38:	f04f 31ff 	mov.w	r1, #4294967295
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	43d9      	mvns	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	4313      	orrs	r3, r2
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b68:	d301      	bcc.n	8002b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00f      	b.n	8002b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <SysTick_Config+0x40>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b76:	210f      	movs	r1, #15
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	f7ff ff8e 	bl	8002a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <SysTick_Config+0x40>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <SysTick_Config+0x40>)
 8002b88:	2207      	movs	r2, #7
 8002b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000e010 	.word	0xe000e010

08002b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff29 	bl	80029fc <__NVIC_SetPriorityGrouping>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc4:	f7ff ff3e 	bl	8002a44 <__NVIC_GetPriorityGrouping>
 8002bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff ff8e 	bl	8002af0 <NVIC_EncodePriority>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff5d 	bl	8002a9c <__NVIC_SetPriority>
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff31 	bl	8002a60 <__NVIC_EnableIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffa2 	bl	8002b58 <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	e14e      	b.n	8002ece <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8140 	beq.w	8002ec8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d00b      	beq.n	8002c68 <HAL_GPIO_Init+0x48>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d007      	beq.n	8002c68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c5c:	2b11      	cmp	r3, #17
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d130      	bne.n	8002cca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0201 	and.w	r2, r3, #1
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0xea>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	d123      	bne.n	8002d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	6939      	ldr	r1, [r7, #16]
 8002d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 809a 	beq.w	8002ec8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d94:	4b55      	ldr	r3, [pc, #340]	; (8002eec <HAL_GPIO_Init+0x2cc>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_GPIO_Init+0x2cc>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	4b52      	ldr	r3, [pc, #328]	; (8002eec <HAL_GPIO_Init+0x2cc>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dac:	4a50      	ldr	r2, [pc, #320]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dd6:	d013      	beq.n	8002e00 <HAL_GPIO_Init+0x1e0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a46      	ldr	r2, [pc, #280]	; (8002ef4 <HAL_GPIO_Init+0x2d4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00d      	beq.n	8002dfc <HAL_GPIO_Init+0x1dc>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a45      	ldr	r2, [pc, #276]	; (8002ef8 <HAL_GPIO_Init+0x2d8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <HAL_GPIO_Init+0x1d8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a44      	ldr	r2, [pc, #272]	; (8002efc <HAL_GPIO_Init+0x2dc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_GPIO_Init+0x1d4>
 8002df0:	2303      	movs	r3, #3
 8002df2:	e006      	b.n	8002e02 <HAL_GPIO_Init+0x1e2>
 8002df4:	2305      	movs	r3, #5
 8002df6:	e004      	b.n	8002e02 <HAL_GPIO_Init+0x1e2>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e002      	b.n	8002e02 <HAL_GPIO_Init+0x1e2>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <HAL_GPIO_Init+0x1e2>
 8002e00:	2300      	movs	r3, #0
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	f002 0203 	and.w	r2, r2, #3
 8002e08:	0092      	lsls	r2, r2, #2
 8002e0a:	4093      	lsls	r3, r2
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e12:	4937      	ldr	r1, [pc, #220]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e44:	4a2e      	ldr	r2, [pc, #184]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e6e:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e74:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ec2:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f aea9 	bne.w	8002c30 <HAL_GPIO_Init+0x10>
  }
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	48000400 	.word	0x48000400
 8002ef8:	48000800 	.word	0x48000800
 8002efc:	48000c00 	.word	0x48000c00
 8002f00:	40010400 	.word	0x40010400

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43d9      	mvns	r1, r3
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	400b      	ands	r3, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	619a      	str	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e038      	b.n	8002fec <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002f82:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f245 5255 	movw	r2, #21845	; 0x5555
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6852      	ldr	r2, [r2, #4]
 8002f96:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6892      	ldr	r2, [r2, #8]
 8002fa0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002fa2:	f7fe fe83 	bl	8001cac <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002fa8:	e008      	b.n	8002fbc <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002faa:	f7fe fe7f 	bl	8001cac <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b30      	cmp	r3, #48	; 0x30
 8002fb6:	d901      	bls.n	8002fbc <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e017      	b.n	8002fec <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f1      	bne.n	8002faa <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d005      	beq.n	8002fe0 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68d2      	ldr	r2, [r2, #12]
 8002fdc:	611a      	str	r2, [r3, #16]
 8002fde:	e004      	b.n	8002fea <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002fe8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800301a:	af00      	add	r7, sp, #0
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f000 bef4 	b.w	8003e16 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 816a 	beq.w	8003312 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800303e:	4bb3      	ldr	r3, [pc, #716]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00c      	beq.n	8003064 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800304a:	4bb0      	ldr	r3, [pc, #704]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d159      	bne.n	800310a <HAL_RCC_OscConfig+0xf6>
 8003056:	4bad      	ldr	r3, [pc, #692]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d152      	bne.n	800310a <HAL_RCC_OscConfig+0xf6>
 8003064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003068:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003078:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_RCC_OscConfig+0x82>
 8003090:	4b9e      	ldr	r3, [pc, #632]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0xae>
 8003096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800309a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80030be:	4b93      	ldr	r3, [pc, #588]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80030ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80030ce:	fa92 f2a2 	rbit	r2, r2
 80030d2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80030d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 810c 	beq.w	8003310 <HAL_RCC_OscConfig+0x2fc>
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 8106 	bne.w	8003310 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f000 be86 	b.w	8003e16 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x110>
 8003116:	4b7d      	ldr	r3, [pc, #500]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7c      	ldr	r2, [pc, #496]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e030      	b.n	8003186 <HAL_RCC_OscConfig+0x172>
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x134>
 800312e:	4b77      	ldr	r3, [pc, #476]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a76      	ldr	r2, [pc, #472]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b74      	ldr	r3, [pc, #464]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a73      	ldr	r2, [pc, #460]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e01e      	b.n	8003186 <HAL_RCC_OscConfig+0x172>
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003152:	d10c      	bne.n	800316e <HAL_RCC_OscConfig+0x15a>
 8003154:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6c      	ldr	r2, [pc, #432]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 800315a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a69      	ldr	r2, [pc, #420]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e00b      	b.n	8003186 <HAL_RCC_OscConfig+0x172>
 800316e:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a66      	ldr	r2, [pc, #408]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a63      	ldr	r2, [pc, #396]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003186:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f023 020f 	bic.w	r2, r3, #15
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	495d      	ldr	r1, [pc, #372]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d059      	beq.n	8003258 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fd82 	bl	8001cac <HAL_GetTick>
 80031a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ae:	f7fe fd7d 	bl	8001cac <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d902      	bls.n	80031c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	f000 be29 	b.w	8003e16 <HAL_RCC_OscConfig+0xe02>
 80031c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80031d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1e2>
 80031f0:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	e015      	b.n	8003222 <HAL_RCC_OscConfig+0x20e>
 80031f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800320a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800320e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003212:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003226:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800322a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800322e:	fa92 f2a2 	rbit	r2, r2
 8003232:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003236:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800323a:	fab2 f282 	clz	r2, r2
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f042 0220 	orr.w	r2, r2, #32
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	f002 021f 	and.w	r2, r2, #31
 800324a:	2101      	movs	r1, #1
 800324c:	fa01 f202 	lsl.w	r2, r1, r2
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0ab      	beq.n	80031ae <HAL_RCC_OscConfig+0x19a>
 8003256:	e05c      	b.n	8003312 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fd28 	bl	8001cac <HAL_GetTick>
 800325c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003262:	f7fe fd23 	bl	8001cac <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d902      	bls.n	8003278 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	f000 bdcf 	b.w	8003e16 <HAL_RCC_OscConfig+0xe02>
 8003278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800328c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d102      	bne.n	80032aa <HAL_RCC_OscConfig+0x296>
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	e015      	b.n	80032d6 <HAL_RCC_OscConfig+0x2c2>
 80032aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80032c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_RCC_OscConfig+0x2f8>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80032de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80032e2:	fa92 f2a2 	rbit	r2, r2
 80032e6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80032ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ab      	bne.n	8003262 <HAL_RCC_OscConfig+0x24e>
 800330a:	e002      	b.n	8003312 <HAL_RCC_OscConfig+0x2fe>
 800330c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 816f 	beq.w	8003600 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003322:	4bd0      	ldr	r3, [pc, #832]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800332e:	4bcd      	ldr	r3, [pc, #820]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d16c      	bne.n	8003414 <HAL_RCC_OscConfig+0x400>
 800333a:	4bca      	ldr	r3, [pc, #808]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d166      	bne.n	8003414 <HAL_RCC_OscConfig+0x400>
 8003346:	2302      	movs	r3, #2
 8003348:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003358:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_RCC_OscConfig+0x362>
 8003370:	4bbc      	ldr	r3, [pc, #752]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	e013      	b.n	800339e <HAL_RCC_OscConfig+0x38a>
 8003376:	2302      	movs	r3, #2
 8003378:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003388:	2302      	movs	r3, #2
 800338a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800338e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800339a:	4bb2      	ldr	r3, [pc, #712]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2202      	movs	r2, #2
 80033a0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80033a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80033a8:	fa92 f2a2 	rbit	r2, r2
 80033ac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80033b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80033b4:	fab2 f282 	clz	r2, r2
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f002 021f 	and.w	r2, r2, #31
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_RCC_OscConfig+0x3cc>
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f000 bd1b 	b.w	8003e16 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4ba0      	ldr	r3, [pc, #640]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	21f8      	movs	r1, #248	; 0xf8
 80033f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033f8:	fa91 f1a1 	rbit	r1, r1
 80033fc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003400:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003404:	fab1 f181 	clz	r1, r1
 8003408:	b2c9      	uxtb	r1, r1
 800340a:	408b      	lsls	r3, r1
 800340c:	4995      	ldr	r1, [pc, #596]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e0f5      	b.n	8003600 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8085 	beq.w	800352a <HAL_RCC_OscConfig+0x516>
 8003420:	2301      	movs	r3, #1
 8003422:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003432:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003440:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	461a      	mov	r2, r3
 8003448:	2301      	movs	r3, #1
 800344a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fc2e 	bl	8001cac <HAL_GetTick>
 8003450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003456:	f7fe fc29 	bl	8001cac <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	f000 bcd5 	b.w	8003e16 <HAL_RCC_OscConfig+0xe02>
 800346c:	2302      	movs	r3, #2
 800346e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800347e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_RCC_OscConfig+0x488>
 8003496:	4b73      	ldr	r3, [pc, #460]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e013      	b.n	80034c4 <HAL_RCC_OscConfig+0x4b0>
 800349c:	2302      	movs	r3, #2
 800349e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80034ae:	2302      	movs	r3, #2
 80034b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80034b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2202      	movs	r2, #2
 80034c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80034ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80034ce:	fa92 f2a2 	rbit	r2, r2
 80034d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80034d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80034da:	fab2 f282 	clz	r2, r2
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f042 0220 	orr.w	r2, r2, #32
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f002 021f 	and.w	r2, r2, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0af      	beq.n	8003456 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	21f8      	movs	r1, #248	; 0xf8
 8003506:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800350e:	fa91 f1a1 	rbit	r1, r1
 8003512:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003516:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800351a:	fab1 f181 	clz	r1, r1
 800351e:	b2c9      	uxtb	r1, r1
 8003520:	408b      	lsls	r3, r1
 8003522:	4950      	ldr	r1, [pc, #320]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e06a      	b.n	8003600 <HAL_RCC_OscConfig+0x5ec>
 800352a:	2301      	movs	r3, #1
 800352c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800353c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800354a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fba9 	bl	8001cac <HAL_GetTick>
 800355a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe fba4 	bl	8001cac <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d902      	bls.n	8003576 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	f000 bc50 	b.w	8003e16 <HAL_RCC_OscConfig+0xe02>
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_OscConfig+0x592>
 80035a0:	4b30      	ldr	r3, [pc, #192]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	e013      	b.n	80035ce <HAL_RCC_OscConfig+0x5ba>
 80035a6:	2302      	movs	r3, #2
 80035a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80035be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_RCC_OscConfig+0x650>)
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2202      	movs	r2, #2
 80035d0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80035d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035d8:	fa92 f2a2 	rbit	r2, r2
 80035dc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80035e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f042 0220 	orr.w	r2, r2, #32
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f002 021f 	and.w	r2, r2, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f202 	lsl.w	r2, r1, r2
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1af      	bne.n	8003560 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003600:	1d3b      	adds	r3, r7, #4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80da 	beq.w	80037c4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d069      	beq.n	80036ee <HAL_RCC_OscConfig+0x6da>
 800361a:	2301      	movs	r3, #1
 800361c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x654>)
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	2301      	movs	r3, #1
 8003642:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003644:	f7fe fb32 	bl	8001cac <HAL_GetTick>
 8003648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364c:	e00e      	b.n	800366c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364e:	f7fe fb2d 	bl	8001cac <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d906      	bls.n	800366c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e3d9      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	10908120 	.word	0x10908120
 800366c:	2302      	movs	r3, #2
 800366e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800367e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003682:	2202      	movs	r2, #2
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800369a:	2202      	movs	r2, #2
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80036ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4ba5      	ldr	r3, [pc, #660]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80036b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80036b6:	2102      	movs	r1, #2
 80036b8:	6019      	str	r1, [r3, #0]
 80036ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f1a3 	rbit	r1, r3
 80036c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036c8:	6019      	str	r1, [r3, #0]
  return result;
 80036ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0b0      	beq.n	800364e <HAL_RCC_OscConfig+0x63a>
 80036ec:	e06a      	b.n	80037c4 <HAL_RCC_OscConfig+0x7b0>
 80036ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003704:	601a      	str	r2, [r3, #0]
  return result;
 8003706:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800370a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <HAL_RCC_OscConfig+0x934>)
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	461a      	mov	r2, r3
 800371c:	2300      	movs	r3, #0
 800371e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003720:	f7fe fac4 	bl	8001cac <HAL_GetTick>
 8003724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	e009      	b.n	800373e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe fabf 	bl	8001cac <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e36b      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
 800373e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003742:	2202      	movs	r2, #2
 8003744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800375a:	2202      	movs	r2, #2
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003772:	2202      	movs	r2, #2
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	fa93 f2a3 	rbit	r2, r3
 8003780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003784:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003786:	4b6f      	ldr	r3, [pc, #444]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 8003788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800378e:	2102      	movs	r1, #2
 8003790:	6019      	str	r1, [r3, #0]
 8003792:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	fa93 f1a3 	rbit	r1, r3
 800379c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037a0:	6019      	str	r1, [r3, #0]
  return result;
 80037a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1b2      	bne.n	800372a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8158 	beq.w	8003a84 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b5a      	ldr	r3, [pc, #360]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d112      	bne.n	800380c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4b57      	ldr	r3, [pc, #348]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4a56      	ldr	r2, [pc, #344]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f0:	61d3      	str	r3, [r2, #28]
 80037f2:	4b54      	ldr	r3, [pc, #336]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037fa:	f107 0308 	add.w	r3, r7, #8
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f107 0308 	add.w	r3, r7, #8
 8003804:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b4f      	ldr	r3, [pc, #316]	; (800394c <HAL_RCC_OscConfig+0x938>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11a      	bne.n	800384e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003818:	4b4c      	ldr	r3, [pc, #304]	; (800394c <HAL_RCC_OscConfig+0x938>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_RCC_OscConfig+0x938>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003822:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003824:	f7fe fa42 	bl	8001cac <HAL_GetTick>
 8003828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	e009      	b.n	8003842 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe fa3d 	bl	8001cac <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e2e9      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	4b42      	ldr	r3, [pc, #264]	; (800394c <HAL_RCC_OscConfig+0x938>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ef      	beq.n	800382e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x852>
 8003858:	4b3a      	ldr	r3, [pc, #232]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4a39      	ldr	r2, [pc, #228]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6213      	str	r3, [r2, #32]
 8003864:	e02f      	b.n	80038c6 <HAL_RCC_OscConfig+0x8b2>
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x876>
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a33      	ldr	r2, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	4b31      	ldr	r3, [pc, #196]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4a30      	ldr	r2, [pc, #192]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 8003882:	f023 0304 	bic.w	r3, r3, #4
 8003886:	6213      	str	r3, [r2, #32]
 8003888:	e01d      	b.n	80038c6 <HAL_RCC_OscConfig+0x8b2>
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b05      	cmp	r3, #5
 8003892:	d10c      	bne.n	80038ae <HAL_RCC_OscConfig+0x89a>
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 800389a:	f043 0304 	orr.w	r3, r3, #4
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	e00b      	b.n	80038c6 <HAL_RCC_OscConfig+0x8b2>
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a24      	ldr	r2, [pc, #144]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d06b      	beq.n	80039a8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d0:	f7fe f9ec 	bl	8001cac <HAL_GetTick>
 80038d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d8:	e00b      	b.n	80038f2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe f9e7 	bl	8001cac <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e291      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
 80038f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80038f6:	2202      	movs	r2, #2
 80038f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fa93 f2a3 	rbit	r2, r3
 8003904:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800390e:	2202      	movs	r2, #2
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f2a3 	rbit	r2, r3
 800391c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003920:	601a      	str	r2, [r3, #0]
  return result;
 8003922:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003926:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d109      	bne.n	8003950 <HAL_RCC_OscConfig+0x93c>
 800393c:	4b01      	ldr	r3, [pc, #4]	; (8003944 <HAL_RCC_OscConfig+0x930>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	e014      	b.n	800396c <HAL_RCC_OscConfig+0x958>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	10908120 	.word	0x10908120
 800394c:	40007000 	.word	0x40007000
 8003950:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003954:	2202      	movs	r2, #2
 8003956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4bbb      	ldr	r3, [pc, #748]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003970:	2102      	movs	r1, #2
 8003972:	6011      	str	r1, [r2, #0]
 8003974:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	fa92 f1a2 	rbit	r1, r2
 800397e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003982:	6011      	str	r1, [r2, #0]
  return result;
 8003984:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	fab2 f282 	clz	r2, r2
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f002 021f 	and.w	r2, r2, #31
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d099      	beq.n	80038da <HAL_RCC_OscConfig+0x8c6>
 80039a6:	e063      	b.n	8003a70 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7fe f980 	bl	8001cac <HAL_GetTick>
 80039ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b0:	e00b      	b.n	80039ca <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fe f97b 	bl	8001cac <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e225      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
 80039ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039ce:	2202      	movs	r2, #2
 80039d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fa93 f2a3 	rbit	r2, r3
 80039dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039e6:	2202      	movs	r2, #2
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	fa93 f2a3 	rbit	r2, r3
 80039f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039f8:	601a      	str	r2, [r3, #0]
  return result;
 80039fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d102      	bne.n	8003a1a <HAL_RCC_OscConfig+0xa06>
 8003a14:	4b90      	ldr	r3, [pc, #576]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	e00d      	b.n	8003a36 <HAL_RCC_OscConfig+0xa22>
 8003a1a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a1e:	2202      	movs	r2, #2
 8003a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	fa93 f2a3 	rbit	r2, r3
 8003a2c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	4b89      	ldr	r3, [pc, #548]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	6011      	str	r1, [r2, #0]
 8003a3e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	fa92 f1a2 	rbit	r1, r2
 8003a48:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003a4c:	6011      	str	r1, [r2, #0]
  return result;
 8003a4e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	fab2 f282 	clz	r2, r2
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f002 021f 	and.w	r2, r2, #31
 8003a64:	2101      	movs	r1, #1
 8003a66:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1a0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a70:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a78:	4b77      	ldr	r3, [pc, #476]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4a76      	ldr	r2, [pc, #472]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 81c2 	beq.w	8003e14 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a90:	4b71      	ldr	r3, [pc, #452]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	f000 819c 	beq.w	8003dd6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f040 8114 	bne.w	8003cd2 <HAL_RCC_OscConfig+0xcbe>
 8003aaa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003aae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	fa93 f2a3 	rbit	r2, r3
 8003abe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ac2:	601a      	str	r2, [r3, #0]
  return result;
 8003ac4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ac8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	461a      	mov	r2, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe f8e4 	bl	8001cac <HAL_GetTick>
 8003ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	e009      	b.n	8003afe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fe f8df 	bl	8001cac <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e18b      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
 8003afe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b16:	601a      	str	r2, [r3, #0]
  return result;
 8003b18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_OscConfig+0xb24>
 8003b32:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	e01b      	b.n	8003b70 <HAL_RCC_OscConfig+0xb5c>
 8003b38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	fa93 f2a3 	rbit	r2, r3
 8003b4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	fa93 f2a3 	rbit	r2, r3
 8003b66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b78:	6011      	str	r1, [r2, #0]
 8003b7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	fa92 f1a2 	rbit	r1, r2
 8003b84:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b88:	6011      	str	r1, [r2, #0]
  return result;
 8003b8a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	fab2 f282 	clz	r2, r2
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	f042 0220 	orr.w	r2, r2, #32
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	f002 021f 	and.w	r2, r2, #31
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d19e      	bne.n	8003aea <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	4925      	ldr	r1, [pc, #148]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	fa93 f2a3 	rbit	r2, r3
 8003bdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003be0:	601a      	str	r2, [r3, #0]
  return result;
 8003be2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003be6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	fab3 f383 	clz	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe f855 	bl	8001cac <HAL_GetTick>
 8003c02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c06:	e009      	b.n	8003c1c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe f850 	bl	8001cac <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0fc      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
 8003c1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	fa93 f2a3 	rbit	r2, r3
 8003c30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c34:	601a      	str	r2, [r3, #0]
  return result;
 8003c36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c3c:	fab3 f383 	clz	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCC_OscConfig+0xc48>
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <HAL_RCC_OscConfig+0xc44>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	e01e      	b.n	8003c94 <HAL_RCC_OscConfig+0xc80>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	fa93 f2a3 	rbit	r2, r3
 8003c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	fa93 f2a3 	rbit	r2, r3
 8003c8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <HAL_RCC_OscConfig+0xe0c>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c9c:	6011      	str	r1, [r2, #0]
 8003c9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	fa92 f1a2 	rbit	r1, r2
 8003ca8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003cac:	6011      	str	r1, [r2, #0]
  return result;
 8003cae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	fab2 f282 	clz	r2, r2
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f042 0220 	orr.w	r2, r2, #32
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f002 021f 	and.w	r2, r2, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d09b      	beq.n	8003c08 <HAL_RCC_OscConfig+0xbf4>
 8003cd0:	e0a0      	b.n	8003e14 <HAL_RCC_OscConfig+0xe00>
 8003cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cea:	601a      	str	r2, [r3, #0]
  return result;
 8003cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cf0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	461a      	mov	r2, r3
 8003d04:	2300      	movs	r3, #0
 8003d06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd ffd0 	bl	8001cac <HAL_GetTick>
 8003d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d10:	e009      	b.n	8003d26 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fd ffcb 	bl	8001cac <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e077      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
 8003d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	fa93 f2a3 	rbit	r2, r3
 8003d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3e:	601a      	str	r2, [r3, #0]
  return result;
 8003d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_RCC_OscConfig+0xd4c>
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCC_OscConfig+0xe0c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	e01b      	b.n	8003d98 <HAL_RCC_OscConfig+0xd84>
 8003d60:	f107 0320 	add.w	r3, r7, #32
 8003d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f107 0320 	add.w	r3, r7, #32
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f2a3 	rbit	r2, r3
 8003d74:	f107 031c 	add.w	r3, r7, #28
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f107 0318 	add.w	r3, r7, #24
 8003d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f107 0318 	add.w	r3, r7, #24
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	fa93 f2a3 	rbit	r2, r3
 8003d8e:	f107 0314 	add.w	r3, r7, #20
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_OscConfig+0xe0c>)
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f107 0210 	add.w	r2, r7, #16
 8003d9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	f107 0210 	add.w	r2, r7, #16
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	fa92 f1a2 	rbit	r1, r2
 8003dac:	f107 020c 	add.w	r2, r7, #12
 8003db0:	6011      	str	r1, [r2, #0]
  return result;
 8003db2:	f107 020c 	add.w	r2, r7, #12
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f042 0220 	orr.w	r2, r2, #32
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f002 021f 	and.w	r2, r2, #31
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d19e      	bne.n	8003d12 <HAL_RCC_OscConfig+0xcfe>
 8003dd4:	e01e      	b.n	8003e14 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e018      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_RCC_OscConfig+0xe0c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003df0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d108      	bne.n	8003e10 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003dfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b09e      	sub	sp, #120	; 0x78
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e162      	b.n	8004102 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b90      	ldr	r3, [pc, #576]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d910      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	498b      	ldr	r1, [pc, #556]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b89      	ldr	r3, [pc, #548]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e14a      	b.n	8004102 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b82      	ldr	r3, [pc, #520]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	497f      	ldr	r1, [pc, #508]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80dc 	beq.w	8004050 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d13c      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xf6>
 8003ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d102      	bne.n	8003eca <HAL_RCC_ClockConfig+0xa6>
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	e00f      	b.n	8003eea <HAL_RCC_ClockConfig+0xc6>
 8003eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ece:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003edc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee6:	4b67      	ldr	r3, [pc, #412]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eee:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef2:	fa92 f2a2 	rbit	r2, r2
 8003ef6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003efa:	fab2 f282 	clz	r2, r2
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	f042 0220 	orr.w	r2, r2, #32
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	f002 021f 	and.w	r2, r2, #31
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d17b      	bne.n	800400e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0f3      	b.n	8004102 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d13c      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x178>
 8003f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d102      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x128>
 8003f46:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	e00f      	b.n	8003f6c <HAL_RCC_ClockConfig+0x148>
 8003f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f68:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f70:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f74:	fa92 f2a2 	rbit	r2, r2
 8003f78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f002 021f 	and.w	r2, r2, #31
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d13a      	bne.n	800400e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b2      	b.n	8004102 <HAL_RCC_ClockConfig+0x2de>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x1a0>
 8003fbe:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	e00d      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1bc>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	61ba      	str	r2, [r7, #24]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	fa92 f2a2 	rbit	r2, r2
 8003fea:	617a      	str	r2, [r7, #20]
  return result;
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	fab2 f282 	clz	r2, r2
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	f042 0220 	orr.w	r2, r2, #32
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	f002 021f 	and.w	r2, r2, #31
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f202 	lsl.w	r2, r1, r2
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e079      	b.n	8004102 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	491a      	ldr	r1, [pc, #104]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004020:	f7fd fe44 	bl	8001cac <HAL_GetTick>
 8004024:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	e00a      	b.n	800403e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004028:	f7fd fe40 	bl	8001cac <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e061      	b.n	8004102 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 020c 	and.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	429a      	cmp	r2, r3
 800404e:	d1eb      	bne.n	8004028 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d214      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 0207 	bic.w	r2, r3, #7
 8004066:	4906      	ldr	r1, [pc, #24]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b04      	ldr	r3, [pc, #16]	; (8004080 <HAL_RCC_ClockConfig+0x25c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e040      	b.n	8004102 <HAL_RCC_ClockConfig+0x2de>
 8004080:	40022000 	.word	0x40022000
 8004084:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004094:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_RCC_ClockConfig+0x2e8>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	491a      	ldr	r1, [pc, #104]	; (800410c <HAL_RCC_ClockConfig+0x2e8>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x2e8>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4912      	ldr	r1, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x2e8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040c6:	f000 f829 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040ca:	4601      	mov	r1, r0
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RCC_ClockConfig+0x2e8>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	22f0      	movs	r2, #240	; 0xf0
 80040d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	fa92 f2a2 	rbit	r2, r2
 80040de:	60fa      	str	r2, [r7, #12]
  return result;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	fab2 f282 	clz	r2, r2
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	40d3      	lsrs	r3, r2
 80040ea:	4a09      	ldr	r2, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x2ec>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	fa21 f303 	lsr.w	r3, r1, r3
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <HAL_RCC_ClockConfig+0x2f0>)
 80040f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <HAL_RCC_ClockConfig+0x2f4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd fd92 	bl	8001c24 <HAL_InitTick>
  
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3778      	adds	r7, #120	; 0x78
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	08008708 	.word	0x08008708
 8004114:	20000000 	.word	0x20000000
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b08b      	sub	sp, #44	; 0x2c
 8004120:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	2300      	movs	r3, #0
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b04      	cmp	r3, #4
 8004144:	d002      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x30>
 8004146:	2b08      	cmp	r3, #8
 8004148:	d003      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0x36>
 800414a:	e03c      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800414c:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800414e:	623b      	str	r3, [r7, #32]
      break;
 8004150:	e03c      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004158:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800415c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	fa92 f2a2 	rbit	r2, r2
 8004164:	607a      	str	r2, [r7, #4]
  return result;
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	fab2 f282 	clz	r2, r2
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	40d3      	lsrs	r3, r2
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	220f      	movs	r2, #15
 8004180:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	fa92 f2a2 	rbit	r2, r2
 8004188:	60fa      	str	r2, [r7, #12]
  return result;
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	40d3      	lsrs	r3, r2
 8004194:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041a4:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
 80041b4:	e004      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	623b      	str	r3, [r7, #32]
      break;
 80041c4:	e002      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041c8:	623b      	str	r3, [r7, #32]
      break;
 80041ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041cc:	6a3b      	ldr	r3, [r7, #32]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	372c      	adds	r7, #44	; 0x2c
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	007a1200 	.word	0x007a1200
 80041e4:	08008720 	.word	0x08008720
 80041e8:	08008730 	.word	0x08008730
 80041ec:	003d0900 	.word	0x003d0900

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000000 	.word	0x20000000

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800420e:	f7ff ffef 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004212:	4601      	mov	r1, r0
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800421c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004220:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	fa92 f2a2 	rbit	r2, r2
 8004228:	603a      	str	r2, [r7, #0]
  return result;
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	fab2 f282 	clz	r2, r2
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	40d3      	lsrs	r3, r2
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004236:	5cd3      	ldrb	r3, [r2, r3]
 8004238:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	08008718 	.word	0x08008718

0800424c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004252:	f7ff ffcd 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004256:	4601      	mov	r1, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004260:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004264:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	fa92 f2a2 	rbit	r2, r2
 800426c:	603a      	str	r2, [r7, #0]
  return result;
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	fab2 f282 	clz	r2, r2
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	40d3      	lsrs	r3, r2
 8004278:	4a04      	ldr	r2, [pc, #16]	; (800428c <HAL_RCC_GetPCLK2Freq+0x40>)
 800427a:	5cd3      	ldrb	r3, [r2, r3]
 800427c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	08008718 	.word	0x08008718

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b092      	sub	sp, #72	; 0x48
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80d0 	beq.w	800444e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b4:	4b86      	ldr	r3, [pc, #536]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10e      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b83      	ldr	r3, [pc, #524]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a82      	ldr	r2, [pc, #520]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
 80042cc:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042de:	4b7d      	ldr	r3, [pc, #500]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d118      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ea:	4b7a      	ldr	r3, [pc, #488]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80042f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fcd9 	bl	8001cac <HAL_GetTick>
 80042fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	e008      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fe:	f7fd fcd5 	bl	8001cac <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b64      	cmp	r3, #100	; 0x64
 800430a:	d901      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0db      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	4b70      	ldr	r3, [pc, #448]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800431c:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d07d      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004336:	429a      	cmp	r2, r3
 8004338:	d076      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800433a:	4b65      	ldr	r3, [pc, #404]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	4b5e      	ldr	r3, [pc, #376]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	461a      	mov	r2, r3
 8004364:	2301      	movs	r3, #1
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	4b55      	ldr	r3, [pc, #340]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800438c:	4a50      	ldr	r2, [pc, #320]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800438e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004390:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d045      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fd fc86 	bl	8001cac <HAL_GetTick>
 80043a0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fc82 	bl	8001cac <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e086      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80043ba:	2302      	movs	r3, #2
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	2302      	movs	r3, #2
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	61fb      	str	r3, [r7, #28]
  return result;
 80043d2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d102      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80043e8:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	e007      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80043ee:	2302      	movs	r3, #2
 80043f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2202      	movs	r2, #2
 8004400:	613a      	str	r2, [r7, #16]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	fa92 f2a2 	rbit	r2, r2
 8004408:	60fa      	str	r2, [r7, #12]
  return result;
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	fab2 f282 	clz	r2, r2
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	f002 021f 	and.w	r2, r2, #31
 800441c:	2101      	movs	r1, #1
 800441e:	fa01 f202 	lsl.w	r2, r1, r2
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0bd      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004428:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4926      	ldr	r1, [pc, #152]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004436:	4313      	orrs	r3, r2
 8004438:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800443a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f023 0203 	bic.w	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	491a      	ldr	r1, [pc, #104]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f023 0210 	bic.w	r2, r3, #16
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4912      	ldr	r1, [pc, #72]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004486:	4313      	orrs	r3, r2
 8004488:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d008      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	490b      	ldr	r1, [pc, #44]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	4903      	ldr	r1, [pc, #12]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3748      	adds	r7, #72	; 0x48
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40007000 	.word	0x40007000
 80044d8:	10908100 	.word	0x10908100

080044dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e01d      	b.n	800452a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd fa26 	bl	8001954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f000 fbda 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_TIM_Base_Start_IT+0x50>)
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b06      	cmp	r3, #6
 800455c:	d00b      	beq.n	8004576 <HAL_TIM_Base_Start_IT+0x42>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d007      	beq.n	8004576 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	00010007 	.word	0x00010007

08004588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e01d      	b.n	80045d6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd f9f6 	bl	80019a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 fb84 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2201      	movs	r2, #1
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fe8c 	bl	8005310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_TIM_PWM_Start+0x90>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00e      	beq.n	8004620 <HAL_TIM_PWM_Start+0x40>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <HAL_TIM_PWM_Start+0x94>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_TIM_PWM_Start+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_TIM_PWM_Start+0x98>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_TIM_PWM_Start+0x40>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a18      	ldr	r2, [pc, #96]	; (800467c <HAL_TIM_PWM_Start+0x9c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_TIM_PWM_Start+0x44>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <HAL_TIM_PWM_Start+0x46>
 8004624:	2300      	movs	r3, #0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <HAL_TIM_PWM_Start+0xa0>)
 8004642:	4013      	ands	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b06      	cmp	r3, #6
 800464a:	d00b      	beq.n	8004664 <HAL_TIM_PWM_Start+0x84>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004652:	d007      	beq.n	8004664 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40014000 	.word	0x40014000
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800
 8004680:	00010007 	.word	0x00010007

08004684 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e083      	b.n	80047a0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fd f8f1 	bl	8001894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80046c8:	f023 0307 	bic.w	r3, r3, #7
 80046cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fafb 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	4313      	orrs	r3, r2
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004724:	f023 030c 	bic.w	r3, r3, #12
 8004728:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	4313      	orrs	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	011a      	lsls	r2, r3, #4
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	4313      	orrs	r3, r2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4313      	orrs	r3, r2
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_TIM_Encoder_Start+0x16>
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d008      	beq.n	80047ce <HAL_TIM_Encoder_Start+0x26>
 80047bc:	e00f      	b.n	80047de <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	2100      	movs	r1, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fda2 	bl	8005310 <TIM_CCxChannelCmd>
      break;
 80047cc:	e016      	b.n	80047fc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	2104      	movs	r1, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fd9a 	bl	8005310 <TIM_CCxChannelCmd>
      break;
 80047dc:	e00e      	b.n	80047fc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fd92 	bl	8005310 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2201      	movs	r2, #1
 80047f2:	2104      	movs	r1, #4
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fd8b 	bl	8005310 <TIM_CCxChannelCmd>
      break;
 80047fa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b02      	cmp	r3, #2
 800482a:	d122      	bne.n	8004872 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11b      	bne.n	8004872 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f06f 0202 	mvn.w	r2, #2
 8004842:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fa1d 	bl	8004c98 <HAL_TIM_IC_CaptureCallback>
 800485e:	e005      	b.n	800486c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fa0f 	bl	8004c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa20 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b04      	cmp	r3, #4
 800487e:	d122      	bne.n	80048c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d11b      	bne.n	80048c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f06f 0204 	mvn.w	r2, #4
 8004896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f9f3 	bl	8004c98 <HAL_TIM_IC_CaptureCallback>
 80048b2:	e005      	b.n	80048c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f9e5 	bl	8004c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9f6 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d122      	bne.n	800491a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d11b      	bne.n	800491a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0208 	mvn.w	r2, #8
 80048ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2204      	movs	r2, #4
 80048f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f9c9 	bl	8004c98 <HAL_TIM_IC_CaptureCallback>
 8004906:	e005      	b.n	8004914 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f9bb 	bl	8004c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9cc 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b10      	cmp	r3, #16
 8004926:	d122      	bne.n	800496e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b10      	cmp	r3, #16
 8004934:	d11b      	bne.n	800496e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f06f 0210 	mvn.w	r2, #16
 800493e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2208      	movs	r2, #8
 8004944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f99f 	bl	8004c98 <HAL_TIM_IC_CaptureCallback>
 800495a:	e005      	b.n	8004968 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f991 	bl	8004c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9a2 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d10e      	bne.n	800499a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0201 	mvn.w	r2, #1
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fc fc21 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b80      	cmp	r3, #128	; 0x80
 80049a6:	d10e      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fdeb 	bl	800559c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fdde 	bl	80055b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d10e      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b40      	cmp	r3, #64	; 0x40
 8004a0e:	d107      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f950 	bl	8004cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d10e      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d107      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0220 	mvn.w	r2, #32
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fd9e 	bl	8005588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e105      	b.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x226>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b14      	cmp	r3, #20
 8004a82:	f200 80f0 	bhi.w	8004c66 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004c67 	.word	0x08004c67
 8004a94:	08004c67 	.word	0x08004c67
 8004a98:	08004c67 	.word	0x08004c67
 8004a9c:	08004b21 	.word	0x08004b21
 8004aa0:	08004c67 	.word	0x08004c67
 8004aa4:	08004c67 	.word	0x08004c67
 8004aa8:	08004c67 	.word	0x08004c67
 8004aac:	08004b63 	.word	0x08004b63
 8004ab0:	08004c67 	.word	0x08004c67
 8004ab4:	08004c67 	.word	0x08004c67
 8004ab8:	08004c67 	.word	0x08004c67
 8004abc:	08004ba3 	.word	0x08004ba3
 8004ac0:	08004c67 	.word	0x08004c67
 8004ac4:	08004c67 	.word	0x08004c67
 8004ac8:	08004c67 	.word	0x08004c67
 8004acc:	08004be5 	.word	0x08004be5
 8004ad0:	08004c67 	.word	0x08004c67
 8004ad4:	08004c67 	.word	0x08004c67
 8004ad8:	08004c67 	.word	0x08004c67
 8004adc:	08004c25 	.word	0x08004c25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f96c 	bl	8004dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0208 	orr.w	r2, r2, #8
 8004afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0204 	bic.w	r2, r2, #4
 8004b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	619a      	str	r2, [r3, #24]
      break;
 8004b1e:	e0a3      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f9d2 	bl	8004ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	021a      	lsls	r2, r3, #8
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	619a      	str	r2, [r3, #24]
      break;
 8004b60:	e082      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fa31 	bl	8004fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0208 	orr.w	r2, r2, #8
 8004b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0204 	bic.w	r2, r2, #4
 8004b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69d9      	ldr	r1, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	61da      	str	r2, [r3, #28]
      break;
 8004ba0:	e062      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fa8f 	bl	80050cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	021a      	lsls	r2, r3, #8
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	61da      	str	r2, [r3, #28]
      break;
 8004be2:	e041      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fad2 	bl	8005194 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0208 	orr.w	r2, r2, #8
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c22:	e021      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fb10 	bl	8005250 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c64:	e000      	b.n	8004c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004c66:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop

08004c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a32      	ldr	r2, [pc, #200]	; (8004db0 <TIM_Base_SetConfig+0xdc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x28>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x28>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <TIM_Base_SetConfig+0xe0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_Base_SetConfig+0xdc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <TIM_Base_SetConfig+0x6a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1c:	d00f      	beq.n	8004d3e <TIM_Base_SetConfig+0x6a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <TIM_Base_SetConfig+0xe0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <TIM_Base_SetConfig+0x6a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <TIM_Base_SetConfig+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <TIM_Base_SetConfig+0x6a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <TIM_Base_SetConfig+0xe8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_Base_SetConfig+0x6a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a21      	ldr	r2, [pc, #132]	; (8004dc0 <TIM_Base_SetConfig+0xec>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d108      	bne.n	8004d50 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a0e      	ldr	r2, [pc, #56]	; (8004db0 <TIM_Base_SetConfig+0xdc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0xc0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <TIM_Base_SetConfig+0xe4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0xc0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <TIM_Base_SetConfig+0xe8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xc0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <TIM_Base_SetConfig+0xec>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 0302 	bic.w	r3, r3, #2
 8004e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <TIM_OC1_SetConfig+0xfc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_OC1_SetConfig+0x78>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <TIM_OC1_SetConfig+0x100>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_OC1_SetConfig+0x78>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <TIM_OC1_SetConfig+0x104>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC1_SetConfig+0x78>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <TIM_OC1_SetConfig+0x108>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10c      	bne.n	8004e56 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f023 0308 	bic.w	r3, r3, #8
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f023 0304 	bic.w	r3, r3, #4
 8004e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <TIM_OC1_SetConfig+0xfc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_OC1_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <TIM_OC1_SetConfig+0x100>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_OC1_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <TIM_OC1_SetConfig+0x104>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC1_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a16      	ldr	r2, [pc, #88]	; (8004ecc <TIM_OC1_SetConfig+0x108>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d111      	bne.n	8004e9a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800

08004ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0210 	bic.w	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0320 	bic.w	r3, r3, #32
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a24      	ldr	r2, [pc, #144]	; (8004fc0 <TIM_OC2_SetConfig+0xf0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10d      	bne.n	8004f50 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <TIM_OC2_SetConfig+0xf0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <TIM_OC2_SetConfig+0xa0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <TIM_OC2_SetConfig+0xf4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_OC2_SetConfig+0xa0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <TIM_OC2_SetConfig+0xf8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC2_SetConfig+0xa0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <TIM_OC2_SetConfig+0xfc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d113      	bne.n	8004f98 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400
 8004fcc:	40014800 	.word	0x40014800

08004fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800501c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a23      	ldr	r2, [pc, #140]	; (80050bc <TIM_OC3_SetConfig+0xec>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10d      	bne.n	800504e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800504c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <TIM_OC3_SetConfig+0xec>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_OC3_SetConfig+0x9e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <TIM_OC3_SetConfig+0xf0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_OC3_SetConfig+0x9e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <TIM_OC3_SetConfig+0xf4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC3_SetConfig+0x9e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <TIM_OC3_SetConfig+0xf8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d113      	bne.n	8005096 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	621a      	str	r2, [r3, #32]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400
 80050c8:	40014800 	.word	0x40014800

080050cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800511a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a16      	ldr	r2, [pc, #88]	; (8005184 <TIM_OC4_SetConfig+0xb8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_OC4_SetConfig+0x7c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a15      	ldr	r2, [pc, #84]	; (8005188 <TIM_OC4_SetConfig+0xbc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC4_SetConfig+0x7c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a14      	ldr	r2, [pc, #80]	; (800518c <TIM_OC4_SetConfig+0xc0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC4_SetConfig+0x7c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a13      	ldr	r2, [pc, #76]	; (8005190 <TIM_OC4_SetConfig+0xc4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d109      	bne.n	800515c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <TIM_OC5_SetConfig+0xac>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_OC5_SetConfig+0x72>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <TIM_OC5_SetConfig+0xb0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_OC5_SetConfig+0x72>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a13      	ldr	r2, [pc, #76]	; (8005248 <TIM_OC5_SetConfig+0xb4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_OC5_SetConfig+0x72>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a12      	ldr	r2, [pc, #72]	; (800524c <TIM_OC5_SetConfig+0xb8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d109      	bne.n	800521a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	051b      	lsls	r3, r3, #20
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <TIM_OC6_SetConfig+0xb0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC6_SetConfig+0x74>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a15      	ldr	r2, [pc, #84]	; (8005304 <TIM_OC6_SetConfig+0xb4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC6_SetConfig+0x74>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a14      	ldr	r2, [pc, #80]	; (8005308 <TIM_OC6_SetConfig+0xb8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC6_SetConfig+0x74>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a13      	ldr	r2, [pc, #76]	; (800530c <TIM_OC6_SetConfig+0xbc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d109      	bne.n	80052d8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	029b      	lsls	r3, r3, #10
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800

08005310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	2201      	movs	r2, #1
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2204      	movs	r2, #4
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f928 	bl	80055c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_TIMEx_PWMN_Start+0x5c>)
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b06      	cmp	r3, #6
 8005394:	d00b      	beq.n	80053ae <HAL_TIMEx_PWMN_Start+0x52>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d007      	beq.n	80053ae <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	00010007 	.word	0x00010007

080053bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e054      	b.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a24      	ldr	r2, [pc, #144]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d108      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005404:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a17      	ldr	r2, [pc, #92]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d009      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a11      	ldr	r2, [pc, #68]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10c      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40014000 	.word	0x40014000

08005498 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e060      	b.n	8005576 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	041b      	lsls	r3, r3, #16
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a14      	ldr	r2, [pc, #80]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d115      	bne.n	8005564 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	051b      	lsls	r3, r3, #20
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40012c00 	.word	0x40012c00

08005588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2204      	movs	r2, #4
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	401a      	ands	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1a      	ldr	r2, [r3, #32]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e040      	b.n	80056a2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fc fa3b 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2224      	movs	r2, #36	; 0x24
 800563a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8bf 	bl	80057d0 <UART_SetConfig>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e022      	b.n	80056a2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa35 	bl	8005ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005678:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005688:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fabc 	bl	8005c18 <UART_CheckIdleState>
 80056a0:	4603      	mov	r3, r0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b08a      	sub	sp, #40	; 0x28
 80056ae:	af02      	add	r7, sp, #8
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056be:	2b20      	cmp	r3, #32
 80056c0:	f040 8081 	bne.w	80057c6 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_UART_Transmit+0x26>
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e079      	b.n	80057c8 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Transmit+0x38>
 80056de:	2302      	movs	r3, #2
 80056e0:	e072      	b.n	80057c8 <HAL_UART_Transmit+0x11e>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2221      	movs	r2, #33	; 0x21
 80056f4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80056f6:	f7fc fad9 	bl	8001cac <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005714:	d108      	bne.n	8005728 <HAL_UART_Transmit+0x7e>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	e003      	b.n	8005730 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005730:	e02d      	b.n	800578e <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fab0 	bl	8005ca2 <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e03d      	b.n	80057c8 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800575e:	b292      	uxth	r2, r2
 8005760:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	3302      	adds	r3, #2
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	e008      	b.n	800577c <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	b292      	uxth	r2, r2
 8005774:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3301      	adds	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1cb      	bne.n	8005732 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fa7c 	bl	8005ca2 <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e009      	b.n	80057c8 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4ba2      	ldr	r3, [pc, #648]	; (8005a88 <UART_SetConfig+0x2b8>)
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	6939      	ldr	r1, [r7, #16]
 8005808:	430b      	orrs	r3, r1
 800580a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a90      	ldr	r2, [pc, #576]	; (8005a8c <UART_SetConfig+0x2bc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d121      	bne.n	8005894 <UART_SetConfig+0xc4>
 8005850:	4b8f      	ldr	r3, [pc, #572]	; (8005a90 <UART_SetConfig+0x2c0>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d817      	bhi.n	800588c <UART_SetConfig+0xbc>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x94>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005875 	.word	0x08005875
 8005868:	08005881 	.word	0x08005881
 800586c:	08005887 	.word	0x08005887
 8005870:	0800587b 	.word	0x0800587b
 8005874:	2300      	movs	r3, #0
 8005876:	77fb      	strb	r3, [r7, #31]
 8005878:	e01e      	b.n	80058b8 <UART_SetConfig+0xe8>
 800587a:	2302      	movs	r3, #2
 800587c:	77fb      	strb	r3, [r7, #31]
 800587e:	e01b      	b.n	80058b8 <UART_SetConfig+0xe8>
 8005880:	2304      	movs	r3, #4
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e018      	b.n	80058b8 <UART_SetConfig+0xe8>
 8005886:	2308      	movs	r3, #8
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e015      	b.n	80058b8 <UART_SetConfig+0xe8>
 800588c:	2310      	movs	r3, #16
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	bf00      	nop
 8005892:	e011      	b.n	80058b8 <UART_SetConfig+0xe8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a7e      	ldr	r2, [pc, #504]	; (8005a94 <UART_SetConfig+0x2c4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d102      	bne.n	80058a4 <UART_SetConfig+0xd4>
 800589e:	2300      	movs	r3, #0
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e009      	b.n	80058b8 <UART_SetConfig+0xe8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7b      	ldr	r2, [pc, #492]	; (8005a98 <UART_SetConfig+0x2c8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d102      	bne.n	80058b4 <UART_SetConfig+0xe4>
 80058ae:	2300      	movs	r3, #0
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e001      	b.n	80058b8 <UART_SetConfig+0xe8>
 80058b4:	2310      	movs	r3, #16
 80058b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c0:	f040 8082 	bne.w	80059c8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80058c4:	7ffb      	ldrb	r3, [r7, #31]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d85e      	bhi.n	8005988 <UART_SetConfig+0x1b8>
 80058ca:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <UART_SetConfig+0x100>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	08005915 	.word	0x08005915
 80058d8:	08005935 	.word	0x08005935
 80058dc:	08005989 	.word	0x08005989
 80058e0:	08005951 	.word	0x08005951
 80058e4:	08005989 	.word	0x08005989
 80058e8:	08005989 	.word	0x08005989
 80058ec:	08005989 	.word	0x08005989
 80058f0:	08005971 	.word	0x08005971
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7fe fc88 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 80058f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	005a      	lsls	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	fbb2 f3f3 	udiv	r3, r2, r3
 800590e:	b29b      	uxth	r3, r3
 8005910:	61bb      	str	r3, [r7, #24]
        break;
 8005912:	e03c      	b.n	800598e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe fc9a 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 8005918:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	005a      	lsls	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	fbb2 f3f3 	udiv	r3, r2, r3
 800592e:	b29b      	uxth	r3, r3
 8005930:	61bb      	str	r3, [r7, #24]
        break;
 8005932:	e02c      	b.n	800598e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800593e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6852      	ldr	r2, [r2, #4]
 8005946:	fbb3 f3f2 	udiv	r3, r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	61bb      	str	r3, [r7, #24]
        break;
 800594e:	e01e      	b.n	800598e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005950:	f7fe fbe4 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005954:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	005a      	lsls	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	61bb      	str	r3, [r7, #24]
        break;
 800596e:	e00e      	b.n	800598e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	61bb      	str	r3, [r7, #24]
        break;
 8005986:	e002      	b.n	800598e <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	75fb      	strb	r3, [r7, #23]
        break;
 800598c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d916      	bls.n	80059c2 <UART_SetConfig+0x1f2>
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599a:	d212      	bcs.n	80059c2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f023 030f 	bic.w	r3, r3, #15
 80059a4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	897a      	ldrh	r2, [r7, #10]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e07d      	b.n	8005abe <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]
 80059c6:	e07a      	b.n	8005abe <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d866      	bhi.n	8005a9c <UART_SetConfig+0x2cc>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x204>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	08005a17 	.word	0x08005a17
 80059dc:	08005a35 	.word	0x08005a35
 80059e0:	08005a9d 	.word	0x08005a9d
 80059e4:	08005a51 	.word	0x08005a51
 80059e8:	08005a9d 	.word	0x08005a9d
 80059ec:	08005a9d 	.word	0x08005a9d
 80059f0:	08005a9d 	.word	0x08005a9d
 80059f4:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fe fc06 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 80059fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	085a      	lsrs	r2, r3, #1
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	441a      	add	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	61bb      	str	r3, [r7, #24]
        break;
 8005a14:	e045      	b.n	8005aa2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a16:	f7fe fc19 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 8005a1a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	085a      	lsrs	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	61bb      	str	r3, [r7, #24]
        break;
 8005a32:	e036      	b.n	8005aa2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005a3e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	61bb      	str	r3, [r7, #24]
        break;
 8005a4e:	e028      	b.n	8005aa2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a50:	f7fe fb64 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005a54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	085a      	lsrs	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	441a      	add	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	61bb      	str	r3, [r7, #24]
        break;
 8005a6c:	e019      	b.n	8005aa2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	61bb      	str	r3, [r7, #24]
        break;
 8005a84:	e00d      	b.n	8005aa2 <UART_SetConfig+0x2d2>
 8005a86:	bf00      	nop
 8005a88:	efff69f3 	.word	0xefff69f3
 8005a8c:	40013800 	.word	0x40013800
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40004400 	.word	0x40004400
 8005a98:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
        break;
 8005aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b0f      	cmp	r3, #15
 8005aa6:	d908      	bls.n	8005aba <UART_SetConfig+0x2ea>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aae:	d204      	bcs.n	8005aba <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	60da      	str	r2, [r3, #12]
 8005ab8:	e001      	b.n	8005abe <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01a      	beq.n	8005bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd2:	d10a      	bne.n	8005bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c26:	f7fc f841 	bl	8001cac <HAL_GetTick>
 8005c2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d10e      	bne.n	8005c58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f82a 	bl	8005ca2 <UART_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e020      	b.n	8005c9a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d10e      	bne.n	8005c84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f814 	bl	8005ca2 <UART_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e00a      	b.n	8005c9a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb2:	e05d      	b.n	8005d70 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d059      	beq.n	8005d70 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cbc:	f7fb fff6 	bl	8001cac <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d302      	bcc.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11b      	bne.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ce0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e042      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d02b      	beq.n	8005d70 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d26:	d123      	bne.n	8005d70 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d30:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e00f      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d092      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <__errno>:
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <__errno+0x8>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	2000000c 	.word	0x2000000c

08005da4 <__libc_init_array>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4e0d      	ldr	r6, [pc, #52]	; (8005ddc <__libc_init_array+0x38>)
 8005da8:	4c0d      	ldr	r4, [pc, #52]	; (8005de0 <__libc_init_array+0x3c>)
 8005daa:	1ba4      	subs	r4, r4, r6
 8005dac:	10a4      	asrs	r4, r4, #2
 8005dae:	2500      	movs	r5, #0
 8005db0:	42a5      	cmp	r5, r4
 8005db2:	d109      	bne.n	8005dc8 <__libc_init_array+0x24>
 8005db4:	4e0b      	ldr	r6, [pc, #44]	; (8005de4 <__libc_init_array+0x40>)
 8005db6:	4c0c      	ldr	r4, [pc, #48]	; (8005de8 <__libc_init_array+0x44>)
 8005db8:	f002 fc60 	bl	800867c <_init>
 8005dbc:	1ba4      	subs	r4, r4, r6
 8005dbe:	10a4      	asrs	r4, r4, #2
 8005dc0:	2500      	movs	r5, #0
 8005dc2:	42a5      	cmp	r5, r4
 8005dc4:	d105      	bne.n	8005dd2 <__libc_init_array+0x2e>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dcc:	4798      	blx	r3
 8005dce:	3501      	adds	r5, #1
 8005dd0:	e7ee      	b.n	8005db0 <__libc_init_array+0xc>
 8005dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd6:	4798      	blx	r3
 8005dd8:	3501      	adds	r5, #1
 8005dda:	e7f2      	b.n	8005dc2 <__libc_init_array+0x1e>
 8005ddc:	08008a00 	.word	0x08008a00
 8005de0:	08008a00 	.word	0x08008a00
 8005de4:	08008a00 	.word	0x08008a00
 8005de8:	08008a04 	.word	0x08008a04

08005dec <memset>:
 8005dec:	4402      	add	r2, r0
 8005dee:	4603      	mov	r3, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <__cvt>:
 8005dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	ec55 4b10 	vmov	r4, r5, d0
 8005e04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005e06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	460e      	mov	r6, r1
 8005e0e:	4691      	mov	r9, r2
 8005e10:	4619      	mov	r1, r3
 8005e12:	bfb8      	it	lt
 8005e14:	4622      	movlt	r2, r4
 8005e16:	462b      	mov	r3, r5
 8005e18:	f027 0720 	bic.w	r7, r7, #32
 8005e1c:	bfbb      	ittet	lt
 8005e1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e22:	461d      	movlt	r5, r3
 8005e24:	2300      	movge	r3, #0
 8005e26:	232d      	movlt	r3, #45	; 0x2d
 8005e28:	bfb8      	it	lt
 8005e2a:	4614      	movlt	r4, r2
 8005e2c:	2f46      	cmp	r7, #70	; 0x46
 8005e2e:	700b      	strb	r3, [r1, #0]
 8005e30:	d004      	beq.n	8005e3c <__cvt+0x40>
 8005e32:	2f45      	cmp	r7, #69	; 0x45
 8005e34:	d100      	bne.n	8005e38 <__cvt+0x3c>
 8005e36:	3601      	adds	r6, #1
 8005e38:	2102      	movs	r1, #2
 8005e3a:	e000      	b.n	8005e3e <__cvt+0x42>
 8005e3c:	2103      	movs	r1, #3
 8005e3e:	ab03      	add	r3, sp, #12
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	ab02      	add	r3, sp, #8
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	4632      	mov	r2, r6
 8005e48:	4653      	mov	r3, sl
 8005e4a:	ec45 4b10 	vmov	d0, r4, r5
 8005e4e:	f000 feaf 	bl	8006bb0 <_dtoa_r>
 8005e52:	2f47      	cmp	r7, #71	; 0x47
 8005e54:	4680      	mov	r8, r0
 8005e56:	d102      	bne.n	8005e5e <__cvt+0x62>
 8005e58:	f019 0f01 	tst.w	r9, #1
 8005e5c:	d026      	beq.n	8005eac <__cvt+0xb0>
 8005e5e:	2f46      	cmp	r7, #70	; 0x46
 8005e60:	eb08 0906 	add.w	r9, r8, r6
 8005e64:	d111      	bne.n	8005e8a <__cvt+0x8e>
 8005e66:	f898 3000 	ldrb.w	r3, [r8]
 8005e6a:	2b30      	cmp	r3, #48	; 0x30
 8005e6c:	d10a      	bne.n	8005e84 <__cvt+0x88>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	4620      	mov	r0, r4
 8005e74:	4629      	mov	r1, r5
 8005e76:	f7fa fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e7a:	b918      	cbnz	r0, 8005e84 <__cvt+0x88>
 8005e7c:	f1c6 0601 	rsb	r6, r6, #1
 8005e80:	f8ca 6000 	str.w	r6, [sl]
 8005e84:	f8da 3000 	ldr.w	r3, [sl]
 8005e88:	4499      	add	r9, r3
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4620      	mov	r0, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	f7fa fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e96:	b938      	cbnz	r0, 8005ea8 <__cvt+0xac>
 8005e98:	2230      	movs	r2, #48	; 0x30
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	454b      	cmp	r3, r9
 8005e9e:	d205      	bcs.n	8005eac <__cvt+0xb0>
 8005ea0:	1c59      	adds	r1, r3, #1
 8005ea2:	9103      	str	r1, [sp, #12]
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e7f8      	b.n	8005e9a <__cvt+0x9e>
 8005ea8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eb0:	eba3 0308 	sub.w	r3, r3, r8
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	b004      	add	sp, #16
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ebe <__exponent>:
 8005ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	bfba      	itte	lt
 8005ec6:	4249      	neglt	r1, r1
 8005ec8:	232d      	movlt	r3, #45	; 0x2d
 8005eca:	232b      	movge	r3, #43	; 0x2b
 8005ecc:	2909      	cmp	r1, #9
 8005ece:	f804 2b02 	strb.w	r2, [r4], #2
 8005ed2:	7043      	strb	r3, [r0, #1]
 8005ed4:	dd20      	ble.n	8005f18 <__exponent+0x5a>
 8005ed6:	f10d 0307 	add.w	r3, sp, #7
 8005eda:	461f      	mov	r7, r3
 8005edc:	260a      	movs	r6, #10
 8005ede:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ee2:	fb06 1115 	mls	r1, r6, r5, r1
 8005ee6:	3130      	adds	r1, #48	; 0x30
 8005ee8:	2d09      	cmp	r5, #9
 8005eea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005eee:	f103 32ff 	add.w	r2, r3, #4294967295
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	dc09      	bgt.n	8005f0a <__exponent+0x4c>
 8005ef6:	3130      	adds	r1, #48	; 0x30
 8005ef8:	3b02      	subs	r3, #2
 8005efa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005efe:	42bb      	cmp	r3, r7
 8005f00:	4622      	mov	r2, r4
 8005f02:	d304      	bcc.n	8005f0e <__exponent+0x50>
 8005f04:	1a10      	subs	r0, r2, r0
 8005f06:	b003      	add	sp, #12
 8005f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	e7e7      	b.n	8005ede <__exponent+0x20>
 8005f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f12:	f804 2b01 	strb.w	r2, [r4], #1
 8005f16:	e7f2      	b.n	8005efe <__exponent+0x40>
 8005f18:	2330      	movs	r3, #48	; 0x30
 8005f1a:	4419      	add	r1, r3
 8005f1c:	7083      	strb	r3, [r0, #2]
 8005f1e:	1d02      	adds	r2, r0, #4
 8005f20:	70c1      	strb	r1, [r0, #3]
 8005f22:	e7ef      	b.n	8005f04 <__exponent+0x46>

08005f24 <_printf_float>:
 8005f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f28:	b08d      	sub	sp, #52	; 0x34
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005f30:	4616      	mov	r6, r2
 8005f32:	461f      	mov	r7, r3
 8005f34:	4605      	mov	r5, r0
 8005f36:	f001 fd6d 	bl	8007a14 <_localeconv_r>
 8005f3a:	6803      	ldr	r3, [r0, #0]
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa f946 	bl	80001d0 <strlen>
 8005f44:	2300      	movs	r3, #0
 8005f46:	930a      	str	r3, [sp, #40]	; 0x28
 8005f48:	f8d8 3000 	ldr.w	r3, [r8]
 8005f4c:	9005      	str	r0, [sp, #20]
 8005f4e:	3307      	adds	r3, #7
 8005f50:	f023 0307 	bic.w	r3, r3, #7
 8005f54:	f103 0208 	add.w	r2, r3, #8
 8005f58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f5c:	f8d4 b000 	ldr.w	fp, [r4]
 8005f60:	f8c8 2000 	str.w	r2, [r8]
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f74:	9307      	str	r3, [sp, #28]
 8005f76:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7e:	4ba7      	ldr	r3, [pc, #668]	; (800621c <_printf_float+0x2f8>)
 8005f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f84:	f7fa fdd2 	bl	8000b2c <__aeabi_dcmpun>
 8005f88:	bb70      	cbnz	r0, 8005fe8 <_printf_float+0xc4>
 8005f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8e:	4ba3      	ldr	r3, [pc, #652]	; (800621c <_printf_float+0x2f8>)
 8005f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f94:	f7fa fdac 	bl	8000af0 <__aeabi_dcmple>
 8005f98:	bb30      	cbnz	r0, 8005fe8 <_printf_float+0xc4>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	f7fa fd9b 	bl	8000adc <__aeabi_dcmplt>
 8005fa6:	b110      	cbz	r0, 8005fae <_printf_float+0x8a>
 8005fa8:	232d      	movs	r3, #45	; 0x2d
 8005faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fae:	4a9c      	ldr	r2, [pc, #624]	; (8006220 <_printf_float+0x2fc>)
 8005fb0:	4b9c      	ldr	r3, [pc, #624]	; (8006224 <_printf_float+0x300>)
 8005fb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005fb6:	bf8c      	ite	hi
 8005fb8:	4690      	movhi	r8, r2
 8005fba:	4698      	movls	r8, r3
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	f02b 0204 	bic.w	r2, fp, #4
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	6022      	str	r2, [r4, #0]
 8005fc6:	f04f 0900 	mov.w	r9, #0
 8005fca:	9700      	str	r7, [sp, #0]
 8005fcc:	4633      	mov	r3, r6
 8005fce:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f9e6 	bl	80063a4 <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f040 808d 	bne.w	80060f8 <_printf_float+0x1d4>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	b00d      	add	sp, #52	; 0x34
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa fd9c 	bl	8000b2c <__aeabi_dcmpun>
 8005ff4:	b110      	cbz	r0, 8005ffc <_printf_float+0xd8>
 8005ff6:	4a8c      	ldr	r2, [pc, #560]	; (8006228 <_printf_float+0x304>)
 8005ff8:	4b8c      	ldr	r3, [pc, #560]	; (800622c <_printf_float+0x308>)
 8005ffa:	e7da      	b.n	8005fb2 <_printf_float+0x8e>
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	1c4b      	adds	r3, r1, #1
 8006000:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006004:	a80a      	add	r0, sp, #40	; 0x28
 8006006:	d13e      	bne.n	8006086 <_printf_float+0x162>
 8006008:	2306      	movs	r3, #6
 800600a:	6063      	str	r3, [r4, #4]
 800600c:	2300      	movs	r3, #0
 800600e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006012:	ab09      	add	r3, sp, #36	; 0x24
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	ec49 8b10 	vmov	d0, r8, r9
 800601a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800601e:	6022      	str	r2, [r4, #0]
 8006020:	f8cd a004 	str.w	sl, [sp, #4]
 8006024:	6861      	ldr	r1, [r4, #4]
 8006026:	4628      	mov	r0, r5
 8006028:	f7ff fee8 	bl	8005dfc <__cvt>
 800602c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006030:	2b47      	cmp	r3, #71	; 0x47
 8006032:	4680      	mov	r8, r0
 8006034:	d109      	bne.n	800604a <_printf_float+0x126>
 8006036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006038:	1cd8      	adds	r0, r3, #3
 800603a:	db02      	blt.n	8006042 <_printf_float+0x11e>
 800603c:	6862      	ldr	r2, [r4, #4]
 800603e:	4293      	cmp	r3, r2
 8006040:	dd47      	ble.n	80060d2 <_printf_float+0x1ae>
 8006042:	f1aa 0a02 	sub.w	sl, sl, #2
 8006046:	fa5f fa8a 	uxtb.w	sl, sl
 800604a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800604e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006050:	d824      	bhi.n	800609c <_printf_float+0x178>
 8006052:	3901      	subs	r1, #1
 8006054:	4652      	mov	r2, sl
 8006056:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800605a:	9109      	str	r1, [sp, #36]	; 0x24
 800605c:	f7ff ff2f 	bl	8005ebe <__exponent>
 8006060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006062:	1813      	adds	r3, r2, r0
 8006064:	2a01      	cmp	r2, #1
 8006066:	4681      	mov	r9, r0
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	dc02      	bgt.n	8006072 <_printf_float+0x14e>
 800606c:	6822      	ldr	r2, [r4, #0]
 800606e:	07d1      	lsls	r1, r2, #31
 8006070:	d501      	bpl.n	8006076 <_printf_float+0x152>
 8006072:	3301      	adds	r3, #1
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0a5      	beq.n	8005fca <_printf_float+0xa6>
 800607e:	232d      	movs	r3, #45	; 0x2d
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006084:	e7a1      	b.n	8005fca <_printf_float+0xa6>
 8006086:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800608a:	f000 8177 	beq.w	800637c <_printf_float+0x458>
 800608e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006092:	d1bb      	bne.n	800600c <_printf_float+0xe8>
 8006094:	2900      	cmp	r1, #0
 8006096:	d1b9      	bne.n	800600c <_printf_float+0xe8>
 8006098:	2301      	movs	r3, #1
 800609a:	e7b6      	b.n	800600a <_printf_float+0xe6>
 800609c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80060a0:	d119      	bne.n	80060d6 <_printf_float+0x1b2>
 80060a2:	2900      	cmp	r1, #0
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	dd0c      	ble.n	80060c2 <_printf_float+0x19e>
 80060a8:	6121      	str	r1, [r4, #16]
 80060aa:	b913      	cbnz	r3, 80060b2 <_printf_float+0x18e>
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	07d2      	lsls	r2, r2, #31
 80060b0:	d502      	bpl.n	80060b8 <_printf_float+0x194>
 80060b2:	3301      	adds	r3, #1
 80060b4:	440b      	add	r3, r1
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80060bc:	f04f 0900 	mov.w	r9, #0
 80060c0:	e7d9      	b.n	8006076 <_printf_float+0x152>
 80060c2:	b913      	cbnz	r3, 80060ca <_printf_float+0x1a6>
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	07d0      	lsls	r0, r2, #31
 80060c8:	d501      	bpl.n	80060ce <_printf_float+0x1aa>
 80060ca:	3302      	adds	r3, #2
 80060cc:	e7f3      	b.n	80060b6 <_printf_float+0x192>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7f1      	b.n	80060b6 <_printf_float+0x192>
 80060d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80060d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060da:	4293      	cmp	r3, r2
 80060dc:	db05      	blt.n	80060ea <_printf_float+0x1c6>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	07d1      	lsls	r1, r2, #31
 80060e4:	d5e8      	bpl.n	80060b8 <_printf_float+0x194>
 80060e6:	3301      	adds	r3, #1
 80060e8:	e7e5      	b.n	80060b6 <_printf_float+0x192>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bfd4      	ite	le
 80060ee:	f1c3 0302 	rsble	r3, r3, #2
 80060f2:	2301      	movgt	r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	e7de      	b.n	80060b6 <_printf_float+0x192>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	055a      	lsls	r2, r3, #21
 80060fc:	d407      	bmi.n	800610e <_printf_float+0x1ea>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	4642      	mov	r2, r8
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	47b8      	blx	r7
 8006108:	3001      	adds	r0, #1
 800610a:	d12b      	bne.n	8006164 <_printf_float+0x240>
 800610c:	e767      	b.n	8005fde <_printf_float+0xba>
 800610e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006112:	f240 80dc 	bls.w	80062ce <_printf_float+0x3aa>
 8006116:	2200      	movs	r2, #0
 8006118:	2300      	movs	r3, #0
 800611a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800611e:	f7fa fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	d033      	beq.n	800618e <_printf_float+0x26a>
 8006126:	2301      	movs	r3, #1
 8006128:	4a41      	ldr	r2, [pc, #260]	; (8006230 <_printf_float+0x30c>)
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f af54 	beq.w	8005fde <_printf_float+0xba>
 8006136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613a:	429a      	cmp	r2, r3
 800613c:	db02      	blt.n	8006144 <_printf_float+0x220>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	07d8      	lsls	r0, r3, #31
 8006142:	d50f      	bpl.n	8006164 <_printf_float+0x240>
 8006144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006148:	4631      	mov	r1, r6
 800614a:	4628      	mov	r0, r5
 800614c:	47b8      	blx	r7
 800614e:	3001      	adds	r0, #1
 8006150:	f43f af45 	beq.w	8005fde <_printf_float+0xba>
 8006154:	f04f 0800 	mov.w	r8, #0
 8006158:	f104 091a 	add.w	r9, r4, #26
 800615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	4543      	cmp	r3, r8
 8006162:	dc09      	bgt.n	8006178 <_printf_float+0x254>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	079b      	lsls	r3, r3, #30
 8006168:	f100 8103 	bmi.w	8006372 <_printf_float+0x44e>
 800616c:	68e0      	ldr	r0, [r4, #12]
 800616e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006170:	4298      	cmp	r0, r3
 8006172:	bfb8      	it	lt
 8006174:	4618      	movlt	r0, r3
 8006176:	e734      	b.n	8005fe2 <_printf_float+0xbe>
 8006178:	2301      	movs	r3, #1
 800617a:	464a      	mov	r2, r9
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f af2b 	beq.w	8005fde <_printf_float+0xba>
 8006188:	f108 0801 	add.w	r8, r8, #1
 800618c:	e7e6      	b.n	800615c <_printf_float+0x238>
 800618e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc2b      	bgt.n	80061ec <_printf_float+0x2c8>
 8006194:	2301      	movs	r3, #1
 8006196:	4a26      	ldr	r2, [pc, #152]	; (8006230 <_printf_float+0x30c>)
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af1d 	beq.w	8005fde <_printf_float+0xba>
 80061a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a6:	b923      	cbnz	r3, 80061b2 <_printf_float+0x28e>
 80061a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061aa:	b913      	cbnz	r3, 80061b2 <_printf_float+0x28e>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07d9      	lsls	r1, r3, #31
 80061b0:	d5d8      	bpl.n	8006164 <_printf_float+0x240>
 80061b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	f43f af0e 	beq.w	8005fde <_printf_float+0xba>
 80061c2:	f04f 0900 	mov.w	r9, #0
 80061c6:	f104 0a1a 	add.w	sl, r4, #26
 80061ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061cc:	425b      	negs	r3, r3
 80061ce:	454b      	cmp	r3, r9
 80061d0:	dc01      	bgt.n	80061d6 <_printf_float+0x2b2>
 80061d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d4:	e794      	b.n	8006100 <_printf_float+0x1dc>
 80061d6:	2301      	movs	r3, #1
 80061d8:	4652      	mov	r2, sl
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f aefc 	beq.w	8005fde <_printf_float+0xba>
 80061e6:	f109 0901 	add.w	r9, r9, #1
 80061ea:	e7ee      	b.n	80061ca <_printf_float+0x2a6>
 80061ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061f0:	429a      	cmp	r2, r3
 80061f2:	bfa8      	it	ge
 80061f4:	461a      	movge	r2, r3
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	4691      	mov	r9, r2
 80061fa:	dd07      	ble.n	800620c <_printf_float+0x2e8>
 80061fc:	4613      	mov	r3, r2
 80061fe:	4631      	mov	r1, r6
 8006200:	4642      	mov	r2, r8
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f aee9 	beq.w	8005fde <_printf_float+0xba>
 800620c:	f104 031a 	add.w	r3, r4, #26
 8006210:	f04f 0b00 	mov.w	fp, #0
 8006214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006218:	9306      	str	r3, [sp, #24]
 800621a:	e015      	b.n	8006248 <_printf_float+0x324>
 800621c:	7fefffff 	.word	0x7fefffff
 8006220:	08008748 	.word	0x08008748
 8006224:	08008744 	.word	0x08008744
 8006228:	08008750 	.word	0x08008750
 800622c:	0800874c 	.word	0x0800874c
 8006230:	08008754 	.word	0x08008754
 8006234:	2301      	movs	r3, #1
 8006236:	9a06      	ldr	r2, [sp, #24]
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	f43f aecd 	beq.w	8005fde <_printf_float+0xba>
 8006244:	f10b 0b01 	add.w	fp, fp, #1
 8006248:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800624c:	ebaa 0309 	sub.w	r3, sl, r9
 8006250:	455b      	cmp	r3, fp
 8006252:	dcef      	bgt.n	8006234 <_printf_float+0x310>
 8006254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006258:	429a      	cmp	r2, r3
 800625a:	44d0      	add	r8, sl
 800625c:	db15      	blt.n	800628a <_printf_float+0x366>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	07da      	lsls	r2, r3, #31
 8006262:	d412      	bmi.n	800628a <_printf_float+0x366>
 8006264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006268:	eba3 020a 	sub.w	r2, r3, sl
 800626c:	eba3 0a01 	sub.w	sl, r3, r1
 8006270:	4592      	cmp	sl, r2
 8006272:	bfa8      	it	ge
 8006274:	4692      	movge	sl, r2
 8006276:	f1ba 0f00 	cmp.w	sl, #0
 800627a:	dc0e      	bgt.n	800629a <_printf_float+0x376>
 800627c:	f04f 0800 	mov.w	r8, #0
 8006280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006284:	f104 091a 	add.w	r9, r4, #26
 8006288:	e019      	b.n	80062be <_printf_float+0x39a>
 800628a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800628e:	4631      	mov	r1, r6
 8006290:	4628      	mov	r0, r5
 8006292:	47b8      	blx	r7
 8006294:	3001      	adds	r0, #1
 8006296:	d1e5      	bne.n	8006264 <_printf_float+0x340>
 8006298:	e6a1      	b.n	8005fde <_printf_float+0xba>
 800629a:	4653      	mov	r3, sl
 800629c:	4642      	mov	r2, r8
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	d1e9      	bne.n	800627c <_printf_float+0x358>
 80062a8:	e699      	b.n	8005fde <_printf_float+0xba>
 80062aa:	2301      	movs	r3, #1
 80062ac:	464a      	mov	r2, r9
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f ae92 	beq.w	8005fde <_printf_float+0xba>
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	eba3 030a 	sub.w	r3, r3, sl
 80062c8:	4543      	cmp	r3, r8
 80062ca:	dcee      	bgt.n	80062aa <_printf_float+0x386>
 80062cc:	e74a      	b.n	8006164 <_printf_float+0x240>
 80062ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d0:	2a01      	cmp	r2, #1
 80062d2:	dc01      	bgt.n	80062d8 <_printf_float+0x3b4>
 80062d4:	07db      	lsls	r3, r3, #31
 80062d6:	d53a      	bpl.n	800634e <_printf_float+0x42a>
 80062d8:	2301      	movs	r3, #1
 80062da:	4642      	mov	r2, r8
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f ae7b 	beq.w	8005fde <_printf_float+0xba>
 80062e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f108 0801 	add.w	r8, r8, #1
 80062f8:	f43f ae71 	beq.w	8005fde <_printf_float+0xba>
 80062fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fe:	2200      	movs	r2, #0
 8006300:	f103 3aff 	add.w	sl, r3, #4294967295
 8006304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006308:	2300      	movs	r3, #0
 800630a:	f7fa fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800630e:	b9c8      	cbnz	r0, 8006344 <_printf_float+0x420>
 8006310:	4653      	mov	r3, sl
 8006312:	4642      	mov	r2, r8
 8006314:	4631      	mov	r1, r6
 8006316:	4628      	mov	r0, r5
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	d10e      	bne.n	800633c <_printf_float+0x418>
 800631e:	e65e      	b.n	8005fde <_printf_float+0xba>
 8006320:	2301      	movs	r3, #1
 8006322:	4652      	mov	r2, sl
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	f43f ae57 	beq.w	8005fde <_printf_float+0xba>
 8006330:	f108 0801 	add.w	r8, r8, #1
 8006334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006336:	3b01      	subs	r3, #1
 8006338:	4543      	cmp	r3, r8
 800633a:	dcf1      	bgt.n	8006320 <_printf_float+0x3fc>
 800633c:	464b      	mov	r3, r9
 800633e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006342:	e6de      	b.n	8006102 <_printf_float+0x1de>
 8006344:	f04f 0800 	mov.w	r8, #0
 8006348:	f104 0a1a 	add.w	sl, r4, #26
 800634c:	e7f2      	b.n	8006334 <_printf_float+0x410>
 800634e:	2301      	movs	r3, #1
 8006350:	e7df      	b.n	8006312 <_printf_float+0x3ee>
 8006352:	2301      	movs	r3, #1
 8006354:	464a      	mov	r2, r9
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f ae3e 	beq.w	8005fde <_printf_float+0xba>
 8006362:	f108 0801 	add.w	r8, r8, #1
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	4543      	cmp	r3, r8
 800636e:	dcf0      	bgt.n	8006352 <_printf_float+0x42e>
 8006370:	e6fc      	b.n	800616c <_printf_float+0x248>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	f104 0919 	add.w	r9, r4, #25
 800637a:	e7f4      	b.n	8006366 <_printf_float+0x442>
 800637c:	2900      	cmp	r1, #0
 800637e:	f43f ae8b 	beq.w	8006098 <_printf_float+0x174>
 8006382:	2300      	movs	r3, #0
 8006384:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006388:	ab09      	add	r3, sp, #36	; 0x24
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	ec49 8b10 	vmov	d0, r8, r9
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	f8cd a004 	str.w	sl, [sp, #4]
 8006396:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff fd2e 	bl	8005dfc <__cvt>
 80063a0:	4680      	mov	r8, r0
 80063a2:	e648      	b.n	8006036 <_printf_float+0x112>

080063a4 <_printf_common>:
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	4691      	mov	r9, r2
 80063aa:	461f      	mov	r7, r3
 80063ac:	688a      	ldr	r2, [r1, #8]
 80063ae:	690b      	ldr	r3, [r1, #16]
 80063b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bfb8      	it	lt
 80063b8:	4613      	movlt	r3, r2
 80063ba:	f8c9 3000 	str.w	r3, [r9]
 80063be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063c2:	4606      	mov	r6, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	b112      	cbz	r2, 80063ce <_printf_common+0x2a>
 80063c8:	3301      	adds	r3, #1
 80063ca:	f8c9 3000 	str.w	r3, [r9]
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	0699      	lsls	r1, r3, #26
 80063d2:	bf42      	ittt	mi
 80063d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063d8:	3302      	addmi	r3, #2
 80063da:	f8c9 3000 	strmi.w	r3, [r9]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	f015 0506 	ands.w	r5, r5, #6
 80063e4:	d107      	bne.n	80063f6 <_printf_common+0x52>
 80063e6:	f104 0a19 	add.w	sl, r4, #25
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	f8d9 2000 	ldr.w	r2, [r9]
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	42ab      	cmp	r3, r5
 80063f4:	dc28      	bgt.n	8006448 <_printf_common+0xa4>
 80063f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	3300      	adds	r3, #0
 80063fe:	bf18      	it	ne
 8006400:	2301      	movne	r3, #1
 8006402:	0692      	lsls	r2, r2, #26
 8006404:	d42d      	bmi.n	8006462 <_printf_common+0xbe>
 8006406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800640a:	4639      	mov	r1, r7
 800640c:	4630      	mov	r0, r6
 800640e:	47c0      	blx	r8
 8006410:	3001      	adds	r0, #1
 8006412:	d020      	beq.n	8006456 <_printf_common+0xb2>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	68e5      	ldr	r5, [r4, #12]
 8006418:	f8d9 2000 	ldr.w	r2, [r9]
 800641c:	f003 0306 	and.w	r3, r3, #6
 8006420:	2b04      	cmp	r3, #4
 8006422:	bf08      	it	eq
 8006424:	1aad      	subeq	r5, r5, r2
 8006426:	68a3      	ldr	r3, [r4, #8]
 8006428:	6922      	ldr	r2, [r4, #16]
 800642a:	bf0c      	ite	eq
 800642c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006430:	2500      	movne	r5, #0
 8006432:	4293      	cmp	r3, r2
 8006434:	bfc4      	itt	gt
 8006436:	1a9b      	subgt	r3, r3, r2
 8006438:	18ed      	addgt	r5, r5, r3
 800643a:	f04f 0900 	mov.w	r9, #0
 800643e:	341a      	adds	r4, #26
 8006440:	454d      	cmp	r5, r9
 8006442:	d11a      	bne.n	800647a <_printf_common+0xd6>
 8006444:	2000      	movs	r0, #0
 8006446:	e008      	b.n	800645a <_printf_common+0xb6>
 8006448:	2301      	movs	r3, #1
 800644a:	4652      	mov	r2, sl
 800644c:	4639      	mov	r1, r7
 800644e:	4630      	mov	r0, r6
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d103      	bne.n	800645e <_printf_common+0xba>
 8006456:	f04f 30ff 	mov.w	r0, #4294967295
 800645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645e:	3501      	adds	r5, #1
 8006460:	e7c3      	b.n	80063ea <_printf_common+0x46>
 8006462:	18e1      	adds	r1, r4, r3
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	2030      	movs	r0, #48	; 0x30
 8006468:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800646c:	4422      	add	r2, r4
 800646e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006476:	3302      	adds	r3, #2
 8006478:	e7c5      	b.n	8006406 <_printf_common+0x62>
 800647a:	2301      	movs	r3, #1
 800647c:	4622      	mov	r2, r4
 800647e:	4639      	mov	r1, r7
 8006480:	4630      	mov	r0, r6
 8006482:	47c0      	blx	r8
 8006484:	3001      	adds	r0, #1
 8006486:	d0e6      	beq.n	8006456 <_printf_common+0xb2>
 8006488:	f109 0901 	add.w	r9, r9, #1
 800648c:	e7d8      	b.n	8006440 <_printf_common+0x9c>
	...

08006490 <_printf_i>:
 8006490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006494:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006498:	460c      	mov	r4, r1
 800649a:	7e09      	ldrb	r1, [r1, #24]
 800649c:	b085      	sub	sp, #20
 800649e:	296e      	cmp	r1, #110	; 0x6e
 80064a0:	4617      	mov	r7, r2
 80064a2:	4606      	mov	r6, r0
 80064a4:	4698      	mov	r8, r3
 80064a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064a8:	f000 80b3 	beq.w	8006612 <_printf_i+0x182>
 80064ac:	d822      	bhi.n	80064f4 <_printf_i+0x64>
 80064ae:	2963      	cmp	r1, #99	; 0x63
 80064b0:	d036      	beq.n	8006520 <_printf_i+0x90>
 80064b2:	d80a      	bhi.n	80064ca <_printf_i+0x3a>
 80064b4:	2900      	cmp	r1, #0
 80064b6:	f000 80b9 	beq.w	800662c <_printf_i+0x19c>
 80064ba:	2958      	cmp	r1, #88	; 0x58
 80064bc:	f000 8083 	beq.w	80065c6 <_printf_i+0x136>
 80064c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064c8:	e032      	b.n	8006530 <_printf_i+0xa0>
 80064ca:	2964      	cmp	r1, #100	; 0x64
 80064cc:	d001      	beq.n	80064d2 <_printf_i+0x42>
 80064ce:	2969      	cmp	r1, #105	; 0x69
 80064d0:	d1f6      	bne.n	80064c0 <_printf_i+0x30>
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	0605      	lsls	r5, r0, #24
 80064d8:	f103 0104 	add.w	r1, r3, #4
 80064dc:	d52a      	bpl.n	8006534 <_printf_i+0xa4>
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6011      	str	r1, [r2, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da03      	bge.n	80064ee <_printf_i+0x5e>
 80064e6:	222d      	movs	r2, #45	; 0x2d
 80064e8:	425b      	negs	r3, r3
 80064ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064ee:	486f      	ldr	r0, [pc, #444]	; (80066ac <_printf_i+0x21c>)
 80064f0:	220a      	movs	r2, #10
 80064f2:	e039      	b.n	8006568 <_printf_i+0xd8>
 80064f4:	2973      	cmp	r1, #115	; 0x73
 80064f6:	f000 809d 	beq.w	8006634 <_printf_i+0x1a4>
 80064fa:	d808      	bhi.n	800650e <_printf_i+0x7e>
 80064fc:	296f      	cmp	r1, #111	; 0x6f
 80064fe:	d020      	beq.n	8006542 <_printf_i+0xb2>
 8006500:	2970      	cmp	r1, #112	; 0x70
 8006502:	d1dd      	bne.n	80064c0 <_printf_i+0x30>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f043 0320 	orr.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	e003      	b.n	8006516 <_printf_i+0x86>
 800650e:	2975      	cmp	r1, #117	; 0x75
 8006510:	d017      	beq.n	8006542 <_printf_i+0xb2>
 8006512:	2978      	cmp	r1, #120	; 0x78
 8006514:	d1d4      	bne.n	80064c0 <_printf_i+0x30>
 8006516:	2378      	movs	r3, #120	; 0x78
 8006518:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800651c:	4864      	ldr	r0, [pc, #400]	; (80066b0 <_printf_i+0x220>)
 800651e:	e055      	b.n	80065cc <_printf_i+0x13c>
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	1d19      	adds	r1, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6011      	str	r1, [r2, #0]
 8006528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e08c      	b.n	800664e <_printf_i+0x1be>
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6011      	str	r1, [r2, #0]
 8006538:	f010 0f40 	tst.w	r0, #64	; 0x40
 800653c:	bf18      	it	ne
 800653e:	b21b      	sxthne	r3, r3
 8006540:	e7cf      	b.n	80064e2 <_printf_i+0x52>
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	6825      	ldr	r5, [r4, #0]
 8006546:	1d18      	adds	r0, r3, #4
 8006548:	6010      	str	r0, [r2, #0]
 800654a:	0628      	lsls	r0, r5, #24
 800654c:	d501      	bpl.n	8006552 <_printf_i+0xc2>
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	e002      	b.n	8006558 <_printf_i+0xc8>
 8006552:	0668      	lsls	r0, r5, #25
 8006554:	d5fb      	bpl.n	800654e <_printf_i+0xbe>
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	4854      	ldr	r0, [pc, #336]	; (80066ac <_printf_i+0x21c>)
 800655a:	296f      	cmp	r1, #111	; 0x6f
 800655c:	bf14      	ite	ne
 800655e:	220a      	movne	r2, #10
 8006560:	2208      	moveq	r2, #8
 8006562:	2100      	movs	r1, #0
 8006564:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006568:	6865      	ldr	r5, [r4, #4]
 800656a:	60a5      	str	r5, [r4, #8]
 800656c:	2d00      	cmp	r5, #0
 800656e:	f2c0 8095 	blt.w	800669c <_printf_i+0x20c>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	f021 0104 	bic.w	r1, r1, #4
 8006578:	6021      	str	r1, [r4, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d13d      	bne.n	80065fa <_printf_i+0x16a>
 800657e:	2d00      	cmp	r5, #0
 8006580:	f040 808e 	bne.w	80066a0 <_printf_i+0x210>
 8006584:	4665      	mov	r5, ip
 8006586:	2a08      	cmp	r2, #8
 8006588:	d10b      	bne.n	80065a2 <_printf_i+0x112>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	07db      	lsls	r3, r3, #31
 800658e:	d508      	bpl.n	80065a2 <_printf_i+0x112>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	bfde      	ittt	le
 8006598:	2330      	movle	r3, #48	; 0x30
 800659a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800659e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065a2:	ebac 0305 	sub.w	r3, ip, r5
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	f8cd 8000 	str.w	r8, [sp]
 80065ac:	463b      	mov	r3, r7
 80065ae:	aa03      	add	r2, sp, #12
 80065b0:	4621      	mov	r1, r4
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff fef6 	bl	80063a4 <_printf_common>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d14d      	bne.n	8006658 <_printf_i+0x1c8>
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	b005      	add	sp, #20
 80065c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065c6:	4839      	ldr	r0, [pc, #228]	; (80066ac <_printf_i+0x21c>)
 80065c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065cc:	6813      	ldr	r3, [r2, #0]
 80065ce:	6821      	ldr	r1, [r4, #0]
 80065d0:	1d1d      	adds	r5, r3, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6015      	str	r5, [r2, #0]
 80065d6:	060a      	lsls	r2, r1, #24
 80065d8:	d50b      	bpl.n	80065f2 <_printf_i+0x162>
 80065da:	07ca      	lsls	r2, r1, #31
 80065dc:	bf44      	itt	mi
 80065de:	f041 0120 	orrmi.w	r1, r1, #32
 80065e2:	6021      	strmi	r1, [r4, #0]
 80065e4:	b91b      	cbnz	r3, 80065ee <_printf_i+0x15e>
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	f022 0220 	bic.w	r2, r2, #32
 80065ec:	6022      	str	r2, [r4, #0]
 80065ee:	2210      	movs	r2, #16
 80065f0:	e7b7      	b.n	8006562 <_printf_i+0xd2>
 80065f2:	064d      	lsls	r5, r1, #25
 80065f4:	bf48      	it	mi
 80065f6:	b29b      	uxthmi	r3, r3
 80065f8:	e7ef      	b.n	80065da <_printf_i+0x14a>
 80065fa:	4665      	mov	r5, ip
 80065fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006600:	fb02 3311 	mls	r3, r2, r1, r3
 8006604:	5cc3      	ldrb	r3, [r0, r3]
 8006606:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800660a:	460b      	mov	r3, r1
 800660c:	2900      	cmp	r1, #0
 800660e:	d1f5      	bne.n	80065fc <_printf_i+0x16c>
 8006610:	e7b9      	b.n	8006586 <_printf_i+0xf6>
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	6961      	ldr	r1, [r4, #20]
 8006618:	1d18      	adds	r0, r3, #4
 800661a:	6010      	str	r0, [r2, #0]
 800661c:	0628      	lsls	r0, r5, #24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	d501      	bpl.n	8006626 <_printf_i+0x196>
 8006622:	6019      	str	r1, [r3, #0]
 8006624:	e002      	b.n	800662c <_printf_i+0x19c>
 8006626:	066a      	lsls	r2, r5, #25
 8006628:	d5fb      	bpl.n	8006622 <_printf_i+0x192>
 800662a:	8019      	strh	r1, [r3, #0]
 800662c:	2300      	movs	r3, #0
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	4665      	mov	r5, ip
 8006632:	e7b9      	b.n	80065a8 <_printf_i+0x118>
 8006634:	6813      	ldr	r3, [r2, #0]
 8006636:	1d19      	adds	r1, r3, #4
 8006638:	6011      	str	r1, [r2, #0]
 800663a:	681d      	ldr	r5, [r3, #0]
 800663c:	6862      	ldr	r2, [r4, #4]
 800663e:	2100      	movs	r1, #0
 8006640:	4628      	mov	r0, r5
 8006642:	f7f9 fdcd 	bl	80001e0 <memchr>
 8006646:	b108      	cbz	r0, 800664c <_printf_i+0x1bc>
 8006648:	1b40      	subs	r0, r0, r5
 800664a:	6060      	str	r0, [r4, #4]
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	2300      	movs	r3, #0
 8006652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006656:	e7a7      	b.n	80065a8 <_printf_i+0x118>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	462a      	mov	r2, r5
 800665c:	4639      	mov	r1, r7
 800665e:	4630      	mov	r0, r6
 8006660:	47c0      	blx	r8
 8006662:	3001      	adds	r0, #1
 8006664:	d0aa      	beq.n	80065bc <_printf_i+0x12c>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	079b      	lsls	r3, r3, #30
 800666a:	d413      	bmi.n	8006694 <_printf_i+0x204>
 800666c:	68e0      	ldr	r0, [r4, #12]
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	4298      	cmp	r0, r3
 8006672:	bfb8      	it	lt
 8006674:	4618      	movlt	r0, r3
 8006676:	e7a3      	b.n	80065c0 <_printf_i+0x130>
 8006678:	2301      	movs	r3, #1
 800667a:	464a      	mov	r2, r9
 800667c:	4639      	mov	r1, r7
 800667e:	4630      	mov	r0, r6
 8006680:	47c0      	blx	r8
 8006682:	3001      	adds	r0, #1
 8006684:	d09a      	beq.n	80065bc <_printf_i+0x12c>
 8006686:	3501      	adds	r5, #1
 8006688:	68e3      	ldr	r3, [r4, #12]
 800668a:	9a03      	ldr	r2, [sp, #12]
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	42ab      	cmp	r3, r5
 8006690:	dcf2      	bgt.n	8006678 <_printf_i+0x1e8>
 8006692:	e7eb      	b.n	800666c <_printf_i+0x1dc>
 8006694:	2500      	movs	r5, #0
 8006696:	f104 0919 	add.w	r9, r4, #25
 800669a:	e7f5      	b.n	8006688 <_printf_i+0x1f8>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ac      	bne.n	80065fa <_printf_i+0x16a>
 80066a0:	7803      	ldrb	r3, [r0, #0]
 80066a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066aa:	e76c      	b.n	8006586 <_printf_i+0xf6>
 80066ac:	08008756 	.word	0x08008756
 80066b0:	08008767 	.word	0x08008767

080066b4 <iprintf>:
 80066b4:	b40f      	push	{r0, r1, r2, r3}
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <iprintf+0x2c>)
 80066b8:	b513      	push	{r0, r1, r4, lr}
 80066ba:	681c      	ldr	r4, [r3, #0]
 80066bc:	b124      	cbz	r4, 80066c8 <iprintf+0x14>
 80066be:	69a3      	ldr	r3, [r4, #24]
 80066c0:	b913      	cbnz	r3, 80066c8 <iprintf+0x14>
 80066c2:	4620      	mov	r0, r4
 80066c4:	f001 f91c 	bl	8007900 <__sinit>
 80066c8:	ab05      	add	r3, sp, #20
 80066ca:	9a04      	ldr	r2, [sp, #16]
 80066cc:	68a1      	ldr	r1, [r4, #8]
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	4620      	mov	r0, r4
 80066d2:	f001 fddf 	bl	8008294 <_vfiprintf_r>
 80066d6:	b002      	add	sp, #8
 80066d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066dc:	b004      	add	sp, #16
 80066de:	4770      	bx	lr
 80066e0:	2000000c 	.word	0x2000000c

080066e4 <_puts_r>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	460e      	mov	r6, r1
 80066e8:	4605      	mov	r5, r0
 80066ea:	b118      	cbz	r0, 80066f4 <_puts_r+0x10>
 80066ec:	6983      	ldr	r3, [r0, #24]
 80066ee:	b90b      	cbnz	r3, 80066f4 <_puts_r+0x10>
 80066f0:	f001 f906 	bl	8007900 <__sinit>
 80066f4:	69ab      	ldr	r3, [r5, #24]
 80066f6:	68ac      	ldr	r4, [r5, #8]
 80066f8:	b913      	cbnz	r3, 8006700 <_puts_r+0x1c>
 80066fa:	4628      	mov	r0, r5
 80066fc:	f001 f900 	bl	8007900 <__sinit>
 8006700:	4b23      	ldr	r3, [pc, #140]	; (8006790 <_puts_r+0xac>)
 8006702:	429c      	cmp	r4, r3
 8006704:	d117      	bne.n	8006736 <_puts_r+0x52>
 8006706:	686c      	ldr	r4, [r5, #4]
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	071b      	lsls	r3, r3, #28
 800670c:	d51d      	bpl.n	800674a <_puts_r+0x66>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	b1db      	cbz	r3, 800674a <_puts_r+0x66>
 8006712:	3e01      	subs	r6, #1
 8006714:	68a3      	ldr	r3, [r4, #8]
 8006716:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800671a:	3b01      	subs	r3, #1
 800671c:	60a3      	str	r3, [r4, #8]
 800671e:	b9e9      	cbnz	r1, 800675c <_puts_r+0x78>
 8006720:	2b00      	cmp	r3, #0
 8006722:	da2e      	bge.n	8006782 <_puts_r+0x9e>
 8006724:	4622      	mov	r2, r4
 8006726:	210a      	movs	r1, #10
 8006728:	4628      	mov	r0, r5
 800672a:	f000 f8f5 	bl	8006918 <__swbuf_r>
 800672e:	3001      	adds	r0, #1
 8006730:	d011      	beq.n	8006756 <_puts_r+0x72>
 8006732:	200a      	movs	r0, #10
 8006734:	e011      	b.n	800675a <_puts_r+0x76>
 8006736:	4b17      	ldr	r3, [pc, #92]	; (8006794 <_puts_r+0xb0>)
 8006738:	429c      	cmp	r4, r3
 800673a:	d101      	bne.n	8006740 <_puts_r+0x5c>
 800673c:	68ac      	ldr	r4, [r5, #8]
 800673e:	e7e3      	b.n	8006708 <_puts_r+0x24>
 8006740:	4b15      	ldr	r3, [pc, #84]	; (8006798 <_puts_r+0xb4>)
 8006742:	429c      	cmp	r4, r3
 8006744:	bf08      	it	eq
 8006746:	68ec      	ldreq	r4, [r5, #12]
 8006748:	e7de      	b.n	8006708 <_puts_r+0x24>
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 f935 	bl	80069bc <__swsetup_r>
 8006752:	2800      	cmp	r0, #0
 8006754:	d0dd      	beq.n	8006712 <_puts_r+0x2e>
 8006756:	f04f 30ff 	mov.w	r0, #4294967295
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	2b00      	cmp	r3, #0
 800675e:	da04      	bge.n	800676a <_puts_r+0x86>
 8006760:	69a2      	ldr	r2, [r4, #24]
 8006762:	429a      	cmp	r2, r3
 8006764:	dc06      	bgt.n	8006774 <_puts_r+0x90>
 8006766:	290a      	cmp	r1, #10
 8006768:	d004      	beq.n	8006774 <_puts_r+0x90>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	6022      	str	r2, [r4, #0]
 8006770:	7019      	strb	r1, [r3, #0]
 8006772:	e7cf      	b.n	8006714 <_puts_r+0x30>
 8006774:	4622      	mov	r2, r4
 8006776:	4628      	mov	r0, r5
 8006778:	f000 f8ce 	bl	8006918 <__swbuf_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d1c9      	bne.n	8006714 <_puts_r+0x30>
 8006780:	e7e9      	b.n	8006756 <_puts_r+0x72>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	200a      	movs	r0, #10
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	7018      	strb	r0, [r3, #0]
 800678c:	e7e5      	b.n	800675a <_puts_r+0x76>
 800678e:	bf00      	nop
 8006790:	080087a8 	.word	0x080087a8
 8006794:	080087c8 	.word	0x080087c8
 8006798:	08008788 	.word	0x08008788

0800679c <puts>:
 800679c:	4b02      	ldr	r3, [pc, #8]	; (80067a8 <puts+0xc>)
 800679e:	4601      	mov	r1, r0
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f7ff bf9f 	b.w	80066e4 <_puts_r>
 80067a6:	bf00      	nop
 80067a8:	2000000c 	.word	0x2000000c

080067ac <setbuf>:
 80067ac:	2900      	cmp	r1, #0
 80067ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067b2:	bf0c      	ite	eq
 80067b4:	2202      	moveq	r2, #2
 80067b6:	2200      	movne	r2, #0
 80067b8:	f000 b800 	b.w	80067bc <setvbuf>

080067bc <setvbuf>:
 80067bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067c0:	461d      	mov	r5, r3
 80067c2:	4b51      	ldr	r3, [pc, #324]	; (8006908 <setvbuf+0x14c>)
 80067c4:	681e      	ldr	r6, [r3, #0]
 80067c6:	4604      	mov	r4, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	4690      	mov	r8, r2
 80067cc:	b126      	cbz	r6, 80067d8 <setvbuf+0x1c>
 80067ce:	69b3      	ldr	r3, [r6, #24]
 80067d0:	b913      	cbnz	r3, 80067d8 <setvbuf+0x1c>
 80067d2:	4630      	mov	r0, r6
 80067d4:	f001 f894 	bl	8007900 <__sinit>
 80067d8:	4b4c      	ldr	r3, [pc, #304]	; (800690c <setvbuf+0x150>)
 80067da:	429c      	cmp	r4, r3
 80067dc:	d152      	bne.n	8006884 <setvbuf+0xc8>
 80067de:	6874      	ldr	r4, [r6, #4]
 80067e0:	f1b8 0f02 	cmp.w	r8, #2
 80067e4:	d006      	beq.n	80067f4 <setvbuf+0x38>
 80067e6:	f1b8 0f01 	cmp.w	r8, #1
 80067ea:	f200 8089 	bhi.w	8006900 <setvbuf+0x144>
 80067ee:	2d00      	cmp	r5, #0
 80067f0:	f2c0 8086 	blt.w	8006900 <setvbuf+0x144>
 80067f4:	4621      	mov	r1, r4
 80067f6:	4630      	mov	r0, r6
 80067f8:	f001 f818 	bl	800782c <_fflush_r>
 80067fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fe:	b141      	cbz	r1, 8006812 <setvbuf+0x56>
 8006800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006804:	4299      	cmp	r1, r3
 8006806:	d002      	beq.n	800680e <setvbuf+0x52>
 8006808:	4630      	mov	r0, r6
 800680a:	f001 fc71 	bl	80080f0 <_free_r>
 800680e:	2300      	movs	r3, #0
 8006810:	6363      	str	r3, [r4, #52]	; 0x34
 8006812:	2300      	movs	r3, #0
 8006814:	61a3      	str	r3, [r4, #24]
 8006816:	6063      	str	r3, [r4, #4]
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	061b      	lsls	r3, r3, #24
 800681c:	d503      	bpl.n	8006826 <setvbuf+0x6a>
 800681e:	6921      	ldr	r1, [r4, #16]
 8006820:	4630      	mov	r0, r6
 8006822:	f001 fc65 	bl	80080f0 <_free_r>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800682c:	f023 0303 	bic.w	r3, r3, #3
 8006830:	f1b8 0f02 	cmp.w	r8, #2
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	d05d      	beq.n	80068f4 <setvbuf+0x138>
 8006838:	ab01      	add	r3, sp, #4
 800683a:	466a      	mov	r2, sp
 800683c:	4621      	mov	r1, r4
 800683e:	4630      	mov	r0, r6
 8006840:	f001 f8f6 	bl	8007a30 <__swhatbuf_r>
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	4318      	orrs	r0, r3
 8006848:	81a0      	strh	r0, [r4, #12]
 800684a:	bb2d      	cbnz	r5, 8006898 <setvbuf+0xdc>
 800684c:	9d00      	ldr	r5, [sp, #0]
 800684e:	4628      	mov	r0, r5
 8006850:	f001 f952 	bl	8007af8 <malloc>
 8006854:	4607      	mov	r7, r0
 8006856:	2800      	cmp	r0, #0
 8006858:	d14e      	bne.n	80068f8 <setvbuf+0x13c>
 800685a:	f8dd 9000 	ldr.w	r9, [sp]
 800685e:	45a9      	cmp	r9, r5
 8006860:	d13c      	bne.n	80068dc <setvbuf+0x120>
 8006862:	f04f 30ff 	mov.w	r0, #4294967295
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	2300      	movs	r3, #0
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	6123      	str	r3, [r4, #16]
 800687a:	2301      	movs	r3, #1
 800687c:	6163      	str	r3, [r4, #20]
 800687e:	b003      	add	sp, #12
 8006880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006884:	4b22      	ldr	r3, [pc, #136]	; (8006910 <setvbuf+0x154>)
 8006886:	429c      	cmp	r4, r3
 8006888:	d101      	bne.n	800688e <setvbuf+0xd2>
 800688a:	68b4      	ldr	r4, [r6, #8]
 800688c:	e7a8      	b.n	80067e0 <setvbuf+0x24>
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <setvbuf+0x158>)
 8006890:	429c      	cmp	r4, r3
 8006892:	bf08      	it	eq
 8006894:	68f4      	ldreq	r4, [r6, #12]
 8006896:	e7a3      	b.n	80067e0 <setvbuf+0x24>
 8006898:	2f00      	cmp	r7, #0
 800689a:	d0d8      	beq.n	800684e <setvbuf+0x92>
 800689c:	69b3      	ldr	r3, [r6, #24]
 800689e:	b913      	cbnz	r3, 80068a6 <setvbuf+0xea>
 80068a0:	4630      	mov	r0, r6
 80068a2:	f001 f82d 	bl	8007900 <__sinit>
 80068a6:	f1b8 0f01 	cmp.w	r8, #1
 80068aa:	bf08      	it	eq
 80068ac:	89a3      	ldrheq	r3, [r4, #12]
 80068ae:	6027      	str	r7, [r4, #0]
 80068b0:	bf04      	itt	eq
 80068b2:	f043 0301 	orreq.w	r3, r3, #1
 80068b6:	81a3      	strheq	r3, [r4, #12]
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	f013 0008 	ands.w	r0, r3, #8
 80068be:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80068c2:	d01b      	beq.n	80068fc <setvbuf+0x140>
 80068c4:	f013 0001 	ands.w	r0, r3, #1
 80068c8:	bf18      	it	ne
 80068ca:	426d      	negne	r5, r5
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	bf1d      	ittte	ne
 80068d2:	60a3      	strne	r3, [r4, #8]
 80068d4:	61a5      	strne	r5, [r4, #24]
 80068d6:	4618      	movne	r0, r3
 80068d8:	60a5      	streq	r5, [r4, #8]
 80068da:	e7d0      	b.n	800687e <setvbuf+0xc2>
 80068dc:	4648      	mov	r0, r9
 80068de:	f001 f90b 	bl	8007af8 <malloc>
 80068e2:	4607      	mov	r7, r0
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d0bc      	beq.n	8006862 <setvbuf+0xa6>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	464d      	mov	r5, r9
 80068f2:	e7d3      	b.n	800689c <setvbuf+0xe0>
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7b6      	b.n	8006866 <setvbuf+0xaa>
 80068f8:	46a9      	mov	r9, r5
 80068fa:	e7f5      	b.n	80068e8 <setvbuf+0x12c>
 80068fc:	60a0      	str	r0, [r4, #8]
 80068fe:	e7be      	b.n	800687e <setvbuf+0xc2>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	e7bb      	b.n	800687e <setvbuf+0xc2>
 8006906:	bf00      	nop
 8006908:	2000000c 	.word	0x2000000c
 800690c:	080087a8 	.word	0x080087a8
 8006910:	080087c8 	.word	0x080087c8
 8006914:	08008788 	.word	0x08008788

08006918 <__swbuf_r>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	460e      	mov	r6, r1
 800691c:	4614      	mov	r4, r2
 800691e:	4605      	mov	r5, r0
 8006920:	b118      	cbz	r0, 800692a <__swbuf_r+0x12>
 8006922:	6983      	ldr	r3, [r0, #24]
 8006924:	b90b      	cbnz	r3, 800692a <__swbuf_r+0x12>
 8006926:	f000 ffeb 	bl	8007900 <__sinit>
 800692a:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <__swbuf_r+0x98>)
 800692c:	429c      	cmp	r4, r3
 800692e:	d12a      	bne.n	8006986 <__swbuf_r+0x6e>
 8006930:	686c      	ldr	r4, [r5, #4]
 8006932:	69a3      	ldr	r3, [r4, #24]
 8006934:	60a3      	str	r3, [r4, #8]
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	071a      	lsls	r2, r3, #28
 800693a:	d52e      	bpl.n	800699a <__swbuf_r+0x82>
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	b363      	cbz	r3, 800699a <__swbuf_r+0x82>
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	6820      	ldr	r0, [r4, #0]
 8006944:	1ac0      	subs	r0, r0, r3
 8006946:	6963      	ldr	r3, [r4, #20]
 8006948:	b2f6      	uxtb	r6, r6
 800694a:	4283      	cmp	r3, r0
 800694c:	4637      	mov	r7, r6
 800694e:	dc04      	bgt.n	800695a <__swbuf_r+0x42>
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 ff6a 	bl	800782c <_fflush_r>
 8006958:	bb28      	cbnz	r0, 80069a6 <__swbuf_r+0x8e>
 800695a:	68a3      	ldr	r3, [r4, #8]
 800695c:	3b01      	subs	r3, #1
 800695e:	60a3      	str	r3, [r4, #8]
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	6022      	str	r2, [r4, #0]
 8006966:	701e      	strb	r6, [r3, #0]
 8006968:	6963      	ldr	r3, [r4, #20]
 800696a:	3001      	adds	r0, #1
 800696c:	4283      	cmp	r3, r0
 800696e:	d004      	beq.n	800697a <__swbuf_r+0x62>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	07db      	lsls	r3, r3, #31
 8006974:	d519      	bpl.n	80069aa <__swbuf_r+0x92>
 8006976:	2e0a      	cmp	r6, #10
 8006978:	d117      	bne.n	80069aa <__swbuf_r+0x92>
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f000 ff55 	bl	800782c <_fflush_r>
 8006982:	b190      	cbz	r0, 80069aa <__swbuf_r+0x92>
 8006984:	e00f      	b.n	80069a6 <__swbuf_r+0x8e>
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <__swbuf_r+0x9c>)
 8006988:	429c      	cmp	r4, r3
 800698a:	d101      	bne.n	8006990 <__swbuf_r+0x78>
 800698c:	68ac      	ldr	r4, [r5, #8]
 800698e:	e7d0      	b.n	8006932 <__swbuf_r+0x1a>
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <__swbuf_r+0xa0>)
 8006992:	429c      	cmp	r4, r3
 8006994:	bf08      	it	eq
 8006996:	68ec      	ldreq	r4, [r5, #12]
 8006998:	e7cb      	b.n	8006932 <__swbuf_r+0x1a>
 800699a:	4621      	mov	r1, r4
 800699c:	4628      	mov	r0, r5
 800699e:	f000 f80d 	bl	80069bc <__swsetup_r>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d0cc      	beq.n	8006940 <__swbuf_r+0x28>
 80069a6:	f04f 37ff 	mov.w	r7, #4294967295
 80069aa:	4638      	mov	r0, r7
 80069ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	080087a8 	.word	0x080087a8
 80069b4:	080087c8 	.word	0x080087c8
 80069b8:	08008788 	.word	0x08008788

080069bc <__swsetup_r>:
 80069bc:	4b32      	ldr	r3, [pc, #200]	; (8006a88 <__swsetup_r+0xcc>)
 80069be:	b570      	push	{r4, r5, r6, lr}
 80069c0:	681d      	ldr	r5, [r3, #0]
 80069c2:	4606      	mov	r6, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	b125      	cbz	r5, 80069d2 <__swsetup_r+0x16>
 80069c8:	69ab      	ldr	r3, [r5, #24]
 80069ca:	b913      	cbnz	r3, 80069d2 <__swsetup_r+0x16>
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 ff97 	bl	8007900 <__sinit>
 80069d2:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <__swsetup_r+0xd0>)
 80069d4:	429c      	cmp	r4, r3
 80069d6:	d10f      	bne.n	80069f8 <__swsetup_r+0x3c>
 80069d8:	686c      	ldr	r4, [r5, #4]
 80069da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	0715      	lsls	r5, r2, #28
 80069e2:	d42c      	bmi.n	8006a3e <__swsetup_r+0x82>
 80069e4:	06d0      	lsls	r0, r2, #27
 80069e6:	d411      	bmi.n	8006a0c <__swsetup_r+0x50>
 80069e8:	2209      	movs	r2, #9
 80069ea:	6032      	str	r2, [r6, #0]
 80069ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	e03e      	b.n	8006a76 <__swsetup_r+0xba>
 80069f8:	4b25      	ldr	r3, [pc, #148]	; (8006a90 <__swsetup_r+0xd4>)
 80069fa:	429c      	cmp	r4, r3
 80069fc:	d101      	bne.n	8006a02 <__swsetup_r+0x46>
 80069fe:	68ac      	ldr	r4, [r5, #8]
 8006a00:	e7eb      	b.n	80069da <__swsetup_r+0x1e>
 8006a02:	4b24      	ldr	r3, [pc, #144]	; (8006a94 <__swsetup_r+0xd8>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	bf08      	it	eq
 8006a08:	68ec      	ldreq	r4, [r5, #12]
 8006a0a:	e7e6      	b.n	80069da <__swsetup_r+0x1e>
 8006a0c:	0751      	lsls	r1, r2, #29
 8006a0e:	d512      	bpl.n	8006a36 <__swsetup_r+0x7a>
 8006a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a12:	b141      	cbz	r1, 8006a26 <__swsetup_r+0x6a>
 8006a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	d002      	beq.n	8006a22 <__swsetup_r+0x66>
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f001 fb67 	bl	80080f0 <_free_r>
 8006a22:	2300      	movs	r3, #0
 8006a24:	6363      	str	r3, [r4, #52]	; 0x34
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f043 0308 	orr.w	r3, r3, #8
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	b94b      	cbnz	r3, 8006a56 <__swsetup_r+0x9a>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d003      	beq.n	8006a56 <__swsetup_r+0x9a>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4630      	mov	r0, r6
 8006a52:	f001 f811 	bl	8007a78 <__smakebuf_r>
 8006a56:	89a2      	ldrh	r2, [r4, #12]
 8006a58:	f012 0301 	ands.w	r3, r2, #1
 8006a5c:	d00c      	beq.n	8006a78 <__swsetup_r+0xbc>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60a3      	str	r3, [r4, #8]
 8006a62:	6963      	ldr	r3, [r4, #20]
 8006a64:	425b      	negs	r3, r3
 8006a66:	61a3      	str	r3, [r4, #24]
 8006a68:	6923      	ldr	r3, [r4, #16]
 8006a6a:	b953      	cbnz	r3, 8006a82 <__swsetup_r+0xc6>
 8006a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006a74:	d1ba      	bne.n	80069ec <__swsetup_r+0x30>
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	0792      	lsls	r2, r2, #30
 8006a7a:	bf58      	it	pl
 8006a7c:	6963      	ldrpl	r3, [r4, #20]
 8006a7e:	60a3      	str	r3, [r4, #8]
 8006a80:	e7f2      	b.n	8006a68 <__swsetup_r+0xac>
 8006a82:	2000      	movs	r0, #0
 8006a84:	e7f7      	b.n	8006a76 <__swsetup_r+0xba>
 8006a86:	bf00      	nop
 8006a88:	2000000c 	.word	0x2000000c
 8006a8c:	080087a8 	.word	0x080087a8
 8006a90:	080087c8 	.word	0x080087c8
 8006a94:	08008788 	.word	0x08008788

08006a98 <quorem>:
 8006a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	6903      	ldr	r3, [r0, #16]
 8006a9e:	690c      	ldr	r4, [r1, #16]
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	4680      	mov	r8, r0
 8006aa4:	f2c0 8082 	blt.w	8006bac <quorem+0x114>
 8006aa8:	3c01      	subs	r4, #1
 8006aaa:	f101 0714 	add.w	r7, r1, #20
 8006aae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006ab2:	f100 0614 	add.w	r6, r0, #20
 8006ab6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006aba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006abe:	eb06 030c 	add.w	r3, r6, ip
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	eb07 090c 	add.w	r9, r7, ip
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	fbb0 f5f5 	udiv	r5, r0, r5
 8006ace:	b395      	cbz	r5, 8006b36 <quorem+0x9e>
 8006ad0:	f04f 0a00 	mov.w	sl, #0
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	46b6      	mov	lr, r6
 8006ad8:	46d3      	mov	fp, sl
 8006ada:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ade:	b293      	uxth	r3, r2
 8006ae0:	fb05 a303 	mla	r3, r5, r3, sl
 8006ae4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	ebab 0303 	sub.w	r3, fp, r3
 8006aee:	0c12      	lsrs	r2, r2, #16
 8006af0:	f8de b000 	ldr.w	fp, [lr]
 8006af4:	fb05 a202 	mla	r2, r5, r2, sl
 8006af8:	fa13 f38b 	uxtah	r3, r3, fp
 8006afc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006b00:	fa1f fb82 	uxth.w	fp, r2
 8006b04:	f8de 2000 	ldr.w	r2, [lr]
 8006b08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b16:	4581      	cmp	r9, r0
 8006b18:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006b1c:	f84e 3b04 	str.w	r3, [lr], #4
 8006b20:	d2db      	bcs.n	8006ada <quorem+0x42>
 8006b22:	f856 300c 	ldr.w	r3, [r6, ip]
 8006b26:	b933      	cbnz	r3, 8006b36 <quorem+0x9e>
 8006b28:	9b01      	ldr	r3, [sp, #4]
 8006b2a:	3b04      	subs	r3, #4
 8006b2c:	429e      	cmp	r6, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	d330      	bcc.n	8006b94 <quorem+0xfc>
 8006b32:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b36:	4640      	mov	r0, r8
 8006b38:	f001 fa06 	bl	8007f48 <__mcmp>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	db25      	blt.n	8006b8c <quorem+0xf4>
 8006b40:	3501      	adds	r5, #1
 8006b42:	4630      	mov	r0, r6
 8006b44:	f04f 0c00 	mov.w	ip, #0
 8006b48:	f857 2b04 	ldr.w	r2, [r7], #4
 8006b4c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b50:	b293      	uxth	r3, r2
 8006b52:	ebac 0303 	sub.w	r3, ip, r3
 8006b56:	0c12      	lsrs	r2, r2, #16
 8006b58:	fa13 f38e 	uxtah	r3, r3, lr
 8006b5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b6a:	45b9      	cmp	r9, r7
 8006b6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b70:	f840 3b04 	str.w	r3, [r0], #4
 8006b74:	d2e8      	bcs.n	8006b48 <quorem+0xb0>
 8006b76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006b7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006b7e:	b92a      	cbnz	r2, 8006b8c <quorem+0xf4>
 8006b80:	3b04      	subs	r3, #4
 8006b82:	429e      	cmp	r6, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	d30b      	bcc.n	8006ba0 <quorem+0x108>
 8006b88:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	b003      	add	sp, #12
 8006b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	3b04      	subs	r3, #4
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d1ca      	bne.n	8006b32 <quorem+0x9a>
 8006b9c:	3c01      	subs	r4, #1
 8006b9e:	e7c5      	b.n	8006b2c <quorem+0x94>
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	3b04      	subs	r3, #4
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	d1ef      	bne.n	8006b88 <quorem+0xf0>
 8006ba8:	3c01      	subs	r4, #1
 8006baa:	e7ea      	b.n	8006b82 <quorem+0xea>
 8006bac:	2000      	movs	r0, #0
 8006bae:	e7ee      	b.n	8006b8e <quorem+0xf6>

08006bb0 <_dtoa_r>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	ec57 6b10 	vmov	r6, r7, d0
 8006bb8:	b097      	sub	sp, #92	; 0x5c
 8006bba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bbc:	9106      	str	r1, [sp, #24]
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8006bc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bc8:	e9cd 6700 	strd	r6, r7, [sp]
 8006bcc:	b93d      	cbnz	r5, 8006bde <_dtoa_r+0x2e>
 8006bce:	2010      	movs	r0, #16
 8006bd0:	f000 ff92 	bl	8007af8 <malloc>
 8006bd4:	6260      	str	r0, [r4, #36]	; 0x24
 8006bd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bda:	6005      	str	r5, [r0, #0]
 8006bdc:	60c5      	str	r5, [r0, #12]
 8006bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	b151      	cbz	r1, 8006bfa <_dtoa_r+0x4a>
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	604a      	str	r2, [r1, #4]
 8006be8:	2301      	movs	r3, #1
 8006bea:	4093      	lsls	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 ffc9 	bl	8007b86 <_Bfree>
 8006bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	1e3b      	subs	r3, r7, #0
 8006bfc:	bfbb      	ittet	lt
 8006bfe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c02:	9301      	strlt	r3, [sp, #4]
 8006c04:	2300      	movge	r3, #0
 8006c06:	2201      	movlt	r2, #1
 8006c08:	bfac      	ite	ge
 8006c0a:	f8c8 3000 	strge.w	r3, [r8]
 8006c0e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c12:	4baf      	ldr	r3, [pc, #700]	; (8006ed0 <_dtoa_r+0x320>)
 8006c14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c18:	ea33 0308 	bics.w	r3, r3, r8
 8006c1c:	d114      	bne.n	8006c48 <_dtoa_r+0x98>
 8006c1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c20:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	9b00      	ldr	r3, [sp, #0]
 8006c28:	b923      	cbnz	r3, 8006c34 <_dtoa_r+0x84>
 8006c2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f000 8542 	beq.w	80076b8 <_dtoa_r+0xb08>
 8006c34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006ee4 <_dtoa_r+0x334>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8544 	beq.w	80076c8 <_dtoa_r+0xb18>
 8006c40:	f10b 0303 	add.w	r3, fp, #3
 8006c44:	f000 bd3e 	b.w	80076c4 <_dtoa_r+0xb14>
 8006c48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4630      	mov	r0, r6
 8006c52:	4639      	mov	r1, r7
 8006c54:	f7f9 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c58:	4681      	mov	r9, r0
 8006c5a:	b168      	cbz	r0, 8006c78 <_dtoa_r+0xc8>
 8006c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c5e:	2301      	movs	r3, #1
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8524 	beq.w	80076b2 <_dtoa_r+0xb02>
 8006c6a:	4b9a      	ldr	r3, [pc, #616]	; (8006ed4 <_dtoa_r+0x324>)
 8006c6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c6e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	f000 bd28 	b.w	80076c8 <_dtoa_r+0xb18>
 8006c78:	aa14      	add	r2, sp, #80	; 0x50
 8006c7a:	a915      	add	r1, sp, #84	; 0x54
 8006c7c:	ec47 6b10 	vmov	d0, r6, r7
 8006c80:	4620      	mov	r0, r4
 8006c82:	f001 f9d8 	bl	8008036 <__d2b>
 8006c86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006c8a:	9004      	str	r0, [sp, #16]
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	d07c      	beq.n	8006d8a <_dtoa_r+0x1da>
 8006c90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006c98:	46b2      	mov	sl, r6
 8006c9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006c9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ca2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4b8b      	ldr	r3, [pc, #556]	; (8006ed8 <_dtoa_r+0x328>)
 8006caa:	4650      	mov	r0, sl
 8006cac:	4659      	mov	r1, fp
 8006cae:	f7f9 faeb 	bl	8000288 <__aeabi_dsub>
 8006cb2:	a381      	add	r3, pc, #516	; (adr r3, 8006eb8 <_dtoa_r+0x308>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f7f9 fc9e 	bl	80005f8 <__aeabi_dmul>
 8006cbc:	a380      	add	r3, pc, #512	; (adr r3, 8006ec0 <_dtoa_r+0x310>)
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f7f9 fae3 	bl	800028c <__adddf3>
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	4628      	mov	r0, r5
 8006cca:	460f      	mov	r7, r1
 8006ccc:	f7f9 fc2a 	bl	8000524 <__aeabi_i2d>
 8006cd0:	a37d      	add	r3, pc, #500	; (adr r3, 8006ec8 <_dtoa_r+0x318>)
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f7f9 fc8f 	bl	80005f8 <__aeabi_dmul>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4630      	mov	r0, r6
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	f7f9 fad3 	bl	800028c <__adddf3>
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	f7f9 ff35 	bl	8000b58 <__aeabi_d2iz>
 8006cee:	2200      	movs	r2, #0
 8006cf0:	4682      	mov	sl, r0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 fef0 	bl	8000adc <__aeabi_dcmplt>
 8006cfc:	b148      	cbz	r0, 8006d12 <_dtoa_r+0x162>
 8006cfe:	4650      	mov	r0, sl
 8006d00:	f7f9 fc10 	bl	8000524 <__aeabi_i2d>
 8006d04:	4632      	mov	r2, r6
 8006d06:	463b      	mov	r3, r7
 8006d08:	f7f9 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d0c:	b908      	cbnz	r0, 8006d12 <_dtoa_r+0x162>
 8006d0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d12:	f1ba 0f16 	cmp.w	sl, #22
 8006d16:	d859      	bhi.n	8006dcc <_dtoa_r+0x21c>
 8006d18:	4970      	ldr	r1, [pc, #448]	; (8006edc <_dtoa_r+0x32c>)
 8006d1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d26:	f7f9 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d050      	beq.n	8006dd0 <_dtoa_r+0x220>
 8006d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d32:	2300      	movs	r3, #0
 8006d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d38:	1b5d      	subs	r5, r3, r5
 8006d3a:	f1b5 0801 	subs.w	r8, r5, #1
 8006d3e:	bf49      	itett	mi
 8006d40:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d44:	2300      	movpl	r3, #0
 8006d46:	9305      	strmi	r3, [sp, #20]
 8006d48:	f04f 0800 	movmi.w	r8, #0
 8006d4c:	bf58      	it	pl
 8006d4e:	9305      	strpl	r3, [sp, #20]
 8006d50:	f1ba 0f00 	cmp.w	sl, #0
 8006d54:	db3e      	blt.n	8006dd4 <_dtoa_r+0x224>
 8006d56:	2300      	movs	r3, #0
 8006d58:	44d0      	add	r8, sl
 8006d5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	9b06      	ldr	r3, [sp, #24]
 8006d62:	2b09      	cmp	r3, #9
 8006d64:	f200 8090 	bhi.w	8006e88 <_dtoa_r+0x2d8>
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	bfc4      	itt	gt
 8006d6c:	3b04      	subgt	r3, #4
 8006d6e:	9306      	strgt	r3, [sp, #24]
 8006d70:	9b06      	ldr	r3, [sp, #24]
 8006d72:	f1a3 0302 	sub.w	r3, r3, #2
 8006d76:	bfcc      	ite	gt
 8006d78:	2500      	movgt	r5, #0
 8006d7a:	2501      	movle	r5, #1
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	f200 808f 	bhi.w	8006ea0 <_dtoa_r+0x2f0>
 8006d82:	e8df f003 	tbb	[pc, r3]
 8006d86:	7f7d      	.short	0x7f7d
 8006d88:	7131      	.short	0x7131
 8006d8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006d8e:	441d      	add	r5, r3
 8006d90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006d94:	2820      	cmp	r0, #32
 8006d96:	dd13      	ble.n	8006dc0 <_dtoa_r+0x210>
 8006d98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006d9c:	9b00      	ldr	r3, [sp, #0]
 8006d9e:	fa08 f800 	lsl.w	r8, r8, r0
 8006da2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006da6:	fa23 f000 	lsr.w	r0, r3, r0
 8006daa:	ea48 0000 	orr.w	r0, r8, r0
 8006dae:	f7f9 fba9 	bl	8000504 <__aeabi_ui2d>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4682      	mov	sl, r0
 8006db6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006dba:	3d01      	subs	r5, #1
 8006dbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dbe:	e772      	b.n	8006ca6 <_dtoa_r+0xf6>
 8006dc0:	9b00      	ldr	r3, [sp, #0]
 8006dc2:	f1c0 0020 	rsb	r0, r0, #32
 8006dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8006dca:	e7f0      	b.n	8006dae <_dtoa_r+0x1fe>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e7b1      	b.n	8006d34 <_dtoa_r+0x184>
 8006dd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8006dd2:	e7b0      	b.n	8006d36 <_dtoa_r+0x186>
 8006dd4:	9b05      	ldr	r3, [sp, #20]
 8006dd6:	eba3 030a 	sub.w	r3, r3, sl
 8006dda:	9305      	str	r3, [sp, #20]
 8006ddc:	f1ca 0300 	rsb	r3, sl, #0
 8006de0:	9307      	str	r3, [sp, #28]
 8006de2:	2300      	movs	r3, #0
 8006de4:	930e      	str	r3, [sp, #56]	; 0x38
 8006de6:	e7bb      	b.n	8006d60 <_dtoa_r+0x1b0>
 8006de8:	2301      	movs	r3, #1
 8006dea:	930a      	str	r3, [sp, #40]	; 0x28
 8006dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dd59      	ble.n	8006ea6 <_dtoa_r+0x2f6>
 8006df2:	9302      	str	r3, [sp, #8]
 8006df4:	4699      	mov	r9, r3
 8006df6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006df8:	2200      	movs	r2, #0
 8006dfa:	6072      	str	r2, [r6, #4]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	f102 0014 	add.w	r0, r2, #20
 8006e02:	4298      	cmp	r0, r3
 8006e04:	6871      	ldr	r1, [r6, #4]
 8006e06:	d953      	bls.n	8006eb0 <_dtoa_r+0x300>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fe88 	bl	8007b1e <_Balloc>
 8006e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e10:	6030      	str	r0, [r6, #0]
 8006e12:	f1b9 0f0e 	cmp.w	r9, #14
 8006e16:	f8d3 b000 	ldr.w	fp, [r3]
 8006e1a:	f200 80e6 	bhi.w	8006fea <_dtoa_r+0x43a>
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	f000 80e3 	beq.w	8006fea <_dtoa_r+0x43a>
 8006e24:	ed9d 7b00 	vldr	d7, [sp]
 8006e28:	f1ba 0f00 	cmp.w	sl, #0
 8006e2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006e30:	dd74      	ble.n	8006f1c <_dtoa_r+0x36c>
 8006e32:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <_dtoa_r+0x32c>)
 8006e34:	f00a 030f 	and.w	r3, sl, #15
 8006e38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e3c:	ed93 7b00 	vldr	d7, [r3]
 8006e40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006e44:	06f0      	lsls	r0, r6, #27
 8006e46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006e4a:	d565      	bpl.n	8006f18 <_dtoa_r+0x368>
 8006e4c:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <_dtoa_r+0x330>)
 8006e4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e56:	f7f9 fcf9 	bl	800084c <__aeabi_ddiv>
 8006e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8006e5e:	f006 060f 	and.w	r6, r6, #15
 8006e62:	2503      	movs	r5, #3
 8006e64:	4f1e      	ldr	r7, [pc, #120]	; (8006ee0 <_dtoa_r+0x330>)
 8006e66:	e04c      	b.n	8006f02 <_dtoa_r+0x352>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6e:	4453      	add	r3, sl
 8006e70:	f103 0901 	add.w	r9, r3, #1
 8006e74:	9302      	str	r3, [sp, #8]
 8006e76:	464b      	mov	r3, r9
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	bfb8      	it	lt
 8006e7c:	2301      	movlt	r3, #1
 8006e7e:	e7ba      	b.n	8006df6 <_dtoa_r+0x246>
 8006e80:	2300      	movs	r3, #0
 8006e82:	e7b2      	b.n	8006dea <_dtoa_r+0x23a>
 8006e84:	2300      	movs	r3, #0
 8006e86:	e7f0      	b.n	8006e6a <_dtoa_r+0x2ba>
 8006e88:	2501      	movs	r5, #1
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9306      	str	r3, [sp, #24]
 8006e8e:	950a      	str	r5, [sp, #40]	; 0x28
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	9302      	str	r3, [sp, #8]
 8006e96:	4699      	mov	r9, r3
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2312      	movs	r3, #18
 8006e9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e9e:	e7aa      	b.n	8006df6 <_dtoa_r+0x246>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea4:	e7f4      	b.n	8006e90 <_dtoa_r+0x2e0>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	4699      	mov	r9, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	e7f5      	b.n	8006e9c <_dtoa_r+0x2ec>
 8006eb0:	3101      	adds	r1, #1
 8006eb2:	6071      	str	r1, [r6, #4]
 8006eb4:	0052      	lsls	r2, r2, #1
 8006eb6:	e7a2      	b.n	8006dfe <_dtoa_r+0x24e>
 8006eb8:	636f4361 	.word	0x636f4361
 8006ebc:	3fd287a7 	.word	0x3fd287a7
 8006ec0:	8b60c8b3 	.word	0x8b60c8b3
 8006ec4:	3fc68a28 	.word	0x3fc68a28
 8006ec8:	509f79fb 	.word	0x509f79fb
 8006ecc:	3fd34413 	.word	0x3fd34413
 8006ed0:	7ff00000 	.word	0x7ff00000
 8006ed4:	08008755 	.word	0x08008755
 8006ed8:	3ff80000 	.word	0x3ff80000
 8006edc:	08008810 	.word	0x08008810
 8006ee0:	080087e8 	.word	0x080087e8
 8006ee4:	08008781 	.word	0x08008781
 8006ee8:	07f1      	lsls	r1, r6, #31
 8006eea:	d508      	bpl.n	8006efe <_dtoa_r+0x34e>
 8006eec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	f7f9 fb80 	bl	80005f8 <__aeabi_dmul>
 8006ef8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006efc:	3501      	adds	r5, #1
 8006efe:	1076      	asrs	r6, r6, #1
 8006f00:	3708      	adds	r7, #8
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d1f0      	bne.n	8006ee8 <_dtoa_r+0x338>
 8006f06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f0e:	f7f9 fc9d 	bl	800084c <__aeabi_ddiv>
 8006f12:	e9cd 0100 	strd	r0, r1, [sp]
 8006f16:	e01a      	b.n	8006f4e <_dtoa_r+0x39e>
 8006f18:	2502      	movs	r5, #2
 8006f1a:	e7a3      	b.n	8006e64 <_dtoa_r+0x2b4>
 8006f1c:	f000 80a0 	beq.w	8007060 <_dtoa_r+0x4b0>
 8006f20:	f1ca 0600 	rsb	r6, sl, #0
 8006f24:	4b9f      	ldr	r3, [pc, #636]	; (80071a4 <_dtoa_r+0x5f4>)
 8006f26:	4fa0      	ldr	r7, [pc, #640]	; (80071a8 <_dtoa_r+0x5f8>)
 8006f28:	f006 020f 	and.w	r2, r6, #15
 8006f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8006f40:	1136      	asrs	r6, r6, #4
 8006f42:	2300      	movs	r3, #0
 8006f44:	2502      	movs	r5, #2
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d17f      	bne.n	800704a <_dtoa_r+0x49a>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e1      	bne.n	8006f12 <_dtoa_r+0x362>
 8006f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8087 	beq.w	8007064 <_dtoa_r+0x4b4>
 8006f56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4b93      	ldr	r3, [pc, #588]	; (80071ac <_dtoa_r+0x5fc>)
 8006f5e:	4630      	mov	r0, r6
 8006f60:	4639      	mov	r1, r7
 8006f62:	f7f9 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d07c      	beq.n	8007064 <_dtoa_r+0x4b4>
 8006f6a:	f1b9 0f00 	cmp.w	r9, #0
 8006f6e:	d079      	beq.n	8007064 <_dtoa_r+0x4b4>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd35      	ble.n	8006fe2 <_dtoa_r+0x432>
 8006f76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f7a:	9308      	str	r3, [sp, #32]
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b8b      	ldr	r3, [pc, #556]	; (80071b0 <_dtoa_r+0x600>)
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7f9 fb38 	bl	80005f8 <__aeabi_dmul>
 8006f88:	e9cd 0100 	strd	r0, r1, [sp]
 8006f8c:	9f02      	ldr	r7, [sp, #8]
 8006f8e:	3501      	adds	r5, #1
 8006f90:	4628      	mov	r0, r5
 8006f92:	f7f9 fac7 	bl	8000524 <__aeabi_i2d>
 8006f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f9a:	f7f9 fb2d 	bl	80005f8 <__aeabi_dmul>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4b84      	ldr	r3, [pc, #528]	; (80071b4 <_dtoa_r+0x604>)
 8006fa2:	f7f9 f973 	bl	800028c <__adddf3>
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	d15d      	bne.n	800706c <_dtoa_r+0x4bc>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4b81      	ldr	r3, [pc, #516]	; (80071b8 <_dtoa_r+0x608>)
 8006fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb8:	f7f9 f966 	bl	8000288 <__aeabi_dsub>
 8006fbc:	462a      	mov	r2, r5
 8006fbe:	4633      	mov	r3, r6
 8006fc0:	e9cd 0100 	strd	r0, r1, [sp]
 8006fc4:	f7f9 fda8 	bl	8000b18 <__aeabi_dcmpgt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	f040 8288 	bne.w	80074de <_dtoa_r+0x92e>
 8006fce:	462a      	mov	r2, r5
 8006fd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd8:	f7f9 fd80 	bl	8000adc <__aeabi_dcmplt>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f040 827c 	bne.w	80074da <_dtoa_r+0x92a>
 8006fe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fe6:	e9cd 2300 	strd	r2, r3, [sp]
 8006fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f2c0 8150 	blt.w	8007292 <_dtoa_r+0x6e2>
 8006ff2:	f1ba 0f0e 	cmp.w	sl, #14
 8006ff6:	f300 814c 	bgt.w	8007292 <_dtoa_r+0x6e2>
 8006ffa:	4b6a      	ldr	r3, [pc, #424]	; (80071a4 <_dtoa_r+0x5f4>)
 8006ffc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007000:	ed93 7b00 	vldr	d7, [r3]
 8007004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007006:	2b00      	cmp	r3, #0
 8007008:	ed8d 7b02 	vstr	d7, [sp, #8]
 800700c:	f280 80d8 	bge.w	80071c0 <_dtoa_r+0x610>
 8007010:	f1b9 0f00 	cmp.w	r9, #0
 8007014:	f300 80d4 	bgt.w	80071c0 <_dtoa_r+0x610>
 8007018:	f040 825e 	bne.w	80074d8 <_dtoa_r+0x928>
 800701c:	2200      	movs	r2, #0
 800701e:	4b66      	ldr	r3, [pc, #408]	; (80071b8 <_dtoa_r+0x608>)
 8007020:	ec51 0b17 	vmov	r0, r1, d7
 8007024:	f7f9 fae8 	bl	80005f8 <__aeabi_dmul>
 8007028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800702c:	f7f9 fd6a 	bl	8000b04 <__aeabi_dcmpge>
 8007030:	464f      	mov	r7, r9
 8007032:	464e      	mov	r6, r9
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 8234 	bne.w	80074a2 <_dtoa_r+0x8f2>
 800703a:	2331      	movs	r3, #49	; 0x31
 800703c:	f10b 0501 	add.w	r5, fp, #1
 8007040:	f88b 3000 	strb.w	r3, [fp]
 8007044:	f10a 0a01 	add.w	sl, sl, #1
 8007048:	e22f      	b.n	80074aa <_dtoa_r+0x8fa>
 800704a:	07f2      	lsls	r2, r6, #31
 800704c:	d505      	bpl.n	800705a <_dtoa_r+0x4aa>
 800704e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007052:	f7f9 fad1 	bl	80005f8 <__aeabi_dmul>
 8007056:	3501      	adds	r5, #1
 8007058:	2301      	movs	r3, #1
 800705a:	1076      	asrs	r6, r6, #1
 800705c:	3708      	adds	r7, #8
 800705e:	e772      	b.n	8006f46 <_dtoa_r+0x396>
 8007060:	2502      	movs	r5, #2
 8007062:	e774      	b.n	8006f4e <_dtoa_r+0x39e>
 8007064:	f8cd a020 	str.w	sl, [sp, #32]
 8007068:	464f      	mov	r7, r9
 800706a:	e791      	b.n	8006f90 <_dtoa_r+0x3e0>
 800706c:	4b4d      	ldr	r3, [pc, #308]	; (80071a4 <_dtoa_r+0x5f4>)
 800706e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007072:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d047      	beq.n	800710c <_dtoa_r+0x55c>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	2000      	movs	r0, #0
 8007082:	494e      	ldr	r1, [pc, #312]	; (80071bc <_dtoa_r+0x60c>)
 8007084:	f7f9 fbe2 	bl	800084c <__aeabi_ddiv>
 8007088:	462a      	mov	r2, r5
 800708a:	4633      	mov	r3, r6
 800708c:	f7f9 f8fc 	bl	8000288 <__aeabi_dsub>
 8007090:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007094:	465d      	mov	r5, fp
 8007096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800709a:	f7f9 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800709e:	4606      	mov	r6, r0
 80070a0:	f7f9 fa40 	bl	8000524 <__aeabi_i2d>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070ac:	f7f9 f8ec 	bl	8000288 <__aeabi_dsub>
 80070b0:	3630      	adds	r6, #48	; 0x30
 80070b2:	f805 6b01 	strb.w	r6, [r5], #1
 80070b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80070ba:	e9cd 0100 	strd	r0, r1, [sp]
 80070be:	f7f9 fd0d 	bl	8000adc <__aeabi_dcmplt>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d163      	bne.n	800718e <_dtoa_r+0x5de>
 80070c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ca:	2000      	movs	r0, #0
 80070cc:	4937      	ldr	r1, [pc, #220]	; (80071ac <_dtoa_r+0x5fc>)
 80070ce:	f7f9 f8db 	bl	8000288 <__aeabi_dsub>
 80070d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80070d6:	f7f9 fd01 	bl	8000adc <__aeabi_dcmplt>
 80070da:	2800      	cmp	r0, #0
 80070dc:	f040 80b7 	bne.w	800724e <_dtoa_r+0x69e>
 80070e0:	eba5 030b 	sub.w	r3, r5, fp
 80070e4:	429f      	cmp	r7, r3
 80070e6:	f77f af7c 	ble.w	8006fe2 <_dtoa_r+0x432>
 80070ea:	2200      	movs	r2, #0
 80070ec:	4b30      	ldr	r3, [pc, #192]	; (80071b0 <_dtoa_r+0x600>)
 80070ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070f2:	f7f9 fa81 	bl	80005f8 <__aeabi_dmul>
 80070f6:	2200      	movs	r2, #0
 80070f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80070fc:	4b2c      	ldr	r3, [pc, #176]	; (80071b0 <_dtoa_r+0x600>)
 80070fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007102:	f7f9 fa79 	bl	80005f8 <__aeabi_dmul>
 8007106:	e9cd 0100 	strd	r0, r1, [sp]
 800710a:	e7c4      	b.n	8007096 <_dtoa_r+0x4e6>
 800710c:	462a      	mov	r2, r5
 800710e:	4633      	mov	r3, r6
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007118:	eb0b 0507 	add.w	r5, fp, r7
 800711c:	465e      	mov	r6, fp
 800711e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007122:	f7f9 fd19 	bl	8000b58 <__aeabi_d2iz>
 8007126:	4607      	mov	r7, r0
 8007128:	f7f9 f9fc 	bl	8000524 <__aeabi_i2d>
 800712c:	3730      	adds	r7, #48	; 0x30
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007136:	f7f9 f8a7 	bl	8000288 <__aeabi_dsub>
 800713a:	f806 7b01 	strb.w	r7, [r6], #1
 800713e:	42ae      	cmp	r6, r5
 8007140:	e9cd 0100 	strd	r0, r1, [sp]
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	d126      	bne.n	8007198 <_dtoa_r+0x5e8>
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <_dtoa_r+0x60c>)
 800714c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007150:	f7f9 f89c 	bl	800028c <__adddf3>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800715c:	f7f9 fcdc 	bl	8000b18 <__aeabi_dcmpgt>
 8007160:	2800      	cmp	r0, #0
 8007162:	d174      	bne.n	800724e <_dtoa_r+0x69e>
 8007164:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007168:	2000      	movs	r0, #0
 800716a:	4914      	ldr	r1, [pc, #80]	; (80071bc <_dtoa_r+0x60c>)
 800716c:	f7f9 f88c 	bl	8000288 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007178:	f7f9 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800717c:	2800      	cmp	r0, #0
 800717e:	f43f af30 	beq.w	8006fe2 <_dtoa_r+0x432>
 8007182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007186:	2b30      	cmp	r3, #48	; 0x30
 8007188:	f105 32ff 	add.w	r2, r5, #4294967295
 800718c:	d002      	beq.n	8007194 <_dtoa_r+0x5e4>
 800718e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007192:	e04a      	b.n	800722a <_dtoa_r+0x67a>
 8007194:	4615      	mov	r5, r2
 8007196:	e7f4      	b.n	8007182 <_dtoa_r+0x5d2>
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <_dtoa_r+0x600>)
 800719a:	f7f9 fa2d 	bl	80005f8 <__aeabi_dmul>
 800719e:	e9cd 0100 	strd	r0, r1, [sp]
 80071a2:	e7bc      	b.n	800711e <_dtoa_r+0x56e>
 80071a4:	08008810 	.word	0x08008810
 80071a8:	080087e8 	.word	0x080087e8
 80071ac:	3ff00000 	.word	0x3ff00000
 80071b0:	40240000 	.word	0x40240000
 80071b4:	401c0000 	.word	0x401c0000
 80071b8:	40140000 	.word	0x40140000
 80071bc:	3fe00000 	.word	0x3fe00000
 80071c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80071c4:	465d      	mov	r5, fp
 80071c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ca:	4630      	mov	r0, r6
 80071cc:	4639      	mov	r1, r7
 80071ce:	f7f9 fb3d 	bl	800084c <__aeabi_ddiv>
 80071d2:	f7f9 fcc1 	bl	8000b58 <__aeabi_d2iz>
 80071d6:	4680      	mov	r8, r0
 80071d8:	f7f9 f9a4 	bl	8000524 <__aeabi_i2d>
 80071dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071e0:	f7f9 fa0a 	bl	80005f8 <__aeabi_dmul>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80071f0:	f7f9 f84a 	bl	8000288 <__aeabi_dsub>
 80071f4:	f805 6b01 	strb.w	r6, [r5], #1
 80071f8:	eba5 060b 	sub.w	r6, r5, fp
 80071fc:	45b1      	cmp	r9, r6
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	d139      	bne.n	8007278 <_dtoa_r+0x6c8>
 8007204:	f7f9 f842 	bl	800028c <__adddf3>
 8007208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	f7f9 fc82 	bl	8000b18 <__aeabi_dcmpgt>
 8007214:	b9c8      	cbnz	r0, 800724a <_dtoa_r+0x69a>
 8007216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800721a:	4630      	mov	r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	f7f9 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8007222:	b110      	cbz	r0, 800722a <_dtoa_r+0x67a>
 8007224:	f018 0f01 	tst.w	r8, #1
 8007228:	d10f      	bne.n	800724a <_dtoa_r+0x69a>
 800722a:	9904      	ldr	r1, [sp, #16]
 800722c:	4620      	mov	r0, r4
 800722e:	f000 fcaa 	bl	8007b86 <_Bfree>
 8007232:	2300      	movs	r3, #0
 8007234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007236:	702b      	strb	r3, [r5, #0]
 8007238:	f10a 0301 	add.w	r3, sl, #1
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8241 	beq.w	80076c8 <_dtoa_r+0xb18>
 8007246:	601d      	str	r5, [r3, #0]
 8007248:	e23e      	b.n	80076c8 <_dtoa_r+0xb18>
 800724a:	f8cd a020 	str.w	sl, [sp, #32]
 800724e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007252:	2a39      	cmp	r2, #57	; 0x39
 8007254:	f105 33ff 	add.w	r3, r5, #4294967295
 8007258:	d108      	bne.n	800726c <_dtoa_r+0x6bc>
 800725a:	459b      	cmp	fp, r3
 800725c:	d10a      	bne.n	8007274 <_dtoa_r+0x6c4>
 800725e:	9b08      	ldr	r3, [sp, #32]
 8007260:	3301      	adds	r3, #1
 8007262:	9308      	str	r3, [sp, #32]
 8007264:	2330      	movs	r3, #48	; 0x30
 8007266:	f88b 3000 	strb.w	r3, [fp]
 800726a:	465b      	mov	r3, fp
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	3201      	adds	r2, #1
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e78c      	b.n	800718e <_dtoa_r+0x5de>
 8007274:	461d      	mov	r5, r3
 8007276:	e7ea      	b.n	800724e <_dtoa_r+0x69e>
 8007278:	2200      	movs	r2, #0
 800727a:	4b9b      	ldr	r3, [pc, #620]	; (80074e8 <_dtoa_r+0x938>)
 800727c:	f7f9 f9bc 	bl	80005f8 <__aeabi_dmul>
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	4606      	mov	r6, r0
 8007286:	460f      	mov	r7, r1
 8007288:	f7f9 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800728c:	2800      	cmp	r0, #0
 800728e:	d09a      	beq.n	80071c6 <_dtoa_r+0x616>
 8007290:	e7cb      	b.n	800722a <_dtoa_r+0x67a>
 8007292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007294:	2a00      	cmp	r2, #0
 8007296:	f000 808b 	beq.w	80073b0 <_dtoa_r+0x800>
 800729a:	9a06      	ldr	r2, [sp, #24]
 800729c:	2a01      	cmp	r2, #1
 800729e:	dc6e      	bgt.n	800737e <_dtoa_r+0x7ce>
 80072a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	d067      	beq.n	8007376 <_dtoa_r+0x7c6>
 80072a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072aa:	9f07      	ldr	r7, [sp, #28]
 80072ac:	9d05      	ldr	r5, [sp, #20]
 80072ae:	9a05      	ldr	r2, [sp, #20]
 80072b0:	2101      	movs	r1, #1
 80072b2:	441a      	add	r2, r3
 80072b4:	4620      	mov	r0, r4
 80072b6:	9205      	str	r2, [sp, #20]
 80072b8:	4498      	add	r8, r3
 80072ba:	f000 fd04 	bl	8007cc6 <__i2b>
 80072be:	4606      	mov	r6, r0
 80072c0:	2d00      	cmp	r5, #0
 80072c2:	dd0c      	ble.n	80072de <_dtoa_r+0x72e>
 80072c4:	f1b8 0f00 	cmp.w	r8, #0
 80072c8:	dd09      	ble.n	80072de <_dtoa_r+0x72e>
 80072ca:	4545      	cmp	r5, r8
 80072cc:	9a05      	ldr	r2, [sp, #20]
 80072ce:	462b      	mov	r3, r5
 80072d0:	bfa8      	it	ge
 80072d2:	4643      	movge	r3, r8
 80072d4:	1ad2      	subs	r2, r2, r3
 80072d6:	9205      	str	r2, [sp, #20]
 80072d8:	1aed      	subs	r5, r5, r3
 80072da:	eba8 0803 	sub.w	r8, r8, r3
 80072de:	9b07      	ldr	r3, [sp, #28]
 80072e0:	b1eb      	cbz	r3, 800731e <_dtoa_r+0x76e>
 80072e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d067      	beq.n	80073b8 <_dtoa_r+0x808>
 80072e8:	b18f      	cbz	r7, 800730e <_dtoa_r+0x75e>
 80072ea:	4631      	mov	r1, r6
 80072ec:	463a      	mov	r2, r7
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 fd88 	bl	8007e04 <__pow5mult>
 80072f4:	9a04      	ldr	r2, [sp, #16]
 80072f6:	4601      	mov	r1, r0
 80072f8:	4606      	mov	r6, r0
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fcec 	bl	8007cd8 <__multiply>
 8007300:	9904      	ldr	r1, [sp, #16]
 8007302:	9008      	str	r0, [sp, #32]
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fc3e 	bl	8007b86 <_Bfree>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	9b07      	ldr	r3, [sp, #28]
 8007310:	1bda      	subs	r2, r3, r7
 8007312:	d004      	beq.n	800731e <_dtoa_r+0x76e>
 8007314:	9904      	ldr	r1, [sp, #16]
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fd74 	bl	8007e04 <__pow5mult>
 800731c:	9004      	str	r0, [sp, #16]
 800731e:	2101      	movs	r1, #1
 8007320:	4620      	mov	r0, r4
 8007322:	f000 fcd0 	bl	8007cc6 <__i2b>
 8007326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007328:	4607      	mov	r7, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 81d0 	beq.w	80076d0 <_dtoa_r+0xb20>
 8007330:	461a      	mov	r2, r3
 8007332:	4601      	mov	r1, r0
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fd65 	bl	8007e04 <__pow5mult>
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	2b01      	cmp	r3, #1
 800733e:	4607      	mov	r7, r0
 8007340:	dc40      	bgt.n	80073c4 <_dtoa_r+0x814>
 8007342:	9b00      	ldr	r3, [sp, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d139      	bne.n	80073bc <_dtoa_r+0x80c>
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800734e:	2b00      	cmp	r3, #0
 8007350:	d136      	bne.n	80073c0 <_dtoa_r+0x810>
 8007352:	9b01      	ldr	r3, [sp, #4]
 8007354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007358:	0d1b      	lsrs	r3, r3, #20
 800735a:	051b      	lsls	r3, r3, #20
 800735c:	b12b      	cbz	r3, 800736a <_dtoa_r+0x7ba>
 800735e:	9b05      	ldr	r3, [sp, #20]
 8007360:	3301      	adds	r3, #1
 8007362:	9305      	str	r3, [sp, #20]
 8007364:	f108 0801 	add.w	r8, r8, #1
 8007368:	2301      	movs	r3, #1
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800736e:	2b00      	cmp	r3, #0
 8007370:	d12a      	bne.n	80073c8 <_dtoa_r+0x818>
 8007372:	2001      	movs	r0, #1
 8007374:	e030      	b.n	80073d8 <_dtoa_r+0x828>
 8007376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007378:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800737c:	e795      	b.n	80072aa <_dtoa_r+0x6fa>
 800737e:	9b07      	ldr	r3, [sp, #28]
 8007380:	f109 37ff 	add.w	r7, r9, #4294967295
 8007384:	42bb      	cmp	r3, r7
 8007386:	bfbf      	itttt	lt
 8007388:	9b07      	ldrlt	r3, [sp, #28]
 800738a:	9707      	strlt	r7, [sp, #28]
 800738c:	1afa      	sublt	r2, r7, r3
 800738e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007390:	bfbb      	ittet	lt
 8007392:	189b      	addlt	r3, r3, r2
 8007394:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007396:	1bdf      	subge	r7, r3, r7
 8007398:	2700      	movlt	r7, #0
 800739a:	f1b9 0f00 	cmp.w	r9, #0
 800739e:	bfb5      	itete	lt
 80073a0:	9b05      	ldrlt	r3, [sp, #20]
 80073a2:	9d05      	ldrge	r5, [sp, #20]
 80073a4:	eba3 0509 	sublt.w	r5, r3, r9
 80073a8:	464b      	movge	r3, r9
 80073aa:	bfb8      	it	lt
 80073ac:	2300      	movlt	r3, #0
 80073ae:	e77e      	b.n	80072ae <_dtoa_r+0x6fe>
 80073b0:	9f07      	ldr	r7, [sp, #28]
 80073b2:	9d05      	ldr	r5, [sp, #20]
 80073b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80073b6:	e783      	b.n	80072c0 <_dtoa_r+0x710>
 80073b8:	9a07      	ldr	r2, [sp, #28]
 80073ba:	e7ab      	b.n	8007314 <_dtoa_r+0x764>
 80073bc:	2300      	movs	r3, #0
 80073be:	e7d4      	b.n	800736a <_dtoa_r+0x7ba>
 80073c0:	9b00      	ldr	r3, [sp, #0]
 80073c2:	e7d2      	b.n	800736a <_dtoa_r+0x7ba>
 80073c4:	2300      	movs	r3, #0
 80073c6:	9307      	str	r3, [sp, #28]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80073ce:	6918      	ldr	r0, [r3, #16]
 80073d0:	f000 fc2b 	bl	8007c2a <__hi0bits>
 80073d4:	f1c0 0020 	rsb	r0, r0, #32
 80073d8:	4440      	add	r0, r8
 80073da:	f010 001f 	ands.w	r0, r0, #31
 80073de:	d047      	beq.n	8007470 <_dtoa_r+0x8c0>
 80073e0:	f1c0 0320 	rsb	r3, r0, #32
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	dd3b      	ble.n	8007460 <_dtoa_r+0x8b0>
 80073e8:	9b05      	ldr	r3, [sp, #20]
 80073ea:	f1c0 001c 	rsb	r0, r0, #28
 80073ee:	4403      	add	r3, r0
 80073f0:	9305      	str	r3, [sp, #20]
 80073f2:	4405      	add	r5, r0
 80073f4:	4480      	add	r8, r0
 80073f6:	9b05      	ldr	r3, [sp, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dd05      	ble.n	8007408 <_dtoa_r+0x858>
 80073fc:	461a      	mov	r2, r3
 80073fe:	9904      	ldr	r1, [sp, #16]
 8007400:	4620      	mov	r0, r4
 8007402:	f000 fd4d 	bl	8007ea0 <__lshift>
 8007406:	9004      	str	r0, [sp, #16]
 8007408:	f1b8 0f00 	cmp.w	r8, #0
 800740c:	dd05      	ble.n	800741a <_dtoa_r+0x86a>
 800740e:	4639      	mov	r1, r7
 8007410:	4642      	mov	r2, r8
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fd44 	bl	8007ea0 <__lshift>
 8007418:	4607      	mov	r7, r0
 800741a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741c:	b353      	cbz	r3, 8007474 <_dtoa_r+0x8c4>
 800741e:	4639      	mov	r1, r7
 8007420:	9804      	ldr	r0, [sp, #16]
 8007422:	f000 fd91 	bl	8007f48 <__mcmp>
 8007426:	2800      	cmp	r0, #0
 8007428:	da24      	bge.n	8007474 <_dtoa_r+0x8c4>
 800742a:	2300      	movs	r3, #0
 800742c:	220a      	movs	r2, #10
 800742e:	9904      	ldr	r1, [sp, #16]
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fbbf 	bl	8007bb4 <__multadd>
 8007436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007438:	9004      	str	r0, [sp, #16]
 800743a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 814d 	beq.w	80076de <_dtoa_r+0xb2e>
 8007444:	2300      	movs	r3, #0
 8007446:	4631      	mov	r1, r6
 8007448:	220a      	movs	r2, #10
 800744a:	4620      	mov	r0, r4
 800744c:	f000 fbb2 	bl	8007bb4 <__multadd>
 8007450:	9b02      	ldr	r3, [sp, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	4606      	mov	r6, r0
 8007456:	dc4f      	bgt.n	80074f8 <_dtoa_r+0x948>
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	2b02      	cmp	r3, #2
 800745c:	dd4c      	ble.n	80074f8 <_dtoa_r+0x948>
 800745e:	e011      	b.n	8007484 <_dtoa_r+0x8d4>
 8007460:	d0c9      	beq.n	80073f6 <_dtoa_r+0x846>
 8007462:	9a05      	ldr	r2, [sp, #20]
 8007464:	331c      	adds	r3, #28
 8007466:	441a      	add	r2, r3
 8007468:	9205      	str	r2, [sp, #20]
 800746a:	441d      	add	r5, r3
 800746c:	4498      	add	r8, r3
 800746e:	e7c2      	b.n	80073f6 <_dtoa_r+0x846>
 8007470:	4603      	mov	r3, r0
 8007472:	e7f6      	b.n	8007462 <_dtoa_r+0x8b2>
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	dc38      	bgt.n	80074ec <_dtoa_r+0x93c>
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	2b02      	cmp	r3, #2
 800747e:	dd35      	ble.n	80074ec <_dtoa_r+0x93c>
 8007480:	f8cd 9008 	str.w	r9, [sp, #8]
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	b963      	cbnz	r3, 80074a2 <_dtoa_r+0x8f2>
 8007488:	4639      	mov	r1, r7
 800748a:	2205      	movs	r2, #5
 800748c:	4620      	mov	r0, r4
 800748e:	f000 fb91 	bl	8007bb4 <__multadd>
 8007492:	4601      	mov	r1, r0
 8007494:	4607      	mov	r7, r0
 8007496:	9804      	ldr	r0, [sp, #16]
 8007498:	f000 fd56 	bl	8007f48 <__mcmp>
 800749c:	2800      	cmp	r0, #0
 800749e:	f73f adcc 	bgt.w	800703a <_dtoa_r+0x48a>
 80074a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a4:	465d      	mov	r5, fp
 80074a6:	ea6f 0a03 	mvn.w	sl, r3
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	4639      	mov	r1, r7
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 fb68 	bl	8007b86 <_Bfree>
 80074b6:	2e00      	cmp	r6, #0
 80074b8:	f43f aeb7 	beq.w	800722a <_dtoa_r+0x67a>
 80074bc:	f1b9 0f00 	cmp.w	r9, #0
 80074c0:	d005      	beq.n	80074ce <_dtoa_r+0x91e>
 80074c2:	45b1      	cmp	r9, r6
 80074c4:	d003      	beq.n	80074ce <_dtoa_r+0x91e>
 80074c6:	4649      	mov	r1, r9
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fb5c 	bl	8007b86 <_Bfree>
 80074ce:	4631      	mov	r1, r6
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fb58 	bl	8007b86 <_Bfree>
 80074d6:	e6a8      	b.n	800722a <_dtoa_r+0x67a>
 80074d8:	2700      	movs	r7, #0
 80074da:	463e      	mov	r6, r7
 80074dc:	e7e1      	b.n	80074a2 <_dtoa_r+0x8f2>
 80074de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80074e2:	463e      	mov	r6, r7
 80074e4:	e5a9      	b.n	800703a <_dtoa_r+0x48a>
 80074e6:	bf00      	nop
 80074e8:	40240000 	.word	0x40240000
 80074ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80fa 	beq.w	80076ec <_dtoa_r+0xb3c>
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	dd05      	ble.n	8007508 <_dtoa_r+0x958>
 80074fc:	4631      	mov	r1, r6
 80074fe:	462a      	mov	r2, r5
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fccd 	bl	8007ea0 <__lshift>
 8007506:	4606      	mov	r6, r0
 8007508:	9b07      	ldr	r3, [sp, #28]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d04c      	beq.n	80075a8 <_dtoa_r+0x9f8>
 800750e:	6871      	ldr	r1, [r6, #4]
 8007510:	4620      	mov	r0, r4
 8007512:	f000 fb04 	bl	8007b1e <_Balloc>
 8007516:	6932      	ldr	r2, [r6, #16]
 8007518:	3202      	adds	r2, #2
 800751a:	4605      	mov	r5, r0
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	f106 010c 	add.w	r1, r6, #12
 8007522:	300c      	adds	r0, #12
 8007524:	f000 faf0 	bl	8007b08 <memcpy>
 8007528:	2201      	movs	r2, #1
 800752a:	4629      	mov	r1, r5
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fcb7 	bl	8007ea0 <__lshift>
 8007532:	9b00      	ldr	r3, [sp, #0]
 8007534:	f8cd b014 	str.w	fp, [sp, #20]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	46b1      	mov	r9, r6
 800753e:	9307      	str	r3, [sp, #28]
 8007540:	4606      	mov	r6, r0
 8007542:	4639      	mov	r1, r7
 8007544:	9804      	ldr	r0, [sp, #16]
 8007546:	f7ff faa7 	bl	8006a98 <quorem>
 800754a:	4649      	mov	r1, r9
 800754c:	4605      	mov	r5, r0
 800754e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007552:	9804      	ldr	r0, [sp, #16]
 8007554:	f000 fcf8 	bl	8007f48 <__mcmp>
 8007558:	4632      	mov	r2, r6
 800755a:	9000      	str	r0, [sp, #0]
 800755c:	4639      	mov	r1, r7
 800755e:	4620      	mov	r0, r4
 8007560:	f000 fd0c 	bl	8007f7c <__mdiff>
 8007564:	68c3      	ldr	r3, [r0, #12]
 8007566:	4602      	mov	r2, r0
 8007568:	bb03      	cbnz	r3, 80075ac <_dtoa_r+0x9fc>
 800756a:	4601      	mov	r1, r0
 800756c:	9008      	str	r0, [sp, #32]
 800756e:	9804      	ldr	r0, [sp, #16]
 8007570:	f000 fcea 	bl	8007f48 <__mcmp>
 8007574:	9a08      	ldr	r2, [sp, #32]
 8007576:	4603      	mov	r3, r0
 8007578:	4611      	mov	r1, r2
 800757a:	4620      	mov	r0, r4
 800757c:	9308      	str	r3, [sp, #32]
 800757e:	f000 fb02 	bl	8007b86 <_Bfree>
 8007582:	9b08      	ldr	r3, [sp, #32]
 8007584:	b9a3      	cbnz	r3, 80075b0 <_dtoa_r+0xa00>
 8007586:	9a06      	ldr	r2, [sp, #24]
 8007588:	b992      	cbnz	r2, 80075b0 <_dtoa_r+0xa00>
 800758a:	9a07      	ldr	r2, [sp, #28]
 800758c:	b982      	cbnz	r2, 80075b0 <_dtoa_r+0xa00>
 800758e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007592:	d029      	beq.n	80075e8 <_dtoa_r+0xa38>
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	dd01      	ble.n	800759e <_dtoa_r+0x9ee>
 800759a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800759e:	9b05      	ldr	r3, [sp, #20]
 80075a0:	1c5d      	adds	r5, r3, #1
 80075a2:	f883 8000 	strb.w	r8, [r3]
 80075a6:	e782      	b.n	80074ae <_dtoa_r+0x8fe>
 80075a8:	4630      	mov	r0, r6
 80075aa:	e7c2      	b.n	8007532 <_dtoa_r+0x982>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e7e3      	b.n	8007578 <_dtoa_r+0x9c8>
 80075b0:	9a00      	ldr	r2, [sp, #0]
 80075b2:	2a00      	cmp	r2, #0
 80075b4:	db04      	blt.n	80075c0 <_dtoa_r+0xa10>
 80075b6:	d125      	bne.n	8007604 <_dtoa_r+0xa54>
 80075b8:	9a06      	ldr	r2, [sp, #24]
 80075ba:	bb1a      	cbnz	r2, 8007604 <_dtoa_r+0xa54>
 80075bc:	9a07      	ldr	r2, [sp, #28]
 80075be:	bb0a      	cbnz	r2, 8007604 <_dtoa_r+0xa54>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	ddec      	ble.n	800759e <_dtoa_r+0x9ee>
 80075c4:	2201      	movs	r2, #1
 80075c6:	9904      	ldr	r1, [sp, #16]
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fc69 	bl	8007ea0 <__lshift>
 80075ce:	4639      	mov	r1, r7
 80075d0:	9004      	str	r0, [sp, #16]
 80075d2:	f000 fcb9 	bl	8007f48 <__mcmp>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	dc03      	bgt.n	80075e2 <_dtoa_r+0xa32>
 80075da:	d1e0      	bne.n	800759e <_dtoa_r+0x9ee>
 80075dc:	f018 0f01 	tst.w	r8, #1
 80075e0:	d0dd      	beq.n	800759e <_dtoa_r+0x9ee>
 80075e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80075e6:	d1d8      	bne.n	800759a <_dtoa_r+0x9ea>
 80075e8:	9b05      	ldr	r3, [sp, #20]
 80075ea:	9a05      	ldr	r2, [sp, #20]
 80075ec:	1c5d      	adds	r5, r3, #1
 80075ee:	2339      	movs	r3, #57	; 0x39
 80075f0:	7013      	strb	r3, [r2, #0]
 80075f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075f6:	2b39      	cmp	r3, #57	; 0x39
 80075f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80075fc:	d04f      	beq.n	800769e <_dtoa_r+0xaee>
 80075fe:	3301      	adds	r3, #1
 8007600:	7013      	strb	r3, [r2, #0]
 8007602:	e754      	b.n	80074ae <_dtoa_r+0x8fe>
 8007604:	9a05      	ldr	r2, [sp, #20]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f102 0501 	add.w	r5, r2, #1
 800760c:	dd06      	ble.n	800761c <_dtoa_r+0xa6c>
 800760e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007612:	d0e9      	beq.n	80075e8 <_dtoa_r+0xa38>
 8007614:	f108 0801 	add.w	r8, r8, #1
 8007618:	9b05      	ldr	r3, [sp, #20]
 800761a:	e7c2      	b.n	80075a2 <_dtoa_r+0x9f2>
 800761c:	9a02      	ldr	r2, [sp, #8]
 800761e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007622:	eba5 030b 	sub.w	r3, r5, fp
 8007626:	4293      	cmp	r3, r2
 8007628:	d021      	beq.n	800766e <_dtoa_r+0xabe>
 800762a:	2300      	movs	r3, #0
 800762c:	220a      	movs	r2, #10
 800762e:	9904      	ldr	r1, [sp, #16]
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fabf 	bl	8007bb4 <__multadd>
 8007636:	45b1      	cmp	r9, r6
 8007638:	9004      	str	r0, [sp, #16]
 800763a:	f04f 0300 	mov.w	r3, #0
 800763e:	f04f 020a 	mov.w	r2, #10
 8007642:	4649      	mov	r1, r9
 8007644:	4620      	mov	r0, r4
 8007646:	d105      	bne.n	8007654 <_dtoa_r+0xaa4>
 8007648:	f000 fab4 	bl	8007bb4 <__multadd>
 800764c:	4681      	mov	r9, r0
 800764e:	4606      	mov	r6, r0
 8007650:	9505      	str	r5, [sp, #20]
 8007652:	e776      	b.n	8007542 <_dtoa_r+0x992>
 8007654:	f000 faae 	bl	8007bb4 <__multadd>
 8007658:	4631      	mov	r1, r6
 800765a:	4681      	mov	r9, r0
 800765c:	2300      	movs	r3, #0
 800765e:	220a      	movs	r2, #10
 8007660:	4620      	mov	r0, r4
 8007662:	f000 faa7 	bl	8007bb4 <__multadd>
 8007666:	4606      	mov	r6, r0
 8007668:	e7f2      	b.n	8007650 <_dtoa_r+0xaa0>
 800766a:	f04f 0900 	mov.w	r9, #0
 800766e:	2201      	movs	r2, #1
 8007670:	9904      	ldr	r1, [sp, #16]
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fc14 	bl	8007ea0 <__lshift>
 8007678:	4639      	mov	r1, r7
 800767a:	9004      	str	r0, [sp, #16]
 800767c:	f000 fc64 	bl	8007f48 <__mcmp>
 8007680:	2800      	cmp	r0, #0
 8007682:	dcb6      	bgt.n	80075f2 <_dtoa_r+0xa42>
 8007684:	d102      	bne.n	800768c <_dtoa_r+0xadc>
 8007686:	f018 0f01 	tst.w	r8, #1
 800768a:	d1b2      	bne.n	80075f2 <_dtoa_r+0xa42>
 800768c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007690:	2b30      	cmp	r3, #48	; 0x30
 8007692:	f105 32ff 	add.w	r2, r5, #4294967295
 8007696:	f47f af0a 	bne.w	80074ae <_dtoa_r+0x8fe>
 800769a:	4615      	mov	r5, r2
 800769c:	e7f6      	b.n	800768c <_dtoa_r+0xadc>
 800769e:	4593      	cmp	fp, r2
 80076a0:	d105      	bne.n	80076ae <_dtoa_r+0xafe>
 80076a2:	2331      	movs	r3, #49	; 0x31
 80076a4:	f10a 0a01 	add.w	sl, sl, #1
 80076a8:	f88b 3000 	strb.w	r3, [fp]
 80076ac:	e6ff      	b.n	80074ae <_dtoa_r+0x8fe>
 80076ae:	4615      	mov	r5, r2
 80076b0:	e79f      	b.n	80075f2 <_dtoa_r+0xa42>
 80076b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007718 <_dtoa_r+0xb68>
 80076b6:	e007      	b.n	80076c8 <_dtoa_r+0xb18>
 80076b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800771c <_dtoa_r+0xb6c>
 80076be:	b11b      	cbz	r3, 80076c8 <_dtoa_r+0xb18>
 80076c0:	f10b 0308 	add.w	r3, fp, #8
 80076c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	4658      	mov	r0, fp
 80076ca:	b017      	add	sp, #92	; 0x5c
 80076cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d0:	9b06      	ldr	r3, [sp, #24]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	f77f ae35 	ble.w	8007342 <_dtoa_r+0x792>
 80076d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	e649      	b.n	8007372 <_dtoa_r+0x7c2>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dc03      	bgt.n	80076ec <_dtoa_r+0xb3c>
 80076e4:	9b06      	ldr	r3, [sp, #24]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	f73f aecc 	bgt.w	8007484 <_dtoa_r+0x8d4>
 80076ec:	465d      	mov	r5, fp
 80076ee:	4639      	mov	r1, r7
 80076f0:	9804      	ldr	r0, [sp, #16]
 80076f2:	f7ff f9d1 	bl	8006a98 <quorem>
 80076f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80076fa:	f805 8b01 	strb.w	r8, [r5], #1
 80076fe:	9a02      	ldr	r2, [sp, #8]
 8007700:	eba5 030b 	sub.w	r3, r5, fp
 8007704:	429a      	cmp	r2, r3
 8007706:	ddb0      	ble.n	800766a <_dtoa_r+0xaba>
 8007708:	2300      	movs	r3, #0
 800770a:	220a      	movs	r2, #10
 800770c:	9904      	ldr	r1, [sp, #16]
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fa50 	bl	8007bb4 <__multadd>
 8007714:	9004      	str	r0, [sp, #16]
 8007716:	e7ea      	b.n	80076ee <_dtoa_r+0xb3e>
 8007718:	08008754 	.word	0x08008754
 800771c:	08008778 	.word	0x08008778

08007720 <__sflush_r>:
 8007720:	898a      	ldrh	r2, [r1, #12]
 8007722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007726:	4605      	mov	r5, r0
 8007728:	0710      	lsls	r0, r2, #28
 800772a:	460c      	mov	r4, r1
 800772c:	d458      	bmi.n	80077e0 <__sflush_r+0xc0>
 800772e:	684b      	ldr	r3, [r1, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	dc05      	bgt.n	8007740 <__sflush_r+0x20>
 8007734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	dc02      	bgt.n	8007740 <__sflush_r+0x20>
 800773a:	2000      	movs	r0, #0
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007742:	2e00      	cmp	r6, #0
 8007744:	d0f9      	beq.n	800773a <__sflush_r+0x1a>
 8007746:	2300      	movs	r3, #0
 8007748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800774c:	682f      	ldr	r7, [r5, #0]
 800774e:	6a21      	ldr	r1, [r4, #32]
 8007750:	602b      	str	r3, [r5, #0]
 8007752:	d032      	beq.n	80077ba <__sflush_r+0x9a>
 8007754:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	075a      	lsls	r2, r3, #29
 800775a:	d505      	bpl.n	8007768 <__sflush_r+0x48>
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	1ac0      	subs	r0, r0, r3
 8007760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007762:	b10b      	cbz	r3, 8007768 <__sflush_r+0x48>
 8007764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007766:	1ac0      	subs	r0, r0, r3
 8007768:	2300      	movs	r3, #0
 800776a:	4602      	mov	r2, r0
 800776c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800776e:	6a21      	ldr	r1, [r4, #32]
 8007770:	4628      	mov	r0, r5
 8007772:	47b0      	blx	r6
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	d106      	bne.n	8007788 <__sflush_r+0x68>
 800777a:	6829      	ldr	r1, [r5, #0]
 800777c:	291d      	cmp	r1, #29
 800777e:	d848      	bhi.n	8007812 <__sflush_r+0xf2>
 8007780:	4a29      	ldr	r2, [pc, #164]	; (8007828 <__sflush_r+0x108>)
 8007782:	40ca      	lsrs	r2, r1
 8007784:	07d6      	lsls	r6, r2, #31
 8007786:	d544      	bpl.n	8007812 <__sflush_r+0xf2>
 8007788:	2200      	movs	r2, #0
 800778a:	6062      	str	r2, [r4, #4]
 800778c:	04d9      	lsls	r1, r3, #19
 800778e:	6922      	ldr	r2, [r4, #16]
 8007790:	6022      	str	r2, [r4, #0]
 8007792:	d504      	bpl.n	800779e <__sflush_r+0x7e>
 8007794:	1c42      	adds	r2, r0, #1
 8007796:	d101      	bne.n	800779c <__sflush_r+0x7c>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b903      	cbnz	r3, 800779e <__sflush_r+0x7e>
 800779c:	6560      	str	r0, [r4, #84]	; 0x54
 800779e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a0:	602f      	str	r7, [r5, #0]
 80077a2:	2900      	cmp	r1, #0
 80077a4:	d0c9      	beq.n	800773a <__sflush_r+0x1a>
 80077a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077aa:	4299      	cmp	r1, r3
 80077ac:	d002      	beq.n	80077b4 <__sflush_r+0x94>
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 fc9e 	bl	80080f0 <_free_r>
 80077b4:	2000      	movs	r0, #0
 80077b6:	6360      	str	r0, [r4, #52]	; 0x34
 80077b8:	e7c0      	b.n	800773c <__sflush_r+0x1c>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4628      	mov	r0, r5
 80077be:	47b0      	blx	r6
 80077c0:	1c41      	adds	r1, r0, #1
 80077c2:	d1c8      	bne.n	8007756 <__sflush_r+0x36>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0c5      	beq.n	8007756 <__sflush_r+0x36>
 80077ca:	2b1d      	cmp	r3, #29
 80077cc:	d001      	beq.n	80077d2 <__sflush_r+0xb2>
 80077ce:	2b16      	cmp	r3, #22
 80077d0:	d101      	bne.n	80077d6 <__sflush_r+0xb6>
 80077d2:	602f      	str	r7, [r5, #0]
 80077d4:	e7b1      	b.n	800773a <__sflush_r+0x1a>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	e7ad      	b.n	800773c <__sflush_r+0x1c>
 80077e0:	690f      	ldr	r7, [r1, #16]
 80077e2:	2f00      	cmp	r7, #0
 80077e4:	d0a9      	beq.n	800773a <__sflush_r+0x1a>
 80077e6:	0793      	lsls	r3, r2, #30
 80077e8:	680e      	ldr	r6, [r1, #0]
 80077ea:	bf08      	it	eq
 80077ec:	694b      	ldreq	r3, [r1, #20]
 80077ee:	600f      	str	r7, [r1, #0]
 80077f0:	bf18      	it	ne
 80077f2:	2300      	movne	r3, #0
 80077f4:	eba6 0807 	sub.w	r8, r6, r7
 80077f8:	608b      	str	r3, [r1, #8]
 80077fa:	f1b8 0f00 	cmp.w	r8, #0
 80077fe:	dd9c      	ble.n	800773a <__sflush_r+0x1a>
 8007800:	4643      	mov	r3, r8
 8007802:	463a      	mov	r2, r7
 8007804:	6a21      	ldr	r1, [r4, #32]
 8007806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007808:	4628      	mov	r0, r5
 800780a:	47b0      	blx	r6
 800780c:	2800      	cmp	r0, #0
 800780e:	dc06      	bgt.n	800781e <__sflush_r+0xfe>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	e78e      	b.n	800773c <__sflush_r+0x1c>
 800781e:	4407      	add	r7, r0
 8007820:	eba8 0800 	sub.w	r8, r8, r0
 8007824:	e7e9      	b.n	80077fa <__sflush_r+0xda>
 8007826:	bf00      	nop
 8007828:	20400001 	.word	0x20400001

0800782c <_fflush_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	690b      	ldr	r3, [r1, #16]
 8007830:	4605      	mov	r5, r0
 8007832:	460c      	mov	r4, r1
 8007834:	b1db      	cbz	r3, 800786e <_fflush_r+0x42>
 8007836:	b118      	cbz	r0, 8007840 <_fflush_r+0x14>
 8007838:	6983      	ldr	r3, [r0, #24]
 800783a:	b90b      	cbnz	r3, 8007840 <_fflush_r+0x14>
 800783c:	f000 f860 	bl	8007900 <__sinit>
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <_fflush_r+0x48>)
 8007842:	429c      	cmp	r4, r3
 8007844:	d109      	bne.n	800785a <_fflush_r+0x2e>
 8007846:	686c      	ldr	r4, [r5, #4]
 8007848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784c:	b17b      	cbz	r3, 800786e <_fflush_r+0x42>
 800784e:	4621      	mov	r1, r4
 8007850:	4628      	mov	r0, r5
 8007852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007856:	f7ff bf63 	b.w	8007720 <__sflush_r>
 800785a:	4b07      	ldr	r3, [pc, #28]	; (8007878 <_fflush_r+0x4c>)
 800785c:	429c      	cmp	r4, r3
 800785e:	d101      	bne.n	8007864 <_fflush_r+0x38>
 8007860:	68ac      	ldr	r4, [r5, #8]
 8007862:	e7f1      	b.n	8007848 <_fflush_r+0x1c>
 8007864:	4b05      	ldr	r3, [pc, #20]	; (800787c <_fflush_r+0x50>)
 8007866:	429c      	cmp	r4, r3
 8007868:	bf08      	it	eq
 800786a:	68ec      	ldreq	r4, [r5, #12]
 800786c:	e7ec      	b.n	8007848 <_fflush_r+0x1c>
 800786e:	2000      	movs	r0, #0
 8007870:	bd38      	pop	{r3, r4, r5, pc}
 8007872:	bf00      	nop
 8007874:	080087a8 	.word	0x080087a8
 8007878:	080087c8 	.word	0x080087c8
 800787c:	08008788 	.word	0x08008788

08007880 <std>:
 8007880:	2300      	movs	r3, #0
 8007882:	b510      	push	{r4, lr}
 8007884:	4604      	mov	r4, r0
 8007886:	e9c0 3300 	strd	r3, r3, [r0]
 800788a:	6083      	str	r3, [r0, #8]
 800788c:	8181      	strh	r1, [r0, #12]
 800788e:	6643      	str	r3, [r0, #100]	; 0x64
 8007890:	81c2      	strh	r2, [r0, #14]
 8007892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007896:	6183      	str	r3, [r0, #24]
 8007898:	4619      	mov	r1, r3
 800789a:	2208      	movs	r2, #8
 800789c:	305c      	adds	r0, #92	; 0x5c
 800789e:	f7fe faa5 	bl	8005dec <memset>
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <std+0x38>)
 80078a4:	6263      	str	r3, [r4, #36]	; 0x24
 80078a6:	4b05      	ldr	r3, [pc, #20]	; (80078bc <std+0x3c>)
 80078a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <std+0x40>)
 80078ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <std+0x44>)
 80078b0:	6224      	str	r4, [r4, #32]
 80078b2:	6323      	str	r3, [r4, #48]	; 0x30
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	bf00      	nop
 80078b8:	080084e1 	.word	0x080084e1
 80078bc:	08008503 	.word	0x08008503
 80078c0:	0800853b 	.word	0x0800853b
 80078c4:	0800855f 	.word	0x0800855f

080078c8 <_cleanup_r>:
 80078c8:	4901      	ldr	r1, [pc, #4]	; (80078d0 <_cleanup_r+0x8>)
 80078ca:	f000 b885 	b.w	80079d8 <_fwalk_reent>
 80078ce:	bf00      	nop
 80078d0:	0800782d 	.word	0x0800782d

080078d4 <__sfmoreglue>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	1e4a      	subs	r2, r1, #1
 80078d8:	2568      	movs	r5, #104	; 0x68
 80078da:	4355      	muls	r5, r2
 80078dc:	460e      	mov	r6, r1
 80078de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078e2:	f000 fc53 	bl	800818c <_malloc_r>
 80078e6:	4604      	mov	r4, r0
 80078e8:	b140      	cbz	r0, 80078fc <__sfmoreglue+0x28>
 80078ea:	2100      	movs	r1, #0
 80078ec:	e9c0 1600 	strd	r1, r6, [r0]
 80078f0:	300c      	adds	r0, #12
 80078f2:	60a0      	str	r0, [r4, #8]
 80078f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078f8:	f7fe fa78 	bl	8005dec <memset>
 80078fc:	4620      	mov	r0, r4
 80078fe:	bd70      	pop	{r4, r5, r6, pc}

08007900 <__sinit>:
 8007900:	6983      	ldr	r3, [r0, #24]
 8007902:	b510      	push	{r4, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	bb33      	cbnz	r3, 8007956 <__sinit+0x56>
 8007908:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800790c:	6503      	str	r3, [r0, #80]	; 0x50
 800790e:	4b12      	ldr	r3, [pc, #72]	; (8007958 <__sinit+0x58>)
 8007910:	4a12      	ldr	r2, [pc, #72]	; (800795c <__sinit+0x5c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6282      	str	r2, [r0, #40]	; 0x28
 8007916:	4298      	cmp	r0, r3
 8007918:	bf04      	itt	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	6183      	streq	r3, [r0, #24]
 800791e:	f000 f81f 	bl	8007960 <__sfp>
 8007922:	6060      	str	r0, [r4, #4]
 8007924:	4620      	mov	r0, r4
 8007926:	f000 f81b 	bl	8007960 <__sfp>
 800792a:	60a0      	str	r0, [r4, #8]
 800792c:	4620      	mov	r0, r4
 800792e:	f000 f817 	bl	8007960 <__sfp>
 8007932:	2200      	movs	r2, #0
 8007934:	60e0      	str	r0, [r4, #12]
 8007936:	2104      	movs	r1, #4
 8007938:	6860      	ldr	r0, [r4, #4]
 800793a:	f7ff ffa1 	bl	8007880 <std>
 800793e:	2201      	movs	r2, #1
 8007940:	2109      	movs	r1, #9
 8007942:	68a0      	ldr	r0, [r4, #8]
 8007944:	f7ff ff9c 	bl	8007880 <std>
 8007948:	2202      	movs	r2, #2
 800794a:	2112      	movs	r1, #18
 800794c:	68e0      	ldr	r0, [r4, #12]
 800794e:	f7ff ff97 	bl	8007880 <std>
 8007952:	2301      	movs	r3, #1
 8007954:	61a3      	str	r3, [r4, #24]
 8007956:	bd10      	pop	{r4, pc}
 8007958:	08008740 	.word	0x08008740
 800795c:	080078c9 	.word	0x080078c9

08007960 <__sfp>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	4b1b      	ldr	r3, [pc, #108]	; (80079d0 <__sfp+0x70>)
 8007964:	681e      	ldr	r6, [r3, #0]
 8007966:	69b3      	ldr	r3, [r6, #24]
 8007968:	4607      	mov	r7, r0
 800796a:	b913      	cbnz	r3, 8007972 <__sfp+0x12>
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff ffc7 	bl	8007900 <__sinit>
 8007972:	3648      	adds	r6, #72	; 0x48
 8007974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	d503      	bpl.n	8007984 <__sfp+0x24>
 800797c:	6833      	ldr	r3, [r6, #0]
 800797e:	b133      	cbz	r3, 800798e <__sfp+0x2e>
 8007980:	6836      	ldr	r6, [r6, #0]
 8007982:	e7f7      	b.n	8007974 <__sfp+0x14>
 8007984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007988:	b16d      	cbz	r5, 80079a6 <__sfp+0x46>
 800798a:	3468      	adds	r4, #104	; 0x68
 800798c:	e7f4      	b.n	8007978 <__sfp+0x18>
 800798e:	2104      	movs	r1, #4
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ff9f 	bl	80078d4 <__sfmoreglue>
 8007996:	6030      	str	r0, [r6, #0]
 8007998:	2800      	cmp	r0, #0
 800799a:	d1f1      	bne.n	8007980 <__sfp+0x20>
 800799c:	230c      	movs	r3, #12
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4604      	mov	r4, r0
 80079a2:	4620      	mov	r0, r4
 80079a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a6:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <__sfp+0x74>)
 80079a8:	6665      	str	r5, [r4, #100]	; 0x64
 80079aa:	e9c4 5500 	strd	r5, r5, [r4]
 80079ae:	60a5      	str	r5, [r4, #8]
 80079b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80079b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80079b8:	2208      	movs	r2, #8
 80079ba:	4629      	mov	r1, r5
 80079bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079c0:	f7fe fa14 	bl	8005dec <memset>
 80079c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079cc:	e7e9      	b.n	80079a2 <__sfp+0x42>
 80079ce:	bf00      	nop
 80079d0:	08008740 	.word	0x08008740
 80079d4:	ffff0001 	.word	0xffff0001

080079d8 <_fwalk_reent>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4680      	mov	r8, r0
 80079de:	4689      	mov	r9, r1
 80079e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079e4:	2600      	movs	r6, #0
 80079e6:	b914      	cbnz	r4, 80079ee <_fwalk_reent+0x16>
 80079e8:	4630      	mov	r0, r6
 80079ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80079f2:	3f01      	subs	r7, #1
 80079f4:	d501      	bpl.n	80079fa <_fwalk_reent+0x22>
 80079f6:	6824      	ldr	r4, [r4, #0]
 80079f8:	e7f5      	b.n	80079e6 <_fwalk_reent+0xe>
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d907      	bls.n	8007a10 <_fwalk_reent+0x38>
 8007a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a04:	3301      	adds	r3, #1
 8007a06:	d003      	beq.n	8007a10 <_fwalk_reent+0x38>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	47c8      	blx	r9
 8007a0e:	4306      	orrs	r6, r0
 8007a10:	3568      	adds	r5, #104	; 0x68
 8007a12:	e7ee      	b.n	80079f2 <_fwalk_reent+0x1a>

08007a14 <_localeconv_r>:
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <_localeconv_r+0x14>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a18      	ldr	r0, [r3, #32]
 8007a1a:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <_localeconv_r+0x18>)
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	bf08      	it	eq
 8007a20:	4618      	moveq	r0, r3
 8007a22:	30f0      	adds	r0, #240	; 0xf0
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	2000000c 	.word	0x2000000c
 8007a2c:	20000070 	.word	0x20000070

08007a30 <__swhatbuf_r>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	460e      	mov	r6, r1
 8007a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	b096      	sub	sp, #88	; 0x58
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	461d      	mov	r5, r3
 8007a40:	da07      	bge.n	8007a52 <__swhatbuf_r+0x22>
 8007a42:	2300      	movs	r3, #0
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	89b3      	ldrh	r3, [r6, #12]
 8007a48:	061a      	lsls	r2, r3, #24
 8007a4a:	d410      	bmi.n	8007a6e <__swhatbuf_r+0x3e>
 8007a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a50:	e00e      	b.n	8007a70 <__swhatbuf_r+0x40>
 8007a52:	466a      	mov	r2, sp
 8007a54:	f000 fdaa 	bl	80085ac <_fstat_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	dbf2      	blt.n	8007a42 <__swhatbuf_r+0x12>
 8007a5c:	9a01      	ldr	r2, [sp, #4]
 8007a5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a66:	425a      	negs	r2, r3
 8007a68:	415a      	adcs	r2, r3
 8007a6a:	602a      	str	r2, [r5, #0]
 8007a6c:	e7ee      	b.n	8007a4c <__swhatbuf_r+0x1c>
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	2000      	movs	r0, #0
 8007a72:	6023      	str	r3, [r4, #0]
 8007a74:	b016      	add	sp, #88	; 0x58
 8007a76:	bd70      	pop	{r4, r5, r6, pc}

08007a78 <__smakebuf_r>:
 8007a78:	898b      	ldrh	r3, [r1, #12]
 8007a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a7c:	079d      	lsls	r5, r3, #30
 8007a7e:	4606      	mov	r6, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	d507      	bpl.n	8007a94 <__smakebuf_r+0x1c>
 8007a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	6163      	str	r3, [r4, #20]
 8007a90:	b002      	add	sp, #8
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
 8007a94:	ab01      	add	r3, sp, #4
 8007a96:	466a      	mov	r2, sp
 8007a98:	f7ff ffca 	bl	8007a30 <__swhatbuf_r>
 8007a9c:	9900      	ldr	r1, [sp, #0]
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 fb73 	bl	800818c <_malloc_r>
 8007aa6:	b948      	cbnz	r0, 8007abc <__smakebuf_r+0x44>
 8007aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aac:	059a      	lsls	r2, r3, #22
 8007aae:	d4ef      	bmi.n	8007a90 <__smakebuf_r+0x18>
 8007ab0:	f023 0303 	bic.w	r3, r3, #3
 8007ab4:	f043 0302 	orr.w	r3, r3, #2
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	e7e3      	b.n	8007a84 <__smakebuf_r+0xc>
 8007abc:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <__smakebuf_r+0x7c>)
 8007abe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	6020      	str	r0, [r4, #0]
 8007ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	6163      	str	r3, [r4, #20]
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	6120      	str	r0, [r4, #16]
 8007ad2:	b15b      	cbz	r3, 8007aec <__smakebuf_r+0x74>
 8007ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 fd79 	bl	80085d0 <_isatty_r>
 8007ade:	b128      	cbz	r0, 8007aec <__smakebuf_r+0x74>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	431d      	orrs	r5, r3
 8007af0:	81a5      	strh	r5, [r4, #12]
 8007af2:	e7cd      	b.n	8007a90 <__smakebuf_r+0x18>
 8007af4:	080078c9 	.word	0x080078c9

08007af8 <malloc>:
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <malloc+0xc>)
 8007afa:	4601      	mov	r1, r0
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	f000 bb45 	b.w	800818c <_malloc_r>
 8007b02:	bf00      	nop
 8007b04:	2000000c 	.word	0x2000000c

08007b08 <memcpy>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	1e43      	subs	r3, r0, #1
 8007b0c:	440a      	add	r2, r1
 8007b0e:	4291      	cmp	r1, r2
 8007b10:	d100      	bne.n	8007b14 <memcpy+0xc>
 8007b12:	bd10      	pop	{r4, pc}
 8007b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1c:	e7f7      	b.n	8007b0e <memcpy+0x6>

08007b1e <_Balloc>:
 8007b1e:	b570      	push	{r4, r5, r6, lr}
 8007b20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b22:	4604      	mov	r4, r0
 8007b24:	460e      	mov	r6, r1
 8007b26:	b93d      	cbnz	r5, 8007b38 <_Balloc+0x1a>
 8007b28:	2010      	movs	r0, #16
 8007b2a:	f7ff ffe5 	bl	8007af8 <malloc>
 8007b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8007b30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b34:	6005      	str	r5, [r0, #0]
 8007b36:	60c5      	str	r5, [r0, #12]
 8007b38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b3a:	68eb      	ldr	r3, [r5, #12]
 8007b3c:	b183      	cbz	r3, 8007b60 <_Balloc+0x42>
 8007b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b46:	b9b8      	cbnz	r0, 8007b78 <_Balloc+0x5a>
 8007b48:	2101      	movs	r1, #1
 8007b4a:	fa01 f506 	lsl.w	r5, r1, r6
 8007b4e:	1d6a      	adds	r2, r5, #5
 8007b50:	0092      	lsls	r2, r2, #2
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fabe 	bl	80080d4 <_calloc_r>
 8007b58:	b160      	cbz	r0, 8007b74 <_Balloc+0x56>
 8007b5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b5e:	e00e      	b.n	8007b7e <_Balloc+0x60>
 8007b60:	2221      	movs	r2, #33	; 0x21
 8007b62:	2104      	movs	r1, #4
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fab5 	bl	80080d4 <_calloc_r>
 8007b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6c:	60e8      	str	r0, [r5, #12]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e4      	bne.n	8007b3e <_Balloc+0x20>
 8007b74:	2000      	movs	r0, #0
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	6802      	ldr	r2, [r0, #0]
 8007b7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b84:	e7f7      	b.n	8007b76 <_Balloc+0x58>

08007b86 <_Bfree>:
 8007b86:	b570      	push	{r4, r5, r6, lr}
 8007b88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460d      	mov	r5, r1
 8007b8e:	b93c      	cbnz	r4, 8007ba0 <_Bfree+0x1a>
 8007b90:	2010      	movs	r0, #16
 8007b92:	f7ff ffb1 	bl	8007af8 <malloc>
 8007b96:	6270      	str	r0, [r6, #36]	; 0x24
 8007b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b9c:	6004      	str	r4, [r0, #0]
 8007b9e:	60c4      	str	r4, [r0, #12]
 8007ba0:	b13d      	cbz	r5, 8007bb2 <_Bfree+0x2c>
 8007ba2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ba4:	686a      	ldr	r2, [r5, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bac:	6029      	str	r1, [r5, #0]
 8007bae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}

08007bb4 <__multadd>:
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	690d      	ldr	r5, [r1, #16]
 8007bba:	461f      	mov	r7, r3
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	f101 0c14 	add.w	ip, r1, #20
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8dc 0000 	ldr.w	r0, [ip]
 8007bca:	b281      	uxth	r1, r0
 8007bcc:	fb02 7101 	mla	r1, r2, r1, r7
 8007bd0:	0c0f      	lsrs	r7, r1, #16
 8007bd2:	0c00      	lsrs	r0, r0, #16
 8007bd4:	fb02 7000 	mla	r0, r2, r0, r7
 8007bd8:	b289      	uxth	r1, r1
 8007bda:	3301      	adds	r3, #1
 8007bdc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007be0:	429d      	cmp	r5, r3
 8007be2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007be6:	f84c 1b04 	str.w	r1, [ip], #4
 8007bea:	dcec      	bgt.n	8007bc6 <__multadd+0x12>
 8007bec:	b1d7      	cbz	r7, 8007c24 <__multadd+0x70>
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dc12      	bgt.n	8007c1a <__multadd+0x66>
 8007bf4:	6861      	ldr	r1, [r4, #4]
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	3101      	adds	r1, #1
 8007bfa:	f7ff ff90 	bl	8007b1e <_Balloc>
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	3202      	adds	r2, #2
 8007c02:	f104 010c 	add.w	r1, r4, #12
 8007c06:	4680      	mov	r8, r0
 8007c08:	0092      	lsls	r2, r2, #2
 8007c0a:	300c      	adds	r0, #12
 8007c0c:	f7ff ff7c 	bl	8007b08 <memcpy>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffb7 	bl	8007b86 <_Bfree>
 8007c18:	4644      	mov	r4, r8
 8007c1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c1e:	3501      	adds	r5, #1
 8007c20:	615f      	str	r7, [r3, #20]
 8007c22:	6125      	str	r5, [r4, #16]
 8007c24:	4620      	mov	r0, r4
 8007c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c2a <__hi0bits>:
 8007c2a:	0c02      	lsrs	r2, r0, #16
 8007c2c:	0412      	lsls	r2, r2, #16
 8007c2e:	4603      	mov	r3, r0
 8007c30:	b9b2      	cbnz	r2, 8007c60 <__hi0bits+0x36>
 8007c32:	0403      	lsls	r3, r0, #16
 8007c34:	2010      	movs	r0, #16
 8007c36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c3a:	bf04      	itt	eq
 8007c3c:	021b      	lsleq	r3, r3, #8
 8007c3e:	3008      	addeq	r0, #8
 8007c40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c44:	bf04      	itt	eq
 8007c46:	011b      	lsleq	r3, r3, #4
 8007c48:	3004      	addeq	r0, #4
 8007c4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c4e:	bf04      	itt	eq
 8007c50:	009b      	lsleq	r3, r3, #2
 8007c52:	3002      	addeq	r0, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	db06      	blt.n	8007c66 <__hi0bits+0x3c>
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	d503      	bpl.n	8007c64 <__hi0bits+0x3a>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	4770      	bx	lr
 8007c60:	2000      	movs	r0, #0
 8007c62:	e7e8      	b.n	8007c36 <__hi0bits+0xc>
 8007c64:	2020      	movs	r0, #32
 8007c66:	4770      	bx	lr

08007c68 <__lo0bits>:
 8007c68:	6803      	ldr	r3, [r0, #0]
 8007c6a:	f013 0207 	ands.w	r2, r3, #7
 8007c6e:	4601      	mov	r1, r0
 8007c70:	d00b      	beq.n	8007c8a <__lo0bits+0x22>
 8007c72:	07da      	lsls	r2, r3, #31
 8007c74:	d423      	bmi.n	8007cbe <__lo0bits+0x56>
 8007c76:	0798      	lsls	r0, r3, #30
 8007c78:	bf49      	itett	mi
 8007c7a:	085b      	lsrmi	r3, r3, #1
 8007c7c:	089b      	lsrpl	r3, r3, #2
 8007c7e:	2001      	movmi	r0, #1
 8007c80:	600b      	strmi	r3, [r1, #0]
 8007c82:	bf5c      	itt	pl
 8007c84:	600b      	strpl	r3, [r1, #0]
 8007c86:	2002      	movpl	r0, #2
 8007c88:	4770      	bx	lr
 8007c8a:	b298      	uxth	r0, r3
 8007c8c:	b9a8      	cbnz	r0, 8007cba <__lo0bits+0x52>
 8007c8e:	0c1b      	lsrs	r3, r3, #16
 8007c90:	2010      	movs	r0, #16
 8007c92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c96:	bf04      	itt	eq
 8007c98:	0a1b      	lsreq	r3, r3, #8
 8007c9a:	3008      	addeq	r0, #8
 8007c9c:	071a      	lsls	r2, r3, #28
 8007c9e:	bf04      	itt	eq
 8007ca0:	091b      	lsreq	r3, r3, #4
 8007ca2:	3004      	addeq	r0, #4
 8007ca4:	079a      	lsls	r2, r3, #30
 8007ca6:	bf04      	itt	eq
 8007ca8:	089b      	lsreq	r3, r3, #2
 8007caa:	3002      	addeq	r0, #2
 8007cac:	07da      	lsls	r2, r3, #31
 8007cae:	d402      	bmi.n	8007cb6 <__lo0bits+0x4e>
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	d006      	beq.n	8007cc2 <__lo0bits+0x5a>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	600b      	str	r3, [r1, #0]
 8007cb8:	4770      	bx	lr
 8007cba:	4610      	mov	r0, r2
 8007cbc:	e7e9      	b.n	8007c92 <__lo0bits+0x2a>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	4770      	bx	lr
 8007cc2:	2020      	movs	r0, #32
 8007cc4:	4770      	bx	lr

08007cc6 <__i2b>:
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	460c      	mov	r4, r1
 8007cca:	2101      	movs	r1, #1
 8007ccc:	f7ff ff27 	bl	8007b1e <_Balloc>
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	6144      	str	r4, [r0, #20]
 8007cd4:	6102      	str	r2, [r0, #16]
 8007cd6:	bd10      	pop	{r4, pc}

08007cd8 <__multiply>:
 8007cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	4614      	mov	r4, r2
 8007cde:	690a      	ldr	r2, [r1, #16]
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	bfb8      	it	lt
 8007ce6:	460b      	movlt	r3, r1
 8007ce8:	4688      	mov	r8, r1
 8007cea:	bfbc      	itt	lt
 8007cec:	46a0      	movlt	r8, r4
 8007cee:	461c      	movlt	r4, r3
 8007cf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cf4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cf8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d00:	eb07 0609 	add.w	r6, r7, r9
 8007d04:	42b3      	cmp	r3, r6
 8007d06:	bfb8      	it	lt
 8007d08:	3101      	addlt	r1, #1
 8007d0a:	f7ff ff08 	bl	8007b1e <_Balloc>
 8007d0e:	f100 0514 	add.w	r5, r0, #20
 8007d12:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007d16:	462b      	mov	r3, r5
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4573      	cmp	r3, lr
 8007d1c:	d316      	bcc.n	8007d4c <__multiply+0x74>
 8007d1e:	f104 0214 	add.w	r2, r4, #20
 8007d22:	f108 0114 	add.w	r1, r8, #20
 8007d26:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d2a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	9b00      	ldr	r3, [sp, #0]
 8007d32:	9201      	str	r2, [sp, #4]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d80c      	bhi.n	8007d52 <__multiply+0x7a>
 8007d38:	2e00      	cmp	r6, #0
 8007d3a:	dd03      	ble.n	8007d44 <__multiply+0x6c>
 8007d3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d05d      	beq.n	8007e00 <__multiply+0x128>
 8007d44:	6106      	str	r6, [r0, #16]
 8007d46:	b003      	add	sp, #12
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	f843 2b04 	str.w	r2, [r3], #4
 8007d50:	e7e3      	b.n	8007d1a <__multiply+0x42>
 8007d52:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d56:	f1bb 0f00 	cmp.w	fp, #0
 8007d5a:	d023      	beq.n	8007da4 <__multiply+0xcc>
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	46ac      	mov	ip, r5
 8007d60:	f04f 0800 	mov.w	r8, #0
 8007d64:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d68:	f8dc a000 	ldr.w	sl, [ip]
 8007d6c:	b2a3      	uxth	r3, r4
 8007d6e:	fa1f fa8a 	uxth.w	sl, sl
 8007d72:	fb0b a303 	mla	r3, fp, r3, sl
 8007d76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d7a:	f8dc 4000 	ldr.w	r4, [ip]
 8007d7e:	4443      	add	r3, r8
 8007d80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d84:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d8c:	46e2      	mov	sl, ip
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d94:	454f      	cmp	r7, r9
 8007d96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d9a:	f84a 3b04 	str.w	r3, [sl], #4
 8007d9e:	d82b      	bhi.n	8007df8 <__multiply+0x120>
 8007da0:	f8cc 8004 	str.w	r8, [ip, #4]
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007daa:	3204      	adds	r2, #4
 8007dac:	f1ba 0f00 	cmp.w	sl, #0
 8007db0:	d020      	beq.n	8007df4 <__multiply+0x11c>
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	4689      	mov	r9, r1
 8007db6:	46a8      	mov	r8, r5
 8007db8:	f04f 0b00 	mov.w	fp, #0
 8007dbc:	f8b9 c000 	ldrh.w	ip, [r9]
 8007dc0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007dc4:	fb0a 440c 	mla	r4, sl, ip, r4
 8007dc8:	445c      	add	r4, fp
 8007dca:	46c4      	mov	ip, r8
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007dd2:	f84c 3b04 	str.w	r3, [ip], #4
 8007dd6:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dda:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007dde:	0c1b      	lsrs	r3, r3, #16
 8007de0:	fb0a b303 	mla	r3, sl, r3, fp
 8007de4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007de8:	454f      	cmp	r7, r9
 8007dea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007dee:	d805      	bhi.n	8007dfc <__multiply+0x124>
 8007df0:	f8c8 3004 	str.w	r3, [r8, #4]
 8007df4:	3504      	adds	r5, #4
 8007df6:	e79b      	b.n	8007d30 <__multiply+0x58>
 8007df8:	46d4      	mov	ip, sl
 8007dfa:	e7b3      	b.n	8007d64 <__multiply+0x8c>
 8007dfc:	46e0      	mov	r8, ip
 8007dfe:	e7dd      	b.n	8007dbc <__multiply+0xe4>
 8007e00:	3e01      	subs	r6, #1
 8007e02:	e799      	b.n	8007d38 <__multiply+0x60>

08007e04 <__pow5mult>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	4615      	mov	r5, r2
 8007e0a:	f012 0203 	ands.w	r2, r2, #3
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460f      	mov	r7, r1
 8007e12:	d007      	beq.n	8007e24 <__pow5mult+0x20>
 8007e14:	3a01      	subs	r2, #1
 8007e16:	4c21      	ldr	r4, [pc, #132]	; (8007e9c <__pow5mult+0x98>)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e1e:	f7ff fec9 	bl	8007bb4 <__multadd>
 8007e22:	4607      	mov	r7, r0
 8007e24:	10ad      	asrs	r5, r5, #2
 8007e26:	d035      	beq.n	8007e94 <__pow5mult+0x90>
 8007e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e2a:	b93c      	cbnz	r4, 8007e3c <__pow5mult+0x38>
 8007e2c:	2010      	movs	r0, #16
 8007e2e:	f7ff fe63 	bl	8007af8 <malloc>
 8007e32:	6270      	str	r0, [r6, #36]	; 0x24
 8007e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e38:	6004      	str	r4, [r0, #0]
 8007e3a:	60c4      	str	r4, [r0, #12]
 8007e3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e44:	b94c      	cbnz	r4, 8007e5a <__pow5mult+0x56>
 8007e46:	f240 2171 	movw	r1, #625	; 0x271
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff ff3b 	bl	8007cc6 <__i2b>
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e56:	4604      	mov	r4, r0
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	f04f 0800 	mov.w	r8, #0
 8007e5e:	07eb      	lsls	r3, r5, #31
 8007e60:	d50a      	bpl.n	8007e78 <__pow5mult+0x74>
 8007e62:	4639      	mov	r1, r7
 8007e64:	4622      	mov	r2, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff ff36 	bl	8007cd8 <__multiply>
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	4681      	mov	r9, r0
 8007e70:	4630      	mov	r0, r6
 8007e72:	f7ff fe88 	bl	8007b86 <_Bfree>
 8007e76:	464f      	mov	r7, r9
 8007e78:	106d      	asrs	r5, r5, #1
 8007e7a:	d00b      	beq.n	8007e94 <__pow5mult+0x90>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	b938      	cbnz	r0, 8007e90 <__pow5mult+0x8c>
 8007e80:	4622      	mov	r2, r4
 8007e82:	4621      	mov	r1, r4
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7ff ff27 	bl	8007cd8 <__multiply>
 8007e8a:	6020      	str	r0, [r4, #0]
 8007e8c:	f8c0 8000 	str.w	r8, [r0]
 8007e90:	4604      	mov	r4, r0
 8007e92:	e7e4      	b.n	8007e5e <__pow5mult+0x5a>
 8007e94:	4638      	mov	r0, r7
 8007e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9a:	bf00      	nop
 8007e9c:	080088d8 	.word	0x080088d8

08007ea0 <__lshift>:
 8007ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	6849      	ldr	r1, [r1, #4]
 8007eae:	eb0a 0903 	add.w	r9, sl, r3
 8007eb2:	68a3      	ldr	r3, [r4, #8]
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	4616      	mov	r6, r2
 8007eb8:	f109 0501 	add.w	r5, r9, #1
 8007ebc:	42ab      	cmp	r3, r5
 8007ebe:	db32      	blt.n	8007f26 <__lshift+0x86>
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f7ff fe2c 	bl	8007b1e <_Balloc>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4680      	mov	r8, r0
 8007eca:	f100 0114 	add.w	r1, r0, #20
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4553      	cmp	r3, sl
 8007ed2:	db2b      	blt.n	8007f2c <__lshift+0x8c>
 8007ed4:	6920      	ldr	r0, [r4, #16]
 8007ed6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eda:	f104 0314 	add.w	r3, r4, #20
 8007ede:	f016 021f 	ands.w	r2, r6, #31
 8007ee2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ee6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007eea:	d025      	beq.n	8007f38 <__lshift+0x98>
 8007eec:	f1c2 0e20 	rsb	lr, r2, #32
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	681e      	ldr	r6, [r3, #0]
 8007ef4:	468a      	mov	sl, r1
 8007ef6:	4096      	lsls	r6, r2
 8007ef8:	4330      	orrs	r0, r6
 8007efa:	f84a 0b04 	str.w	r0, [sl], #4
 8007efe:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f02:	459c      	cmp	ip, r3
 8007f04:	fa20 f00e 	lsr.w	r0, r0, lr
 8007f08:	d814      	bhi.n	8007f34 <__lshift+0x94>
 8007f0a:	6048      	str	r0, [r1, #4]
 8007f0c:	b108      	cbz	r0, 8007f12 <__lshift+0x72>
 8007f0e:	f109 0502 	add.w	r5, r9, #2
 8007f12:	3d01      	subs	r5, #1
 8007f14:	4638      	mov	r0, r7
 8007f16:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	f7ff fe33 	bl	8007b86 <_Bfree>
 8007f20:	4640      	mov	r0, r8
 8007f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f26:	3101      	adds	r1, #1
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	e7c7      	b.n	8007ebc <__lshift+0x1c>
 8007f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f30:	3301      	adds	r3, #1
 8007f32:	e7cd      	b.n	8007ed0 <__lshift+0x30>
 8007f34:	4651      	mov	r1, sl
 8007f36:	e7dc      	b.n	8007ef2 <__lshift+0x52>
 8007f38:	3904      	subs	r1, #4
 8007f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f42:	459c      	cmp	ip, r3
 8007f44:	d8f9      	bhi.n	8007f3a <__lshift+0x9a>
 8007f46:	e7e4      	b.n	8007f12 <__lshift+0x72>

08007f48 <__mcmp>:
 8007f48:	6903      	ldr	r3, [r0, #16]
 8007f4a:	690a      	ldr	r2, [r1, #16]
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	b530      	push	{r4, r5, lr}
 8007f50:	d10c      	bne.n	8007f6c <__mcmp+0x24>
 8007f52:	0092      	lsls	r2, r2, #2
 8007f54:	3014      	adds	r0, #20
 8007f56:	3114      	adds	r1, #20
 8007f58:	1884      	adds	r4, r0, r2
 8007f5a:	4411      	add	r1, r2
 8007f5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f64:	4295      	cmp	r5, r2
 8007f66:	d003      	beq.n	8007f70 <__mcmp+0x28>
 8007f68:	d305      	bcc.n	8007f76 <__mcmp+0x2e>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd30      	pop	{r4, r5, pc}
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	d3f3      	bcc.n	8007f5c <__mcmp+0x14>
 8007f74:	e7fa      	b.n	8007f6c <__mcmp+0x24>
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7a:	e7f7      	b.n	8007f6c <__mcmp+0x24>

08007f7c <__mdiff>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	460d      	mov	r5, r1
 8007f82:	4607      	mov	r7, r0
 8007f84:	4611      	mov	r1, r2
 8007f86:	4628      	mov	r0, r5
 8007f88:	4614      	mov	r4, r2
 8007f8a:	f7ff ffdd 	bl	8007f48 <__mcmp>
 8007f8e:	1e06      	subs	r6, r0, #0
 8007f90:	d108      	bne.n	8007fa4 <__mdiff+0x28>
 8007f92:	4631      	mov	r1, r6
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff fdc2 	bl	8007b1e <_Balloc>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa4:	bfa4      	itt	ge
 8007fa6:	4623      	movge	r3, r4
 8007fa8:	462c      	movge	r4, r5
 8007faa:	4638      	mov	r0, r7
 8007fac:	6861      	ldr	r1, [r4, #4]
 8007fae:	bfa6      	itte	ge
 8007fb0:	461d      	movge	r5, r3
 8007fb2:	2600      	movge	r6, #0
 8007fb4:	2601      	movlt	r6, #1
 8007fb6:	f7ff fdb2 	bl	8007b1e <_Balloc>
 8007fba:	692b      	ldr	r3, [r5, #16]
 8007fbc:	60c6      	str	r6, [r0, #12]
 8007fbe:	6926      	ldr	r6, [r4, #16]
 8007fc0:	f105 0914 	add.w	r9, r5, #20
 8007fc4:	f104 0214 	add.w	r2, r4, #20
 8007fc8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fcc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fd0:	f100 0514 	add.w	r5, r0, #20
 8007fd4:	f04f 0e00 	mov.w	lr, #0
 8007fd8:	f852 ab04 	ldr.w	sl, [r2], #4
 8007fdc:	f859 4b04 	ldr.w	r4, [r9], #4
 8007fe0:	fa1e f18a 	uxtah	r1, lr, sl
 8007fe4:	b2a3      	uxth	r3, r4
 8007fe6:	1ac9      	subs	r1, r1, r3
 8007fe8:	0c23      	lsrs	r3, r4, #16
 8007fea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007fee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ff2:	b289      	uxth	r1, r1
 8007ff4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007ff8:	45c8      	cmp	r8, r9
 8007ffa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007ffe:	4694      	mov	ip, r2
 8008000:	f845 3b04 	str.w	r3, [r5], #4
 8008004:	d8e8      	bhi.n	8007fd8 <__mdiff+0x5c>
 8008006:	45bc      	cmp	ip, r7
 8008008:	d304      	bcc.n	8008014 <__mdiff+0x98>
 800800a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800800e:	b183      	cbz	r3, 8008032 <__mdiff+0xb6>
 8008010:	6106      	str	r6, [r0, #16]
 8008012:	e7c5      	b.n	8007fa0 <__mdiff+0x24>
 8008014:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008018:	fa1e f381 	uxtah	r3, lr, r1
 800801c:	141a      	asrs	r2, r3, #16
 800801e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008022:	b29b      	uxth	r3, r3
 8008024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008028:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800802c:	f845 3b04 	str.w	r3, [r5], #4
 8008030:	e7e9      	b.n	8008006 <__mdiff+0x8a>
 8008032:	3e01      	subs	r6, #1
 8008034:	e7e9      	b.n	800800a <__mdiff+0x8e>

08008036 <__d2b>:
 8008036:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	2101      	movs	r1, #1
 800803e:	ec59 8b10 	vmov	r8, r9, d0
 8008042:	4615      	mov	r5, r2
 8008044:	f7ff fd6b 	bl	8007b1e <_Balloc>
 8008048:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800804c:	4607      	mov	r7, r0
 800804e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008052:	bb34      	cbnz	r4, 80080a2 <__d2b+0x6c>
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	f1b8 0300 	subs.w	r3, r8, #0
 800805a:	d027      	beq.n	80080ac <__d2b+0x76>
 800805c:	a802      	add	r0, sp, #8
 800805e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008062:	f7ff fe01 	bl	8007c68 <__lo0bits>
 8008066:	9900      	ldr	r1, [sp, #0]
 8008068:	b1f0      	cbz	r0, 80080a8 <__d2b+0x72>
 800806a:	9a01      	ldr	r2, [sp, #4]
 800806c:	f1c0 0320 	rsb	r3, r0, #32
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	430b      	orrs	r3, r1
 8008076:	40c2      	lsrs	r2, r0
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	9201      	str	r2, [sp, #4]
 800807c:	9b01      	ldr	r3, [sp, #4]
 800807e:	61bb      	str	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf14      	ite	ne
 8008084:	2102      	movne	r1, #2
 8008086:	2101      	moveq	r1, #1
 8008088:	6139      	str	r1, [r7, #16]
 800808a:	b1c4      	cbz	r4, 80080be <__d2b+0x88>
 800808c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008090:	4404      	add	r4, r0
 8008092:	6034      	str	r4, [r6, #0]
 8008094:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008098:	6028      	str	r0, [r5, #0]
 800809a:	4638      	mov	r0, r7
 800809c:	b003      	add	sp, #12
 800809e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080a6:	e7d5      	b.n	8008054 <__d2b+0x1e>
 80080a8:	6179      	str	r1, [r7, #20]
 80080aa:	e7e7      	b.n	800807c <__d2b+0x46>
 80080ac:	a801      	add	r0, sp, #4
 80080ae:	f7ff fddb 	bl	8007c68 <__lo0bits>
 80080b2:	9b01      	ldr	r3, [sp, #4]
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	2101      	movs	r1, #1
 80080b8:	6139      	str	r1, [r7, #16]
 80080ba:	3020      	adds	r0, #32
 80080bc:	e7e5      	b.n	800808a <__d2b+0x54>
 80080be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080c6:	6030      	str	r0, [r6, #0]
 80080c8:	6918      	ldr	r0, [r3, #16]
 80080ca:	f7ff fdae 	bl	8007c2a <__hi0bits>
 80080ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080d2:	e7e1      	b.n	8008098 <__d2b+0x62>

080080d4 <_calloc_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	fb02 f401 	mul.w	r4, r2, r1
 80080da:	4621      	mov	r1, r4
 80080dc:	f000 f856 	bl	800818c <_malloc_r>
 80080e0:	4605      	mov	r5, r0
 80080e2:	b118      	cbz	r0, 80080ec <_calloc_r+0x18>
 80080e4:	4622      	mov	r2, r4
 80080e6:	2100      	movs	r1, #0
 80080e8:	f7fd fe80 	bl	8005dec <memset>
 80080ec:	4628      	mov	r0, r5
 80080ee:	bd38      	pop	{r3, r4, r5, pc}

080080f0 <_free_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4605      	mov	r5, r0
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d045      	beq.n	8008184 <_free_r+0x94>
 80080f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fc:	1f0c      	subs	r4, r1, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfb8      	it	lt
 8008102:	18e4      	addlt	r4, r4, r3
 8008104:	f000 fa98 	bl	8008638 <__malloc_lock>
 8008108:	4a1f      	ldr	r2, [pc, #124]	; (8008188 <_free_r+0x98>)
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	4610      	mov	r0, r2
 800810e:	b933      	cbnz	r3, 800811e <_free_r+0x2e>
 8008110:	6063      	str	r3, [r4, #4]
 8008112:	6014      	str	r4, [r2, #0]
 8008114:	4628      	mov	r0, r5
 8008116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800811a:	f000 ba8e 	b.w	800863a <__malloc_unlock>
 800811e:	42a3      	cmp	r3, r4
 8008120:	d90c      	bls.n	800813c <_free_r+0x4c>
 8008122:	6821      	ldr	r1, [r4, #0]
 8008124:	1862      	adds	r2, r4, r1
 8008126:	4293      	cmp	r3, r2
 8008128:	bf04      	itt	eq
 800812a:	681a      	ldreq	r2, [r3, #0]
 800812c:	685b      	ldreq	r3, [r3, #4]
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	bf04      	itt	eq
 8008132:	1852      	addeq	r2, r2, r1
 8008134:	6022      	streq	r2, [r4, #0]
 8008136:	6004      	str	r4, [r0, #0]
 8008138:	e7ec      	b.n	8008114 <_free_r+0x24>
 800813a:	4613      	mov	r3, r2
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	b10a      	cbz	r2, 8008144 <_free_r+0x54>
 8008140:	42a2      	cmp	r2, r4
 8008142:	d9fa      	bls.n	800813a <_free_r+0x4a>
 8008144:	6819      	ldr	r1, [r3, #0]
 8008146:	1858      	adds	r0, r3, r1
 8008148:	42a0      	cmp	r0, r4
 800814a:	d10b      	bne.n	8008164 <_free_r+0x74>
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	4401      	add	r1, r0
 8008150:	1858      	adds	r0, r3, r1
 8008152:	4282      	cmp	r2, r0
 8008154:	6019      	str	r1, [r3, #0]
 8008156:	d1dd      	bne.n	8008114 <_free_r+0x24>
 8008158:	6810      	ldr	r0, [r2, #0]
 800815a:	6852      	ldr	r2, [r2, #4]
 800815c:	605a      	str	r2, [r3, #4]
 800815e:	4401      	add	r1, r0
 8008160:	6019      	str	r1, [r3, #0]
 8008162:	e7d7      	b.n	8008114 <_free_r+0x24>
 8008164:	d902      	bls.n	800816c <_free_r+0x7c>
 8008166:	230c      	movs	r3, #12
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	e7d3      	b.n	8008114 <_free_r+0x24>
 800816c:	6820      	ldr	r0, [r4, #0]
 800816e:	1821      	adds	r1, r4, r0
 8008170:	428a      	cmp	r2, r1
 8008172:	bf04      	itt	eq
 8008174:	6811      	ldreq	r1, [r2, #0]
 8008176:	6852      	ldreq	r2, [r2, #4]
 8008178:	6062      	str	r2, [r4, #4]
 800817a:	bf04      	itt	eq
 800817c:	1809      	addeq	r1, r1, r0
 800817e:	6021      	streq	r1, [r4, #0]
 8008180:	605c      	str	r4, [r3, #4]
 8008182:	e7c7      	b.n	8008114 <_free_r+0x24>
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	bf00      	nop
 8008188:	200001fc 	.word	0x200001fc

0800818c <_malloc_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	1ccd      	adds	r5, r1, #3
 8008190:	f025 0503 	bic.w	r5, r5, #3
 8008194:	3508      	adds	r5, #8
 8008196:	2d0c      	cmp	r5, #12
 8008198:	bf38      	it	cc
 800819a:	250c      	movcc	r5, #12
 800819c:	2d00      	cmp	r5, #0
 800819e:	4606      	mov	r6, r0
 80081a0:	db01      	blt.n	80081a6 <_malloc_r+0x1a>
 80081a2:	42a9      	cmp	r1, r5
 80081a4:	d903      	bls.n	80081ae <_malloc_r+0x22>
 80081a6:	230c      	movs	r3, #12
 80081a8:	6033      	str	r3, [r6, #0]
 80081aa:	2000      	movs	r0, #0
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	f000 fa43 	bl	8008638 <__malloc_lock>
 80081b2:	4a21      	ldr	r2, [pc, #132]	; (8008238 <_malloc_r+0xac>)
 80081b4:	6814      	ldr	r4, [r2, #0]
 80081b6:	4621      	mov	r1, r4
 80081b8:	b991      	cbnz	r1, 80081e0 <_malloc_r+0x54>
 80081ba:	4c20      	ldr	r4, [pc, #128]	; (800823c <_malloc_r+0xb0>)
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	b91b      	cbnz	r3, 80081c8 <_malloc_r+0x3c>
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f97d 	bl	80084c0 <_sbrk_r>
 80081c6:	6020      	str	r0, [r4, #0]
 80081c8:	4629      	mov	r1, r5
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 f978 	bl	80084c0 <_sbrk_r>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d124      	bne.n	800821e <_malloc_r+0x92>
 80081d4:	230c      	movs	r3, #12
 80081d6:	6033      	str	r3, [r6, #0]
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 fa2e 	bl	800863a <__malloc_unlock>
 80081de:	e7e4      	b.n	80081aa <_malloc_r+0x1e>
 80081e0:	680b      	ldr	r3, [r1, #0]
 80081e2:	1b5b      	subs	r3, r3, r5
 80081e4:	d418      	bmi.n	8008218 <_malloc_r+0x8c>
 80081e6:	2b0b      	cmp	r3, #11
 80081e8:	d90f      	bls.n	800820a <_malloc_r+0x7e>
 80081ea:	600b      	str	r3, [r1, #0]
 80081ec:	50cd      	str	r5, [r1, r3]
 80081ee:	18cc      	adds	r4, r1, r3
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 fa22 	bl	800863a <__malloc_unlock>
 80081f6:	f104 000b 	add.w	r0, r4, #11
 80081fa:	1d23      	adds	r3, r4, #4
 80081fc:	f020 0007 	bic.w	r0, r0, #7
 8008200:	1ac3      	subs	r3, r0, r3
 8008202:	d0d3      	beq.n	80081ac <_malloc_r+0x20>
 8008204:	425a      	negs	r2, r3
 8008206:	50e2      	str	r2, [r4, r3]
 8008208:	e7d0      	b.n	80081ac <_malloc_r+0x20>
 800820a:	428c      	cmp	r4, r1
 800820c:	684b      	ldr	r3, [r1, #4]
 800820e:	bf16      	itet	ne
 8008210:	6063      	strne	r3, [r4, #4]
 8008212:	6013      	streq	r3, [r2, #0]
 8008214:	460c      	movne	r4, r1
 8008216:	e7eb      	b.n	80081f0 <_malloc_r+0x64>
 8008218:	460c      	mov	r4, r1
 800821a:	6849      	ldr	r1, [r1, #4]
 800821c:	e7cc      	b.n	80081b8 <_malloc_r+0x2c>
 800821e:	1cc4      	adds	r4, r0, #3
 8008220:	f024 0403 	bic.w	r4, r4, #3
 8008224:	42a0      	cmp	r0, r4
 8008226:	d005      	beq.n	8008234 <_malloc_r+0xa8>
 8008228:	1a21      	subs	r1, r4, r0
 800822a:	4630      	mov	r0, r6
 800822c:	f000 f948 	bl	80084c0 <_sbrk_r>
 8008230:	3001      	adds	r0, #1
 8008232:	d0cf      	beq.n	80081d4 <_malloc_r+0x48>
 8008234:	6025      	str	r5, [r4, #0]
 8008236:	e7db      	b.n	80081f0 <_malloc_r+0x64>
 8008238:	200001fc 	.word	0x200001fc
 800823c:	20000200 	.word	0x20000200

08008240 <__sfputc_r>:
 8008240:	6893      	ldr	r3, [r2, #8]
 8008242:	3b01      	subs	r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	b410      	push	{r4}
 8008248:	6093      	str	r3, [r2, #8]
 800824a:	da08      	bge.n	800825e <__sfputc_r+0x1e>
 800824c:	6994      	ldr	r4, [r2, #24]
 800824e:	42a3      	cmp	r3, r4
 8008250:	db01      	blt.n	8008256 <__sfputc_r+0x16>
 8008252:	290a      	cmp	r1, #10
 8008254:	d103      	bne.n	800825e <__sfputc_r+0x1e>
 8008256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800825a:	f7fe bb5d 	b.w	8006918 <__swbuf_r>
 800825e:	6813      	ldr	r3, [r2, #0]
 8008260:	1c58      	adds	r0, r3, #1
 8008262:	6010      	str	r0, [r2, #0]
 8008264:	7019      	strb	r1, [r3, #0]
 8008266:	4608      	mov	r0, r1
 8008268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800826c:	4770      	bx	lr

0800826e <__sfputs_r>:
 800826e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008270:	4606      	mov	r6, r0
 8008272:	460f      	mov	r7, r1
 8008274:	4614      	mov	r4, r2
 8008276:	18d5      	adds	r5, r2, r3
 8008278:	42ac      	cmp	r4, r5
 800827a:	d101      	bne.n	8008280 <__sfputs_r+0x12>
 800827c:	2000      	movs	r0, #0
 800827e:	e007      	b.n	8008290 <__sfputs_r+0x22>
 8008280:	463a      	mov	r2, r7
 8008282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ffda 	bl	8008240 <__sfputc_r>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d1f3      	bne.n	8008278 <__sfputs_r+0xa>
 8008290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008294 <_vfiprintf_r>:
 8008294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	460c      	mov	r4, r1
 800829a:	b09d      	sub	sp, #116	; 0x74
 800829c:	4617      	mov	r7, r2
 800829e:	461d      	mov	r5, r3
 80082a0:	4606      	mov	r6, r0
 80082a2:	b118      	cbz	r0, 80082ac <_vfiprintf_r+0x18>
 80082a4:	6983      	ldr	r3, [r0, #24]
 80082a6:	b90b      	cbnz	r3, 80082ac <_vfiprintf_r+0x18>
 80082a8:	f7ff fb2a 	bl	8007900 <__sinit>
 80082ac:	4b7c      	ldr	r3, [pc, #496]	; (80084a0 <_vfiprintf_r+0x20c>)
 80082ae:	429c      	cmp	r4, r3
 80082b0:	d158      	bne.n	8008364 <_vfiprintf_r+0xd0>
 80082b2:	6874      	ldr	r4, [r6, #4]
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	0718      	lsls	r0, r3, #28
 80082b8:	d55e      	bpl.n	8008378 <_vfiprintf_r+0xe4>
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05b      	beq.n	8008378 <_vfiprintf_r+0xe4>
 80082c0:	2300      	movs	r3, #0
 80082c2:	9309      	str	r3, [sp, #36]	; 0x24
 80082c4:	2320      	movs	r3, #32
 80082c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ca:	2330      	movs	r3, #48	; 0x30
 80082cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d0:	9503      	str	r5, [sp, #12]
 80082d2:	f04f 0b01 	mov.w	fp, #1
 80082d6:	46b8      	mov	r8, r7
 80082d8:	4645      	mov	r5, r8
 80082da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082de:	b10b      	cbz	r3, 80082e4 <_vfiprintf_r+0x50>
 80082e0:	2b25      	cmp	r3, #37	; 0x25
 80082e2:	d154      	bne.n	800838e <_vfiprintf_r+0xfa>
 80082e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80082e8:	d00b      	beq.n	8008302 <_vfiprintf_r+0x6e>
 80082ea:	4653      	mov	r3, sl
 80082ec:	463a      	mov	r2, r7
 80082ee:	4621      	mov	r1, r4
 80082f0:	4630      	mov	r0, r6
 80082f2:	f7ff ffbc 	bl	800826e <__sfputs_r>
 80082f6:	3001      	adds	r0, #1
 80082f8:	f000 80c2 	beq.w	8008480 <_vfiprintf_r+0x1ec>
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	4453      	add	r3, sl
 8008300:	9309      	str	r3, [sp, #36]	; 0x24
 8008302:	f898 3000 	ldrb.w	r3, [r8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80ba 	beq.w	8008480 <_vfiprintf_r+0x1ec>
 800830c:	2300      	movs	r3, #0
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	9307      	str	r3, [sp, #28]
 800831a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800831e:	931a      	str	r3, [sp, #104]	; 0x68
 8008320:	46a8      	mov	r8, r5
 8008322:	2205      	movs	r2, #5
 8008324:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008328:	485e      	ldr	r0, [pc, #376]	; (80084a4 <_vfiprintf_r+0x210>)
 800832a:	f7f7 ff59 	bl	80001e0 <memchr>
 800832e:	9b04      	ldr	r3, [sp, #16]
 8008330:	bb78      	cbnz	r0, 8008392 <_vfiprintf_r+0xfe>
 8008332:	06d9      	lsls	r1, r3, #27
 8008334:	bf44      	itt	mi
 8008336:	2220      	movmi	r2, #32
 8008338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800833c:	071a      	lsls	r2, r3, #28
 800833e:	bf44      	itt	mi
 8008340:	222b      	movmi	r2, #43	; 0x2b
 8008342:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008346:	782a      	ldrb	r2, [r5, #0]
 8008348:	2a2a      	cmp	r2, #42	; 0x2a
 800834a:	d02a      	beq.n	80083a2 <_vfiprintf_r+0x10e>
 800834c:	9a07      	ldr	r2, [sp, #28]
 800834e:	46a8      	mov	r8, r5
 8008350:	2000      	movs	r0, #0
 8008352:	250a      	movs	r5, #10
 8008354:	4641      	mov	r1, r8
 8008356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800835a:	3b30      	subs	r3, #48	; 0x30
 800835c:	2b09      	cmp	r3, #9
 800835e:	d969      	bls.n	8008434 <_vfiprintf_r+0x1a0>
 8008360:	b360      	cbz	r0, 80083bc <_vfiprintf_r+0x128>
 8008362:	e024      	b.n	80083ae <_vfiprintf_r+0x11a>
 8008364:	4b50      	ldr	r3, [pc, #320]	; (80084a8 <_vfiprintf_r+0x214>)
 8008366:	429c      	cmp	r4, r3
 8008368:	d101      	bne.n	800836e <_vfiprintf_r+0xda>
 800836a:	68b4      	ldr	r4, [r6, #8]
 800836c:	e7a2      	b.n	80082b4 <_vfiprintf_r+0x20>
 800836e:	4b4f      	ldr	r3, [pc, #316]	; (80084ac <_vfiprintf_r+0x218>)
 8008370:	429c      	cmp	r4, r3
 8008372:	bf08      	it	eq
 8008374:	68f4      	ldreq	r4, [r6, #12]
 8008376:	e79d      	b.n	80082b4 <_vfiprintf_r+0x20>
 8008378:	4621      	mov	r1, r4
 800837a:	4630      	mov	r0, r6
 800837c:	f7fe fb1e 	bl	80069bc <__swsetup_r>
 8008380:	2800      	cmp	r0, #0
 8008382:	d09d      	beq.n	80082c0 <_vfiprintf_r+0x2c>
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	b01d      	add	sp, #116	; 0x74
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	46a8      	mov	r8, r5
 8008390:	e7a2      	b.n	80082d8 <_vfiprintf_r+0x44>
 8008392:	4a44      	ldr	r2, [pc, #272]	; (80084a4 <_vfiprintf_r+0x210>)
 8008394:	1a80      	subs	r0, r0, r2
 8008396:	fa0b f000 	lsl.w	r0, fp, r0
 800839a:	4318      	orrs	r0, r3
 800839c:	9004      	str	r0, [sp, #16]
 800839e:	4645      	mov	r5, r8
 80083a0:	e7be      	b.n	8008320 <_vfiprintf_r+0x8c>
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	1d11      	adds	r1, r2, #4
 80083a6:	6812      	ldr	r2, [r2, #0]
 80083a8:	9103      	str	r1, [sp, #12]
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	db01      	blt.n	80083b2 <_vfiprintf_r+0x11e>
 80083ae:	9207      	str	r2, [sp, #28]
 80083b0:	e004      	b.n	80083bc <_vfiprintf_r+0x128>
 80083b2:	4252      	negs	r2, r2
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	9207      	str	r2, [sp, #28]
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	f898 3000 	ldrb.w	r3, [r8]
 80083c0:	2b2e      	cmp	r3, #46	; 0x2e
 80083c2:	d10e      	bne.n	80083e2 <_vfiprintf_r+0x14e>
 80083c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80083c8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ca:	d138      	bne.n	800843e <_vfiprintf_r+0x1aa>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	1d1a      	adds	r2, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	9203      	str	r2, [sp, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfb8      	it	lt
 80083d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083dc:	f108 0802 	add.w	r8, r8, #2
 80083e0:	9305      	str	r3, [sp, #20]
 80083e2:	4d33      	ldr	r5, [pc, #204]	; (80084b0 <_vfiprintf_r+0x21c>)
 80083e4:	f898 1000 	ldrb.w	r1, [r8]
 80083e8:	2203      	movs	r2, #3
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7f7 fef8 	bl	80001e0 <memchr>
 80083f0:	b140      	cbz	r0, 8008404 <_vfiprintf_r+0x170>
 80083f2:	2340      	movs	r3, #64	; 0x40
 80083f4:	1b40      	subs	r0, r0, r5
 80083f6:	fa03 f000 	lsl.w	r0, r3, r0
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	4303      	orrs	r3, r0
 80083fe:	f108 0801 	add.w	r8, r8, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	f898 1000 	ldrb.w	r1, [r8]
 8008408:	482a      	ldr	r0, [pc, #168]	; (80084b4 <_vfiprintf_r+0x220>)
 800840a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800840e:	2206      	movs	r2, #6
 8008410:	f108 0701 	add.w	r7, r8, #1
 8008414:	f7f7 fee4 	bl	80001e0 <memchr>
 8008418:	2800      	cmp	r0, #0
 800841a:	d037      	beq.n	800848c <_vfiprintf_r+0x1f8>
 800841c:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <_vfiprintf_r+0x224>)
 800841e:	bb1b      	cbnz	r3, 8008468 <_vfiprintf_r+0x1d4>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	3307      	adds	r3, #7
 8008424:	f023 0307 	bic.w	r3, r3, #7
 8008428:	3308      	adds	r3, #8
 800842a:	9303      	str	r3, [sp, #12]
 800842c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842e:	444b      	add	r3, r9
 8008430:	9309      	str	r3, [sp, #36]	; 0x24
 8008432:	e750      	b.n	80082d6 <_vfiprintf_r+0x42>
 8008434:	fb05 3202 	mla	r2, r5, r2, r3
 8008438:	2001      	movs	r0, #1
 800843a:	4688      	mov	r8, r1
 800843c:	e78a      	b.n	8008354 <_vfiprintf_r+0xc0>
 800843e:	2300      	movs	r3, #0
 8008440:	f108 0801 	add.w	r8, r8, #1
 8008444:	9305      	str	r3, [sp, #20]
 8008446:	4619      	mov	r1, r3
 8008448:	250a      	movs	r5, #10
 800844a:	4640      	mov	r0, r8
 800844c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008450:	3a30      	subs	r2, #48	; 0x30
 8008452:	2a09      	cmp	r2, #9
 8008454:	d903      	bls.n	800845e <_vfiprintf_r+0x1ca>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0c3      	beq.n	80083e2 <_vfiprintf_r+0x14e>
 800845a:	9105      	str	r1, [sp, #20]
 800845c:	e7c1      	b.n	80083e2 <_vfiprintf_r+0x14e>
 800845e:	fb05 2101 	mla	r1, r5, r1, r2
 8008462:	2301      	movs	r3, #1
 8008464:	4680      	mov	r8, r0
 8008466:	e7f0      	b.n	800844a <_vfiprintf_r+0x1b6>
 8008468:	ab03      	add	r3, sp, #12
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	4622      	mov	r2, r4
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <_vfiprintf_r+0x228>)
 8008470:	a904      	add	r1, sp, #16
 8008472:	4630      	mov	r0, r6
 8008474:	f7fd fd56 	bl	8005f24 <_printf_float>
 8008478:	f1b0 3fff 	cmp.w	r0, #4294967295
 800847c:	4681      	mov	r9, r0
 800847e:	d1d5      	bne.n	800842c <_vfiprintf_r+0x198>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	065b      	lsls	r3, r3, #25
 8008484:	f53f af7e 	bmi.w	8008384 <_vfiprintf_r+0xf0>
 8008488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800848a:	e77d      	b.n	8008388 <_vfiprintf_r+0xf4>
 800848c:	ab03      	add	r3, sp, #12
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	4622      	mov	r2, r4
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <_vfiprintf_r+0x228>)
 8008494:	a904      	add	r1, sp, #16
 8008496:	4630      	mov	r0, r6
 8008498:	f7fd fffa 	bl	8006490 <_printf_i>
 800849c:	e7ec      	b.n	8008478 <_vfiprintf_r+0x1e4>
 800849e:	bf00      	nop
 80084a0:	080087a8 	.word	0x080087a8
 80084a4:	080088e4 	.word	0x080088e4
 80084a8:	080087c8 	.word	0x080087c8
 80084ac:	08008788 	.word	0x08008788
 80084b0:	080088ea 	.word	0x080088ea
 80084b4:	080088ee 	.word	0x080088ee
 80084b8:	08005f25 	.word	0x08005f25
 80084bc:	0800826f 	.word	0x0800826f

080084c0 <_sbrk_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4c06      	ldr	r4, [pc, #24]	; (80084dc <_sbrk_r+0x1c>)
 80084c4:	2300      	movs	r3, #0
 80084c6:	4605      	mov	r5, r0
 80084c8:	4608      	mov	r0, r1
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	f7f9 f884 	bl	80015d8 <_sbrk>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_sbrk_r+0x1a>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	b103      	cbz	r3, 80084da <_sbrk_r+0x1a>
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	200004a4 	.word	0x200004a4

080084e0 <__sread>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	460c      	mov	r4, r1
 80084e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e8:	f000 f8a8 	bl	800863c <_read_r>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	bfab      	itete	ge
 80084f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084f2:	89a3      	ldrhlt	r3, [r4, #12]
 80084f4:	181b      	addge	r3, r3, r0
 80084f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084fa:	bfac      	ite	ge
 80084fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084fe:	81a3      	strhlt	r3, [r4, #12]
 8008500:	bd10      	pop	{r4, pc}

08008502 <__swrite>:
 8008502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	461f      	mov	r7, r3
 8008508:	898b      	ldrh	r3, [r1, #12]
 800850a:	05db      	lsls	r3, r3, #23
 800850c:	4605      	mov	r5, r0
 800850e:	460c      	mov	r4, r1
 8008510:	4616      	mov	r6, r2
 8008512:	d505      	bpl.n	8008520 <__swrite+0x1e>
 8008514:	2302      	movs	r3, #2
 8008516:	2200      	movs	r2, #0
 8008518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851c:	f000 f868 	bl	80085f0 <_lseek_r>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	4628      	mov	r0, r5
 8008532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	f000 b817 	b.w	8008568 <_write_r>

0800853a <__sseek>:
 800853a:	b510      	push	{r4, lr}
 800853c:	460c      	mov	r4, r1
 800853e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008542:	f000 f855 	bl	80085f0 <_lseek_r>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	bf15      	itete	ne
 800854c:	6560      	strne	r0, [r4, #84]	; 0x54
 800854e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008556:	81a3      	strheq	r3, [r4, #12]
 8008558:	bf18      	it	ne
 800855a:	81a3      	strhne	r3, [r4, #12]
 800855c:	bd10      	pop	{r4, pc}

0800855e <__sclose>:
 800855e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008562:	f000 b813 	b.w	800858c <_close_r>
	...

08008568 <_write_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4c07      	ldr	r4, [pc, #28]	; (8008588 <_write_r+0x20>)
 800856c:	4605      	mov	r5, r0
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	6022      	str	r2, [r4, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7f8 ffdd 	bl	8001536 <_write>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_write_r+0x1e>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	b103      	cbz	r3, 8008586 <_write_r+0x1e>
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	200004a4 	.word	0x200004a4

0800858c <_close_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4c06      	ldr	r4, [pc, #24]	; (80085a8 <_close_r+0x1c>)
 8008590:	2300      	movs	r3, #0
 8008592:	4605      	mov	r5, r0
 8008594:	4608      	mov	r0, r1
 8008596:	6023      	str	r3, [r4, #0]
 8008598:	f7f8 ffe9 	bl	800156e <_close>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_close_r+0x1a>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_close_r+0x1a>
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	200004a4 	.word	0x200004a4

080085ac <_fstat_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4c07      	ldr	r4, [pc, #28]	; (80085cc <_fstat_r+0x20>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4605      	mov	r5, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	f7f8 ffe4 	bl	8001586 <_fstat>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_fstat_r+0x1c>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_fstat_r+0x1c>
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	200004a4 	.word	0x200004a4

080085d0 <_isatty_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4c06      	ldr	r4, [pc, #24]	; (80085ec <_isatty_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4605      	mov	r5, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	f7f8 ffe3 	bl	80015a6 <_isatty>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_isatty_r+0x1a>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_isatty_r+0x1a>
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	200004a4 	.word	0x200004a4

080085f0 <_lseek_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4c07      	ldr	r4, [pc, #28]	; (8008610 <_lseek_r+0x20>)
 80085f4:	4605      	mov	r5, r0
 80085f6:	4608      	mov	r0, r1
 80085f8:	4611      	mov	r1, r2
 80085fa:	2200      	movs	r2, #0
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	f7f8 ffdc 	bl	80015bc <_lseek>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_lseek_r+0x1e>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	b103      	cbz	r3, 800860e <_lseek_r+0x1e>
 800860c:	602b      	str	r3, [r5, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	200004a4 	.word	0x200004a4

08008614 <__ascii_mbtowc>:
 8008614:	b082      	sub	sp, #8
 8008616:	b901      	cbnz	r1, 800861a <__ascii_mbtowc+0x6>
 8008618:	a901      	add	r1, sp, #4
 800861a:	b142      	cbz	r2, 800862e <__ascii_mbtowc+0x1a>
 800861c:	b14b      	cbz	r3, 8008632 <__ascii_mbtowc+0x1e>
 800861e:	7813      	ldrb	r3, [r2, #0]
 8008620:	600b      	str	r3, [r1, #0]
 8008622:	7812      	ldrb	r2, [r2, #0]
 8008624:	1c10      	adds	r0, r2, #0
 8008626:	bf18      	it	ne
 8008628:	2001      	movne	r0, #1
 800862a:	b002      	add	sp, #8
 800862c:	4770      	bx	lr
 800862e:	4610      	mov	r0, r2
 8008630:	e7fb      	b.n	800862a <__ascii_mbtowc+0x16>
 8008632:	f06f 0001 	mvn.w	r0, #1
 8008636:	e7f8      	b.n	800862a <__ascii_mbtowc+0x16>

08008638 <__malloc_lock>:
 8008638:	4770      	bx	lr

0800863a <__malloc_unlock>:
 800863a:	4770      	bx	lr

0800863c <_read_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4c07      	ldr	r4, [pc, #28]	; (800865c <_read_r+0x20>)
 8008640:	4605      	mov	r5, r0
 8008642:	4608      	mov	r0, r1
 8008644:	4611      	mov	r1, r2
 8008646:	2200      	movs	r2, #0
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	f7f8 ff56 	bl	80014fc <_read>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d102      	bne.n	800865a <_read_r+0x1e>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	b103      	cbz	r3, 800865a <_read_r+0x1e>
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	200004a4 	.word	0x200004a4

08008660 <__ascii_wctomb>:
 8008660:	b149      	cbz	r1, 8008676 <__ascii_wctomb+0x16>
 8008662:	2aff      	cmp	r2, #255	; 0xff
 8008664:	bf85      	ittet	hi
 8008666:	238a      	movhi	r3, #138	; 0x8a
 8008668:	6003      	strhi	r3, [r0, #0]
 800866a:	700a      	strbls	r2, [r1, #0]
 800866c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008670:	bf98      	it	ls
 8008672:	2001      	movls	r0, #1
 8008674:	4770      	bx	lr
 8008676:	4608      	mov	r0, r1
 8008678:	4770      	bx	lr
	...

0800867c <_init>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	bf00      	nop
 8008680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	469e      	mov	lr, r3
 8008686:	4770      	bx	lr

08008688 <_fini>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr
