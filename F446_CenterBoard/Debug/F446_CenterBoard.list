
F446_CenterBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08009540  08009540  00019540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009814  08009814  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800981c  0800981c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800981c  0800981c  0001981c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001e0  08009a04  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08009a04  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b51  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b8c  00000000  00000000  00039d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003ed40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000269e1  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000136ab  00000000  00000000  00066969  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8f94  00000000  00000000  0007a014  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152fa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000609c  00000000  00000000  00153024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009528 	.word	0x08009528

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	08009528 	.word	0x08009528

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <DFPlayer_init>:

#include "DFPlayer_Mini_mp3.h"

uint8_t cmd[8];

void DFPlayer_init(UART_HandleTypeDef *handler){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	huart_DFPlayer = handler;
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <DFPlayer_init+0x1c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000208 	.word	0x20000208

08000f00 <DFPlayer_setvolume>:

void DFPlayer_setvolume(uint8_t volume){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[8];
	cmd[0]= 0x7E;
 8000f0a:	237e      	movs	r3, #126	; 0x7e
 8000f0c:	723b      	strb	r3, [r7, #8]
	cmd[1]= 0xFF;
 8000f0e:	23ff      	movs	r3, #255	; 0xff
 8000f10:	727b      	strb	r3, [r7, #9]
	cmd[2]=	0x06;
 8000f12:	2306      	movs	r3, #6
 8000f14:	72bb      	strb	r3, [r7, #10]
	cmd[3]=	0x06;
 8000f16:	2306      	movs	r3, #6
 8000f18:	72fb      	strb	r3, [r7, #11]
	cmd[4]=	0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	733b      	strb	r3, [r7, #12]
	cmd[5]=	0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	737b      	strb	r3, [r7, #13]
	cmd[6]=	volume;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	73bb      	strb	r3, [r7, #14]
	cmd[7]=	0xEF;
 8000f26:	23ef      	movs	r3, #239	; 0xef
 8000f28:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart_DFPlayer,(uint8_t*)cmd,8,0xF);
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <DFPlayer_setvolume+0x44>)
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	f107 0108 	add.w	r1, r7, #8
 8000f32:	230f      	movs	r3, #15
 8000f34:	2208      	movs	r2, #8
 8000f36:	f004 ffaa 	bl	8005e8e <HAL_UART_Transmit>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000208 	.word	0x20000208

08000f48 <DFPlayer_playmp3>:
void DFPlayer_playmp3(uint8_t playnumber){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[8];
	cmd[0]= 0x7E;
 8000f52:	237e      	movs	r3, #126	; 0x7e
 8000f54:	723b      	strb	r3, [r7, #8]
	cmd[1]= 0xFF;
 8000f56:	23ff      	movs	r3, #255	; 0xff
 8000f58:	727b      	strb	r3, [r7, #9]
	cmd[2]=	0x06;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	72bb      	strb	r3, [r7, #10]
	cmd[3]=	0x0F;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	72fb      	strb	r3, [r7, #11]
	cmd[4]=	0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	733b      	strb	r3, [r7, #12]
	cmd[5]=	1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	737b      	strb	r3, [r7, #13]
	cmd[6]=	playnumber;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	73bb      	strb	r3, [r7, #14]
	cmd[7]=	0xEF;
 8000f6e:	23ef      	movs	r3, #239	; 0xef
 8000f70:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart_DFPlayer,(uint8_t*)cmd,8,0xF);
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <DFPlayer_playmp3+0x44>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f107 0108 	add.w	r1, r7, #8
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	f004 ff86 	bl	8005e8e <HAL_UART_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000208 	.word	0x20000208

08000f90 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_CAN1_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f9c:	2206      	movs	r2, #6
 8000f9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fae:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000fb2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fe0:	f002 f84c 	bl	800307c <HAL_CAN_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000fea:	f001 fb67 	bl	80026bc <Error_Handler>
  }

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000214 	.word	0x20000214
 8000ff8:	40006400 	.word	0x40006400

08000ffc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <HAL_CAN_MspInit+0xb4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d144      	bne.n	80010a8 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_CAN_MspInit+0xb8>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_CAN_MspInit+0xb8>)
 8001028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_CAN_MspInit+0xb8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_CAN_MspInit+0xb8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_CAN_MspInit+0xb8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_CAN_MspInit+0xb8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001056:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001068:	2309      	movs	r3, #9
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <HAL_CAN_MspInit+0xbc>)
 8001074:	f003 fc6c 	bl	8004950 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	2013      	movs	r0, #19
 800107e:	f002 ff6a 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001082:	2013      	movs	r0, #19
 8001084:	f002 ff83 	bl	8003f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2102      	movs	r1, #2
 800108c:	2014      	movs	r0, #20
 800108e:	f002 ff62 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001092:	2014      	movs	r0, #20
 8001094:	f002 ff7b 	bl	8003f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2103      	movs	r1, #3
 800109c:	2015      	movs	r0, #21
 800109e:	f002 ff5a 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010a2:	2015      	movs	r0, #21
 80010a4:	f002 ff73 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40006400 	.word	0x40006400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <can_init>:
 */

#include "can_ibis.h"


void can_init(CAN_HandleTypeDef* handler){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	  CAN_ibis = handler;
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <can_init+0x78>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
	  CAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.FilterBank = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterMode =  CAN_FILTERMODE_IDMASK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
	  sFilterConfig.FilterIdHigh = 0x000;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIdLow = 0x000;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterMaskIdHigh = 0x000;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterMaskIdLow = 0x000;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterActivation = ENABLE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  sFilterConfig.SlaveStartFilterBank = 14;
 80010ee:	230e      	movs	r3, #14
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){  Error_Handler();}
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	480f      	ldr	r0, [pc, #60]	; (8001138 <can_init+0x7c>)
 80010fa:	f002 f8bb 	bl	8003274 <HAL_CAN_ConfigFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <can_init+0x4c>
 8001104:	f001 fada 	bl	80026bc <Error_Handler>
	  if (HAL_CAN_Start(&hcan1) != HAL_OK){ Error_Handler();}
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <can_init+0x7c>)
 800110a:	f002 f993 	bl	8003434 <HAL_CAN_Start>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <can_init+0x5c>
 8001114:	f001 fad2 	bl	80026bc <Error_Handler>
	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {Error_Handler(); }
 8001118:	2102      	movs	r1, #2
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <can_init+0x7c>)
 800111c:	f002 fbf0 	bl	8003900 <HAL_CAN_ActivateNotification>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <can_init+0x6e>
 8001126:	f001 fac9 	bl	80026bc <Error_Handler>
}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000298 	.word	0x20000298
 8001138:	20000214 	.word	0x20000214

0800113c <can_send>:

void can_send(int id, uint8_t senddata[8]){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]

	TxHeader.StdId = id;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <can_send+0x68>)
 800114a:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <can_send+0x68>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <can_send+0x68>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <can_send+0x68>)
 800115a:	2208      	movs	r2, #8
 800115c:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <can_send+0x68>)
 8001160:	2200      	movs	r2, #0
 8001162:	751a      	strb	r2, [r3, #20]

	/* Request transmission */
	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,senddata, &TxMailbox) != HAL_OK)
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <can_send+0x6c>)
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	490e      	ldr	r1, [pc, #56]	; (80011a4 <can_send+0x68>)
 800116a:	4810      	ldr	r0, [pc, #64]	; (80011ac <can_send+0x70>)
 800116c:	f002 f9a6 	bl	80034bc <HAL_CAN_AddTxMessage>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <can_send+0x4a>
	{
		Error_Handler();
 8001176:	f001 faa1 	bl	80026bc <Error_Handler>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 800117a:	e004      	b.n	8001186 <can_send+0x4a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,1);
 800117c:	2201      	movs	r2, #1
 800117e:	2102      	movs	r1, #2
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <can_send+0x74>)
 8001182:	f003 fd77 	bl	8004c74 <HAL_GPIO_WritePin>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <can_send+0x70>)
 8001188:	f002 fa73 	bl	8003672 <HAL_CAN_GetTxMailboxesFreeLevel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b03      	cmp	r3, #3
 8001190:	d1f4      	bne.n	800117c <can_send+0x40>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,0);
 8001192:	2200      	movs	r2, #0
 8001194:	2102      	movs	r1, #2
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <can_send+0x74>)
 8001198:	f003 fd6c 	bl	8004c74 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000034c 	.word	0x2000034c
 80011a8:	20000308 	.word	0x20000308
 80011ac:	20000214 	.word	0x20000214
 80011b0:	40020800 	.word	0x40020800

080011b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DAC_Init+0x60>)
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <MX_DAC_Init+0x64>)
 80011c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <MX_DAC_Init+0x60>)
 80011ca:	f002 fefa 	bl	8003fc2 <HAL_DAC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d4:	f001 fa72 	bl	80026bc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <MX_DAC_Init+0x60>)
 80011e8:	f002 ffc7 	bl	800417a <HAL_DAC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011f2:	f001 fa63 	bl	80026bc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2210      	movs	r2, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_DAC_Init+0x60>)
 80011fe:	f002 ffbc 	bl	800417a <HAL_DAC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001208:	f001 fa58 	bl	80026bc <Error_Handler>
  }

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000398 	.word	0x20000398
 8001218:	40007400 	.word	0x40007400

0800121c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_DAC_MspInit+0x8c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12f      	bne.n	800129e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_DAC_MspInit+0x90>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_DAC_MspInit+0x90>)
 8001248:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_DAC_MspInit+0x90>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_DAC_MspInit+0x90>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_DAC_MspInit+0x90>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_DAC_MspInit+0x90>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001276:	2330      	movs	r3, #48	; 0x30
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <HAL_DAC_MspInit+0x94>)
 800128a:	f003 fb61 	bl	8004950 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2104      	movs	r1, #4
 8001292:	2036      	movs	r0, #54	; 0x36
 8001294:	f002 fe5f 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f002 fe78 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40007400 	.word	0x40007400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_DMA_Init+0x4c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <MX_DMA_Init+0x4c>)
 80012c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_DMA_Init+0x4c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 9, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2109      	movs	r1, #9
 80012da:	2010      	movs	r0, #16
 80012dc:	f002 fe3b 	bl	8003f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012e0:	2010      	movs	r0, #16
 80012e2:	f002 fe54 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 10, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	210a      	movs	r1, #10
 80012ea:	2011      	movs	r0, #17
 80012ec:	f002 fe33 	bl	8003f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012f0:	2011      	movs	r0, #17
 80012f2:	f002 fe4c 	bl	8003f8e <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a36      	ldr	r2, [pc, #216]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <MX_GPIO_Init+0xf8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MX_GPIO_Init+0xf8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a28      	ldr	r2, [pc, #160]	; (80013fc <MX_GPIO_Init+0xf8>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a21      	ldr	r2, [pc, #132]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_GPIO_Init+0xf8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2103      	movs	r1, #3
 800138e:	481c      	ldr	r0, [pc, #112]	; (8001400 <MX_GPIO_Init+0xfc>)
 8001390:	f003 fc70 	bl	8004c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <MX_GPIO_Init+0x100>)
 800139c:	f003 fc6a 	bl	8004c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013a0:	2303      	movs	r3, #3
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <MX_GPIO_Init+0xfc>)
 80013b8:	f003 faca 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <MX_GPIO_Init+0x100>)
 80013d6:	f003 fabb 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MX_GPIO_Init+0x104>)
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_GPIO_Init+0xfc>)
 80013ee:	f003 faaf 	bl	8004950 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020400 	.word	0x40020400
 8001408:	10110000 	.word	0x10110000

0800140c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_IWDG_Init+0x2c>)
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <MX_IWDG_Init+0x30>)
 8001414:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_IWDG_Init+0x2c>)
 8001418:	2202      	movs	r2, #2
 800141a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_IWDG_Init+0x2c>)
 800141e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001422:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_IWDG_Init+0x2c>)
 8001426:	f003 fc59 	bl	8004cdc <HAL_IWDG_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001430:	f001 f944 	bl	80026bc <Error_Handler>
  }

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200003ac 	.word	0x200003ac
 800143c:	40003000 	.word	0x40003000

08001440 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 800144a:	1df9      	adds	r1, r7, #7
 800144c:	2301      	movs	r3, #1
 800144e:	2201      	movs	r2, #1
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <__io_putchar+0x20>)
 8001452:	f004 fd1c 	bl	8005e8e <HAL_UART_Transmit>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000590 	.word	0x20000590

08001464 <map>:
uint8_t Craction_in,Break_in,Flont_Lamp_in,Key_in,EX_in,Winker_L_in,Winker_R_in;
uint8_t state,cnt,connect,EN,EN_rear,EN_front,mode;
float slot,speed,slot_data;
float rol,pit,pit_acc,rol_acc,pit_temp,rol_temp;

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	ed87 0a05 	vstr	s0, [r7, #20]
 800146e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001472:	ed87 1a03 	vstr	s2, [r7, #12]
 8001476:	edc7 1a02 	vstr	s3, [r7, #8]
 800147a:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800147e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001482:	edd7 7a04 	vldr	s15, [r7, #16]
 8001486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148a:	edd7 6a01 	vldr	s13, [r7, #4]
 800148e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001492:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001496:	ee67 6a27 	vmul.f32	s13, s14, s15
 800149a:	ed97 7a03 	vldr	s14, [r7, #12]
 800149e:	edd7 7a04 	vldr	s15, [r7, #16]
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f001 fd46 	bl	8002f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 f888 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff ff1a 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d0:	f7ff fef0 	bl	80012b4 <MX_DMA_Init>
  MX_CAN1_Init();
 80014d4:	f7ff fd5c 	bl	8000f90 <MX_CAN1_Init>
  MX_DAC_Init();
 80014d8:	f7ff fe6c 	bl	80011b4 <MX_DAC_Init>
  MX_SPI2_Init();
 80014dc:	f001 f912 	bl	8002704 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80014e0:	f001 fb3c 	bl	8002b5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014e4:	f001 fb64 	bl	8002bb0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014e8:	f001 fb8c 	bl	8002c04 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80014ec:	f001 fad8 	bl	8002aa0 <MX_TIM6_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  EN_rear=0;
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <main+0xf0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
  EN_front=0;
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <main+0xf4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
  setbuf(stdout, NULL);
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <main+0xf8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fdf0 	bl	80070ea <setbuf>
  can_init(&hcan1);
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <main+0xfc>)
 800150c:	f7ff fdd6 	bl	80010bc <can_init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001510:	2100      	movs	r1, #0
 8001512:	482b      	ldr	r0, [pc, #172]	; (80015c0 <main+0x100>)
 8001514:	f002 fd77 	bl	8004006 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001518:	2110      	movs	r1, #16
 800151a:	4829      	ldr	r0, [pc, #164]	; (80015c0 <main+0x100>)
 800151c:	f002 fd73 	bl	8004006 <HAL_DAC_Start>
  HAL_UART_Init(&huart2);
 8001520:	4828      	ldr	r0, [pc, #160]	; (80015c4 <main+0x104>)
 8001522:	f004 fc67 	bl	8005df4 <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_ESP32,Rxbufsize_from_ESP32);
 8001526:	2205      	movs	r2, #5
 8001528:	4927      	ldr	r1, [pc, #156]	; (80015c8 <main+0x108>)
 800152a:	4826      	ldr	r0, [pc, #152]	; (80015c4 <main+0x104>)
 800152c:	f004 fd48 	bl	8005fc0 <HAL_UART_Receive_DMA>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4822      	ldr	r0, [pc, #136]	; (80015c0 <main+0x100>)
 8001538:	f002 fe6c 	bl	8004214 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800153c:	2300      	movs	r3, #0
 800153e:	2200      	movs	r2, #0
 8001540:	2110      	movs	r1, #16
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <main+0x100>)
 8001544:	f002 fe66 	bl	8004214 <HAL_DAC_SetValue>
  //mpu9250_init(&hspi2);

  while(1){
      	if(EN_front==1 && EN_rear==1){break;}
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <main+0xf4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d103      	bne.n	8001558 <main+0x98>
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <main+0xf0>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d008      	beq.n	800156a <main+0xaa>
      	if(HAL_GetTick()>1000){
 8001558:	f001 fd62 	bl	8003020 <HAL_GetTick>
 800155c:	4603      	mov	r3, r0
 800155e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001562:	d9f1      	bls.n	8001548 <main+0x88>
      		Error_Handler();
 8001564:	f001 f8aa 	bl	80026bc <Error_Handler>
      	if(EN_front==1 && EN_rear==1){break;}
 8001568:	e7ee      	b.n	8001548 <main+0x88>
 800156a:	bf00      	nop
      	}
      }

  connect=0;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <main+0x10c>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
  DFPlayer_init(&huart3);
 8001572:	4817      	ldr	r0, [pc, #92]	; (80015d0 <main+0x110>)
 8001574:	f7ff fcb4 	bl	8000ee0 <DFPlayer_init>
  HAL_Delay(500);
 8001578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157c:	f001 fd5c 	bl	8003038 <HAL_Delay>
  DFPlayer_setvolume(0x40);
 8001580:	2040      	movs	r0, #64	; 0x40
 8001582:	f7ff fcbd 	bl	8000f00 <DFPlayer_setvolume>
  HAL_Delay(500);
 8001586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158a:	f001 fd55 	bl	8003038 <HAL_Delay>
  DFPlayer_playmp3(2);
 800158e:	2002      	movs	r0, #2
 8001590:	f7ff fcda 	bl	8000f48 <DFPlayer_playmp3>
  HAL_Delay(3000);
 8001594:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001598:	f001 fd4e 	bl	8003038 <HAL_Delay>

  MX_IWDG_Init();
 800159c:	f7ff ff36 	bl	800140c <MX_IWDG_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <main+0x114>)
 80015a2:	f004 f9a2 	bl	80058ea <HAL_TIM_Base_Start_IT>
	  printf(" Rol=%7.4f",rol);
	  printf(" Pit=%7.4f",pit);*/

	  //printf("\r\n");

	  HAL_IWDG_Refresh(&hiwdg);
 80015a6:	480c      	ldr	r0, [pc, #48]	; (80015d8 <main+0x118>)
 80015a8:	f003 fbd1 	bl	8004d4e <HAL_IWDG_Refresh>
 80015ac:	e7fb      	b.n	80015a6 <main+0xe6>
 80015ae:	bf00      	nop
 80015b0:	200003e5 	.word	0x200003e5
 80015b4:	200003dc 	.word	0x200003dc
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	20000214 	.word	0x20000214
 80015c0:	20000398 	.word	0x20000398
 80015c4:	200005d0 	.word	0x200005d0
 80015c8:	20000270 	.word	0x20000270
 80015cc:	200003ba 	.word	0x200003ba
 80015d0:	200004f0 	.word	0x200004f0
 80015d4:	20000450 	.word	0x20000450
 80015d8:	200003ac 	.word	0x200003ac

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	; 0x50
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	2234      	movs	r2, #52	; 0x34
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fa2c 	bl	8006a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <SystemClock_Config+0xd8>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <SystemClock_Config+0xd8>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <SystemClock_Config+0xd8>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800161c:	2300      	movs	r3, #0
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <SystemClock_Config+0xdc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001628:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <SystemClock_Config+0xdc>)
 800162a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <SystemClock_Config+0xdc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800163c:	2309      	movs	r3, #9
 800163e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001646:	2301      	movs	r3, #1
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164a:	2302      	movs	r3, #2
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001654:	2304      	movs	r3, #4
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001660:	2302      	movs	r3, #2
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001664:	2302      	movs	r3, #2
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fe53 	bl	8005318 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001678:	f001 f820 	bl	80026bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001680:	2303      	movs	r3, #3
 8001682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800168c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	2104      	movs	r1, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fb82 	bl	8004da4 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80016a6:	f001 f809 	bl	80026bc <Error_Handler>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	; 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80016c6:	4a47      	ldr	r2, [pc, #284]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4847      	ldr	r0, [pc, #284]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80016cc:	f002 f806 	bl	80036dc <HAL_CAN_GetRxMessage>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  	{
	    		Error_Handler();
 80016d6:	f000 fff1 	bl	80026bc <Error_Handler>
	  	}
	switch (RxHeader.StdId){
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e2:	d01a      	beq.n	800171a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 80016e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e8:	d802      	bhi.n	80016f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 80016ee:	e06e      	b.n	80017ce <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
 80016f0:	f240 1201 	movw	r2, #257	; 0x101
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d055      	beq.n	80017a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
 80016f8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80016fc:	d05b      	beq.n	80017b6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 80016fe:	e066      	b.n	80017ce <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
	//error
	case 0x000:
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001700:	2300      	movs	r3, #0
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	4839      	ldr	r0, [pc, #228]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8001708:	f002 fd84 	bl	8004214 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800170c:	2300      	movs	r3, #0
 800170e:	2200      	movs	r2, #0
 8001710:	2110      	movs	r1, #16
 8001712:	4836      	ldr	r0, [pc, #216]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8001714:	f002 fd7e 	bl	8004214 <HAL_DAC_SetValue>
		break;
 8001718:	e059      	b.n	80017ce <HAL_CAN_RxFifo0MsgPendingCallback+0x112>

	//state button
	case 0x100:
		state=RxData[0];
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001720:	701a      	strb	r2, [r3, #0]
		Winker_L_in=  (state & 0b01000000)>>6;
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	119b      	asrs	r3, r3, #6
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001732:	701a      	strb	r2, [r3, #0]
		Winker_R_in=  (state & 0b00100000)>>5;
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	115b      	asrs	r3, r3, #5
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001744:	701a      	strb	r2, [r3, #0]
		Craction_in=  (state & 0b00010000)>>4;
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	111b      	asrs	r3, r3, #4
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8001756:	701a      	strb	r2, [r3, #0]
		Break_in=     (state & 0b00001000)>>3;
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	10db      	asrs	r3, r3, #3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8001768:	701a      	strb	r2, [r3, #0]
		Flont_Lamp_in=(state & 0b00000100)>>2;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	109b      	asrs	r3, r3, #2
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 800177a:	701a      	strb	r2, [r3, #0]
		Key_in=       (state & 0b00000010)>>1;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	105b      	asrs	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 800178c:	701a      	strb	r2, [r3, #0]
		EX_in=        (state & 0b00000001);
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 800179a:	701a      	strb	r2, [r3, #0]

		EN_front=1;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
		break;
 80017a2:	e014      	b.n	80017ce <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
	//slot
	case 0x101:
		slot=uchar4_to_float(RxData);
 80017a4:	480e      	ldr	r0, [pc, #56]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80017a6:	f001 fb91 	bl	8002ecc <uchar4_to_float>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
		break;
 80017b4:	e00b      	b.n	80017ce <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
	//speed
	case 0x102:
		speed=uchar4_to_float(RxData);
 80017b6:	480a      	ldr	r0, [pc, #40]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80017b8:	f001 fb88 	bl	8002ecc <uchar4_to_float>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
		EN_rear=1;
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
		break;
 80017cc:	bf00      	nop

	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80017ce:	2102      	movs	r1, #2
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 80017d2:	f003 fa68 	bl	8004ca6 <HAL_GPIO_TogglePin>

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000324 	.word	0x20000324
 80017e4:	20000364 	.word	0x20000364
 80017e8:	20000214 	.word	0x20000214
 80017ec:	20000398 	.word	0x20000398
 80017f0:	200003d5 	.word	0x200003d5
 80017f4:	200003f1 	.word	0x200003f1
 80017f8:	200003f0 	.word	0x200003f0
 80017fc:	200003e6 	.word	0x200003e6
 8001800:	200003bc 	.word	0x200003bc
 8001804:	200003b8 	.word	0x200003b8
 8001808:	200003c4 	.word	0x200003c4
 800180c:	200003b9 	.word	0x200003b9
 8001810:	200003dc 	.word	0x200003dc
 8001814:	200003f4 	.word	0x200003f4
 8001818:	200003e8 	.word	0x200003e8
 800181c:	200003e5 	.word	0x200003e5
 8001820:	40020800 	.word	0x40020800
 8001824:	00000000 	.word	0x00000000

08001828 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	//mode=data_from_esp32[0];
	//mode=1;

	if(mode==1){
 8001830:	4bcb      	ldr	r3, [pc, #812]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d114      	bne.n	8001862 <HAL_TIM_PeriodElapsedCallback+0x3a>
		slot_data=map(slot,0.650,3.265,0.9,3.5);//norm}
 8001838:	4bca      	ldr	r3, [pc, #808]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eeb0 2a0c 	vmov.f32	s4, #12	; 0x40600000  3.5
 8001842:	eddf 1ac9 	vldr	s3, [pc, #804]	; 8001b68 <HAL_TIM_PeriodElapsedCallback+0x340>
 8001846:	ed9f 1ac9 	vldr	s2, [pc, #804]	; 8001b6c <HAL_TIM_PeriodElapsedCallback+0x344>
 800184a:	eddf 0ac9 	vldr	s1, [pc, #804]	; 8001b70 <HAL_TIM_PeriodElapsedCallback+0x348>
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	f7ff fe07 	bl	8001464 <map>
 8001856:	eef0 7a40 	vmov.f32	s15, s0
 800185a:	4bc6      	ldr	r3, [pc, #792]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800185c:	edc3 7a00 	vstr	s15, [r3]
 8001860:	e234      	b.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==2){
 8001862:	4bbf      	ldr	r3, [pc, #764]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d114      	bne.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x6c>
		slot_data=map(slot,0.650,3.265,0.9,2.5);//eco
 800186a:	4bbe      	ldr	r3, [pc, #760]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	eeb0 2a04 	vmov.f32	s4, #4	; 0x40200000  2.5
 8001874:	eddf 1abc 	vldr	s3, [pc, #752]	; 8001b68 <HAL_TIM_PeriodElapsedCallback+0x340>
 8001878:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8001b6c <HAL_TIM_PeriodElapsedCallback+0x344>
 800187c:	eddf 0abc 	vldr	s1, [pc, #752]	; 8001b70 <HAL_TIM_PeriodElapsedCallback+0x348>
 8001880:	eeb0 0a67 	vmov.f32	s0, s15
 8001884:	f7ff fdee 	bl	8001464 <map>
 8001888:	eef0 7a40 	vmov.f32	s15, s0
 800188c:	4bb9      	ldr	r3, [pc, #740]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800188e:	edc3 7a00 	vstr	s15, [r3]
 8001892:	e21b      	b.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==3){
 8001894:	4bb2      	ldr	r3, [pc, #712]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d156      	bne.n	800194a <HAL_TIM_PeriodElapsedCallback+0x122>
		slot_data=powf(slot,3)*0.3713+powf(slot,2)*(-1.8438)+slot*(3.1176)-0.4461;//snow
 800189c:	4bb1      	ldr	r3, [pc, #708]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	f007 f937 	bl	8008b1c <powf>
 80018ae:	ee10 3a10 	vmov	r3, s0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe14 	bl	80004e0 <__aeabi_f2d>
 80018b8:	a38f      	add	r3, pc, #572	; (adr r3, 8001af8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fe67 	bl	8000590 <__aeabi_dmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	4625      	mov	r5, r4
 80018c8:	461c      	mov	r4, r3
 80018ca:	4ba6      	ldr	r3, [pc, #664]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f007 f920 	bl	8008b1c <powf>
 80018dc:	ee10 3a10 	vmov	r3, s0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fdfd 	bl	80004e0 <__aeabi_f2d>
 80018e6:	a386      	add	r3, pc, #536	; (adr r3, 8001b00 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fe50 	bl	8000590 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fc94 	bl	8000224 <__adddf3>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	4625      	mov	r5, r4
 8001902:	461c      	mov	r4, r3
 8001904:	4b97      	ldr	r3, [pc, #604]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fde9 	bl	80004e0 <__aeabi_f2d>
 800190e:	a37e      	add	r3, pc, #504	; (adr r3, 8001b08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe3c 	bl	8000590 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fc80 	bl	8000224 <__adddf3>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	a378      	add	r3, pc, #480	; (adr r3, 8001b10 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fc75 	bl	8000220 <__aeabi_dsub>
 8001936:	4603      	mov	r3, r0
 8001938:	460c      	mov	r4, r1
 800193a:	4618      	mov	r0, r3
 800193c:	4621      	mov	r1, r4
 800193e:	f7ff f8ff 	bl	8000b40 <__aeabi_d2f>
 8001942:	4602      	mov	r2, r0
 8001944:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e1c0      	b.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==4){
 800194a:	4b85      	ldr	r3, [pc, #532]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b04      	cmp	r3, #4
 8001950:	d173      	bne.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x212>
		slot_data=powf(slot,4)*(0.3067)+powf(slot,3)*(-2.4464)+powf(slot,2)*(6.3486)+slot*(-4.8485)+1.9619;//sport
 8001952:	4b84      	ldr	r3, [pc, #528]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	f007 f8dc 	bl	8008b1c <powf>
 8001964:	ee10 3a10 	vmov	r3, s0
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdb9 	bl	80004e0 <__aeabi_f2d>
 800196e:	a36a      	add	r3, pc, #424	; (adr r3, 8001b18 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fe0c 	bl	8000590 <__aeabi_dmul>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4625      	mov	r5, r4
 800197e:	461c      	mov	r4, r3
 8001980:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	f007 f8c5 	bl	8008b1c <powf>
 8001992:	ee10 3a10 	vmov	r3, s0
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fda2 	bl	80004e0 <__aeabi_f2d>
 800199c:	a360      	add	r3, pc, #384	; (adr r3, 8001b20 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fdf5 	bl	8000590 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4620      	mov	r0, r4
 80019ac:	4629      	mov	r1, r5
 80019ae:	f7fe fc39 	bl	8000224 <__adddf3>
 80019b2:	4603      	mov	r3, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	4625      	mov	r5, r4
 80019b8:	461c      	mov	r4, r3
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019c4:	eeb0 0a67 	vmov.f32	s0, s15
 80019c8:	f007 f8a8 	bl	8008b1c <powf>
 80019cc:	ee10 3a10 	vmov	r3, s0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd85 	bl	80004e0 <__aeabi_f2d>
 80019d6:	a354      	add	r3, pc, #336	; (adr r3, 8001b28 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fdd8 	bl	8000590 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fc1c 	bl	8000224 <__adddf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4625      	mov	r5, r4
 80019f2:	461c      	mov	r4, r3
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd71 	bl	80004e0 <__aeabi_f2d>
 80019fe:	a34c      	add	r3, pc, #304	; (adr r3, 8001b30 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fdc4 	bl	8000590 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	4629      	mov	r1, r5
 8001a10:	f7fe fc08 	bl	8000224 <__adddf3>
 8001a14:	4603      	mov	r3, r0
 8001a16:	460c      	mov	r4, r1
 8001a18:	4618      	mov	r0, r3
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	a346      	add	r3, pc, #280	; (adr r3, 8001b38 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fbff 	bl	8000224 <__adddf3>
 8001a26:	4603      	mov	r3, r0
 8001a28:	460c      	mov	r4, r1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	f7ff f887 	bl	8000b40 <__aeabi_d2f>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e148      	b.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==5){
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	f040 809a 	bne.w	8001b78 <HAL_TIM_PeriodElapsedCallback+0x350>
		slot_data=powf(slot,3)*0.1732+powf(slot,2)*(-1.6682)+slot*(5.2727)-1.9883;//sport plus
 8001a44:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a52:	f007 f863 	bl	8008b1c <powf>
 8001a56:	ee10 3a10 	vmov	r3, s0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd40 	bl	80004e0 <__aeabi_f2d>
 8001a60:	a337      	add	r3, pc, #220	; (adr r3, 8001b40 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fd93 	bl	8000590 <__aeabi_dmul>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4625      	mov	r5, r4
 8001a70:	461c      	mov	r4, r3
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	f007 f84c 	bl	8008b1c <powf>
 8001a84:	ee10 3a10 	vmov	r3, s0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd29 	bl	80004e0 <__aeabi_f2d>
 8001a8e:	a32e      	add	r3, pc, #184	; (adr r3, 8001b48 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fd7c 	bl	8000590 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7fe fbc0 	bl	8000224 <__adddf3>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4625      	mov	r5, r4
 8001aaa:	461c      	mov	r4, r3
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd15 	bl	80004e0 <__aeabi_f2d>
 8001ab6:	a326      	add	r3, pc, #152	; (adr r3, 8001b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fd68 	bl	8000590 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fbac 	bl	8000224 <__adddf3>
 8001acc:	4603      	mov	r3, r0
 8001ace:	460c      	mov	r4, r1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	a320      	add	r3, pc, #128	; (adr r3, 8001b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fba1 	bl	8000220 <__aeabi_dsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	f7ff f82b 	bl	8000b40 <__aeabi_d2f>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e0ec      	b.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0x4a4>
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	13404ea5 	.word	0x13404ea5
 8001afc:	3fd7c361 	.word	0x3fd7c361
 8001b00:	6dc5d639 	.word	0x6dc5d639
 8001b04:	bffd8034 	.word	0xbffd8034
 8001b08:	44d013a9 	.word	0x44d013a9
 8001b0c:	4008f0d8 	.word	0x4008f0d8
 8001b10:	03afb7e9 	.word	0x03afb7e9
 8001b14:	3fdc8ce7 	.word	0x3fdc8ce7
 8001b18:	096bb98c 	.word	0x096bb98c
 8001b1c:	3fd3a0f9 	.word	0x3fd3a0f9
 8001b20:	29c779a7 	.word	0x29c779a7
 8001b24:	c003923a 	.word	0xc003923a
 8001b28:	65fd8adb 	.word	0x65fd8adb
 8001b2c:	401964f7 	.word	0x401964f7
 8001b30:	2f1a9fbe 	.word	0x2f1a9fbe
 8001b34:	c01364dd 	.word	0xc01364dd
 8001b38:	41205bc0 	.word	0x41205bc0
 8001b3c:	3fff63f1 	.word	0x3fff63f1
 8001b40:	e7d566cf 	.word	0xe7d566cf
 8001b44:	3fc62b6a 	.word	0x3fc62b6a
 8001b48:	7bb2fec5 	.word	0x7bb2fec5
 8001b4c:	bffab0f2 	.word	0xbffab0f2
 8001b50:	ab367a10 	.word	0xab367a10
 8001b54:	4015173e 	.word	0x4015173e
 8001b58:	a92a3055 	.word	0xa92a3055
 8001b5c:	3fffd013 	.word	0x3fffd013
 8001b60:	200003e4 	.word	0x200003e4
 8001b64:	200003f4 	.word	0x200003f4
 8001b68:	3f666666 	.word	0x3f666666
 8001b6c:	4050f5c3 	.word	0x4050f5c3
 8001b70:	3f266666 	.word	0x3f266666
 8001b74:	200003ec 	.word	0x200003ec
	}
	else if(mode==10){
 8001b78:	4bb3      	ldr	r3, [pc, #716]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	f040 8091 	bne.w	8001ca4 <HAL_TIM_PeriodElapsedCallback+0x47c>
		slot_data=powf(slot,5)*(0.0532)+powf(slot,4)*(-0.839)+powf(slot,3)*(4.9461)+powf(slot,2)*(-13.884)+slot*(18.813)-6.4772;//extreme
 8001b82:	4bb2      	ldr	r3, [pc, #712]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b90:	f006 ffc4 	bl	8008b1c <powf>
 8001b94:	ee10 3a10 	vmov	r3, s0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fca1 	bl	80004e0 <__aeabi_f2d>
 8001b9e:	a398      	add	r3, pc, #608	; (adr r3, 8001e00 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fcf4 	bl	8000590 <__aeabi_dmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	4625      	mov	r5, r4
 8001bae:	461c      	mov	r4, r3
 8001bb0:	4ba6      	ldr	r3, [pc, #664]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001bba:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbe:	f006 ffad 	bl	8008b1c <powf>
 8001bc2:	ee10 3a10 	vmov	r3, s0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc8a 	bl	80004e0 <__aeabi_f2d>
 8001bcc:	a38e      	add	r3, pc, #568	; (adr r3, 8001e08 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fcdd 	bl	8000590 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb21 	bl	8000224 <__adddf3>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	4625      	mov	r5, r4
 8001be8:	461c      	mov	r4, r3
 8001bea:	4b98      	ldr	r3, [pc, #608]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf8:	f006 ff90 	bl	8008b1c <powf>
 8001bfc:	ee10 3a10 	vmov	r3, s0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc6d 	bl	80004e0 <__aeabi_f2d>
 8001c06:	a382      	add	r3, pc, #520	; (adr r3, 8001e10 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fcc0 	bl	8000590 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fb04 	bl	8000224 <__adddf3>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4625      	mov	r5, r4
 8001c22:	461c      	mov	r4, r3
 8001c24:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	f006 ff73 	bl	8008b1c <powf>
 8001c36:	ee10 3a10 	vmov	r3, s0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc50 	bl	80004e0 <__aeabi_f2d>
 8001c40:	a375      	add	r3, pc, #468	; (adr r3, 8001e18 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fca3 	bl	8000590 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fae7 	bl	8000224 <__adddf3>
 8001c56:	4603      	mov	r3, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	4625      	mov	r5, r4
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc3c 	bl	80004e0 <__aeabi_f2d>
 8001c68:	a36d      	add	r3, pc, #436	; (adr r3, 8001e20 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fc8f 	bl	8000590 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4620      	mov	r0, r4
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f7fe fad3 	bl	8000224 <__adddf3>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460c      	mov	r4, r1
 8001c82:	4618      	mov	r0, r3
 8001c84:	4621      	mov	r1, r4
 8001c86:	a368      	add	r3, pc, #416	; (adr r3, 8001e28 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fac8 	bl	8000220 <__aeabi_dsub>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	4618      	mov	r0, r3
 8001c96:	4621      	mov	r1, r4
 8001c98:	f7fe ff52 	bl	8000b40 <__aeabi_d2f>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e013      	b.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else{slot_data=map(slot,0.650,3.265,0.9,2.5);//eco
 8001ca4:	4b69      	ldr	r3, [pc, #420]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	eeb0 2a04 	vmov.f32	s4, #4	; 0x40200000  2.5
 8001cae:	eddf 1a69 	vldr	s3, [pc, #420]	; 8001e54 <HAL_TIM_PeriodElapsedCallback+0x62c>
 8001cb2:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8001e58 <HAL_TIM_PeriodElapsedCallback+0x630>
 8001cb6:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001e5c <HAL_TIM_PeriodElapsedCallback+0x634>
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	f7ff fbd1 	bl	8001464 <map>
 8001cc2:	eef0 7a40 	vmov.f32	s15, s0
 8001cc6:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
	}


	if(slot_data>3.5){slot_data=3.5;}
 8001ccc:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd02      	ble.n	8001ce6 <HAL_TIM_PeriodElapsedCallback+0x4be>
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001ce2:	4a5f      	ldr	r2, [pc, #380]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001ce4:	601a      	str	r2, [r3, #0]
	if(slot_data<0.9){slot_data=0.9;}
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fbf8 	bl	80004e0 <__aeabi_f2d>
 8001cf0:	a34f      	add	r3, pc, #316	; (adr r3, 8001e30 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe febd 	bl	8000a74 <__aeabi_dcmplt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x4de>
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001d04:	601a      	str	r2, [r3, #0]

	float setvalue1=(4095.0/9.9)*slot_data;
 8001d06:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fbe8 	bl	80004e0 <__aeabi_f2d>
 8001d10:	a349      	add	r3, pc, #292	; (adr r3, 8001e38 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc3b 	bl	8000590 <__aeabi_dmul>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4621      	mov	r1, r4
 8001d22:	f7fe ff0d 	bl	8000b40 <__aeabi_d2f>
 8001d26:	4603      	mov	r3, r0
 8001d28:	617b      	str	r3, [r7, #20]
	float setvalue2=(4095.0/9.9)*slot_data;
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fbd6 	bl	80004e0 <__aeabi_f2d>
 8001d34:	a340      	add	r3, pc, #256	; (adr r3, 8001e38 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc29 	bl	8000590 <__aeabi_dmul>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460c      	mov	r4, r1
 8001d42:	4618      	mov	r0, r3
 8001d44:	4621      	mov	r1, r4
 8001d46:	f7fe fefb 	bl	8000b40 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	613b      	str	r3, [r7, #16]

	if(EN==1){
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	f040 83b8 	bne.w	80024c8 <HAL_TIM_PeriodElapsedCallback+0xca0>
		if(mode==4){//sport
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	f040 8193 	bne.w	8002088 <HAL_TIM_PeriodElapsedCallback+0x860>
			if(speed==0.0) {
 8001d62:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	f040 8080 	bne.w	8001e74 <HAL_TIM_PeriodElapsedCallback+0x64c>
				setvalue1=(4095.0/9.9)*slot_data;
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbb1 	bl	80004e0 <__aeabi_f2d>
 8001d7e:	a32e      	add	r3, pc, #184	; (adr r3, 8001e38 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc04 	bl	8000590 <__aeabi_dmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	4621      	mov	r1, r4
 8001d90:	f7fe fed6 	bl	8000b40 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.6;
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb9f 	bl	80004e0 <__aeabi_f2d>
 8001da2:	a325      	add	r3, pc, #148	; (adr r3, 8001e38 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fbf2 	bl	8000590 <__aeabi_dmul>
 8001dac:	4603      	mov	r3, r0
 8001dae:	460c      	mov	r4, r1
 8001db0:	4618      	mov	r0, r3
 8001db2:	4621      	mov	r1, r4
 8001db4:	a322      	add	r3, pc, #136	; (adr r3, 8001e40 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fbe9 	bl	8000590 <__aeabi_dmul>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	f7fe febb 	bl	8000b40 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8001dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd6:	ee17 3a90 	vmov	r3, s15
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4824      	ldr	r0, [pc, #144]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001de0:	f002 fa18 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8001de4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dec:	ee17 3a90 	vmov	r3, s15
 8001df0:	2200      	movs	r2, #0
 8001df2:	2110      	movs	r1, #16
 8001df4:	481e      	ldr	r0, [pc, #120]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001df6:	f002 fa0d 	bl	8004214 <HAL_DAC_SetValue>
 8001dfa:	e371      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
 8001dfc:	f3af 8000 	nop.w
 8001e00:	c84b5dcc 	.word	0xc84b5dcc
 8001e04:	3fab3d07 	.word	0x3fab3d07
 8001e08:	872b020c 	.word	0x872b020c
 8001e0c:	bfead916 	.word	0xbfead916
 8001e10:	703afb7f 	.word	0x703afb7f
 8001e14:	4013c8ce 	.word	0x4013c8ce
 8001e18:	a5e353f8 	.word	0xa5e353f8
 8001e1c:	c02bc49b 	.word	0xc02bc49b
 8001e20:	c49ba5e3 	.word	0xc49ba5e3
 8001e24:	4032d020 	.word	0x4032d020
 8001e28:	1de69ad4 	.word	0x1de69ad4
 8001e2c:	4019e8a7 	.word	0x4019e8a7
 8001e30:	cccccccd 	.word	0xcccccccd
 8001e34:	3feccccc 	.word	0x3feccccc
 8001e38:	8ba2e8ba 	.word	0x8ba2e8ba
 8001e3c:	4079da2e 	.word	0x4079da2e
 8001e40:	33333333 	.word	0x33333333
 8001e44:	3fe33333 	.word	0x3fe33333
 8001e48:	200003e4 	.word	0x200003e4
 8001e4c:	200003f4 	.word	0x200003f4
 8001e50:	200003ec 	.word	0x200003ec
 8001e54:	3f666666 	.word	0x3f666666
 8001e58:	4050f5c3 	.word	0x4050f5c3
 8001e5c:	3f266666 	.word	0x3f266666
 8001e60:	40600000 	.word	0x40600000
 8001e64:	3f666666 	.word	0x3f666666
 8001e68:	200003bb 	.word	0x200003bb
 8001e6c:	200003e8 	.word	0x200003e8
 8001e70:	20000398 	.word	0x20000398
			}
			else if(speed==0.01) {
 8001e74:	4bbc      	ldr	r3, [pc, #752]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb31 	bl	80004e0 <__aeabi_f2d>
 8001e7e:	a3ac      	add	r3, pc, #688	; (adr r3, 8002130 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fdec 	bl	8000a60 <__aeabi_dcmpeq>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d043      	beq.n	8001f16 <HAL_TIM_PeriodElapsedCallback+0x6ee>
				setvalue1=(4095.0/9.9)*slot_data;
 8001e8e:	4bb7      	ldr	r3, [pc, #732]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb24 	bl	80004e0 <__aeabi_f2d>
 8001e98:	a3a7      	add	r3, pc, #668	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fb77 	bl	8000590 <__aeabi_dmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f7fe fe49 	bl	8000b40 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.7;
 8001eb2:	4bae      	ldr	r3, [pc, #696]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb12 	bl	80004e0 <__aeabi_f2d>
 8001ebc:	a39e      	add	r3, pc, #632	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fb65 	bl	8000590 <__aeabi_dmul>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4621      	mov	r1, r4
 8001ece:	a39c      	add	r3, pc, #624	; (adr r3, 8002140 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fb5c 	bl	8000590 <__aeabi_dmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	4618      	mov	r0, r3
 8001ede:	4621      	mov	r1, r4
 8001ee0:	f7fe fe2e 	bl	8000b40 <__aeabi_d2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8001ee8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef0:	ee17 3a90 	vmov	r3, s15
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	489d      	ldr	r0, [pc, #628]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001efa:	f002 f98b 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8001efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 3a90 	vmov	r3, s15
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	4898      	ldr	r0, [pc, #608]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001f10:	f002 f980 	bl	8004214 <HAL_DAC_SetValue>
 8001f14:	e2e4      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
			}
			else if(speed==0.02) {
 8001f16:	4b94      	ldr	r3, [pc, #592]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fae0 	bl	80004e0 <__aeabi_f2d>
 8001f20:	a389      	add	r3, pc, #548	; (adr r3, 8002148 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	f7fe fd9b 	bl	8000a60 <__aeabi_dcmpeq>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d043      	beq.n	8001fb8 <HAL_TIM_PeriodElapsedCallback+0x790>
				setvalue1=(4095.0/9.9)*slot_data;
 8001f30:	4b8e      	ldr	r3, [pc, #568]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fad3 	bl	80004e0 <__aeabi_f2d>
 8001f3a:	a37f      	add	r3, pc, #508	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fb26 	bl	8000590 <__aeabi_dmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	f7fe fdf8 	bl	8000b40 <__aeabi_d2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.8;
 8001f54:	4b85      	ldr	r3, [pc, #532]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fac1 	bl	80004e0 <__aeabi_f2d>
 8001f5e:	a376      	add	r3, pc, #472	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe fb14 	bl	8000590 <__aeabi_dmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	4621      	mov	r1, r4
 8001f70:	a377      	add	r3, pc, #476	; (adr r3, 8002150 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb0b 	bl	8000590 <__aeabi_dmul>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4621      	mov	r1, r4
 8001f82:	f7fe fddd 	bl	8000b40 <__aeabi_d2f>
 8001f86:	4603      	mov	r3, r0
 8001f88:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8001f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f92:	ee17 3a90 	vmov	r3, s15
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4875      	ldr	r0, [pc, #468]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001f9c:	f002 f93a 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8001fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	2200      	movs	r2, #0
 8001fae:	2110      	movs	r1, #16
 8001fb0:	486f      	ldr	r0, [pc, #444]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001fb2:	f002 f92f 	bl	8004214 <HAL_DAC_SetValue>
 8001fb6:	e293      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
			}
			else if(speed==0.03) {
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fa8f 	bl	80004e0 <__aeabi_f2d>
 8001fc2:	a365      	add	r3, pc, #404	; (adr r3, 8002158 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe fd4a 	bl	8000a60 <__aeabi_dcmpeq>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d043      	beq.n	800205a <HAL_TIM_PeriodElapsedCallback+0x832>
				setvalue1=(4095.0/9.9)*slot_data;
 8001fd2:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa82 	bl	80004e0 <__aeabi_f2d>
 8001fdc:	a356      	add	r3, pc, #344	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fad5 	bl	8000590 <__aeabi_dmul>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	4618      	mov	r0, r3
 8001fec:	4621      	mov	r1, r4
 8001fee:	f7fe fda7 	bl	8000b40 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.9;
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa70 	bl	80004e0 <__aeabi_f2d>
 8002000:	a34d      	add	r3, pc, #308	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fac3 	bl	8000590 <__aeabi_dmul>
 800200a:	4603      	mov	r3, r0
 800200c:	460c      	mov	r4, r1
 800200e:	4618      	mov	r0, r3
 8002010:	4621      	mov	r1, r4
 8002012:	a353      	add	r3, pc, #332	; (adr r3, 8002160 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f7fe faba 	bl	8000590 <__aeabi_dmul>
 800201c:	4603      	mov	r3, r0
 800201e:	460c      	mov	r4, r1
 8002020:	4618      	mov	r0, r3
 8002022:	4621      	mov	r1, r4
 8002024:	f7fe fd8c 	bl	8000b40 <__aeabi_d2f>
 8002028:	4603      	mov	r3, r0
 800202a:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 800202c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002034:	ee17 3a90 	vmov	r3, s15
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	484c      	ldr	r0, [pc, #304]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800203e:	f002 f8e9 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002042:	edd7 7a04 	vldr	s15, [r7, #16]
 8002046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204a:	ee17 3a90 	vmov	r3, s15
 800204e:	2200      	movs	r2, #0
 8002050:	2110      	movs	r1, #16
 8002052:	4847      	ldr	r0, [pc, #284]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8002054:	f002 f8de 	bl	8004214 <HAL_DAC_SetValue>
 8002058:	e242      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
			}
			else {
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 800205a:	edd7 7a05 	vldr	s15, [r7, #20]
 800205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002062:	ee17 3a90 	vmov	r3, s15
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	4841      	ldr	r0, [pc, #260]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800206c:	f002 f8d2 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002070:	edd7 7a04 	vldr	s15, [r7, #16]
 8002074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002078:	ee17 3a90 	vmov	r3, s15
 800207c:	2200      	movs	r2, #0
 800207e:	2110      	movs	r1, #16
 8002080:	483b      	ldr	r0, [pc, #236]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8002082:	f002 f8c7 	bl	8004214 <HAL_DAC_SetValue>
 8002086:	e22b      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
			}
		}

		else if(mode==5){//sport plus
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b05      	cmp	r3, #5
 800208e:	f040 812c 	bne.w	80022ea <HAL_TIM_PeriodElapsedCallback+0xac2>
			if(speed==0.0) {
 8002092:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	eef5 7a40 	vcmp.f32	s15, #0.0
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d16a      	bne.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x950>
				setvalue1=(4095.0/9.9)*slot_data;
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa1a 	bl	80004e0 <__aeabi_f2d>
 80020ac:	a322      	add	r3, pc, #136	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe fa6d 	bl	8000590 <__aeabi_dmul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	460c      	mov	r4, r1
 80020ba:	4618      	mov	r0, r3
 80020bc:	4621      	mov	r1, r4
 80020be:	f7fe fd3f 	bl	8000b40 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.7;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x944>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa08 	bl	80004e0 <__aeabi_f2d>
 80020d0:	a319      	add	r3, pc, #100	; (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0x910>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fa5b 	bl	8000590 <__aeabi_dmul>
 80020da:	4603      	mov	r3, r0
 80020dc:	460c      	mov	r4, r1
 80020de:	4618      	mov	r0, r3
 80020e0:	4621      	mov	r1, r4
 80020e2:	a317      	add	r3, pc, #92	; (adr r3, 8002140 <HAL_TIM_PeriodElapsedCallback+0x918>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fa52 	bl	8000590 <__aeabi_dmul>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	4618      	mov	r0, r3
 80020f2:	4621      	mov	r1, r4
 80020f4:	f7fe fd24 	bl	8000b40 <__aeabi_d2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80020fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002104:	ee17 3a90 	vmov	r3, s15
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	4818      	ldr	r0, [pc, #96]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800210e:	f002 f881 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002112:	edd7 7a04 	vldr	s15, [r7, #16]
 8002116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211a:	ee17 3a90 	vmov	r3, s15
 800211e:	2200      	movs	r2, #0
 8002120:	2110      	movs	r1, #16
 8002122:	4813      	ldr	r0, [pc, #76]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8002124:	f002 f876 	bl	8004214 <HAL_DAC_SetValue>
 8002128:	e1da      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w
 8002130:	47ae147b 	.word	0x47ae147b
 8002134:	3f847ae1 	.word	0x3f847ae1
 8002138:	8ba2e8ba 	.word	0x8ba2e8ba
 800213c:	4079da2e 	.word	0x4079da2e
 8002140:	66666666 	.word	0x66666666
 8002144:	3fe66666 	.word	0x3fe66666
 8002148:	47ae147b 	.word	0x47ae147b
 800214c:	3f947ae1 	.word	0x3f947ae1
 8002150:	9999999a 	.word	0x9999999a
 8002154:	3fe99999 	.word	0x3fe99999
 8002158:	eb851eb8 	.word	0xeb851eb8
 800215c:	3f9eb851 	.word	0x3f9eb851
 8002160:	cccccccd 	.word	0xcccccccd
 8002164:	3feccccc 	.word	0x3feccccc
 8002168:	200003e8 	.word	0x200003e8
 800216c:	200003ec 	.word	0x200003ec
 8002170:	20000398 	.word	0x20000398
 8002174:	200003e4 	.word	0x200003e4
			}
			else if(speed==0.01) {
 8002178:	4bcf      	ldr	r3, [pc, #828]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f9af 	bl	80004e0 <__aeabi_f2d>
 8002182:	a3c3      	add	r3, pc, #780	; (adr r3, 8002490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fc6a 	bl	8000a60 <__aeabi_dcmpeq>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d043      	beq.n	800221a <HAL_TIM_PeriodElapsedCallback+0x9f2>
				setvalue1=(4095.0/9.9)*slot_data;
 8002192:	4bca      	ldr	r3, [pc, #808]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9a2 	bl	80004e0 <__aeabi_f2d>
 800219c:	a3be      	add	r3, pc, #760	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe f9f5 	bl	8000590 <__aeabi_dmul>
 80021a6:	4603      	mov	r3, r0
 80021a8:	460c      	mov	r4, r1
 80021aa:	4618      	mov	r0, r3
 80021ac:	4621      	mov	r1, r4
 80021ae:	f7fe fcc7 	bl	8000b40 <__aeabi_d2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.8;
 80021b6:	4bc1      	ldr	r3, [pc, #772]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f990 	bl	80004e0 <__aeabi_f2d>
 80021c0:	a3b5      	add	r3, pc, #724	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe f9e3 	bl	8000590 <__aeabi_dmul>
 80021ca:	4603      	mov	r3, r0
 80021cc:	460c      	mov	r4, r1
 80021ce:	4618      	mov	r0, r3
 80021d0:	4621      	mov	r1, r4
 80021d2:	a3b3      	add	r3, pc, #716	; (adr r3, 80024a0 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fe f9da 	bl	8000590 <__aeabi_dmul>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	4618      	mov	r0, r3
 80021e2:	4621      	mov	r1, r4
 80021e4:	f7fe fcac 	bl	8000b40 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80021ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f4:	ee17 3a90 	vmov	r3, s15
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	48b0      	ldr	r0, [pc, #704]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80021fe:	f002 f809 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002202:	edd7 7a04 	vldr	s15, [r7, #16]
 8002206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220a:	ee17 3a90 	vmov	r3, s15
 800220e:	2200      	movs	r2, #0
 8002210:	2110      	movs	r1, #16
 8002212:	48ab      	ldr	r0, [pc, #684]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002214:	f001 fffe 	bl	8004214 <HAL_DAC_SetValue>
 8002218:	e162      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
			}
			else if(speed==0.02) {
 800221a:	4ba7      	ldr	r3, [pc, #668]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f95e 	bl	80004e0 <__aeabi_f2d>
 8002224:	a3a0      	add	r3, pc, #640	; (adr r3, 80024a8 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fe fc19 	bl	8000a60 <__aeabi_dcmpeq>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d043      	beq.n	80022bc <HAL_TIM_PeriodElapsedCallback+0xa94>
				setvalue1=(4095.0/9.9)*slot_data;
 8002234:	4ba1      	ldr	r3, [pc, #644]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f951 	bl	80004e0 <__aeabi_f2d>
 800223e:	a396      	add	r3, pc, #600	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f9a4 	bl	8000590 <__aeabi_dmul>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	4618      	mov	r0, r3
 800224e:	4621      	mov	r1, r4
 8002250:	f7fe fc76 	bl	8000b40 <__aeabi_d2f>
 8002254:	4603      	mov	r3, r0
 8002256:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.9;
 8002258:	4b98      	ldr	r3, [pc, #608]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f93f 	bl	80004e0 <__aeabi_f2d>
 8002262:	a38d      	add	r3, pc, #564	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f992 	bl	8000590 <__aeabi_dmul>
 800226c:	4603      	mov	r3, r0
 800226e:	460c      	mov	r4, r1
 8002270:	4618      	mov	r0, r3
 8002272:	4621      	mov	r1, r4
 8002274:	a38e      	add	r3, pc, #568	; (adr r3, 80024b0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f989 	bl	8000590 <__aeabi_dmul>
 800227e:	4603      	mov	r3, r0
 8002280:	460c      	mov	r4, r1
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	f7fe fc5b 	bl	8000b40 <__aeabi_d2f>
 800228a:	4603      	mov	r3, r0
 800228c:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 800228e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002296:	ee17 3a90 	vmov	r3, s15
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	4888      	ldr	r0, [pc, #544]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80022a0:	f001 ffb8 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80022a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ac:	ee17 3a90 	vmov	r3, s15
 80022b0:	2200      	movs	r2, #0
 80022b2:	2110      	movs	r1, #16
 80022b4:	4882      	ldr	r0, [pc, #520]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80022b6:	f001 ffad 	bl	8004214 <HAL_DAC_SetValue>
 80022ba:	e111      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
			}
			else {
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80022bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c4:	ee17 3a90 	vmov	r3, s15
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	487c      	ldr	r0, [pc, #496]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80022ce:	f001 ffa1 	bl	8004214 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80022d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022da:	ee17 3a90 	vmov	r3, s15
 80022de:	2200      	movs	r2, #0
 80022e0:	2110      	movs	r1, #16
 80022e2:	4877      	ldr	r0, [pc, #476]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80022e4:	f001 ff96 	bl	8004214 <HAL_DAC_SetValue>
 80022e8:	e0fa      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
			}
		}
		else if(mode==10){//extreme
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b0a      	cmp	r3, #10
 80022f0:	f040 80b4 	bne.w	800245c <HAL_TIM_PeriodElapsedCallback+0xc34>
					if(speed==0.0) {
 80022f4:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	d143      	bne.n	800238c <HAL_TIM_PeriodElapsedCallback+0xb64>
						setvalue1=(4095.0/9.9)*slot_data*0.8;
 8002304:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f8e9 	bl	80004e0 <__aeabi_f2d>
 800230e:	a362      	add	r3, pc, #392	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe f93c 	bl	8000590 <__aeabi_dmul>
 8002318:	4603      	mov	r3, r0
 800231a:	460c      	mov	r4, r1
 800231c:	4618      	mov	r0, r3
 800231e:	4621      	mov	r1, r4
 8002320:	a35f      	add	r3, pc, #380	; (adr r3, 80024a0 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fe f933 	bl	8000590 <__aeabi_dmul>
 800232a:	4603      	mov	r3, r0
 800232c:	460c      	mov	r4, r1
 800232e:	4618      	mov	r0, r3
 8002330:	4621      	mov	r1, r4
 8002332:	f7fe fc05 	bl	8000b40 <__aeabi_d2f>
 8002336:	4603      	mov	r3, r0
 8002338:	617b      	str	r3, [r7, #20]
						setvalue2=(4095.0/9.9)*slot_data;
 800233a:	4b60      	ldr	r3, [pc, #384]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f8ce 	bl	80004e0 <__aeabi_f2d>
 8002344:	a354      	add	r3, pc, #336	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	f7fe f921 	bl	8000590 <__aeabi_dmul>
 800234e:	4603      	mov	r3, r0
 8002350:	460c      	mov	r4, r1
 8002352:	4618      	mov	r0, r3
 8002354:	4621      	mov	r1, r4
 8002356:	f7fe fbf3 	bl	8000b40 <__aeabi_d2f>
 800235a:	4603      	mov	r3, r0
 800235c:	613b      	str	r3, [r7, #16]
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 800235e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002366:	ee17 3a90 	vmov	r3, s15
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	4854      	ldr	r0, [pc, #336]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002370:	f001 ff50 	bl	8004214 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002374:	edd7 7a04 	vldr	s15, [r7, #16]
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	2200      	movs	r2, #0
 8002382:	2110      	movs	r1, #16
 8002384:	484e      	ldr	r0, [pc, #312]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002386:	f001 ff45 	bl	8004214 <HAL_DAC_SetValue>
 800238a:	e0a9      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
					}
					else if(speed==0.01) {
 800238c:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8a5 	bl	80004e0 <__aeabi_f2d>
 8002396:	a33e      	add	r3, pc, #248	; (adr r3, 8002490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe fb60 	bl	8000a60 <__aeabi_dcmpeq>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d043      	beq.n	800242e <HAL_TIM_PeriodElapsedCallback+0xc06>
						setvalue1=(4095.0/9.9)*slot_data*0.9;
 80023a6:	4b45      	ldr	r3, [pc, #276]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f898 	bl	80004e0 <__aeabi_f2d>
 80023b0:	a339      	add	r3, pc, #228	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f8eb 	bl	8000590 <__aeabi_dmul>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	4618      	mov	r0, r3
 80023c0:	4621      	mov	r1, r4
 80023c2:	a33b      	add	r3, pc, #236	; (adr r3, 80024b0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fe f8e2 	bl	8000590 <__aeabi_dmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	4618      	mov	r0, r3
 80023d2:	4621      	mov	r1, r4
 80023d4:	f7fe fbb4 	bl	8000b40 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	617b      	str	r3, [r7, #20]
						setvalue2=(4095.0/9.9)*slot_data;
 80023dc:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f87d 	bl	80004e0 <__aeabi_f2d>
 80023e6:	a32c      	add	r3, pc, #176	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f8d0 	bl	8000590 <__aeabi_dmul>
 80023f0:	4603      	mov	r3, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	4618      	mov	r0, r3
 80023f6:	4621      	mov	r1, r4
 80023f8:	f7fe fba2 	bl	8000b40 <__aeabi_d2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	613b      	str	r3, [r7, #16]
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002400:	edd7 7a05 	vldr	s15, [r7, #20]
 8002404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002408:	ee17 3a90 	vmov	r3, s15
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	482b      	ldr	r0, [pc, #172]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002412:	f001 feff 	bl	8004214 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002416:	edd7 7a04 	vldr	s15, [r7, #16]
 800241a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	2200      	movs	r2, #0
 8002424:	2110      	movs	r1, #16
 8002426:	4826      	ldr	r0, [pc, #152]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002428:	f001 fef4 	bl	8004214 <HAL_DAC_SetValue>
 800242c:	e058      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
					}
					else {
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 800242e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002436:	ee17 3a90 	vmov	r3, s15
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	4820      	ldr	r0, [pc, #128]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002440:	f001 fee8 	bl	8004214 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002444:	edd7 7a04 	vldr	s15, [r7, #16]
 8002448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	2200      	movs	r2, #0
 8002452:	2110      	movs	r1, #16
 8002454:	481a      	ldr	r0, [pc, #104]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002456:	f001 fedd 	bl	8004214 <HAL_DAC_SetValue>
 800245a:	e041      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
					}
				}

		else{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 800245c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002464:	ee17 3a90 	vmov	r3, s15
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	4814      	ldr	r0, [pc, #80]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 800246e:	f001 fed1 	bl	8004214 <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002472:	edd7 7a04 	vldr	s15, [r7, #16]
 8002476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800247a:	ee17 3a90 	vmov	r3, s15
 800247e:	2200      	movs	r2, #0
 8002480:	2110      	movs	r1, #16
 8002482:	480f      	ldr	r0, [pc, #60]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002484:	f001 fec6 	bl	8004214 <HAL_DAC_SetValue>
 8002488:	e02a      	b.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0xcb8>
 800248a:	bf00      	nop
 800248c:	f3af 8000 	nop.w
 8002490:	47ae147b 	.word	0x47ae147b
 8002494:	3f847ae1 	.word	0x3f847ae1
 8002498:	8ba2e8ba 	.word	0x8ba2e8ba
 800249c:	4079da2e 	.word	0x4079da2e
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	3fe99999 	.word	0x3fe99999
 80024a8:	47ae147b 	.word	0x47ae147b
 80024ac:	3f947ae1 	.word	0x3f947ae1
 80024b0:	cccccccd 	.word	0xcccccccd
 80024b4:	3feccccc 	.word	0x3feccccc
 80024b8:	200003e8 	.word	0x200003e8
 80024bc:	200003ec 	.word	0x200003ec
 80024c0:	20000398 	.word	0x20000398
 80024c4:	200003e4 	.word	0x200003e4
		}
	}
	else{
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80024c8:	2300      	movs	r3, #0
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	4836      	ldr	r0, [pc, #216]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 80024d0:	f001 fea0 	bl	8004214 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	2110      	movs	r1, #16
 80024da:	4833      	ldr	r0, [pc, #204]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 80024dc:	f001 fe9a 	bl	8004214 <HAL_DAC_SetValue>
	}

	uint8_t senddata[5];
	senddata[0]=254;
 80024e0:	23fe      	movs	r3, #254	; 0xfe
 80024e2:	723b      	strb	r3, [r7, #8]
	senddata[1]=state;
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0xd84>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	727b      	strb	r3, [r7, #9]
	senddata[2]=0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	72bb      	strb	r3, [r7, #10]
	senddata[3]=cnt;
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	72fb      	strb	r3, [r7, #11]
	senddata[4]=253;
 80024f4:	23fd      	movs	r3, #253	; 0xfd
 80024f6:	733b      	strb	r3, [r7, #12]

	HAL_UART_Transmit(&huart2,(uint8_t*)senddata ,5, 0x0f);
 80024f8:	f107 0108 	add.w	r1, r7, #8
 80024fc:	230f      	movs	r3, #15
 80024fe:	2205      	movs	r2, #5
 8002500:	482c      	ldr	r0, [pc, #176]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8002502:	f003 fcc4 	bl	8005e8e <HAL_UART_Transmit>

	if(cnt>250){
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2bfa      	cmp	r3, #250	; 0xfa
 800250c:	d917      	bls.n	800253e <HAL_TIM_PeriodElapsedCallback+0xd16>
		cnt=0;
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
		if(EN_front==0){
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <HAL_TIM_PeriodElapsedCallback+0xcfa>
			Error_Handler();
 800251c:	f000 f8ce 	bl	80026bc <Error_Handler>
 8002520:	e002      	b.n	8002528 <HAL_TIM_PeriodElapsedCallback+0xd00>
		}
		else{
			EN_front=0;
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
		}
		if(EN_rear==0){
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0xd94>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <HAL_TIM_PeriodElapsedCallback+0xd0e>
			Error_Handler();
 8002530:	f000 f8c4 	bl	80026bc <Error_Handler>
 8002534:	e009      	b.n	800254a <HAL_TIM_PeriodElapsedCallback+0xd22>
		}
		else{
			EN_rear=0;
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e005      	b.n	800254a <HAL_TIM_PeriodElapsedCallback+0xd22>
		}
	}
	else{
		cnt++;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002548:	701a      	strb	r2, [r3, #0]
	pit=0.95*(gyro_data[0]*0.002+pit_temp)+0.05*pit_acc;
	rol=0.95*(gyro_data[1]*0.002+rol_temp)+0.05*rol_acc;
	pit_temp=pit;
	rol_temp=rol;*/

	if(data_from_esp32[1]>0){
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <HAL_TIM_PeriodElapsedCallback+0xd5c>
		if(connect==0){
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d110      	bne.n	800257c <HAL_TIM_PeriodElapsedCallback+0xd54>
			if(data_from_esp32[1]==1){
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d106      	bne.n	8002570 <HAL_TIM_PeriodElapsedCallback+0xd48>
				DFPlayer_playmp3(6);
 8002562:	2006      	movs	r0, #6
 8002564:	f7fe fcf0 	bl	8000f48 <DFPlayer_playmp3>
				EN=1;
 8002568:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e005      	b.n	800257c <HAL_TIM_PeriodElapsedCallback+0xd54>
			}
			else{
				EN=0;
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
				DFPlayer_playmp3(1);
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe fce6 	bl	8000f48 <DFPlayer_playmp3>
			}
		}
		connect=1;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
		connect=0;
		EN=0;
	}


}
 8002582:	e00c      	b.n	800259e <HAL_TIM_PeriodElapsedCallback+0xd76>
		if(connect==1){
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_TIM_PeriodElapsedCallback+0xd6a>
			DFPlayer_playmp3(3);
 800258c:	2003      	movs	r0, #3
 800258e:	f7fe fcdb 	bl	8000f48 <DFPlayer_playmp3>
		connect=0;
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
		EN=0;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bdb0      	pop	{r4, r5, r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000398 	.word	0x20000398
 80025ac:	200003d5 	.word	0x200003d5
 80025b0:	200003d4 	.word	0x200003d4
 80025b4:	200005d0 	.word	0x200005d0
 80025b8:	200003dc 	.word	0x200003dc
 80025bc:	200003e5 	.word	0x200003e5
 80025c0:	200002e8 	.word	0x200002e8
 80025c4:	200003ba 	.word	0x200003ba
 80025c8:	200003bb 	.word	0x200003bb

080025cc <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_ESP32[j] != 254 &&  j<sizeof(Rxbuf_from_ESP32)) {
 80025d8:	e002      	b.n	80025e0 <HAL_UART_RxCpltCallback+0x14>
		j++;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3301      	adds	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_ESP32[j] != 254 &&  j<sizeof(Rxbuf_from_ESP32)) {
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	4a32      	ldr	r2, [pc, #200]	; (80026ac <HAL_UART_RxCpltCallback+0xe0>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	2bfe      	cmp	r3, #254	; 0xfe
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_RxCpltCallback+0x24>
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d9f4      	bls.n	80025da <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_from_ESP32)){
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d912      	bls.n	800261c <HAL_UART_RxCpltCallback+0x50>
		for(uint8_t k=0;k<(sizeof(data_from_esp32));k++){
 80025f6:	2300      	movs	r3, #0
 80025f8:	73bb      	strb	r3, [r7, #14]
 80025fa:	e006      	b.n	800260a <HAL_UART_RxCpltCallback+0x3e>
			data_from_esp32[k]=0;
 80025fc:	7bbb      	ldrb	r3, [r7, #14]
 80025fe:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <HAL_UART_RxCpltCallback+0xe4>)
 8002600:	2100      	movs	r1, #0
 8002602:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_from_esp32));k++){
 8002604:	7bbb      	ldrb	r3, [r7, #14]
 8002606:	3301      	adds	r3, #1
 8002608:	73bb      	strb	r3, [r7, #14]
 800260a:	7bbb      	ldrb	r3, [r7, #14]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d9f5      	bls.n	80025fc <HAL_UART_RxCpltCallback+0x30>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,1);
 8002610:	2201      	movs	r2, #1
 8002612:	2102      	movs	r1, #2
 8002614:	4827      	ldr	r0, [pc, #156]	; (80026b4 <HAL_UART_RxCpltCallback+0xe8>)
 8002616:	f002 fb2d 	bl	8004c74 <HAL_GPIO_WritePin>
 800261a:	e020      	b.n	800265e <HAL_UART_RxCpltCallback+0x92>
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_from_esp32); k++) {
 800261c:	2300      	movs	r3, #0
 800261e:	737b      	strb	r3, [r7, #13]
 8002620:	e01a      	b.n	8002658 <HAL_UART_RxCpltCallback+0x8c>
			if ((j + k) >= sizeof(data_from_esp32)) {
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	7b7b      	ldrb	r3, [r7, #13]
 8002626:	4413      	add	r3, r2
 8002628:	2b03      	cmp	r3, #3
 800262a:	d909      	bls.n	8002640 <HAL_UART_RxCpltCallback+0x74>
				data_from_esp32[k] = Rxbuf_from_ESP32[k - (sizeof(data_from_esp32) - j)];
 800262c:	7b7a      	ldrb	r2, [r7, #13]
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	4413      	add	r3, r2
 8002632:	1f1a      	subs	r2, r3, #4
 8002634:	7b7b      	ldrb	r3, [r7, #13]
 8002636:	491d      	ldr	r1, [pc, #116]	; (80026ac <HAL_UART_RxCpltCallback+0xe0>)
 8002638:	5c89      	ldrb	r1, [r1, r2]
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_UART_RxCpltCallback+0xe4>)
 800263c:	54d1      	strb	r1, [r2, r3]
 800263e:	e008      	b.n	8002652 <HAL_UART_RxCpltCallback+0x86>
			}
			else {
				data_from_esp32[k] = Rxbuf_from_ESP32[j + k + 1];
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	7b7b      	ldrb	r3, [r7, #13]
 8002644:	4413      	add	r3, r2
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	7b7b      	ldrb	r3, [r7, #13]
 800264a:	4918      	ldr	r1, [pc, #96]	; (80026ac <HAL_UART_RxCpltCallback+0xe0>)
 800264c:	5c89      	ldrb	r1, [r1, r2]
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_UART_RxCpltCallback+0xe4>)
 8002650:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_esp32); k++) {
 8002652:	7b7b      	ldrb	r3, [r7, #13]
 8002654:	3301      	adds	r3, #1
 8002656:	737b      	strb	r3, [r7, #13]
 8002658:	7b7b      	ldrb	r3, [r7, #13]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d9e1      	bls.n	8002622 <HAL_UART_RxCpltCallback+0x56>
			}
		}
	}
	if(data_from_esp32[sizeof(data_from_esp32)-1]==253){
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_UART_RxCpltCallback+0xe4>)
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	2bfd      	cmp	r3, #253	; 0xfd
 8002664:	d10f      	bne.n	8002686 <HAL_UART_RxCpltCallback+0xba>
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 8002666:	2300      	movs	r3, #0
 8002668:	733b      	strb	r3, [r7, #12]
 800266a:	e008      	b.n	800267e <HAL_UART_RxCpltCallback+0xb2>
			Rxbuf_from_ESP32_temp[k]=data_from_esp32[k];
 800266c:	7b3a      	ldrb	r2, [r7, #12]
 800266e:	7b3b      	ldrb	r3, [r7, #12]
 8002670:	490f      	ldr	r1, [pc, #60]	; (80026b0 <HAL_UART_RxCpltCallback+0xe4>)
 8002672:	5c89      	ldrb	r1, [r1, r2]
 8002674:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <HAL_UART_RxCpltCallback+0xec>)
 8002676:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 8002678:	7b3b      	ldrb	r3, [r7, #12]
 800267a:	3301      	adds	r3, #1
 800267c:	733b      	strb	r3, [r7, #12]
 800267e:	7b3b      	ldrb	r3, [r7, #12]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d9f3      	bls.n	800266c <HAL_UART_RxCpltCallback+0xa0>
			data_from_esp32[k]=Rxbuf_from_ESP32_temp[k];
		}
	}


}
 8002684:	e00e      	b.n	80026a4 <HAL_UART_RxCpltCallback+0xd8>
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 8002686:	2300      	movs	r3, #0
 8002688:	72fb      	strb	r3, [r7, #11]
 800268a:	e008      	b.n	800269e <HAL_UART_RxCpltCallback+0xd2>
			data_from_esp32[k]=Rxbuf_from_ESP32_temp[k];
 800268c:	7afa      	ldrb	r2, [r7, #11]
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <HAL_UART_RxCpltCallback+0xec>)
 8002692:	5c89      	ldrb	r1, [r1, r2]
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_UART_RxCpltCallback+0xe4>)
 8002696:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 8002698:	7afb      	ldrb	r3, [r7, #11]
 800269a:	3301      	adds	r3, #1
 800269c:	72fb      	strb	r3, [r7, #11]
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d9f3      	bls.n	800268c <HAL_UART_RxCpltCallback+0xc0>
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000270 	.word	0x20000270
 80026b0:	200002e8 	.word	0x200002e8
 80026b4:	40020400 	.word	0x40020400
 80026b8:	2000029c 	.word	0x2000029c

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	TxData[0]=0x02;
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <Error_Handler+0x3c>)
 80026c2:	2202      	movs	r2, #2
 80026c4:	701a      	strb	r2, [r3, #0]
	TxData[1]=0xFF;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <Error_Handler+0x3c>)
 80026c8:	22ff      	movs	r2, #255	; 0xff
 80026ca:	705a      	strb	r2, [r3, #1]
	can_send(0x000,(uint8_t*)TxData);
 80026cc:	490a      	ldr	r1, [pc, #40]	; (80026f8 <Error_Handler+0x3c>)
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fd34 	bl	800113c <can_send>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80026d4:	2101      	movs	r1, #1
 80026d6:	4809      	ldr	r0, [pc, #36]	; (80026fc <Error_Handler+0x40>)
 80026d8:	f002 fae5 	bl	8004ca6 <HAL_GPIO_TogglePin>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80026dc:	2300      	movs	r3, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	4807      	ldr	r0, [pc, #28]	; (8002700 <Error_Handler+0x44>)
 80026e4:	f001 fd96 	bl	8004214 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80026e8:	2300      	movs	r3, #0
 80026ea:	2200      	movs	r2, #0
 80026ec:	2110      	movs	r1, #16
 80026ee:	4804      	ldr	r0, [pc, #16]	; (8002700 <Error_Handler+0x44>)
 80026f0:	f001 fd90 	bl	8004214 <HAL_DAC_SetValue>
  /* USER CODE END Error_Handler_Debug */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200002e0 	.word	0x200002e0
 80026fc:	40020800 	.word	0x40020800
 8002700:	20000398 	.word	0x20000398

08002704 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <MX_SPI2_Init+0x64>)
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <MX_SPI2_Init+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_SPI2_Init+0x64>)
 8002710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002714:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <MX_SPI2_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_SPI2_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_SPI2_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_SPI2_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_SPI2_Init+0x64>)
 8002730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002734:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_SPI2_Init+0x64>)
 8002738:	2228      	movs	r2, #40	; 0x28
 800273a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MX_SPI2_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_SPI2_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <MX_SPI2_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_SPI2_Init+0x64>)
 8002750:	220a      	movs	r2, #10
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	; (8002768 <MX_SPI2_Init+0x64>)
 8002756:	f003 f839 	bl	80057cc <HAL_SPI_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002760:	f7ff ffac 	bl	80026bc <Error_Handler>
  }

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200003f8 	.word	0x200003f8
 800276c:	40003800 	.word	0x40003800

08002770 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_SPI_MspInit+0x84>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12c      	bne.n	80027ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_SPI_MspInit+0x88>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <HAL_SPI_MspInit+0x88>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_SPI_MspInit+0x88>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_SPI_MspInit+0x88>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_SPI_MspInit+0x88>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_SPI_MspInit+0x88>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80027ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80027ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027dc:	2305      	movs	r3, #5
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <HAL_SPI_MspInit+0x8c>)
 80027e8:	f002 f8b2 	bl	8004950 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80027ec:	bf00      	nop
 80027ee:	3728      	adds	r7, #40	; 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40003800 	.word	0x40003800
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020400 	.word	0x40020400

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_MspInit+0x58>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_MspInit+0x58>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_MspInit+0x58>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_MspInit+0x58>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <HAL_MspInit+0x58>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_MspInit+0x58>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	2001      	movs	r0, #1
 8002844:	f001 fb87 	bl	8003f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002848:	2001      	movs	r0, #1
 800284a:	f001 fba0 	bl	8003f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f000 fba2 	bl	8002ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80028bc:	f002 fa58 	bl	8004d70 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA1_Stream5_IRQHandler+0x10>)
 80028ca:	f001 fdd9 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000490 	.word	0x20000490

080028d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <DMA1_Stream6_IRQHandler+0x10>)
 80028de:	f001 fdcf 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000530 	.word	0x20000530

080028ec <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <CAN1_TX_IRQHandler+0x10>)
 80028f2:	f001 f82b 	bl	800394c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000214 	.word	0x20000214

08002900 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <CAN1_RX0_IRQHandler+0x10>)
 8002906:	f001 f821 	bl	800394c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000214 	.word	0x20000214

08002914 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <CAN1_RX1_IRQHandler+0x10>)
 800291a:	f001 f817 	bl	800394c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000214 	.word	0x20000214

08002928 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <TIM6_DAC_IRQHandler+0x14>)
 800292e:	f001 fbd0 	bl	80040d2 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002932:	4803      	ldr	r0, [pc, #12]	; (8002940 <TIM6_DAC_IRQHandler+0x18>)
 8002934:	f002 fffd 	bl	8005932 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000398 	.word	0x20000398
 8002940:	20000450 	.word	0x20000450

08002944 <_read>:
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e00a      	b.n	800296c <_read+0x28>
 8002956:	f3af 8000 	nop.w
 800295a:	4601      	mov	r1, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60ba      	str	r2, [r7, #8]
 8002962:	b2ca      	uxtb	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf0      	blt.n	8002956 <_read+0x12>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_write>:
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e009      	b.n	80029a4 <_write+0x26>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	60ba      	str	r2, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fd51 	bl	8001440 <__io_putchar>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbf1      	blt.n	8002990 <_write+0x12>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_close>:
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_fstat>:
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	2300      	movs	r3, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_lseek>:
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	2300      	movs	r3, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_sbrk>:
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <_sbrk+0x5c>)
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <_sbrk+0x60>)
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x22>
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <_sbrk+0x64>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <_sbrk+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <_sbrk+0x40>
 8002a38:	f003 ffdc 	bl	80069f4 <__errno>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	230c      	movs	r3, #12
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	e009      	b.n	8002a5c <_sbrk+0x54>
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <_sbrk+0x64>)
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20020000 	.word	0x20020000
 8002a68:	00000400 	.word	0x00000400
 8002a6c:	200001fc 	.word	0x200001fc
 8002a70:	20000618 	.word	0x20000618

08002a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <SystemInit+0x28>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <SystemInit+0x28>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SystemInit+0x28>)
 8002a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <MX_TIM6_Init+0x64>)
 8002ab0:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <MX_TIM6_Init+0x68>)
 8002ab2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <MX_TIM6_Init+0x64>)
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MX_TIM6_Init+0x64>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <MX_TIM6_Init+0x64>)
 8002ac2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ac6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <MX_TIM6_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <MX_TIM6_Init+0x64>)
 8002ad0:	f002 fee0 	bl	8005894 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002ada:	f7ff fdef 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4806      	ldr	r0, [pc, #24]	; (8002b04 <MX_TIM6_Init+0x64>)
 8002aec:	f003 f8f2 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002af6:	f7ff fde1 	bl	80026bc <Error_Handler>
  }

}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000450 	.word	0x20000450
 8002b08:	40001000 	.word	0x40001000

08002b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_TIM_Base_MspInit+0x48>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d115      	bne.n	8002b4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_TIM_Base_MspInit+0x4c>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <HAL_TIM_Base_MspInit+0x4c>)
 8002b28:	f043 0310 	orr.w	r3, r3, #16
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_TIM_Base_MspInit+0x4c>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	2036      	movs	r0, #54	; 0x36
 8002b40:	f001 fa09 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b44:	2036      	movs	r0, #54	; 0x36
 8002b46:	f001 fa22 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40001000 	.word	0x40001000
 8002b58:	40023800 	.word	0x40023800

08002b5c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b62:	4a12      	ldr	r2, [pc, #72]	; (8002bac <MX_USART1_UART_Init+0x50>)
 8002b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b82:	220c      	movs	r2, #12
 8002b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_USART1_UART_Init+0x4c>)
 8002b94:	f003 f92e 	bl	8005df4 <HAL_UART_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b9e:	f7ff fd8d 	bl	80026bc <Error_Handler>
  }

}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000590 	.word	0x20000590
 8002bac:	40011000 	.word	0x40011000

08002bb0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <MX_USART2_UART_Init+0x50>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002be6:	4805      	ldr	r0, [pc, #20]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002be8:	f003 f904 	bl	8005df4 <HAL_UART_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bf2:	f7ff fd63 	bl	80026bc <Error_Handler>
  }

}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200005d0 	.word	0x200005d0
 8002c00:	40004400 	.word	0x40004400

08002c04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <MX_USART3_UART_Init+0x50>)
 8002c0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_USART3_UART_Init+0x4c>)
 8002c3c:	f003 f8da 	bl	8005df4 <HAL_UART_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c46:	f7ff fd39 	bl	80026bc <Error_Handler>
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200004f0 	.word	0x200004f0
 8002c54:	40004800 	.word	0x40004800

08002c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a8a      	ldr	r2, [pc, #552]	; (8002ea0 <HAL_UART_MspInit+0x248>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d12d      	bne.n	8002cd6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	4b89      	ldr	r3, [pc, #548]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a88      	ldr	r2, [pc, #544]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002c84:	f043 0310 	orr.w	r3, r3, #16
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b86      	ldr	r3, [pc, #536]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	623b      	str	r3, [r7, #32]
 8002c94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	4b82      	ldr	r3, [pc, #520]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4876      	ldr	r0, [pc, #472]	; (8002ea8 <HAL_UART_MspInit+0x250>)
 8002cd0:	f001 fe3e 	bl	8004950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cd4:	e0e0      	b.n	8002e98 <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a74      	ldr	r2, [pc, #464]	; (8002eac <HAL_UART_MspInit+0x254>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f040 808b 	bne.w	8002df8 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a6e      	ldr	r2, [pc, #440]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b6c      	ldr	r3, [pc, #432]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	4b68      	ldr	r3, [pc, #416]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a67      	ldr	r2, [pc, #412]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d2a:	2307      	movs	r3, #7
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d32:	4619      	mov	r1, r3
 8002d34:	485c      	ldr	r0, [pc, #368]	; (8002ea8 <HAL_UART_MspInit+0x250>)
 8002d36:	f001 fe0b 	bl	8004950 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d3c:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <HAL_UART_MspInit+0x25c>)
 8002d3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d40:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4e:	4b58      	ldr	r3, [pc, #352]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d54:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d5c:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d62:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d68:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d76:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d7c:	484c      	ldr	r0, [pc, #304]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d7e:	f001 fa79 	bl	8004274 <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002d88:	f7ff fc98 	bl	80026bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
 8002d92:	4a47      	ldr	r2, [pc, #284]	; (8002eb0 <HAL_UART_MspInit+0x258>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d98:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002d9a:	4a48      	ldr	r2, [pc, #288]	; (8002ebc <HAL_UART_MspInit+0x264>)
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002da6:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002da8:	2240      	movs	r2, #64	; 0x40
 8002daa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dac:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002db2:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc0:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002dc6:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dcc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dce:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd4:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002dda:	4837      	ldr	r0, [pc, #220]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002ddc:	f001 fa4a 	bl	8004274 <HAL_DMA_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_UART_MspInit+0x192>
      Error_Handler();
 8002de6:	f7ff fc69 	bl	80026bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a32      	ldr	r2, [pc, #200]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
 8002df0:	4a31      	ldr	r2, [pc, #196]	; (8002eb8 <HAL_UART_MspInit+0x260>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002df6:	e04f      	b.n	8002e98 <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a30      	ldr	r2, [pc, #192]	; (8002ec0 <HAL_UART_MspInit+0x268>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d14a      	bne.n	8002e98 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_UART_MspInit+0x24c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e56:	2320      	movs	r3, #32
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e66:	2307      	movs	r3, #7
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4814      	ldr	r0, [pc, #80]	; (8002ec4 <HAL_UART_MspInit+0x26c>)
 8002e72:	f001 fd6d 	bl	8004950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e90:	4619      	mov	r1, r3
 8002e92:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <HAL_UART_MspInit+0x270>)
 8002e94:	f001 fd5c 	bl	8004950 <HAL_GPIO_Init>
}
 8002e98:	bf00      	nop
 8002e9a:	3738      	adds	r7, #56	; 0x38
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40004400 	.word	0x40004400
 8002eb0:	20000490 	.word	0x20000490
 8002eb4:	40026088 	.word	0x40026088
 8002eb8:	20000530 	.word	0x20000530
 8002ebc:	400260a0 	.word	0x400260a0
 8002ec0:	40004800 	.word	0x40004800
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020400 	.word	0x40020400

08002ecc <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	789b      	ldrb	r3, [r3, #2]
 8002ee4:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	78db      	ldrb	r3, [r3, #3]
 8002eea:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	ee07 3a90 	vmov	s15, r3
}
 8002ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <Reset_Handler>:
 8002f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f38 <LoopFillZerobss+0x14>
 8002f04:	2100      	movs	r1, #0
 8002f06:	e003      	b.n	8002f10 <LoopCopyDataInit>

08002f08 <CopyDataInit>:
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <LoopFillZerobss+0x18>)
 8002f0a:	585b      	ldr	r3, [r3, r1]
 8002f0c:	5043      	str	r3, [r0, r1]
 8002f0e:	3104      	adds	r1, #4

08002f10 <LoopCopyDataInit>:
 8002f10:	480b      	ldr	r0, [pc, #44]	; (8002f40 <LoopFillZerobss+0x1c>)
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <LoopFillZerobss+0x20>)
 8002f14:	1842      	adds	r2, r0, r1
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d3f6      	bcc.n	8002f08 <CopyDataInit>
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopFillZerobss+0x24>)
 8002f1c:	e002      	b.n	8002f24 <LoopFillZerobss>

08002f1e <FillZerobss>:
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f842 3b04 	str.w	r3, [r2], #4

08002f24 <LoopFillZerobss>:
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <LoopFillZerobss+0x28>)
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d3f9      	bcc.n	8002f1e <FillZerobss>
 8002f2a:	f7ff fda3 	bl	8002a74 <SystemInit>
 8002f2e:	f003 fd67 	bl	8006a00 <__libc_init_array>
 8002f32:	f7fe fac5 	bl	80014c0 <main>
 8002f36:	4770      	bx	lr
 8002f38:	20020000 	.word	0x20020000
 8002f3c:	08009824 	.word	0x08009824
 8002f40:	20000000 	.word	0x20000000
 8002f44:	200001e0 	.word	0x200001e0
 8002f48:	200001e0 	.word	0x200001e0
 8002f4c:	20000618 	.word	0x20000618

08002f50 <ADC_IRQHandler>:
 8002f50:	e7fe      	b.n	8002f50 <ADC_IRQHandler>
	...

08002f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_Init+0x40>)
 8002f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_Init+0x40>)
 8002f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_Init+0x40>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f000 ffdf 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f000 f808 	bl	8002f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f88:	f7ff fc3a 	bl	8002800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00

08002f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_InitTick+0x54>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_InitTick+0x58>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fff7 	bl	8003faa <HAL_SYSTICK_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00e      	b.n	8002fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d80a      	bhi.n	8002fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f000 ffbf 	bl	8003f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <HAL_InitTick+0x5c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	20000004 	.word	0x20000004

08002ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x20>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x24>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_IncTick+0x24>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000008 	.word	0x20000008
 800301c:	20000610 	.word	0x20000610

08003020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return uwTick;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_GetTick+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000610 	.word	0x20000610

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff ffee 	bl	8003020 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_Delay+0x40>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800305e:	bf00      	nop
 8003060:	f7ff ffde 	bl	8003020 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000008 	.word	0x20000008

0800307c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0ed      	b.n	800326a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd ffae 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0202 	bic.w	r2, r2, #2
 80030ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b0:	f7ff ffb6 	bl	8003020 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030b6:	e012      	b.n	80030de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030b8:	f7ff ffb2 	bl	8003020 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b0a      	cmp	r3, #10
 80030c4:	d90b      	bls.n	80030de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2205      	movs	r2, #5
 80030d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0c5      	b.n	800326a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030fc:	f7ff ff90 	bl	8003020 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003102:	e012      	b.n	800312a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003104:	f7ff ff8c 	bl	8003020 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b0a      	cmp	r3, #10
 8003110:	d90b      	bls.n	800312a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2205      	movs	r2, #5
 8003122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e09f      	b.n	800326a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0e5      	beq.n	8003104 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7e1b      	ldrb	r3, [r3, #24]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e007      	b.n	8003162 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7e5b      	ldrb	r3, [r3, #25]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e007      	b.n	800318c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e9b      	ldrb	r3, [r3, #26]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d108      	bne.n	80031a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e007      	b.n	80031b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0220 	bic.w	r2, r2, #32
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7edb      	ldrb	r3, [r3, #27]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d108      	bne.n	80031d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0210 	bic.w	r2, r2, #16
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e007      	b.n	80031e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0210 	orr.w	r2, r2, #16
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7f1b      	ldrb	r3, [r3, #28]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d108      	bne.n	80031fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0208 	orr.w	r2, r2, #8
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e007      	b.n	800320a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0208 	bic.w	r2, r2, #8
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7f5b      	ldrb	r3, [r3, #29]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0204 	orr.w	r2, r2, #4
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e007      	b.n	8003234 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	ea42 0103 	orr.w	r1, r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	1e5a      	subs	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d003      	beq.n	800329a <HAL_CAN_ConfigFilter+0x26>
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b02      	cmp	r3, #2
 8003296:	f040 80be 	bne.w	8003416 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_CAN_ConfigFilter+0x1bc>)
 800329c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	431a      	orrs	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2201      	movs	r2, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	401a      	ands	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d123      	bne.n	8003344 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43db      	mvns	r3, r3
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800331e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3248      	adds	r2, #72	; 0x48
 8003324:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003338:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	3348      	adds	r3, #72	; 0x48
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d122      	bne.n	8003392 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	431a      	orrs	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800336c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3248      	adds	r2, #72	; 0x48
 8003372:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003386:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003388:	6979      	ldr	r1, [r7, #20]
 800338a:	3348      	adds	r3, #72	; 0x48
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	401a      	ands	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033ac:	e007      	b.n	80033be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	401a      	ands	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033d8:	e007      	b.n	80033ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003408:	f023 0201 	bic.w	r2, r3, #1
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	e006      	b.n	8003424 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40006400 	.word	0x40006400

08003434 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d12e      	bne.n	80034a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003460:	f7ff fdde 	bl	8003020 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003466:	e012      	b.n	800348e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003468:	f7ff fdda 	bl	8003020 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b0a      	cmp	r3, #10
 8003474:	d90b      	bls.n	800348e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2205      	movs	r2, #5
 8003486:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e012      	b.n	80034b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e006      	b.n	80034b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d003      	beq.n	80034e8 <HAL_CAN_AddTxMessage+0x2c>
 80034e0:	7ffb      	ldrb	r3, [r7, #31]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	f040 80b8 	bne.w	8003658 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80a0 	beq.w	8003648 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	0e1b      	lsrs	r3, r3, #24
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d907      	bls.n	8003528 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e09e      	b.n	8003666 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003528:	2201      	movs	r2, #1
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	409a      	lsls	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10d      	bne.n	8003556 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	6809      	ldr	r1, [r1, #0]
 8003548:	431a      	orrs	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3318      	adds	r3, #24
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	440b      	add	r3, r1
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e00f      	b.n	8003576 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003560:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800356a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3318      	adds	r3, #24
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	440b      	add	r3, r1
 8003574:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6819      	ldr	r1, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3318      	adds	r3, #24
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	440b      	add	r3, r1
 8003586:	3304      	adds	r3, #4
 8003588:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	7d1b      	ldrb	r3, [r3, #20]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d111      	bne.n	80035b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	3318      	adds	r3, #24
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	6811      	ldr	r1, [r2, #0]
 80035a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3318      	adds	r3, #24
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	440b      	add	r3, r1
 80035b2:	3304      	adds	r3, #4
 80035b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3307      	adds	r3, #7
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	061a      	lsls	r2, r3, #24
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3306      	adds	r3, #6
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3305      	adds	r3, #5
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	4313      	orrs	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	3204      	adds	r2, #4
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	4610      	mov	r0, r2
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	ea43 0200 	orr.w	r2, r3, r0
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3303      	adds	r3, #3
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	061a      	lsls	r2, r3, #24
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3302      	adds	r3, #2
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3301      	adds	r3, #1
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	4313      	orrs	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	4610      	mov	r0, r2
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	6811      	ldr	r1, [r2, #0]
 8003614:	ea43 0200 	orr.w	r2, r3, r0
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	440b      	add	r3, r1
 800361e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003622:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3318      	adds	r3, #24
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	4413      	add	r3, r2
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6811      	ldr	r1, [r2, #0]
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3318      	adds	r3, #24
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	440b      	add	r3, r1
 8003642:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e00e      	b.n	8003666 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e006      	b.n	8003666 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003684:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003686:	7afb      	ldrb	r3, [r7, #11]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d002      	beq.n	8003692 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800368c:	7afb      	ldrb	r3, [r7, #11]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d11d      	bne.n	80036ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3301      	adds	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d003      	beq.n	8003700 <HAL_CAN_GetRxMessage+0x24>
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	f040 80f3 	bne.w	80038e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0e7      	b.n	80038f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0d8      	b.n	80038f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	331b      	adds	r3, #27
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	4413      	add	r3, r2
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0204 	and.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10c      	bne.n	800377a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	331b      	adds	r3, #27
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0d5b      	lsrs	r3, r3, #21
 8003770:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e00b      	b.n	8003792 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	331b      	adds	r3, #27
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4413      	add	r3, r2
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	331b      	adds	r3, #27
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0202 	and.w	r2, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	331b      	adds	r3, #27
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4413      	add	r3, r2
 80037b4:	3304      	adds	r3, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 020f 	and.w	r2, r3, #15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	331b      	adds	r3, #27
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	331b      	adds	r3, #27
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	4413      	add	r3, r2
 8003810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	0a1a      	lsrs	r2, r3, #8
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	4413      	add	r3, r2
 800382a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0c1a      	lsrs	r2, r3, #16
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	3302      	adds	r3, #2
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	4413      	add	r3, r2
 8003844:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0e1a      	lsrs	r2, r3, #24
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3303      	adds	r3, #3
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	3304      	adds	r3, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	4413      	add	r3, r2
 8003876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0a1a      	lsrs	r2, r3, #8
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	3305      	adds	r3, #5
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4413      	add	r3, r2
 8003890:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0c1a      	lsrs	r2, r3, #16
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	3306      	adds	r3, #6
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0e1a      	lsrs	r2, r3, #24
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	3307      	adds	r3, #7
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d108      	bne.n	80038d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	60da      	str	r2, [r3, #12]
 80038d0:	e007      	b.n	80038e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0220 	orr.w	r2, r2, #32
 80038e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e006      	b.n	80038f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003910:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <HAL_CAN_ActivateNotification+0x1e>
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d109      	bne.n	8003932 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6959      	ldr	r1, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e006      	b.n	8003940 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d07c      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d023      	beq.n	80039e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f97d 	bl	8003cae <HAL_CAN_TxMailbox0CompleteCallback>
 80039b4:	e016      	b.n	80039e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	e00c      	b.n	80039e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	e002      	b.n	80039e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f983 	bl	8003cea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d024      	beq.n	8003a38 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f95d 	bl	8003cc2 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a08:	e016      	b.n	8003a38 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	e00c      	b.n	8003a38 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	e002      	b.n	8003a38 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f963 	bl	8003cfe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d024      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f93d 	bl	8003cd6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a5c:	e016      	b.n	8003a8c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e00c      	b.n	8003a8c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	e002      	b.n	8003a8c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f943 	bl	8003d12 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f92a 	bl	8003d26 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fde6 	bl	80016bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2210      	movs	r2, #16
 8003b12:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f90c 	bl	8003d4e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8f3 	bl	8003d3a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d006      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8f6 	bl	8003d62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8ef 	bl	8003d76 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d075      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d06c      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	f043 0302 	orr.w	r3, r3, #2
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d03d      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d038      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c1a:	2b30      	cmp	r3, #48	; 0x30
 8003c1c:	d017      	beq.n	8003c4e <HAL_CAN_IRQHandler+0x302>
 8003c1e:	2b30      	cmp	r3, #48	; 0x30
 8003c20:	d804      	bhi.n	8003c2c <HAL_CAN_IRQHandler+0x2e0>
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d009      	beq.n	8003c3a <HAL_CAN_IRQHandler+0x2ee>
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d00c      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c2a:	e024      	b.n	8003c76 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003c2c:	2b50      	cmp	r3, #80	; 0x50
 8003c2e:	d018      	beq.n	8003c62 <HAL_CAN_IRQHandler+0x316>
 8003c30:	2b60      	cmp	r3, #96	; 0x60
 8003c32:	d01b      	beq.n	8003c6c <HAL_CAN_IRQHandler+0x320>
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d00f      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003c38:	e01d      	b.n	8003c76 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c42:	e018      	b.n	8003c76 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f043 0310 	orr.w	r3, r3, #16
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c4c:	e013      	b.n	8003c76 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	f043 0320 	orr.w	r3, r3, #32
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c56:	e00e      	b.n	8003c76 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c60:	e009      	b.n	8003c76 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c6a:	e004      	b.n	8003c76 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c74:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f872 	bl	8003d8a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3728      	adds	r7, #40	; 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	; (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	; (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
         );
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	; 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f0c:	d301      	bcc.n	8003f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00f      	b.n	8003f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <SysTick_Config+0x40>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f7ff ff8e 	bl	8003e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <SysTick_Config+0x40>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <SysTick_Config+0x40>)
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	e000e010 	.word	0xe000e010

08003f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff29 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f68:	f7ff ff3e 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff8e 	bl	8003e94 <NVIC_EncodePriority>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff5d 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff31 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa2 	bl	8003efc <SysTick_Config>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e014      	b.n	8003ffe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fd f919 	bl	800121c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	795b      	ldrb	r3, [r3, #5]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_DAC_Start+0x1e>
 8004020:	2302      	movs	r3, #2
 8004022:	e050      	b.n	80040c6 <HAL_DAC_Start+0xc0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6819      	ldr	r1, [r3, #0]
 8004036:	2201      	movs	r2, #1
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	409a      	lsls	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11a      	bne.n	8004080 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004060:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d127      	bne.n	80040b8 <HAL_DAC_Start+0xb2>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b38      	cmp	r3, #56	; 0x38
 800406c:	d124      	bne.n	80040b8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	e01b      	b.n	80040b8 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004096:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800409e:	d10b      	bne.n	80040b8 <HAL_DAC_Start+0xb2>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80040a6:	d107      	bne.n	80040b8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0202 	orr.w	r2, r2, #2
 80040b6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e8:	d118      	bne.n	800411c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004104:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004114:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f825 	bl	8004166 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800412a:	d118      	bne.n	800415e <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2204      	movs	r2, #4
 8004130:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f043 0202 	orr.w	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004146:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f880 	bl	800425e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800417a:	b480      	push	{r7}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	795b      	ldrb	r3, [r3, #5]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_DAC_ConfigChannel+0x20>
 8004196:	2302      	movs	r3, #2
 8004198:	e036      	b.n	8004208 <HAL_DAC_ConfigChannel+0x8e>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2202      	movs	r2, #2
 80041a4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80041ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4013      	ands	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	22c0      	movs	r2, #192	; 0xc0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43da      	mvns	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	400a      	ands	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	3308      	adds	r3, #8
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e004      	b.n	8004248 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	3314      	adds	r3, #20
 8004246:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	461a      	mov	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7fe fece 	bl	8003020 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e099      	b.n	80043c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b0:	e00f      	b.n	80042d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042b2:	f7fe feb5 	bl	8003020 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d908      	bls.n	80042d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e078      	b.n	80043c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e8      	bne.n	80042b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4b38      	ldr	r3, [pc, #224]	; (80043cc <HAL_DMA_Init+0x158>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800430a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b04      	cmp	r3, #4
 800432a:	d107      	bne.n	800433c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	4313      	orrs	r3, r2
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0307 	bic.w	r3, r3, #7
 8004352:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b04      	cmp	r3, #4
 8004364:	d117      	bne.n	8004396 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fa6f 	bl	800485c <DMA_CheckFifoParam>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004392:	2301      	movs	r3, #1
 8004394:	e016      	b.n	80043c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa26 	bl	80047f0 <DMA_CalcBaseAndBitshift>
 80043a4:	4603      	mov	r3, r0
 80043a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	223f      	movs	r2, #63	; 0x3f
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	f010803f 	.word	0xf010803f

080043d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_DMA_Start_IT+0x26>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e040      	b.n	8004478 <HAL_DMA_Start_IT+0xa8>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d12f      	bne.n	800446a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f9b8 	bl	8004794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	223f      	movs	r2, #63	; 0x3f
 800442a:	409a      	lsls	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0216 	orr.w	r2, r2, #22
 800443e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e005      	b.n	8004476 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800448c:	4b92      	ldr	r3, [pc, #584]	; (80046d8 <HAL_DMA_IRQHandler+0x258>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a92      	ldr	r2, [pc, #584]	; (80046dc <HAL_DMA_IRQHandler+0x25c>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	2208      	movs	r2, #8
 80044ac:	409a      	lsls	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	2208      	movs	r2, #8
 80044da:	409a      	lsls	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	2201      	movs	r2, #1
 8004510:	409a      	lsls	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f043 0202 	orr.w	r2, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	2204      	movs	r2, #4
 8004528:	409a      	lsls	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d012      	beq.n	8004558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	2204      	movs	r2, #4
 8004546:	409a      	lsls	r2, r3
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0204 	orr.w	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	2210      	movs	r2, #16
 800455e:	409a      	lsls	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d043      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03c      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	2210      	movs	r2, #16
 800457c:	409a      	lsls	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d108      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d024      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
 80045ae:	e01f      	b.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
 80045c0:	e016      	b.n	80045f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d107      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0208 	bic.w	r2, r2, #8
 80045de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	2220      	movs	r2, #32
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 808e 	beq.w	800471e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8086 	beq.w	800471e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	2220      	movs	r2, #32
 8004618:	409a      	lsls	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b05      	cmp	r3, #5
 8004628:	d136      	bne.n	8004698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0216 	bic.w	r2, r2, #22
 8004638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_DMA_IRQHandler+0x1da>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0208 	bic.w	r2, r2, #8
 8004668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	223f      	movs	r2, #63	; 0x3f
 8004670:	409a      	lsls	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2b00      	cmp	r3, #0
 800468c:	d07d      	beq.n	800478a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
        }
        return;
 8004696:	e078      	b.n	800478a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01c      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d030      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
 80046c4:	e02b      	b.n	800471e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d027      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
 80046d6:	e022      	b.n	800471e <HAL_DMA_IRQHandler+0x29e>
 80046d8:	20000000 	.word	0x20000000
 80046dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0210 	bic.w	r2, r2, #16
 80046fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d032      	beq.n	800478c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d022      	beq.n	8004778 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2205      	movs	r2, #5
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3301      	adds	r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	429a      	cmp	r2, r3
 8004754:	d307      	bcc.n	8004766 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f2      	bne.n	800474a <HAL_DMA_IRQHandler+0x2ca>
 8004764:	e000      	b.n	8004768 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004766:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
 8004788:	e000      	b.n	800478c <HAL_DMA_IRQHandler+0x30c>
        return;
 800478a:	bf00      	nop
    }
  }
}
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d108      	bne.n	80047d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047d2:	e007      	b.n	80047e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3b10      	subs	r3, #16
 8004800:	4a14      	ldr	r2, [pc, #80]	; (8004854 <DMA_CalcBaseAndBitshift+0x64>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <DMA_CalcBaseAndBitshift+0x68>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d909      	bls.n	8004832 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	659a      	str	r2, [r3, #88]	; 0x58
 8004830:	e007      	b.n	8004842 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	aaaaaaab 	.word	0xaaaaaaab
 8004858:	08009558 	.word	0x08009558

0800485c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11f      	bne.n	80048b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d855      	bhi.n	8004928 <DMA_CheckFifoParam+0xcc>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <DMA_CheckFifoParam+0x28>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a7 	.word	0x080048a7
 800488c:	08004895 	.word	0x08004895
 8004890:	08004929 	.word	0x08004929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d045      	beq.n	800492c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e042      	b.n	800492c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048ae:	d13f      	bne.n	8004930 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b4:	e03c      	b.n	8004930 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d121      	bne.n	8004904 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d836      	bhi.n	8004934 <DMA_CheckFifoParam+0xd8>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <DMA_CheckFifoParam+0x70>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048e3 	.word	0x080048e3
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	080048f5 	.word	0x080048f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e02f      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d024      	beq.n	8004938 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f2:	e021      	b.n	8004938 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048fc:	d11e      	bne.n	800493c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004902:	e01b      	b.n	800493c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d902      	bls.n	8004910 <DMA_CheckFifoParam+0xb4>
 800490a:	2b03      	cmp	r3, #3
 800490c:	d003      	beq.n	8004916 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800490e:	e018      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e015      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
      break;
 8004926:	e00b      	b.n	8004940 <DMA_CheckFifoParam+0xe4>
      break;
 8004928:	bf00      	nop
 800492a:	e00a      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 800492c:	bf00      	nop
 800492e:	e008      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004930:	bf00      	nop
 8004932:	e006      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004934:	bf00      	nop
 8004936:	e004      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004938:	bf00      	nop
 800493a:	e002      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;   
 800493c:	bf00      	nop
 800493e:	e000      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004940:	bf00      	nop
    }
  } 
  
  return status; 
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e165      	b.n	8004c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800496c:	2201      	movs	r2, #1
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	429a      	cmp	r2, r3
 8004986:	f040 8154 	bne.w	8004c32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d00b      	beq.n	80049aa <HAL_GPIO_Init+0x5a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d007      	beq.n	80049aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800499e:	2b11      	cmp	r3, #17
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b12      	cmp	r3, #18
 80049a8:	d130      	bne.n	8004a0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2203      	movs	r2, #3
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049e0:	2201      	movs	r2, #1
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 0201 	and.w	r2, r3, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	2203      	movs	r2, #3
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0xfc>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b12      	cmp	r3, #18
 8004a4a:	d123      	bne.n	8004a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	220f      	movs	r2, #15
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	08da      	lsrs	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3208      	adds	r2, #8
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 0203 	and.w	r2, r3, #3
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80ae 	beq.w	8004c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	4b5c      	ldr	r3, [pc, #368]	; (8004c4c <HAL_GPIO_Init+0x2fc>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_GPIO_Init+0x2fc>)
 8004ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ae6:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_GPIO_Init+0x2fc>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af2:	4a57      	ldr	r2, [pc, #348]	; (8004c50 <HAL_GPIO_Init+0x300>)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4e      	ldr	r2, [pc, #312]	; (8004c54 <HAL_GPIO_Init+0x304>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d025      	beq.n	8004b6a <HAL_GPIO_Init+0x21a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a4d      	ldr	r2, [pc, #308]	; (8004c58 <HAL_GPIO_Init+0x308>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01f      	beq.n	8004b66 <HAL_GPIO_Init+0x216>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a4c      	ldr	r2, [pc, #304]	; (8004c5c <HAL_GPIO_Init+0x30c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d019      	beq.n	8004b62 <HAL_GPIO_Init+0x212>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4b      	ldr	r2, [pc, #300]	; (8004c60 <HAL_GPIO_Init+0x310>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_GPIO_Init+0x20e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4a      	ldr	r2, [pc, #296]	; (8004c64 <HAL_GPIO_Init+0x314>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00d      	beq.n	8004b5a <HAL_GPIO_Init+0x20a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a49      	ldr	r2, [pc, #292]	; (8004c68 <HAL_GPIO_Init+0x318>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <HAL_GPIO_Init+0x206>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a48      	ldr	r2, [pc, #288]	; (8004c6c <HAL_GPIO_Init+0x31c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <HAL_GPIO_Init+0x202>
 8004b4e:	2306      	movs	r3, #6
 8004b50:	e00c      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b52:	2307      	movs	r3, #7
 8004b54:	e00a      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b56:	2305      	movs	r3, #5
 8004b58:	e008      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e004      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e002      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	f002 0203 	and.w	r2, r2, #3
 8004b72:	0092      	lsls	r2, r2, #2
 8004b74:	4093      	lsls	r3, r2
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b7c:	4934      	ldr	r1, [pc, #208]	; (8004c50 <HAL_GPIO_Init+0x300>)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	3302      	adds	r3, #2
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b8a:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bae:	4a30      	ldr	r2, [pc, #192]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bd8:	4a25      	ldr	r2, [pc, #148]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4013      	ands	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c2c:	4a10      	ldr	r2, [pc, #64]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	f67f ae96 	bls.w	800496c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	3724      	adds	r7, #36	; 0x24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40013800 	.word	0x40013800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020c00 	.word	0x40020c00
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40021400 	.word	0x40021400
 8004c6c:	40021800 	.word	0x40021800
 8004c70:	40013c00 	.word	0x40013c00

08004c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
 8004c80:	4613      	mov	r3, r2
 8004c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c84:	787b      	ldrb	r3, [r7, #1]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c90:	e003      	b.n	8004c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c92:	887b      	ldrh	r3, [r7, #2]
 8004c94:	041a      	lsls	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	619a      	str	r2, [r3, #24]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	401a      	ands	r2, r3
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d104      	bne.n	8004cca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cc0:	887b      	ldrh	r3, [r7, #2]
 8004cc2:	041a      	lsls	r2, r3, #16
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004cc8:	e002      	b.n	8004cd0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004cca:	887a      	ldrh	r2, [r7, #2]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	619a      	str	r2, [r3, #24]
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e02b      	b.n	8004d46 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f245 5255 	movw	r2, #21845	; 0x5555
 8004d00:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6852      	ldr	r2, [r2, #4]
 8004d0a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6892      	ldr	r2, [r2, #8]
 8004d14:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004d16:	f7fe f983 	bl	8003020 <HAL_GetTick>
 8004d1a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004d1c:	e008      	b.n	8004d30 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004d1e:	f7fe f97f 	bl	8003020 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d901      	bls.n	8004d30 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e00a      	b.n	8004d46 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f1      	bne.n	8004d1e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004d42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004d80:	f000 f808 	bl	8004d94 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004d84:	4b02      	ldr	r3, [pc, #8]	; (8004d90 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004d86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d8a:	615a      	str	r2, [r3, #20]
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40013c00 	.word	0x40013c00

08004d94 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0cc      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b68      	ldr	r3, [pc, #416]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d90c      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b63      	ldr	r3, [pc, #396]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b8      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df8:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a58      	ldr	r2, [pc, #352]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e10:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a52      	ldr	r2, [pc, #328]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	494d      	ldr	r1, [pc, #308]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d044      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d119      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d003      	beq.n	8004e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b3f      	ldr	r3, [pc, #252]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e067      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4934      	ldr	r1, [pc, #208]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e94:	f7fe f8c4 	bl	8003020 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fe f8c0 	bl	8003020 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e04f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d20c      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e032      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4916      	ldr	r1, [pc, #88]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f16:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	490e      	ldr	r1, [pc, #56]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f2a:	f000 f855 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4601      	mov	r1, r0
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	5cd3      	ldrb	r3, [r2, r3]
 8004f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <HAL_RCC_ClockConfig+0x1c8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe f824 	bl	8002f98 <HAL_InitTick>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023c00 	.word	0x40023c00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	08009540 	.word	0x08009540
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	20000004 	.word	0x20000004

08004f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f76:	681b      	ldr	r3, [r3, #0]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000000 	.word	0x20000000

08004f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f8c:	f7ff fff0 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004f90:	4601      	mov	r1, r0
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0a9b      	lsrs	r3, r3, #10
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4a03      	ldr	r2, [pc, #12]	; (8004fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9e:	5cd3      	ldrb	r3, [r2, r3]
 8004fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	08009550 	.word	0x08009550

08004fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fb4:	f7ff ffdc 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004fb8:	4601      	mov	r1, r0
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	0b5b      	lsrs	r3, r3, #13
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	4a03      	ldr	r2, [pc, #12]	; (8004fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc6:	5cd3      	ldrb	r3, [r2, r3]
 8004fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	08009550 	.word	0x08009550

08004fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff2:	4bc6      	ldr	r3, [pc, #792]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	f200 817e 	bhi.w	80052fc <HAL_RCC_GetSysClockFreq+0x324>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_RCC_GetSysClockFreq+0x30>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800503d 	.word	0x0800503d
 800500c:	080052fd 	.word	0x080052fd
 8005010:	080052fd 	.word	0x080052fd
 8005014:	080052fd 	.word	0x080052fd
 8005018:	08005043 	.word	0x08005043
 800501c:	080052fd 	.word	0x080052fd
 8005020:	080052fd 	.word	0x080052fd
 8005024:	080052fd 	.word	0x080052fd
 8005028:	08005049 	.word	0x08005049
 800502c:	080052fd 	.word	0x080052fd
 8005030:	080052fd 	.word	0x080052fd
 8005034:	080052fd 	.word	0x080052fd
 8005038:	080051a5 	.word	0x080051a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800503c:	4bb4      	ldr	r3, [pc, #720]	; (8005310 <HAL_RCC_GetSysClockFreq+0x338>)
 800503e:	613b      	str	r3, [r7, #16]
       break;
 8005040:	e15f      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005042:	4bb4      	ldr	r3, [pc, #720]	; (8005314 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005044:	613b      	str	r3, [r7, #16]
      break;
 8005046:	e15c      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005048:	4bb0      	ldr	r3, [pc, #704]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005050:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005052:	4bae      	ldr	r3, [pc, #696]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d04a      	beq.n	80050f4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505e:	4bab      	ldr	r3, [pc, #684]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	099b      	lsrs	r3, r3, #6
 8005064:	f04f 0400 	mov.w	r4, #0
 8005068:	f240 11ff 	movw	r1, #511	; 0x1ff
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	ea03 0501 	and.w	r5, r3, r1
 8005074:	ea04 0602 	and.w	r6, r4, r2
 8005078:	4629      	mov	r1, r5
 800507a:	4632      	mov	r2, r6
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f04f 0400 	mov.w	r4, #0
 8005084:	0154      	lsls	r4, r2, #5
 8005086:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800508a:	014b      	lsls	r3, r1, #5
 800508c:	4619      	mov	r1, r3
 800508e:	4622      	mov	r2, r4
 8005090:	1b49      	subs	r1, r1, r5
 8005092:	eb62 0206 	sbc.w	r2, r2, r6
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f04f 0400 	mov.w	r4, #0
 800509e:	0194      	lsls	r4, r2, #6
 80050a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050a4:	018b      	lsls	r3, r1, #6
 80050a6:	1a5b      	subs	r3, r3, r1
 80050a8:	eb64 0402 	sbc.w	r4, r4, r2
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	00e2      	lsls	r2, r4, #3
 80050b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050ba:	00d9      	lsls	r1, r3, #3
 80050bc:	460b      	mov	r3, r1
 80050be:	4614      	mov	r4, r2
 80050c0:	195b      	adds	r3, r3, r5
 80050c2:	eb44 0406 	adc.w	r4, r4, r6
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	0262      	lsls	r2, r4, #9
 80050d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050d4:	0259      	lsls	r1, r3, #9
 80050d6:	460b      	mov	r3, r1
 80050d8:	4614      	mov	r4, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	4621      	mov	r1, r4
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	461a      	mov	r2, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	f7fb fd7a 	bl	8000be0 <__aeabi_uldivmod>
 80050ec:	4603      	mov	r3, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e049      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f4:	4b85      	ldr	r3, [pc, #532]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	099b      	lsrs	r3, r3, #6
 80050fa:	f04f 0400 	mov.w	r4, #0
 80050fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	ea03 0501 	and.w	r5, r3, r1
 800510a:	ea04 0602 	and.w	r6, r4, r2
 800510e:	4629      	mov	r1, r5
 8005110:	4632      	mov	r2, r6
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	f04f 0400 	mov.w	r4, #0
 800511a:	0154      	lsls	r4, r2, #5
 800511c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005120:	014b      	lsls	r3, r1, #5
 8005122:	4619      	mov	r1, r3
 8005124:	4622      	mov	r2, r4
 8005126:	1b49      	subs	r1, r1, r5
 8005128:	eb62 0206 	sbc.w	r2, r2, r6
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	f04f 0400 	mov.w	r4, #0
 8005134:	0194      	lsls	r4, r2, #6
 8005136:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800513a:	018b      	lsls	r3, r1, #6
 800513c:	1a5b      	subs	r3, r3, r1
 800513e:	eb64 0402 	sbc.w	r4, r4, r2
 8005142:	f04f 0100 	mov.w	r1, #0
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	00e2      	lsls	r2, r4, #3
 800514c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005150:	00d9      	lsls	r1, r3, #3
 8005152:	460b      	mov	r3, r1
 8005154:	4614      	mov	r4, r2
 8005156:	195b      	adds	r3, r3, r5
 8005158:	eb44 0406 	adc.w	r4, r4, r6
 800515c:	f04f 0100 	mov.w	r1, #0
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	02a2      	lsls	r2, r4, #10
 8005166:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800516a:	0299      	lsls	r1, r3, #10
 800516c:	460b      	mov	r3, r1
 800516e:	4614      	mov	r4, r2
 8005170:	4618      	mov	r0, r3
 8005172:	4621      	mov	r1, r4
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f04f 0400 	mov.w	r4, #0
 800517a:	461a      	mov	r2, r3
 800517c:	4623      	mov	r3, r4
 800517e:	f7fb fd2f 	bl	8000be0 <__aeabi_uldivmod>
 8005182:	4603      	mov	r3, r0
 8005184:	460c      	mov	r4, r1
 8005186:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005188:	4b60      	ldr	r3, [pc, #384]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	3301      	adds	r3, #1
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	613b      	str	r3, [r7, #16]
      break;
 80051a2:	e0ae      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ae:	4b57      	ldr	r3, [pc, #348]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d04a      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ba:	4b54      	ldr	r3, [pc, #336]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	ea03 0501 	and.w	r5, r3, r1
 80051d0:	ea04 0602 	and.w	r6, r4, r2
 80051d4:	4629      	mov	r1, r5
 80051d6:	4632      	mov	r2, r6
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	0154      	lsls	r4, r2, #5
 80051e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051e6:	014b      	lsls	r3, r1, #5
 80051e8:	4619      	mov	r1, r3
 80051ea:	4622      	mov	r2, r4
 80051ec:	1b49      	subs	r1, r1, r5
 80051ee:	eb62 0206 	sbc.w	r2, r2, r6
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	f04f 0400 	mov.w	r4, #0
 80051fa:	0194      	lsls	r4, r2, #6
 80051fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005200:	018b      	lsls	r3, r1, #6
 8005202:	1a5b      	subs	r3, r3, r1
 8005204:	eb64 0402 	sbc.w	r4, r4, r2
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	00e2      	lsls	r2, r4, #3
 8005212:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005216:	00d9      	lsls	r1, r3, #3
 8005218:	460b      	mov	r3, r1
 800521a:	4614      	mov	r4, r2
 800521c:	195b      	adds	r3, r3, r5
 800521e:	eb44 0406 	adc.w	r4, r4, r6
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	0262      	lsls	r2, r4, #9
 800522c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005230:	0259      	lsls	r1, r3, #9
 8005232:	460b      	mov	r3, r1
 8005234:	4614      	mov	r4, r2
 8005236:	4618      	mov	r0, r3
 8005238:	4621      	mov	r1, r4
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	461a      	mov	r2, r3
 8005242:	4623      	mov	r3, r4
 8005244:	f7fb fccc 	bl	8000be0 <__aeabi_uldivmod>
 8005248:	4603      	mov	r3, r0
 800524a:	460c      	mov	r4, r1
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e049      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005250:	4b2e      	ldr	r3, [pc, #184]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	099b      	lsrs	r3, r3, #6
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	ea03 0501 	and.w	r5, r3, r1
 8005266:	ea04 0602 	and.w	r6, r4, r2
 800526a:	4629      	mov	r1, r5
 800526c:	4632      	mov	r2, r6
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	0154      	lsls	r4, r2, #5
 8005278:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800527c:	014b      	lsls	r3, r1, #5
 800527e:	4619      	mov	r1, r3
 8005280:	4622      	mov	r2, r4
 8005282:	1b49      	subs	r1, r1, r5
 8005284:	eb62 0206 	sbc.w	r2, r2, r6
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	f04f 0400 	mov.w	r4, #0
 8005290:	0194      	lsls	r4, r2, #6
 8005292:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005296:	018b      	lsls	r3, r1, #6
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	eb64 0402 	sbc.w	r4, r4, r2
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	00e2      	lsls	r2, r4, #3
 80052a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052ac:	00d9      	lsls	r1, r3, #3
 80052ae:	460b      	mov	r3, r1
 80052b0:	4614      	mov	r4, r2
 80052b2:	195b      	adds	r3, r3, r5
 80052b4:	eb44 0406 	adc.w	r4, r4, r6
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	02a2      	lsls	r2, r4, #10
 80052c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052c6:	0299      	lsls	r1, r3, #10
 80052c8:	460b      	mov	r3, r1
 80052ca:	4614      	mov	r4, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	4621      	mov	r1, r4
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f04f 0400 	mov.w	r4, #0
 80052d6:	461a      	mov	r2, r3
 80052d8:	4623      	mov	r3, r4
 80052da:	f7fb fc81 	bl	8000be0 <__aeabi_uldivmod>
 80052de:	4603      	mov	r3, r0
 80052e0:	460c      	mov	r4, r1
 80052e2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_GetSysClockFreq+0x334>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	0f1b      	lsrs	r3, r3, #28
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	613b      	str	r3, [r7, #16]
      break;
 80052fa:	e002      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <HAL_RCC_GetSysClockFreq+0x338>)
 80052fe:	613b      	str	r3, [r7, #16]
      break;
 8005300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005302:	693b      	ldr	r3, [r7, #16]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800530c:	40023800 	.word	0x40023800
 8005310:	00f42400 	.word	0x00f42400
 8005314:	007a1200 	.word	0x007a1200

08005318 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8083 	beq.w	8005438 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005332:	4b95      	ldr	r3, [pc, #596]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b04      	cmp	r3, #4
 800533c:	d019      	beq.n	8005372 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800533e:	4b92      	ldr	r3, [pc, #584]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005346:	2b08      	cmp	r3, #8
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800534a:	4b8f      	ldr	r3, [pc, #572]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005356:	d00c      	beq.n	8005372 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005358:	4b8b      	ldr	r3, [pc, #556]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005360:	2b0c      	cmp	r3, #12
 8005362:	d112      	bne.n	800538a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005364:	4b88      	ldr	r3, [pc, #544]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005370:	d10b      	bne.n	800538a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005372:	4b85      	ldr	r3, [pc, #532]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d05b      	beq.n	8005436 <HAL_RCC_OscConfig+0x11e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d157      	bne.n	8005436 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e216      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x8a>
 8005394:	4b7c      	ldr	r3, [pc, #496]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a7b      	ldr	r2, [pc, #492]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e01d      	b.n	80053de <HAL_RCC_OscConfig+0xc6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCC_OscConfig+0xae>
 80053ac:	4b76      	ldr	r3, [pc, #472]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a75      	ldr	r2, [pc, #468]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b73      	ldr	r3, [pc, #460]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a72      	ldr	r2, [pc, #456]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	e00b      	b.n	80053de <HAL_RCC_OscConfig+0xc6>
 80053c6:	4b70      	ldr	r3, [pc, #448]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a6f      	ldr	r2, [pc, #444]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4b6d      	ldr	r3, [pc, #436]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a6c      	ldr	r2, [pc, #432]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d013      	beq.n	800540e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fd fe1b 	bl	8003020 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ee:	f7fd fe17 	bl	8003020 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b64      	cmp	r3, #100	; 0x64
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1db      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005400:	4b61      	ldr	r3, [pc, #388]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0xd6>
 800540c:	e014      	b.n	8005438 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fd fe07 	bl	8003020 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005416:	f7fd fe03 	bl	8003020 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	; 0x64
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e1c7      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005428:	4b57      	ldr	r3, [pc, #348]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f0      	bne.n	8005416 <HAL_RCC_OscConfig+0xfe>
 8005434:	e000      	b.n	8005438 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005436:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d06f      	beq.n	8005524 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005444:	4b50      	ldr	r3, [pc, #320]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 030c 	and.w	r3, r3, #12
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005450:	4b4d      	ldr	r3, [pc, #308]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005458:	2b08      	cmp	r3, #8
 800545a:	d105      	bne.n	8005468 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800545c:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005468:	4b47      	ldr	r3, [pc, #284]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d11c      	bne.n	80054ae <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005474:	4b44      	ldr	r3, [pc, #272]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005480:	4b41      	ldr	r3, [pc, #260]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_RCC_OscConfig+0x180>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e18f      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005498:	4b3b      	ldr	r3, [pc, #236]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4938      	ldr	r1, [pc, #224]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ac:	e03a      	b.n	8005524 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d020      	beq.n	80054f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b6:	4b35      	ldr	r3, [pc, #212]	; (800558c <HAL_RCC_OscConfig+0x274>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fd fdb0 	bl	8003020 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c4:	f7fd fdac 	bl	8003020 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e170      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d6:	4b2c      	ldr	r3, [pc, #176]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e2:	4b29      	ldr	r3, [pc, #164]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4925      	ldr	r1, [pc, #148]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]
 80054f6:	e015      	b.n	8005524 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054f8:	4b24      	ldr	r3, [pc, #144]	; (800558c <HAL_RCC_OscConfig+0x274>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fd fd8f 	bl	8003020 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005506:	f7fd fd8b 	bl	8003020 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e14f      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f0      	bne.n	8005506 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d037      	beq.n	80055a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d016      	beq.n	8005566 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005538:	4b15      	ldr	r3, [pc, #84]	; (8005590 <HAL_RCC_OscConfig+0x278>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fd fd6f 	bl	8003020 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005546:	f7fd fd6b 	bl	8003020 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e12f      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800555a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x22e>
 8005564:	e01c      	b.n	80055a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <HAL_RCC_OscConfig+0x278>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fd fd58 	bl	8003020 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005572:	e00f      	b.n	8005594 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005574:	f7fd fd54 	bl	8003020 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d908      	bls.n	8005594 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e118      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800
 800558c:	42470000 	.word	0x42470000
 8005590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	4b8a      	ldr	r3, [pc, #552]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e9      	bne.n	8005574 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8097 	beq.w	80056dc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b2:	4b83      	ldr	r3, [pc, #524]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10f      	bne.n	80055de <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	4b7f      	ldr	r3, [pc, #508]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	4a7e      	ldr	r2, [pc, #504]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055cc:	6413      	str	r3, [r2, #64]	; 0x40
 80055ce:	4b7c      	ldr	r3, [pc, #496]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	4b79      	ldr	r3, [pc, #484]	; (80057c4 <HAL_RCC_OscConfig+0x4ac>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d118      	bne.n	800561c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ea:	4b76      	ldr	r3, [pc, #472]	; (80057c4 <HAL_RCC_OscConfig+0x4ac>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a75      	ldr	r2, [pc, #468]	; (80057c4 <HAL_RCC_OscConfig+0x4ac>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f6:	f7fd fd13 	bl	8003020 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fe:	f7fd fd0f 	bl	8003020 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e0d3      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	4b6c      	ldr	r3, [pc, #432]	; (80057c4 <HAL_RCC_OscConfig+0x4ac>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d106      	bne.n	8005632 <HAL_RCC_OscConfig+0x31a>
 8005624:	4b66      	ldr	r3, [pc, #408]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	4a65      	ldr	r2, [pc, #404]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6713      	str	r3, [r2, #112]	; 0x70
 8005630:	e01c      	b.n	800566c <HAL_RCC_OscConfig+0x354>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x33c>
 800563a:	4b61      	ldr	r3, [pc, #388]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	4a60      	ldr	r2, [pc, #384]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005640:	f043 0304 	orr.w	r3, r3, #4
 8005644:	6713      	str	r3, [r2, #112]	; 0x70
 8005646:	4b5e      	ldr	r3, [pc, #376]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	4a5d      	ldr	r2, [pc, #372]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	6713      	str	r3, [r2, #112]	; 0x70
 8005652:	e00b      	b.n	800566c <HAL_RCC_OscConfig+0x354>
 8005654:	4b5a      	ldr	r3, [pc, #360]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005658:	4a59      	ldr	r2, [pc, #356]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	6713      	str	r3, [r2, #112]	; 0x70
 8005660:	4b57      	ldr	r3, [pc, #348]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a56      	ldr	r2, [pc, #344]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005666:	f023 0304 	bic.w	r3, r3, #4
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d015      	beq.n	80056a0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fd fcd4 	bl	8003020 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567a:	e00a      	b.n	8005692 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f7fd fcd0 	bl	8003020 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e092      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005692:	4b4b      	ldr	r3, [pc, #300]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0ee      	beq.n	800567c <HAL_RCC_OscConfig+0x364>
 800569e:	e014      	b.n	80056ca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fd fcbe 	bl	8003020 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a6:	e00a      	b.n	80056be <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fd fcba 	bl	8003020 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e07c      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056be:	4b40      	ldr	r3, [pc, #256]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ee      	bne.n	80056a8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d105      	bne.n	80056dc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d0:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	4a3a      	ldr	r2, [pc, #232]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80056d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d068      	beq.n	80057b6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056e4:	4b36      	ldr	r3, [pc, #216]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d060      	beq.n	80057b2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d145      	bne.n	8005784 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f8:	4b33      	ldr	r3, [pc, #204]	; (80057c8 <HAL_RCC_OscConfig+0x4b0>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fd fc8f 	bl	8003020 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005706:	f7fd fc8b 	bl	8003020 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e04f      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005718:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	019b      	lsls	r3, r3, #6
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	3b01      	subs	r3, #1
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	071b      	lsls	r3, r3, #28
 8005750:	491b      	ldr	r1, [pc, #108]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005752:	4313      	orrs	r3, r2
 8005754:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005756:	4b1c      	ldr	r3, [pc, #112]	; (80057c8 <HAL_RCC_OscConfig+0x4b0>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd fc60 	bl	8003020 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005764:	f7fd fc5c 	bl	8003020 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e020      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005776:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x44c>
 8005782:	e018      	b.n	80057b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005784:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <HAL_RCC_OscConfig+0x4b0>)
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578a:	f7fd fc49 	bl	8003020 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005792:	f7fd fc45 	bl	8003020 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e009      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_RCC_OscConfig+0x4a8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f0      	bne.n	8005792 <HAL_RCC_OscConfig+0x47a>
 80057b0:	e001      	b.n	80057b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40007000 	.word	0x40007000
 80057c8:	42470060 	.word	0x42470060

080057cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e056      	b.n	800588c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fc ffb9 	bl	8002770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005814:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	ea42 0103 	orr.w	r1, r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	f003 0104 	and.w	r1, r3, #4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800587a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e01d      	b.n	80058e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fd f926 	bl	8002b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f000 f95e 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b06      	cmp	r3, #6
 8005912:	d007      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b02      	cmp	r3, #2
 8005946:	d122      	bne.n	800598e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d11b      	bne.n	800598e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f06f 0202 	mvn.w	r2, #2
 800595e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f8ee 	bl	8005b56 <HAL_TIM_IC_CaptureCallback>
 800597a:	e005      	b.n	8005988 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8e0 	bl	8005b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8f1 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d122      	bne.n	80059e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d11b      	bne.n	80059e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f06f 0204 	mvn.w	r2, #4
 80059b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f8c4 	bl	8005b56 <HAL_TIM_IC_CaptureCallback>
 80059ce:	e005      	b.n	80059dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f8b6 	bl	8005b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8c7 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d122      	bne.n	8005a36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d11b      	bne.n	8005a36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f06f 0208 	mvn.w	r2, #8
 8005a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f89a 	bl	8005b56 <HAL_TIM_IC_CaptureCallback>
 8005a22:	e005      	b.n	8005a30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f88c 	bl	8005b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f89d 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d122      	bne.n	8005a8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b10      	cmp	r3, #16
 8005a50:	d11b      	bne.n	8005a8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f06f 0210 	mvn.w	r2, #16
 8005a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2208      	movs	r2, #8
 8005a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f870 	bl	8005b56 <HAL_TIM_IC_CaptureCallback>
 8005a76:	e005      	b.n	8005a84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f862 	bl	8005b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f873 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d10e      	bne.n	8005ab6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f06f 0201 	mvn.w	r2, #1
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fb feb9 	bl	8001828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	2b80      	cmp	r3, #128	; 0x80
 8005ac2:	d10e      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d107      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f97f 	bl	8005de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d10e      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b40      	cmp	r3, #64	; 0x40
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f838 	bl	8005b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d10e      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d107      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0220 	mvn.w	r2, #32
 8005b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f949 	bl	8005dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3d      	ldr	r2, [pc, #244]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3b      	ldr	r2, [pc, #236]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a3a      	ldr	r2, [pc, #232]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d02b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d027      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d023      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01f      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d017      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_Base_SetConfig+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <TIM_Base_SetConfig+0x12c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <TIM_Base_SetConfig+0x134>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <TIM_Base_SetConfig+0x138>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <TIM_Base_SetConfig+0x13c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d103      	bne.n	8005c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	615a      	str	r2, [r3, #20]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800
 8005cc8:	40001800 	.word	0x40001800
 8005ccc:	40001c00 	.word	0x40001c00
 8005cd0:	40002000 	.word	0x40002000

08005cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e05a      	b.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d022      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d01d      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d018      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10c      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40001800 	.word	0x40001800

08005dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e03f      	b.n	8005e86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fc ff1c 	bl	8002c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2224      	movs	r2, #36	; 0x24
 8005e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fa5f 	bl	80062fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b088      	sub	sp, #32
 8005e92:	af02      	add	r7, sp, #8
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	f040 8083 	bne.w	8005fb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Transmit+0x2e>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e07b      	b.n	8005fb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Transmit+0x40>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e074      	b.n	8005fb8 <HAL_UART_Transmit+0x12a>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2221      	movs	r2, #33	; 0x21
 8005ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ee4:	f7fd f89c 	bl	8003020 <HAL_GetTick>
 8005ee8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005efe:	e042      	b.n	8005f86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f16:	d122      	bne.n	8005f5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2180      	movs	r1, #128	; 0x80
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f96c 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e042      	b.n	8005fb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d103      	bne.n	8005f56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	3302      	adds	r3, #2
 8005f52:	60bb      	str	r3, [r7, #8]
 8005f54:	e017      	b.n	8005f86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	e013      	b.n	8005f86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2180      	movs	r1, #128	; 0x80
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f949 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e01f      	b.n	8005fb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	60ba      	str	r2, [r7, #8]
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1b7      	bne.n	8005f00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2140      	movs	r1, #64	; 0x40
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f930 	bl	8006200 <UART_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e006      	b.n	8005fb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d166      	bne.n	80060a8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_UART_Receive_DMA+0x26>
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e05f      	b.n	80060aa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_UART_Receive_DMA+0x38>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e058      	b.n	80060aa <HAL_UART_Receive_DMA+0xea>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2222      	movs	r2, #34	; 0x22
 8006016:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_UART_Receive_DMA+0xf4>)
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	4a24      	ldr	r2, [pc, #144]	; (80060b8 <HAL_UART_Receive_DMA+0xf8>)
 8006028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	4a23      	ldr	r2, [pc, #140]	; (80060bc <HAL_UART_Receive_DMA+0xfc>)
 8006030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	2200      	movs	r2, #0
 8006038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3304      	adds	r3, #4
 800604a:	4619      	mov	r1, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	f7fe f9bd 	bl	80043d0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006082:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	080060e9 	.word	0x080060e9
 80060b8:	08006151 	.word	0x08006151
 80060bc:	0800616d 	.word	0x0800616d

080060c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11e      	bne.n	8006142 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006118:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006138:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7fc fa42 	bl	80025cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff ffae 	bl	80060c0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	bf0c      	ite	eq
 800618c:	2301      	moveq	r3, #1
 800618e:	2300      	movne	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b21      	cmp	r3, #33	; 0x21
 800619e:	d108      	bne.n	80061b2 <UART_DMAError+0x46>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2200      	movs	r2, #0
 80061aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80061ac:	68b8      	ldr	r0, [r7, #8]
 80061ae:	f000 f871 	bl	8006294 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b22      	cmp	r3, #34	; 0x22
 80061d2:	d108      	bne.n	80061e6 <UART_DMAError+0x7a>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2200      	movs	r2, #0
 80061de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f000 f86d 	bl	80062c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	f043 0210 	orr.w	r2, r3, #16
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f2:	68b8      	ldr	r0, [r7, #8]
 80061f4:	f7ff ff6e 	bl	80060d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006210:	e02c      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d028      	beq.n	800626c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <UART_WaitOnFlagUntilTimeout+0x30>
 8006220:	f7fc fefe 	bl	8003020 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	429a      	cmp	r2, r3
 800622e:	d21d      	bcs.n	800626c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800623e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695a      	ldr	r2, [r3, #20]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e00f      	b.n	800628c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4013      	ands	r3, r2
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	429a      	cmp	r2, r3
 8006288:	d0c3      	beq.n	8006212 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80062aa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800633e:	f023 030c 	bic.w	r3, r3, #12
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	430b      	orrs	r3, r1
 800634a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636a:	f040 818b 	bne.w	8006684 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4ac1      	ldr	r2, [pc, #772]	; (8006678 <UART_SetConfig+0x37c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d005      	beq.n	8006384 <UART_SetConfig+0x88>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4abf      	ldr	r2, [pc, #764]	; (800667c <UART_SetConfig+0x380>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f040 80bd 	bne.w	80064fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7fe fe14 	bl	8004fb0 <HAL_RCC_GetPCLK2Freq>
 8006388:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	461d      	mov	r5, r3
 800638e:	f04f 0600 	mov.w	r6, #0
 8006392:	46a8      	mov	r8, r5
 8006394:	46b1      	mov	r9, r6
 8006396:	eb18 0308 	adds.w	r3, r8, r8
 800639a:	eb49 0409 	adc.w	r4, r9, r9
 800639e:	4698      	mov	r8, r3
 80063a0:	46a1      	mov	r9, r4
 80063a2:	eb18 0805 	adds.w	r8, r8, r5
 80063a6:	eb49 0906 	adc.w	r9, r9, r6
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063be:	4688      	mov	r8, r1
 80063c0:	4691      	mov	r9, r2
 80063c2:	eb18 0005 	adds.w	r0, r8, r5
 80063c6:	eb49 0106 	adc.w	r1, r9, r6
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	461d      	mov	r5, r3
 80063d0:	f04f 0600 	mov.w	r6, #0
 80063d4:	196b      	adds	r3, r5, r5
 80063d6:	eb46 0406 	adc.w	r4, r6, r6
 80063da:	461a      	mov	r2, r3
 80063dc:	4623      	mov	r3, r4
 80063de:	f7fa fbff 	bl	8000be0 <__aeabi_uldivmod>
 80063e2:	4603      	mov	r3, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	461a      	mov	r2, r3
 80063e8:	4ba5      	ldr	r3, [pc, #660]	; (8006680 <UART_SetConfig+0x384>)
 80063ea:	fba3 2302 	umull	r2, r3, r3, r2
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	461d      	mov	r5, r3
 80063f8:	f04f 0600 	mov.w	r6, #0
 80063fc:	46a9      	mov	r9, r5
 80063fe:	46b2      	mov	sl, r6
 8006400:	eb19 0309 	adds.w	r3, r9, r9
 8006404:	eb4a 040a 	adc.w	r4, sl, sl
 8006408:	4699      	mov	r9, r3
 800640a:	46a2      	mov	sl, r4
 800640c:	eb19 0905 	adds.w	r9, r9, r5
 8006410:	eb4a 0a06 	adc.w	sl, sl, r6
 8006414:	f04f 0100 	mov.w	r1, #0
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006428:	4689      	mov	r9, r1
 800642a:	4692      	mov	sl, r2
 800642c:	eb19 0005 	adds.w	r0, r9, r5
 8006430:	eb4a 0106 	adc.w	r1, sl, r6
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	461d      	mov	r5, r3
 800643a:	f04f 0600 	mov.w	r6, #0
 800643e:	196b      	adds	r3, r5, r5
 8006440:	eb46 0406 	adc.w	r4, r6, r6
 8006444:	461a      	mov	r2, r3
 8006446:	4623      	mov	r3, r4
 8006448:	f7fa fbca 	bl	8000be0 <__aeabi_uldivmod>
 800644c:	4603      	mov	r3, r0
 800644e:	460c      	mov	r4, r1
 8006450:	461a      	mov	r2, r3
 8006452:	4b8b      	ldr	r3, [pc, #556]	; (8006680 <UART_SetConfig+0x384>)
 8006454:	fba3 1302 	umull	r1, r3, r3, r2
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	2164      	movs	r1, #100	; 0x64
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	3332      	adds	r3, #50	; 0x32
 8006466:	4a86      	ldr	r2, [pc, #536]	; (8006680 <UART_SetConfig+0x384>)
 8006468:	fba2 2303 	umull	r2, r3, r2, r3
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006474:	4498      	add	r8, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	461d      	mov	r5, r3
 800647a:	f04f 0600 	mov.w	r6, #0
 800647e:	46a9      	mov	r9, r5
 8006480:	46b2      	mov	sl, r6
 8006482:	eb19 0309 	adds.w	r3, r9, r9
 8006486:	eb4a 040a 	adc.w	r4, sl, sl
 800648a:	4699      	mov	r9, r3
 800648c:	46a2      	mov	sl, r4
 800648e:	eb19 0905 	adds.w	r9, r9, r5
 8006492:	eb4a 0a06 	adc.w	sl, sl, r6
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064aa:	4689      	mov	r9, r1
 80064ac:	4692      	mov	sl, r2
 80064ae:	eb19 0005 	adds.w	r0, r9, r5
 80064b2:	eb4a 0106 	adc.w	r1, sl, r6
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	461d      	mov	r5, r3
 80064bc:	f04f 0600 	mov.w	r6, #0
 80064c0:	196b      	adds	r3, r5, r5
 80064c2:	eb46 0406 	adc.w	r4, r6, r6
 80064c6:	461a      	mov	r2, r3
 80064c8:	4623      	mov	r3, r4
 80064ca:	f7fa fb89 	bl	8000be0 <__aeabi_uldivmod>
 80064ce:	4603      	mov	r3, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	461a      	mov	r2, r3
 80064d4:	4b6a      	ldr	r3, [pc, #424]	; (8006680 <UART_SetConfig+0x384>)
 80064d6:	fba3 1302 	umull	r1, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2164      	movs	r1, #100	; 0x64
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	3332      	adds	r3, #50	; 0x32
 80064e8:	4a65      	ldr	r2, [pc, #404]	; (8006680 <UART_SetConfig+0x384>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f003 0207 	and.w	r2, r3, #7
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4442      	add	r2, r8
 80064fa:	609a      	str	r2, [r3, #8]
 80064fc:	e26f      	b.n	80069de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064fe:	f7fe fd43 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8006502:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	461d      	mov	r5, r3
 8006508:	f04f 0600 	mov.w	r6, #0
 800650c:	46a8      	mov	r8, r5
 800650e:	46b1      	mov	r9, r6
 8006510:	eb18 0308 	adds.w	r3, r8, r8
 8006514:	eb49 0409 	adc.w	r4, r9, r9
 8006518:	4698      	mov	r8, r3
 800651a:	46a1      	mov	r9, r4
 800651c:	eb18 0805 	adds.w	r8, r8, r5
 8006520:	eb49 0906 	adc.w	r9, r9, r6
 8006524:	f04f 0100 	mov.w	r1, #0
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006530:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006534:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006538:	4688      	mov	r8, r1
 800653a:	4691      	mov	r9, r2
 800653c:	eb18 0005 	adds.w	r0, r8, r5
 8006540:	eb49 0106 	adc.w	r1, r9, r6
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	461d      	mov	r5, r3
 800654a:	f04f 0600 	mov.w	r6, #0
 800654e:	196b      	adds	r3, r5, r5
 8006550:	eb46 0406 	adc.w	r4, r6, r6
 8006554:	461a      	mov	r2, r3
 8006556:	4623      	mov	r3, r4
 8006558:	f7fa fb42 	bl	8000be0 <__aeabi_uldivmod>
 800655c:	4603      	mov	r3, r0
 800655e:	460c      	mov	r4, r1
 8006560:	461a      	mov	r2, r3
 8006562:	4b47      	ldr	r3, [pc, #284]	; (8006680 <UART_SetConfig+0x384>)
 8006564:	fba3 2302 	umull	r2, r3, r3, r2
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	461d      	mov	r5, r3
 8006572:	f04f 0600 	mov.w	r6, #0
 8006576:	46a9      	mov	r9, r5
 8006578:	46b2      	mov	sl, r6
 800657a:	eb19 0309 	adds.w	r3, r9, r9
 800657e:	eb4a 040a 	adc.w	r4, sl, sl
 8006582:	4699      	mov	r9, r3
 8006584:	46a2      	mov	sl, r4
 8006586:	eb19 0905 	adds.w	r9, r9, r5
 800658a:	eb4a 0a06 	adc.w	sl, sl, r6
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800659a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800659e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065a2:	4689      	mov	r9, r1
 80065a4:	4692      	mov	sl, r2
 80065a6:	eb19 0005 	adds.w	r0, r9, r5
 80065aa:	eb4a 0106 	adc.w	r1, sl, r6
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	461d      	mov	r5, r3
 80065b4:	f04f 0600 	mov.w	r6, #0
 80065b8:	196b      	adds	r3, r5, r5
 80065ba:	eb46 0406 	adc.w	r4, r6, r6
 80065be:	461a      	mov	r2, r3
 80065c0:	4623      	mov	r3, r4
 80065c2:	f7fa fb0d 	bl	8000be0 <__aeabi_uldivmod>
 80065c6:	4603      	mov	r3, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	461a      	mov	r2, r3
 80065cc:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <UART_SetConfig+0x384>)
 80065ce:	fba3 1302 	umull	r1, r3, r3, r2
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	2164      	movs	r1, #100	; 0x64
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	3332      	adds	r3, #50	; 0x32
 80065e0:	4a27      	ldr	r2, [pc, #156]	; (8006680 <UART_SetConfig+0x384>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065ee:	4498      	add	r8, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	461d      	mov	r5, r3
 80065f4:	f04f 0600 	mov.w	r6, #0
 80065f8:	46a9      	mov	r9, r5
 80065fa:	46b2      	mov	sl, r6
 80065fc:	eb19 0309 	adds.w	r3, r9, r9
 8006600:	eb4a 040a 	adc.w	r4, sl, sl
 8006604:	4699      	mov	r9, r3
 8006606:	46a2      	mov	sl, r4
 8006608:	eb19 0905 	adds.w	r9, r9, r5
 800660c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006610:	f04f 0100 	mov.w	r1, #0
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800661c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006624:	4689      	mov	r9, r1
 8006626:	4692      	mov	sl, r2
 8006628:	eb19 0005 	adds.w	r0, r9, r5
 800662c:	eb4a 0106 	adc.w	r1, sl, r6
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	461d      	mov	r5, r3
 8006636:	f04f 0600 	mov.w	r6, #0
 800663a:	196b      	adds	r3, r5, r5
 800663c:	eb46 0406 	adc.w	r4, r6, r6
 8006640:	461a      	mov	r2, r3
 8006642:	4623      	mov	r3, r4
 8006644:	f7fa facc 	bl	8000be0 <__aeabi_uldivmod>
 8006648:	4603      	mov	r3, r0
 800664a:	460c      	mov	r4, r1
 800664c:	461a      	mov	r2, r3
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <UART_SetConfig+0x384>)
 8006650:	fba3 1302 	umull	r1, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	2164      	movs	r1, #100	; 0x64
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	3332      	adds	r3, #50	; 0x32
 8006662:	4a07      	ldr	r2, [pc, #28]	; (8006680 <UART_SetConfig+0x384>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	095b      	lsrs	r3, r3, #5
 800666a:	f003 0207 	and.w	r2, r3, #7
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4442      	add	r2, r8
 8006674:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006676:	e1b2      	b.n	80069de <UART_SetConfig+0x6e2>
 8006678:	40011000 	.word	0x40011000
 800667c:	40011400 	.word	0x40011400
 8006680:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4ad7      	ldr	r2, [pc, #860]	; (80069e8 <UART_SetConfig+0x6ec>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d005      	beq.n	800669a <UART_SetConfig+0x39e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4ad6      	ldr	r2, [pc, #856]	; (80069ec <UART_SetConfig+0x6f0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	f040 80d1 	bne.w	800683c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800669a:	f7fe fc89 	bl	8004fb0 <HAL_RCC_GetPCLK2Freq>
 800669e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	469a      	mov	sl, r3
 80066a4:	f04f 0b00 	mov.w	fp, #0
 80066a8:	46d0      	mov	r8, sl
 80066aa:	46d9      	mov	r9, fp
 80066ac:	eb18 0308 	adds.w	r3, r8, r8
 80066b0:	eb49 0409 	adc.w	r4, r9, r9
 80066b4:	4698      	mov	r8, r3
 80066b6:	46a1      	mov	r9, r4
 80066b8:	eb18 080a 	adds.w	r8, r8, sl
 80066bc:	eb49 090b 	adc.w	r9, r9, fp
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066d4:	4688      	mov	r8, r1
 80066d6:	4691      	mov	r9, r2
 80066d8:	eb1a 0508 	adds.w	r5, sl, r8
 80066dc:	eb4b 0609 	adc.w	r6, fp, r9
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4619      	mov	r1, r3
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	f04f 0400 	mov.w	r4, #0
 80066f2:	0094      	lsls	r4, r2, #2
 80066f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f8:	008b      	lsls	r3, r1, #2
 80066fa:	461a      	mov	r2, r3
 80066fc:	4623      	mov	r3, r4
 80066fe:	4628      	mov	r0, r5
 8006700:	4631      	mov	r1, r6
 8006702:	f7fa fa6d 	bl	8000be0 <__aeabi_uldivmod>
 8006706:	4603      	mov	r3, r0
 8006708:	460c      	mov	r4, r1
 800670a:	461a      	mov	r2, r3
 800670c:	4bb8      	ldr	r3, [pc, #736]	; (80069f0 <UART_SetConfig+0x6f4>)
 800670e:	fba3 2302 	umull	r2, r3, r3, r2
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	469b      	mov	fp, r3
 800671c:	f04f 0c00 	mov.w	ip, #0
 8006720:	46d9      	mov	r9, fp
 8006722:	46e2      	mov	sl, ip
 8006724:	eb19 0309 	adds.w	r3, r9, r9
 8006728:	eb4a 040a 	adc.w	r4, sl, sl
 800672c:	4699      	mov	r9, r3
 800672e:	46a2      	mov	sl, r4
 8006730:	eb19 090b 	adds.w	r9, r9, fp
 8006734:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006738:	f04f 0100 	mov.w	r1, #0
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006744:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006748:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800674c:	4689      	mov	r9, r1
 800674e:	4692      	mov	sl, r2
 8006750:	eb1b 0509 	adds.w	r5, fp, r9
 8006754:	eb4c 060a 	adc.w	r6, ip, sl
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4619      	mov	r1, r3
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	f04f 0400 	mov.w	r4, #0
 800676a:	0094      	lsls	r4, r2, #2
 800676c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006770:	008b      	lsls	r3, r1, #2
 8006772:	461a      	mov	r2, r3
 8006774:	4623      	mov	r3, r4
 8006776:	4628      	mov	r0, r5
 8006778:	4631      	mov	r1, r6
 800677a:	f7fa fa31 	bl	8000be0 <__aeabi_uldivmod>
 800677e:	4603      	mov	r3, r0
 8006780:	460c      	mov	r4, r1
 8006782:	461a      	mov	r2, r3
 8006784:	4b9a      	ldr	r3, [pc, #616]	; (80069f0 <UART_SetConfig+0x6f4>)
 8006786:	fba3 1302 	umull	r1, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2164      	movs	r1, #100	; 0x64
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	3332      	adds	r3, #50	; 0x32
 8006798:	4a95      	ldr	r2, [pc, #596]	; (80069f0 <UART_SetConfig+0x6f4>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067a4:	4498      	add	r8, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	469b      	mov	fp, r3
 80067aa:	f04f 0c00 	mov.w	ip, #0
 80067ae:	46d9      	mov	r9, fp
 80067b0:	46e2      	mov	sl, ip
 80067b2:	eb19 0309 	adds.w	r3, r9, r9
 80067b6:	eb4a 040a 	adc.w	r4, sl, sl
 80067ba:	4699      	mov	r9, r3
 80067bc:	46a2      	mov	sl, r4
 80067be:	eb19 090b 	adds.w	r9, r9, fp
 80067c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067c6:	f04f 0100 	mov.w	r1, #0
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067da:	4689      	mov	r9, r1
 80067dc:	4692      	mov	sl, r2
 80067de:	eb1b 0509 	adds.w	r5, fp, r9
 80067e2:	eb4c 060a 	adc.w	r6, ip, sl
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4619      	mov	r1, r3
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	0094      	lsls	r4, r2, #2
 80067fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067fe:	008b      	lsls	r3, r1, #2
 8006800:	461a      	mov	r2, r3
 8006802:	4623      	mov	r3, r4
 8006804:	4628      	mov	r0, r5
 8006806:	4631      	mov	r1, r6
 8006808:	f7fa f9ea 	bl	8000be0 <__aeabi_uldivmod>
 800680c:	4603      	mov	r3, r0
 800680e:	460c      	mov	r4, r1
 8006810:	461a      	mov	r2, r3
 8006812:	4b77      	ldr	r3, [pc, #476]	; (80069f0 <UART_SetConfig+0x6f4>)
 8006814:	fba3 1302 	umull	r1, r3, r3, r2
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	2164      	movs	r1, #100	; 0x64
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	3332      	adds	r3, #50	; 0x32
 8006826:	4a72      	ldr	r2, [pc, #456]	; (80069f0 <UART_SetConfig+0x6f4>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	f003 020f 	and.w	r2, r3, #15
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4442      	add	r2, r8
 8006838:	609a      	str	r2, [r3, #8]
 800683a:	e0d0      	b.n	80069de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800683c:	f7fe fba4 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8006840:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	469a      	mov	sl, r3
 8006846:	f04f 0b00 	mov.w	fp, #0
 800684a:	46d0      	mov	r8, sl
 800684c:	46d9      	mov	r9, fp
 800684e:	eb18 0308 	adds.w	r3, r8, r8
 8006852:	eb49 0409 	adc.w	r4, r9, r9
 8006856:	4698      	mov	r8, r3
 8006858:	46a1      	mov	r9, r4
 800685a:	eb18 080a 	adds.w	r8, r8, sl
 800685e:	eb49 090b 	adc.w	r9, r9, fp
 8006862:	f04f 0100 	mov.w	r1, #0
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800686e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006872:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006876:	4688      	mov	r8, r1
 8006878:	4691      	mov	r9, r2
 800687a:	eb1a 0508 	adds.w	r5, sl, r8
 800687e:	eb4b 0609 	adc.w	r6, fp, r9
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4619      	mov	r1, r3
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	f04f 0400 	mov.w	r4, #0
 8006894:	0094      	lsls	r4, r2, #2
 8006896:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800689a:	008b      	lsls	r3, r1, #2
 800689c:	461a      	mov	r2, r3
 800689e:	4623      	mov	r3, r4
 80068a0:	4628      	mov	r0, r5
 80068a2:	4631      	mov	r1, r6
 80068a4:	f7fa f99c 	bl	8000be0 <__aeabi_uldivmod>
 80068a8:	4603      	mov	r3, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	461a      	mov	r2, r3
 80068ae:	4b50      	ldr	r3, [pc, #320]	; (80069f0 <UART_SetConfig+0x6f4>)
 80068b0:	fba3 2302 	umull	r2, r3, r3, r2
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	469b      	mov	fp, r3
 80068be:	f04f 0c00 	mov.w	ip, #0
 80068c2:	46d9      	mov	r9, fp
 80068c4:	46e2      	mov	sl, ip
 80068c6:	eb19 0309 	adds.w	r3, r9, r9
 80068ca:	eb4a 040a 	adc.w	r4, sl, sl
 80068ce:	4699      	mov	r9, r3
 80068d0:	46a2      	mov	sl, r4
 80068d2:	eb19 090b 	adds.w	r9, r9, fp
 80068d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068da:	f04f 0100 	mov.w	r1, #0
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ee:	4689      	mov	r9, r1
 80068f0:	4692      	mov	sl, r2
 80068f2:	eb1b 0509 	adds.w	r5, fp, r9
 80068f6:	eb4c 060a 	adc.w	r6, ip, sl
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	4619      	mov	r1, r3
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	f04f 0400 	mov.w	r4, #0
 800690c:	0094      	lsls	r4, r2, #2
 800690e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	461a      	mov	r2, r3
 8006916:	4623      	mov	r3, r4
 8006918:	4628      	mov	r0, r5
 800691a:	4631      	mov	r1, r6
 800691c:	f7fa f960 	bl	8000be0 <__aeabi_uldivmod>
 8006920:	4603      	mov	r3, r0
 8006922:	460c      	mov	r4, r1
 8006924:	461a      	mov	r2, r3
 8006926:	4b32      	ldr	r3, [pc, #200]	; (80069f0 <UART_SetConfig+0x6f4>)
 8006928:	fba3 1302 	umull	r1, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	2164      	movs	r1, #100	; 0x64
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	3332      	adds	r3, #50	; 0x32
 800693a:	4a2d      	ldr	r2, [pc, #180]	; (80069f0 <UART_SetConfig+0x6f4>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006946:	4498      	add	r8, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	469b      	mov	fp, r3
 800694c:	f04f 0c00 	mov.w	ip, #0
 8006950:	46d9      	mov	r9, fp
 8006952:	46e2      	mov	sl, ip
 8006954:	eb19 0309 	adds.w	r3, r9, r9
 8006958:	eb4a 040a 	adc.w	r4, sl, sl
 800695c:	4699      	mov	r9, r3
 800695e:	46a2      	mov	sl, r4
 8006960:	eb19 090b 	adds.w	r9, r9, fp
 8006964:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006968:	f04f 0100 	mov.w	r1, #0
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800697c:	4689      	mov	r9, r1
 800697e:	4692      	mov	sl, r2
 8006980:	eb1b 0509 	adds.w	r5, fp, r9
 8006984:	eb4c 060a 	adc.w	r6, ip, sl
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4619      	mov	r1, r3
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	f04f 0400 	mov.w	r4, #0
 800699a:	0094      	lsls	r4, r2, #2
 800699c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069a0:	008b      	lsls	r3, r1, #2
 80069a2:	461a      	mov	r2, r3
 80069a4:	4623      	mov	r3, r4
 80069a6:	4628      	mov	r0, r5
 80069a8:	4631      	mov	r1, r6
 80069aa:	f7fa f919 	bl	8000be0 <__aeabi_uldivmod>
 80069ae:	4603      	mov	r3, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	461a      	mov	r2, r3
 80069b4:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <UART_SetConfig+0x6f4>)
 80069b6:	fba3 1302 	umull	r1, r3, r3, r2
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2164      	movs	r1, #100	; 0x64
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	3332      	adds	r3, #50	; 0x32
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <UART_SetConfig+0x6f4>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	f003 020f 	and.w	r2, r3, #15
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4442      	add	r2, r8
 80069da:	609a      	str	r2, [r3, #8]
}
 80069dc:	e7ff      	b.n	80069de <UART_SetConfig+0x6e2>
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	40011000 	.word	0x40011000
 80069ec:	40011400 	.word	0x40011400
 80069f0:	51eb851f 	.word	0x51eb851f

080069f4 <__errno>:
 80069f4:	4b01      	ldr	r3, [pc, #4]	; (80069fc <__errno+0x8>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	2000000c 	.word	0x2000000c

08006a00 <__libc_init_array>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	4e0d      	ldr	r6, [pc, #52]	; (8006a38 <__libc_init_array+0x38>)
 8006a04:	4c0d      	ldr	r4, [pc, #52]	; (8006a3c <__libc_init_array+0x3c>)
 8006a06:	1ba4      	subs	r4, r4, r6
 8006a08:	10a4      	asrs	r4, r4, #2
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	42a5      	cmp	r5, r4
 8006a0e:	d109      	bne.n	8006a24 <__libc_init_array+0x24>
 8006a10:	4e0b      	ldr	r6, [pc, #44]	; (8006a40 <__libc_init_array+0x40>)
 8006a12:	4c0c      	ldr	r4, [pc, #48]	; (8006a44 <__libc_init_array+0x44>)
 8006a14:	f002 fd88 	bl	8009528 <_init>
 8006a18:	1ba4      	subs	r4, r4, r6
 8006a1a:	10a4      	asrs	r4, r4, #2
 8006a1c:	2500      	movs	r5, #0
 8006a1e:	42a5      	cmp	r5, r4
 8006a20:	d105      	bne.n	8006a2e <__libc_init_array+0x2e>
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a28:	4798      	blx	r3
 8006a2a:	3501      	adds	r5, #1
 8006a2c:	e7ee      	b.n	8006a0c <__libc_init_array+0xc>
 8006a2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a32:	4798      	blx	r3
 8006a34:	3501      	adds	r5, #1
 8006a36:	e7f2      	b.n	8006a1e <__libc_init_array+0x1e>
 8006a38:	0800981c 	.word	0x0800981c
 8006a3c:	0800981c 	.word	0x0800981c
 8006a40:	0800981c 	.word	0x0800981c
 8006a44:	08009820 	.word	0x08009820

08006a48 <memset>:
 8006a48:	4402      	add	r2, r0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d100      	bne.n	8006a52 <memset+0xa>
 8006a50:	4770      	bx	lr
 8006a52:	f803 1b01 	strb.w	r1, [r3], #1
 8006a56:	e7f9      	b.n	8006a4c <memset+0x4>

08006a58 <__cvt>:
 8006a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	ec55 4b10 	vmov	r4, r5, d0
 8006a60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006a62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	460e      	mov	r6, r1
 8006a6a:	4691      	mov	r9, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	bfb8      	it	lt
 8006a70:	4622      	movlt	r2, r4
 8006a72:	462b      	mov	r3, r5
 8006a74:	f027 0720 	bic.w	r7, r7, #32
 8006a78:	bfbb      	ittet	lt
 8006a7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a7e:	461d      	movlt	r5, r3
 8006a80:	2300      	movge	r3, #0
 8006a82:	232d      	movlt	r3, #45	; 0x2d
 8006a84:	bfb8      	it	lt
 8006a86:	4614      	movlt	r4, r2
 8006a88:	2f46      	cmp	r7, #70	; 0x46
 8006a8a:	700b      	strb	r3, [r1, #0]
 8006a8c:	d004      	beq.n	8006a98 <__cvt+0x40>
 8006a8e:	2f45      	cmp	r7, #69	; 0x45
 8006a90:	d100      	bne.n	8006a94 <__cvt+0x3c>
 8006a92:	3601      	adds	r6, #1
 8006a94:	2102      	movs	r1, #2
 8006a96:	e000      	b.n	8006a9a <__cvt+0x42>
 8006a98:	2103      	movs	r1, #3
 8006a9a:	ab03      	add	r3, sp, #12
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	ab02      	add	r3, sp, #8
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	4653      	mov	r3, sl
 8006aa6:	ec45 4b10 	vmov	d0, r4, r5
 8006aaa:	f000 fc61 	bl	8007370 <_dtoa_r>
 8006aae:	2f47      	cmp	r7, #71	; 0x47
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	d102      	bne.n	8006aba <__cvt+0x62>
 8006ab4:	f019 0f01 	tst.w	r9, #1
 8006ab8:	d026      	beq.n	8006b08 <__cvt+0xb0>
 8006aba:	2f46      	cmp	r7, #70	; 0x46
 8006abc:	eb08 0906 	add.w	r9, r8, r6
 8006ac0:	d111      	bne.n	8006ae6 <__cvt+0x8e>
 8006ac2:	f898 3000 	ldrb.w	r3, [r8]
 8006ac6:	2b30      	cmp	r3, #48	; 0x30
 8006ac8:	d10a      	bne.n	8006ae0 <__cvt+0x88>
 8006aca:	2200      	movs	r2, #0
 8006acc:	2300      	movs	r3, #0
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7f9 ffc5 	bl	8000a60 <__aeabi_dcmpeq>
 8006ad6:	b918      	cbnz	r0, 8006ae0 <__cvt+0x88>
 8006ad8:	f1c6 0601 	rsb	r6, r6, #1
 8006adc:	f8ca 6000 	str.w	r6, [sl]
 8006ae0:	f8da 3000 	ldr.w	r3, [sl]
 8006ae4:	4499      	add	r9, r3
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4620      	mov	r0, r4
 8006aec:	4629      	mov	r1, r5
 8006aee:	f7f9 ffb7 	bl	8000a60 <__aeabi_dcmpeq>
 8006af2:	b938      	cbnz	r0, 8006b04 <__cvt+0xac>
 8006af4:	2230      	movs	r2, #48	; 0x30
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	454b      	cmp	r3, r9
 8006afa:	d205      	bcs.n	8006b08 <__cvt+0xb0>
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	9103      	str	r1, [sp, #12]
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e7f8      	b.n	8006af6 <__cvt+0x9e>
 8006b04:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b0c:	eba3 0308 	sub.w	r3, r3, r8
 8006b10:	4640      	mov	r0, r8
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	b004      	add	sp, #16
 8006b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b1a <__exponent>:
 8006b1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	4604      	mov	r4, r0
 8006b20:	bfba      	itte	lt
 8006b22:	4249      	neglt	r1, r1
 8006b24:	232d      	movlt	r3, #45	; 0x2d
 8006b26:	232b      	movge	r3, #43	; 0x2b
 8006b28:	2909      	cmp	r1, #9
 8006b2a:	f804 2b02 	strb.w	r2, [r4], #2
 8006b2e:	7043      	strb	r3, [r0, #1]
 8006b30:	dd20      	ble.n	8006b74 <__exponent+0x5a>
 8006b32:	f10d 0307 	add.w	r3, sp, #7
 8006b36:	461f      	mov	r7, r3
 8006b38:	260a      	movs	r6, #10
 8006b3a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b3e:	fb06 1115 	mls	r1, r6, r5, r1
 8006b42:	3130      	adds	r1, #48	; 0x30
 8006b44:	2d09      	cmp	r5, #9
 8006b46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b4a:	f103 32ff 	add.w	r2, r3, #4294967295
 8006b4e:	4629      	mov	r1, r5
 8006b50:	dc09      	bgt.n	8006b66 <__exponent+0x4c>
 8006b52:	3130      	adds	r1, #48	; 0x30
 8006b54:	3b02      	subs	r3, #2
 8006b56:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b5a:	42bb      	cmp	r3, r7
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	d304      	bcc.n	8006b6a <__exponent+0x50>
 8006b60:	1a10      	subs	r0, r2, r0
 8006b62:	b003      	add	sp, #12
 8006b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b66:	4613      	mov	r3, r2
 8006b68:	e7e7      	b.n	8006b3a <__exponent+0x20>
 8006b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b6e:	f804 2b01 	strb.w	r2, [r4], #1
 8006b72:	e7f2      	b.n	8006b5a <__exponent+0x40>
 8006b74:	2330      	movs	r3, #48	; 0x30
 8006b76:	4419      	add	r1, r3
 8006b78:	7083      	strb	r3, [r0, #2]
 8006b7a:	1d02      	adds	r2, r0, #4
 8006b7c:	70c1      	strb	r1, [r0, #3]
 8006b7e:	e7ef      	b.n	8006b60 <__exponent+0x46>

08006b80 <_printf_float>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	b08d      	sub	sp, #52	; 0x34
 8006b86:	460c      	mov	r4, r1
 8006b88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006b8c:	4616      	mov	r6, r2
 8006b8e:	461f      	mov	r7, r3
 8006b90:	4605      	mov	r5, r0
 8006b92:	f001 fb1f 	bl	80081d4 <_localeconv_r>
 8006b96:	6803      	ldr	r3, [r0, #0]
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7f9 fb34 	bl	8000208 <strlen>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba8:	9005      	str	r0, [sp, #20]
 8006baa:	3307      	adds	r3, #7
 8006bac:	f023 0307 	bic.w	r3, r3, #7
 8006bb0:	f103 0208 	add.w	r2, r3, #8
 8006bb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bb8:	f8d4 b000 	ldr.w	fp, [r4]
 8006bbc:	f8c8 2000 	str.w	r2, [r8]
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bc8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bcc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bd0:	9307      	str	r3, [sp, #28]
 8006bd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	4ba7      	ldr	r3, [pc, #668]	; (8006e78 <_printf_float+0x2f8>)
 8006bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be0:	f7f9 ff70 	bl	8000ac4 <__aeabi_dcmpun>
 8006be4:	bb70      	cbnz	r0, 8006c44 <_printf_float+0xc4>
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	4ba3      	ldr	r3, [pc, #652]	; (8006e78 <_printf_float+0x2f8>)
 8006bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf0:	f7f9 ff4a 	bl	8000a88 <__aeabi_dcmple>
 8006bf4:	bb30      	cbnz	r0, 8006c44 <_printf_float+0xc4>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	f7f9 ff39 	bl	8000a74 <__aeabi_dcmplt>
 8006c02:	b110      	cbz	r0, 8006c0a <_printf_float+0x8a>
 8006c04:	232d      	movs	r3, #45	; 0x2d
 8006c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0a:	4a9c      	ldr	r2, [pc, #624]	; (8006e7c <_printf_float+0x2fc>)
 8006c0c:	4b9c      	ldr	r3, [pc, #624]	; (8006e80 <_printf_float+0x300>)
 8006c0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c12:	bf8c      	ite	hi
 8006c14:	4690      	movhi	r8, r2
 8006c16:	4698      	movls	r8, r3
 8006c18:	2303      	movs	r3, #3
 8006c1a:	f02b 0204 	bic.w	r2, fp, #4
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	6022      	str	r2, [r4, #0]
 8006c22:	f04f 0900 	mov.w	r9, #0
 8006c26:	9700      	str	r7, [sp, #0]
 8006c28:	4633      	mov	r3, r6
 8006c2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 f9e6 	bl	8007000 <_printf_common>
 8006c34:	3001      	adds	r0, #1
 8006c36:	f040 808d 	bne.w	8006d54 <_printf_float+0x1d4>
 8006c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3e:	b00d      	add	sp, #52	; 0x34
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff3a 	bl	8000ac4 <__aeabi_dcmpun>
 8006c50:	b110      	cbz	r0, 8006c58 <_printf_float+0xd8>
 8006c52:	4a8c      	ldr	r2, [pc, #560]	; (8006e84 <_printf_float+0x304>)
 8006c54:	4b8c      	ldr	r3, [pc, #560]	; (8006e88 <_printf_float+0x308>)
 8006c56:	e7da      	b.n	8006c0e <_printf_float+0x8e>
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	1c4b      	adds	r3, r1, #1
 8006c5c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006c60:	a80a      	add	r0, sp, #40	; 0x28
 8006c62:	d13e      	bne.n	8006ce2 <_printf_float+0x162>
 8006c64:	2306      	movs	r3, #6
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006c6e:	ab09      	add	r3, sp, #36	; 0x24
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	ec49 8b10 	vmov	d0, r8, r9
 8006c76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c7a:	6022      	str	r2, [r4, #0]
 8006c7c:	f8cd a004 	str.w	sl, [sp, #4]
 8006c80:	6861      	ldr	r1, [r4, #4]
 8006c82:	4628      	mov	r0, r5
 8006c84:	f7ff fee8 	bl	8006a58 <__cvt>
 8006c88:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006c8c:	2b47      	cmp	r3, #71	; 0x47
 8006c8e:	4680      	mov	r8, r0
 8006c90:	d109      	bne.n	8006ca6 <_printf_float+0x126>
 8006c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c94:	1cd8      	adds	r0, r3, #3
 8006c96:	db02      	blt.n	8006c9e <_printf_float+0x11e>
 8006c98:	6862      	ldr	r2, [r4, #4]
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	dd47      	ble.n	8006d2e <_printf_float+0x1ae>
 8006c9e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ca2:	fa5f fa8a 	uxtb.w	sl, sl
 8006ca6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cac:	d824      	bhi.n	8006cf8 <_printf_float+0x178>
 8006cae:	3901      	subs	r1, #1
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cb6:	9109      	str	r1, [sp, #36]	; 0x24
 8006cb8:	f7ff ff2f 	bl	8006b1a <__exponent>
 8006cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cbe:	1813      	adds	r3, r2, r0
 8006cc0:	2a01      	cmp	r2, #1
 8006cc2:	4681      	mov	r9, r0
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	dc02      	bgt.n	8006cce <_printf_float+0x14e>
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	07d1      	lsls	r1, r2, #31
 8006ccc:	d501      	bpl.n	8006cd2 <_printf_float+0x152>
 8006cce:	3301      	adds	r3, #1
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0a5      	beq.n	8006c26 <_printf_float+0xa6>
 8006cda:	232d      	movs	r3, #45	; 0x2d
 8006cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce0:	e7a1      	b.n	8006c26 <_printf_float+0xa6>
 8006ce2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006ce6:	f000 8177 	beq.w	8006fd8 <_printf_float+0x458>
 8006cea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006cee:	d1bb      	bne.n	8006c68 <_printf_float+0xe8>
 8006cf0:	2900      	cmp	r1, #0
 8006cf2:	d1b9      	bne.n	8006c68 <_printf_float+0xe8>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e7b6      	b.n	8006c66 <_printf_float+0xe6>
 8006cf8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006cfc:	d119      	bne.n	8006d32 <_printf_float+0x1b2>
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	dd0c      	ble.n	8006d1e <_printf_float+0x19e>
 8006d04:	6121      	str	r1, [r4, #16]
 8006d06:	b913      	cbnz	r3, 8006d0e <_printf_float+0x18e>
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	07d2      	lsls	r2, r2, #31
 8006d0c:	d502      	bpl.n	8006d14 <_printf_float+0x194>
 8006d0e:	3301      	adds	r3, #1
 8006d10:	440b      	add	r3, r1
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d16:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d18:	f04f 0900 	mov.w	r9, #0
 8006d1c:	e7d9      	b.n	8006cd2 <_printf_float+0x152>
 8006d1e:	b913      	cbnz	r3, 8006d26 <_printf_float+0x1a6>
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	07d0      	lsls	r0, r2, #31
 8006d24:	d501      	bpl.n	8006d2a <_printf_float+0x1aa>
 8006d26:	3302      	adds	r3, #2
 8006d28:	e7f3      	b.n	8006d12 <_printf_float+0x192>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e7f1      	b.n	8006d12 <_printf_float+0x192>
 8006d2e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006d32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d36:	4293      	cmp	r3, r2
 8006d38:	db05      	blt.n	8006d46 <_printf_float+0x1c6>
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	07d1      	lsls	r1, r2, #31
 8006d40:	d5e8      	bpl.n	8006d14 <_printf_float+0x194>
 8006d42:	3301      	adds	r3, #1
 8006d44:	e7e5      	b.n	8006d12 <_printf_float+0x192>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bfd4      	ite	le
 8006d4a:	f1c3 0302 	rsble	r3, r3, #2
 8006d4e:	2301      	movgt	r3, #1
 8006d50:	4413      	add	r3, r2
 8006d52:	e7de      	b.n	8006d12 <_printf_float+0x192>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	055a      	lsls	r2, r3, #21
 8006d58:	d407      	bmi.n	8006d6a <_printf_float+0x1ea>
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	d12b      	bne.n	8006dc0 <_printf_float+0x240>
 8006d68:	e767      	b.n	8006c3a <_printf_float+0xba>
 8006d6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006d6e:	f240 80dc 	bls.w	8006f2a <_printf_float+0x3aa>
 8006d72:	2200      	movs	r2, #0
 8006d74:	2300      	movs	r3, #0
 8006d76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d7a:	f7f9 fe71 	bl	8000a60 <__aeabi_dcmpeq>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d033      	beq.n	8006dea <_printf_float+0x26a>
 8006d82:	2301      	movs	r3, #1
 8006d84:	4a41      	ldr	r2, [pc, #260]	; (8006e8c <_printf_float+0x30c>)
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f af54 	beq.w	8006c3a <_printf_float+0xba>
 8006d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d96:	429a      	cmp	r2, r3
 8006d98:	db02      	blt.n	8006da0 <_printf_float+0x220>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	07d8      	lsls	r0, r3, #31
 8006d9e:	d50f      	bpl.n	8006dc0 <_printf_float+0x240>
 8006da0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	f43f af45 	beq.w	8006c3a <_printf_float+0xba>
 8006db0:	f04f 0800 	mov.w	r8, #0
 8006db4:	f104 091a 	add.w	r9, r4, #26
 8006db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	4543      	cmp	r3, r8
 8006dbe:	dc09      	bgt.n	8006dd4 <_printf_float+0x254>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	079b      	lsls	r3, r3, #30
 8006dc4:	f100 8103 	bmi.w	8006fce <_printf_float+0x44e>
 8006dc8:	68e0      	ldr	r0, [r4, #12]
 8006dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dcc:	4298      	cmp	r0, r3
 8006dce:	bfb8      	it	lt
 8006dd0:	4618      	movlt	r0, r3
 8006dd2:	e734      	b.n	8006c3e <_printf_float+0xbe>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	464a      	mov	r2, r9
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	f43f af2b 	beq.w	8006c3a <_printf_float+0xba>
 8006de4:	f108 0801 	add.w	r8, r8, #1
 8006de8:	e7e6      	b.n	8006db8 <_printf_float+0x238>
 8006dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dc2b      	bgt.n	8006e48 <_printf_float+0x2c8>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <_printf_float+0x30c>)
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f af1d 	beq.w	8006c3a <_printf_float+0xba>
 8006e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e02:	b923      	cbnz	r3, 8006e0e <_printf_float+0x28e>
 8006e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e06:	b913      	cbnz	r3, 8006e0e <_printf_float+0x28e>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	07d9      	lsls	r1, r3, #31
 8006e0c:	d5d8      	bpl.n	8006dc0 <_printf_float+0x240>
 8006e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f af0e 	beq.w	8006c3a <_printf_float+0xba>
 8006e1e:	f04f 0900 	mov.w	r9, #0
 8006e22:	f104 0a1a 	add.w	sl, r4, #26
 8006e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e28:	425b      	negs	r3, r3
 8006e2a:	454b      	cmp	r3, r9
 8006e2c:	dc01      	bgt.n	8006e32 <_printf_float+0x2b2>
 8006e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e30:	e794      	b.n	8006d5c <_printf_float+0x1dc>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4652      	mov	r2, sl
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f43f aefc 	beq.w	8006c3a <_printf_float+0xba>
 8006e42:	f109 0901 	add.w	r9, r9, #1
 8006e46:	e7ee      	b.n	8006e26 <_printf_float+0x2a6>
 8006e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	bfa8      	it	ge
 8006e50:	461a      	movge	r2, r3
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	4691      	mov	r9, r2
 8006e56:	dd07      	ble.n	8006e68 <_printf_float+0x2e8>
 8006e58:	4613      	mov	r3, r2
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f aee9 	beq.w	8006c3a <_printf_float+0xba>
 8006e68:	f104 031a 	add.w	r3, r4, #26
 8006e6c:	f04f 0b00 	mov.w	fp, #0
 8006e70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e74:	9306      	str	r3, [sp, #24]
 8006e76:	e015      	b.n	8006ea4 <_printf_float+0x324>
 8006e78:	7fefffff 	.word	0x7fefffff
 8006e7c:	08009568 	.word	0x08009568
 8006e80:	08009564 	.word	0x08009564
 8006e84:	08009570 	.word	0x08009570
 8006e88:	0800956c 	.word	0x0800956c
 8006e8c:	08009574 	.word	0x08009574
 8006e90:	2301      	movs	r3, #1
 8006e92:	9a06      	ldr	r2, [sp, #24]
 8006e94:	4631      	mov	r1, r6
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f43f aecd 	beq.w	8006c3a <_printf_float+0xba>
 8006ea0:	f10b 0b01 	add.w	fp, fp, #1
 8006ea4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006ea8:	ebaa 0309 	sub.w	r3, sl, r9
 8006eac:	455b      	cmp	r3, fp
 8006eae:	dcef      	bgt.n	8006e90 <_printf_float+0x310>
 8006eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	44d0      	add	r8, sl
 8006eb8:	db15      	blt.n	8006ee6 <_printf_float+0x366>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	07da      	lsls	r2, r3, #31
 8006ebe:	d412      	bmi.n	8006ee6 <_printf_float+0x366>
 8006ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec4:	eba3 020a 	sub.w	r2, r3, sl
 8006ec8:	eba3 0a01 	sub.w	sl, r3, r1
 8006ecc:	4592      	cmp	sl, r2
 8006ece:	bfa8      	it	ge
 8006ed0:	4692      	movge	sl, r2
 8006ed2:	f1ba 0f00 	cmp.w	sl, #0
 8006ed6:	dc0e      	bgt.n	8006ef6 <_printf_float+0x376>
 8006ed8:	f04f 0800 	mov.w	r8, #0
 8006edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ee0:	f104 091a 	add.w	r9, r4, #26
 8006ee4:	e019      	b.n	8006f1a <_printf_float+0x39a>
 8006ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d1e5      	bne.n	8006ec0 <_printf_float+0x340>
 8006ef4:	e6a1      	b.n	8006c3a <_printf_float+0xba>
 8006ef6:	4653      	mov	r3, sl
 8006ef8:	4642      	mov	r2, r8
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	d1e9      	bne.n	8006ed8 <_printf_float+0x358>
 8006f04:	e699      	b.n	8006c3a <_printf_float+0xba>
 8006f06:	2301      	movs	r3, #1
 8006f08:	464a      	mov	r2, r9
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	f43f ae92 	beq.w	8006c3a <_printf_float+0xba>
 8006f16:	f108 0801 	add.w	r8, r8, #1
 8006f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	eba3 030a 	sub.w	r3, r3, sl
 8006f24:	4543      	cmp	r3, r8
 8006f26:	dcee      	bgt.n	8006f06 <_printf_float+0x386>
 8006f28:	e74a      	b.n	8006dc0 <_printf_float+0x240>
 8006f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f2c:	2a01      	cmp	r2, #1
 8006f2e:	dc01      	bgt.n	8006f34 <_printf_float+0x3b4>
 8006f30:	07db      	lsls	r3, r3, #31
 8006f32:	d53a      	bpl.n	8006faa <_printf_float+0x42a>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4642      	mov	r2, r8
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f ae7b 	beq.w	8006c3a <_printf_float+0xba>
 8006f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b8      	blx	r7
 8006f4e:	3001      	adds	r0, #1
 8006f50:	f108 0801 	add.w	r8, r8, #1
 8006f54:	f43f ae71 	beq.w	8006c3a <_printf_float+0xba>
 8006f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2300      	movs	r3, #0
 8006f66:	f7f9 fd7b 	bl	8000a60 <__aeabi_dcmpeq>
 8006f6a:	b9c8      	cbnz	r0, 8006fa0 <_printf_float+0x420>
 8006f6c:	4653      	mov	r3, sl
 8006f6e:	4642      	mov	r2, r8
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	d10e      	bne.n	8006f98 <_printf_float+0x418>
 8006f7a:	e65e      	b.n	8006c3a <_printf_float+0xba>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f ae57 	beq.w	8006c3a <_printf_float+0xba>
 8006f8c:	f108 0801 	add.w	r8, r8, #1
 8006f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	4543      	cmp	r3, r8
 8006f96:	dcf1      	bgt.n	8006f7c <_printf_float+0x3fc>
 8006f98:	464b      	mov	r3, r9
 8006f9a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f9e:	e6de      	b.n	8006d5e <_printf_float+0x1de>
 8006fa0:	f04f 0800 	mov.w	r8, #0
 8006fa4:	f104 0a1a 	add.w	sl, r4, #26
 8006fa8:	e7f2      	b.n	8006f90 <_printf_float+0x410>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e7df      	b.n	8006f6e <_printf_float+0x3ee>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	464a      	mov	r2, r9
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae3e 	beq.w	8006c3a <_printf_float+0xba>
 8006fbe:	f108 0801 	add.w	r8, r8, #1
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	4543      	cmp	r3, r8
 8006fca:	dcf0      	bgt.n	8006fae <_printf_float+0x42e>
 8006fcc:	e6fc      	b.n	8006dc8 <_printf_float+0x248>
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	f104 0919 	add.w	r9, r4, #25
 8006fd6:	e7f4      	b.n	8006fc2 <_printf_float+0x442>
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	f43f ae8b 	beq.w	8006cf4 <_printf_float+0x174>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006fe4:	ab09      	add	r3, sp, #36	; 0x24
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	ec49 8b10 	vmov	d0, r8, r9
 8006fec:	6022      	str	r2, [r4, #0]
 8006fee:	f8cd a004 	str.w	sl, [sp, #4]
 8006ff2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7ff fd2e 	bl	8006a58 <__cvt>
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	e648      	b.n	8006c92 <_printf_float+0x112>

08007000 <_printf_common>:
 8007000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	4691      	mov	r9, r2
 8007006:	461f      	mov	r7, r3
 8007008:	688a      	ldr	r2, [r1, #8]
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007010:	4293      	cmp	r3, r2
 8007012:	bfb8      	it	lt
 8007014:	4613      	movlt	r3, r2
 8007016:	f8c9 3000 	str.w	r3, [r9]
 800701a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800701e:	4606      	mov	r6, r0
 8007020:	460c      	mov	r4, r1
 8007022:	b112      	cbz	r2, 800702a <_printf_common+0x2a>
 8007024:	3301      	adds	r3, #1
 8007026:	f8c9 3000 	str.w	r3, [r9]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007034:	3302      	addmi	r3, #2
 8007036:	f8c9 3000 	strmi.w	r3, [r9]
 800703a:	6825      	ldr	r5, [r4, #0]
 800703c:	f015 0506 	ands.w	r5, r5, #6
 8007040:	d107      	bne.n	8007052 <_printf_common+0x52>
 8007042:	f104 0a19 	add.w	sl, r4, #25
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	f8d9 2000 	ldr.w	r2, [r9]
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	42ab      	cmp	r3, r5
 8007050:	dc28      	bgt.n	80070a4 <_printf_common+0xa4>
 8007052:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	3300      	adds	r3, #0
 800705a:	bf18      	it	ne
 800705c:	2301      	movne	r3, #1
 800705e:	0692      	lsls	r2, r2, #26
 8007060:	d42d      	bmi.n	80070be <_printf_common+0xbe>
 8007062:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007066:	4639      	mov	r1, r7
 8007068:	4630      	mov	r0, r6
 800706a:	47c0      	blx	r8
 800706c:	3001      	adds	r0, #1
 800706e:	d020      	beq.n	80070b2 <_printf_common+0xb2>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	68e5      	ldr	r5, [r4, #12]
 8007074:	f8d9 2000 	ldr.w	r2, [r9]
 8007078:	f003 0306 	and.w	r3, r3, #6
 800707c:	2b04      	cmp	r3, #4
 800707e:	bf08      	it	eq
 8007080:	1aad      	subeq	r5, r5, r2
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	bf0c      	ite	eq
 8007088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800708c:	2500      	movne	r5, #0
 800708e:	4293      	cmp	r3, r2
 8007090:	bfc4      	itt	gt
 8007092:	1a9b      	subgt	r3, r3, r2
 8007094:	18ed      	addgt	r5, r5, r3
 8007096:	f04f 0900 	mov.w	r9, #0
 800709a:	341a      	adds	r4, #26
 800709c:	454d      	cmp	r5, r9
 800709e:	d11a      	bne.n	80070d6 <_printf_common+0xd6>
 80070a0:	2000      	movs	r0, #0
 80070a2:	e008      	b.n	80070b6 <_printf_common+0xb6>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4652      	mov	r2, sl
 80070a8:	4639      	mov	r1, r7
 80070aa:	4630      	mov	r0, r6
 80070ac:	47c0      	blx	r8
 80070ae:	3001      	adds	r0, #1
 80070b0:	d103      	bne.n	80070ba <_printf_common+0xba>
 80070b2:	f04f 30ff 	mov.w	r0, #4294967295
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	3501      	adds	r5, #1
 80070bc:	e7c3      	b.n	8007046 <_printf_common+0x46>
 80070be:	18e1      	adds	r1, r4, r3
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	2030      	movs	r0, #48	; 0x30
 80070c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c8:	4422      	add	r2, r4
 80070ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070d2:	3302      	adds	r3, #2
 80070d4:	e7c5      	b.n	8007062 <_printf_common+0x62>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4622      	mov	r2, r4
 80070da:	4639      	mov	r1, r7
 80070dc:	4630      	mov	r0, r6
 80070de:	47c0      	blx	r8
 80070e0:	3001      	adds	r0, #1
 80070e2:	d0e6      	beq.n	80070b2 <_printf_common+0xb2>
 80070e4:	f109 0901 	add.w	r9, r9, #1
 80070e8:	e7d8      	b.n	800709c <_printf_common+0x9c>

080070ea <setbuf>:
 80070ea:	2900      	cmp	r1, #0
 80070ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f0:	bf0c      	ite	eq
 80070f2:	2202      	moveq	r2, #2
 80070f4:	2200      	movne	r2, #0
 80070f6:	f000 b801 	b.w	80070fc <setvbuf>
	...

080070fc <setvbuf>:
 80070fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007100:	461d      	mov	r5, r3
 8007102:	4b51      	ldr	r3, [pc, #324]	; (8007248 <setvbuf+0x14c>)
 8007104:	681e      	ldr	r6, [r3, #0]
 8007106:	4604      	mov	r4, r0
 8007108:	460f      	mov	r7, r1
 800710a:	4690      	mov	r8, r2
 800710c:	b126      	cbz	r6, 8007118 <setvbuf+0x1c>
 800710e:	69b3      	ldr	r3, [r6, #24]
 8007110:	b913      	cbnz	r3, 8007118 <setvbuf+0x1c>
 8007112:	4630      	mov	r0, r6
 8007114:	f000 ffd4 	bl	80080c0 <__sinit>
 8007118:	4b4c      	ldr	r3, [pc, #304]	; (800724c <setvbuf+0x150>)
 800711a:	429c      	cmp	r4, r3
 800711c:	d152      	bne.n	80071c4 <setvbuf+0xc8>
 800711e:	6874      	ldr	r4, [r6, #4]
 8007120:	f1b8 0f02 	cmp.w	r8, #2
 8007124:	d006      	beq.n	8007134 <setvbuf+0x38>
 8007126:	f1b8 0f01 	cmp.w	r8, #1
 800712a:	f200 8089 	bhi.w	8007240 <setvbuf+0x144>
 800712e:	2d00      	cmp	r5, #0
 8007130:	f2c0 8086 	blt.w	8007240 <setvbuf+0x144>
 8007134:	4621      	mov	r1, r4
 8007136:	4630      	mov	r0, r6
 8007138:	f000 ff58 	bl	8007fec <_fflush_r>
 800713c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713e:	b141      	cbz	r1, 8007152 <setvbuf+0x56>
 8007140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <setvbuf+0x52>
 8007148:	4630      	mov	r0, r6
 800714a:	f001 fb71 	bl	8008830 <_free_r>
 800714e:	2300      	movs	r3, #0
 8007150:	6363      	str	r3, [r4, #52]	; 0x34
 8007152:	2300      	movs	r3, #0
 8007154:	61a3      	str	r3, [r4, #24]
 8007156:	6063      	str	r3, [r4, #4]
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	061b      	lsls	r3, r3, #24
 800715c:	d503      	bpl.n	8007166 <setvbuf+0x6a>
 800715e:	6921      	ldr	r1, [r4, #16]
 8007160:	4630      	mov	r0, r6
 8007162:	f001 fb65 	bl	8008830 <_free_r>
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800716c:	f023 0303 	bic.w	r3, r3, #3
 8007170:	f1b8 0f02 	cmp.w	r8, #2
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	d05d      	beq.n	8007234 <setvbuf+0x138>
 8007178:	ab01      	add	r3, sp, #4
 800717a:	466a      	mov	r2, sp
 800717c:	4621      	mov	r1, r4
 800717e:	4630      	mov	r0, r6
 8007180:	f001 f836 	bl	80081f0 <__swhatbuf_r>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	4318      	orrs	r0, r3
 8007188:	81a0      	strh	r0, [r4, #12]
 800718a:	bb2d      	cbnz	r5, 80071d8 <setvbuf+0xdc>
 800718c:	9d00      	ldr	r5, [sp, #0]
 800718e:	4628      	mov	r0, r5
 8007190:	f001 f852 	bl	8008238 <malloc>
 8007194:	4607      	mov	r7, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	d14e      	bne.n	8007238 <setvbuf+0x13c>
 800719a:	f8dd 9000 	ldr.w	r9, [sp]
 800719e:	45a9      	cmp	r9, r5
 80071a0:	d13c      	bne.n	800721c <setvbuf+0x120>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f043 0302 	orr.w	r3, r3, #2
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	2300      	movs	r3, #0
 80071b0:	60a3      	str	r3, [r4, #8]
 80071b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	6123      	str	r3, [r4, #16]
 80071ba:	2301      	movs	r3, #1
 80071bc:	6163      	str	r3, [r4, #20]
 80071be:	b003      	add	sp, #12
 80071c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071c4:	4b22      	ldr	r3, [pc, #136]	; (8007250 <setvbuf+0x154>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <setvbuf+0xd2>
 80071ca:	68b4      	ldr	r4, [r6, #8]
 80071cc:	e7a8      	b.n	8007120 <setvbuf+0x24>
 80071ce:	4b21      	ldr	r3, [pc, #132]	; (8007254 <setvbuf+0x158>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68f4      	ldreq	r4, [r6, #12]
 80071d6:	e7a3      	b.n	8007120 <setvbuf+0x24>
 80071d8:	2f00      	cmp	r7, #0
 80071da:	d0d8      	beq.n	800718e <setvbuf+0x92>
 80071dc:	69b3      	ldr	r3, [r6, #24]
 80071de:	b913      	cbnz	r3, 80071e6 <setvbuf+0xea>
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 ff6d 	bl	80080c0 <__sinit>
 80071e6:	f1b8 0f01 	cmp.w	r8, #1
 80071ea:	bf08      	it	eq
 80071ec:	89a3      	ldrheq	r3, [r4, #12]
 80071ee:	6027      	str	r7, [r4, #0]
 80071f0:	bf04      	itt	eq
 80071f2:	f043 0301 	orreq.w	r3, r3, #1
 80071f6:	81a3      	strheq	r3, [r4, #12]
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f013 0008 	ands.w	r0, r3, #8
 80071fe:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007202:	d01b      	beq.n	800723c <setvbuf+0x140>
 8007204:	f013 0001 	ands.w	r0, r3, #1
 8007208:	bf18      	it	ne
 800720a:	426d      	negne	r5, r5
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	bf1d      	ittte	ne
 8007212:	60a3      	strne	r3, [r4, #8]
 8007214:	61a5      	strne	r5, [r4, #24]
 8007216:	4618      	movne	r0, r3
 8007218:	60a5      	streq	r5, [r4, #8]
 800721a:	e7d0      	b.n	80071be <setvbuf+0xc2>
 800721c:	4648      	mov	r0, r9
 800721e:	f001 f80b 	bl	8008238 <malloc>
 8007222:	4607      	mov	r7, r0
 8007224:	2800      	cmp	r0, #0
 8007226:	d0bc      	beq.n	80071a2 <setvbuf+0xa6>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	464d      	mov	r5, r9
 8007232:	e7d3      	b.n	80071dc <setvbuf+0xe0>
 8007234:	2000      	movs	r0, #0
 8007236:	e7b6      	b.n	80071a6 <setvbuf+0xaa>
 8007238:	46a9      	mov	r9, r5
 800723a:	e7f5      	b.n	8007228 <setvbuf+0x12c>
 800723c:	60a0      	str	r0, [r4, #8]
 800723e:	e7be      	b.n	80071be <setvbuf+0xc2>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	e7bb      	b.n	80071be <setvbuf+0xc2>
 8007246:	bf00      	nop
 8007248:	2000000c 	.word	0x2000000c
 800724c:	080095a4 	.word	0x080095a4
 8007250:	080095c4 	.word	0x080095c4
 8007254:	08009584 	.word	0x08009584

08007258 <quorem>:
 8007258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	6903      	ldr	r3, [r0, #16]
 800725e:	690c      	ldr	r4, [r1, #16]
 8007260:	42a3      	cmp	r3, r4
 8007262:	4680      	mov	r8, r0
 8007264:	f2c0 8082 	blt.w	800736c <quorem+0x114>
 8007268:	3c01      	subs	r4, #1
 800726a:	f101 0714 	add.w	r7, r1, #20
 800726e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007272:	f100 0614 	add.w	r6, r0, #20
 8007276:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800727a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800727e:	eb06 030c 	add.w	r3, r6, ip
 8007282:	3501      	adds	r5, #1
 8007284:	eb07 090c 	add.w	r9, r7, ip
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	fbb0 f5f5 	udiv	r5, r0, r5
 800728e:	b395      	cbz	r5, 80072f6 <quorem+0x9e>
 8007290:	f04f 0a00 	mov.w	sl, #0
 8007294:	4638      	mov	r0, r7
 8007296:	46b6      	mov	lr, r6
 8007298:	46d3      	mov	fp, sl
 800729a:	f850 2b04 	ldr.w	r2, [r0], #4
 800729e:	b293      	uxth	r3, r2
 80072a0:	fb05 a303 	mla	r3, r5, r3, sl
 80072a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ebab 0303 	sub.w	r3, fp, r3
 80072ae:	0c12      	lsrs	r2, r2, #16
 80072b0:	f8de b000 	ldr.w	fp, [lr]
 80072b4:	fb05 a202 	mla	r2, r5, r2, sl
 80072b8:	fa13 f38b 	uxtah	r3, r3, fp
 80072bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80072c0:	fa1f fb82 	uxth.w	fp, r2
 80072c4:	f8de 2000 	ldr.w	r2, [lr]
 80072c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80072cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072d6:	4581      	cmp	r9, r0
 80072d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80072dc:	f84e 3b04 	str.w	r3, [lr], #4
 80072e0:	d2db      	bcs.n	800729a <quorem+0x42>
 80072e2:	f856 300c 	ldr.w	r3, [r6, ip]
 80072e6:	b933      	cbnz	r3, 80072f6 <quorem+0x9e>
 80072e8:	9b01      	ldr	r3, [sp, #4]
 80072ea:	3b04      	subs	r3, #4
 80072ec:	429e      	cmp	r6, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	d330      	bcc.n	8007354 <quorem+0xfc>
 80072f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80072f6:	4640      	mov	r0, r8
 80072f8:	f001 f9c6 	bl	8008688 <__mcmp>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	db25      	blt.n	800734c <quorem+0xf4>
 8007300:	3501      	adds	r5, #1
 8007302:	4630      	mov	r0, r6
 8007304:	f04f 0c00 	mov.w	ip, #0
 8007308:	f857 2b04 	ldr.w	r2, [r7], #4
 800730c:	f8d0 e000 	ldr.w	lr, [r0]
 8007310:	b293      	uxth	r3, r2
 8007312:	ebac 0303 	sub.w	r3, ip, r3
 8007316:	0c12      	lsrs	r2, r2, #16
 8007318:	fa13 f38e 	uxtah	r3, r3, lr
 800731c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007324:	b29b      	uxth	r3, r3
 8007326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800732a:	45b9      	cmp	r9, r7
 800732c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007330:	f840 3b04 	str.w	r3, [r0], #4
 8007334:	d2e8      	bcs.n	8007308 <quorem+0xb0>
 8007336:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800733a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800733e:	b92a      	cbnz	r2, 800734c <quorem+0xf4>
 8007340:	3b04      	subs	r3, #4
 8007342:	429e      	cmp	r6, r3
 8007344:	461a      	mov	r2, r3
 8007346:	d30b      	bcc.n	8007360 <quorem+0x108>
 8007348:	f8c8 4010 	str.w	r4, [r8, #16]
 800734c:	4628      	mov	r0, r5
 800734e:	b003      	add	sp, #12
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	3b04      	subs	r3, #4
 8007358:	2a00      	cmp	r2, #0
 800735a:	d1ca      	bne.n	80072f2 <quorem+0x9a>
 800735c:	3c01      	subs	r4, #1
 800735e:	e7c5      	b.n	80072ec <quorem+0x94>
 8007360:	6812      	ldr	r2, [r2, #0]
 8007362:	3b04      	subs	r3, #4
 8007364:	2a00      	cmp	r2, #0
 8007366:	d1ef      	bne.n	8007348 <quorem+0xf0>
 8007368:	3c01      	subs	r4, #1
 800736a:	e7ea      	b.n	8007342 <quorem+0xea>
 800736c:	2000      	movs	r0, #0
 800736e:	e7ee      	b.n	800734e <quorem+0xf6>

08007370 <_dtoa_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	ec57 6b10 	vmov	r6, r7, d0
 8007378:	b097      	sub	sp, #92	; 0x5c
 800737a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800737c:	9106      	str	r1, [sp, #24]
 800737e:	4604      	mov	r4, r0
 8007380:	920b      	str	r2, [sp, #44]	; 0x2c
 8007382:	9312      	str	r3, [sp, #72]	; 0x48
 8007384:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007388:	e9cd 6700 	strd	r6, r7, [sp]
 800738c:	b93d      	cbnz	r5, 800739e <_dtoa_r+0x2e>
 800738e:	2010      	movs	r0, #16
 8007390:	f000 ff52 	bl	8008238 <malloc>
 8007394:	6260      	str	r0, [r4, #36]	; 0x24
 8007396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800739a:	6005      	str	r5, [r0, #0]
 800739c:	60c5      	str	r5, [r0, #12]
 800739e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a0:	6819      	ldr	r1, [r3, #0]
 80073a2:	b151      	cbz	r1, 80073ba <_dtoa_r+0x4a>
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	604a      	str	r2, [r1, #4]
 80073a8:	2301      	movs	r3, #1
 80073aa:	4093      	lsls	r3, r2
 80073ac:	608b      	str	r3, [r1, #8]
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 ff89 	bl	80082c6 <_Bfree>
 80073b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	1e3b      	subs	r3, r7, #0
 80073bc:	bfbb      	ittet	lt
 80073be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073c2:	9301      	strlt	r3, [sp, #4]
 80073c4:	2300      	movge	r3, #0
 80073c6:	2201      	movlt	r2, #1
 80073c8:	bfac      	ite	ge
 80073ca:	f8c8 3000 	strge.w	r3, [r8]
 80073ce:	f8c8 2000 	strlt.w	r2, [r8]
 80073d2:	4baf      	ldr	r3, [pc, #700]	; (8007690 <_dtoa_r+0x320>)
 80073d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073d8:	ea33 0308 	bics.w	r3, r3, r8
 80073dc:	d114      	bne.n	8007408 <_dtoa_r+0x98>
 80073de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	b923      	cbnz	r3, 80073f4 <_dtoa_r+0x84>
 80073ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f000 8542 	beq.w	8007e78 <_dtoa_r+0xb08>
 80073f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80076a4 <_dtoa_r+0x334>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8544 	beq.w	8007e88 <_dtoa_r+0xb18>
 8007400:	f10b 0303 	add.w	r3, fp, #3
 8007404:	f000 bd3e 	b.w	8007e84 <_dtoa_r+0xb14>
 8007408:	e9dd 6700 	ldrd	r6, r7, [sp]
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	4630      	mov	r0, r6
 8007412:	4639      	mov	r1, r7
 8007414:	f7f9 fb24 	bl	8000a60 <__aeabi_dcmpeq>
 8007418:	4681      	mov	r9, r0
 800741a:	b168      	cbz	r0, 8007438 <_dtoa_r+0xc8>
 800741c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800741e:	2301      	movs	r3, #1
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8524 	beq.w	8007e72 <_dtoa_r+0xb02>
 800742a:	4b9a      	ldr	r3, [pc, #616]	; (8007694 <_dtoa_r+0x324>)
 800742c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800742e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	f000 bd28 	b.w	8007e88 <_dtoa_r+0xb18>
 8007438:	aa14      	add	r2, sp, #80	; 0x50
 800743a:	a915      	add	r1, sp, #84	; 0x54
 800743c:	ec47 6b10 	vmov	d0, r6, r7
 8007440:	4620      	mov	r0, r4
 8007442:	f001 f998 	bl	8008776 <__d2b>
 8007446:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800744a:	9004      	str	r0, [sp, #16]
 800744c:	2d00      	cmp	r5, #0
 800744e:	d07c      	beq.n	800754a <_dtoa_r+0x1da>
 8007450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007454:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007458:	46b2      	mov	sl, r6
 800745a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800745e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007462:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007466:	2200      	movs	r2, #0
 8007468:	4b8b      	ldr	r3, [pc, #556]	; (8007698 <_dtoa_r+0x328>)
 800746a:	4650      	mov	r0, sl
 800746c:	4659      	mov	r1, fp
 800746e:	f7f8 fed7 	bl	8000220 <__aeabi_dsub>
 8007472:	a381      	add	r3, pc, #516	; (adr r3, 8007678 <_dtoa_r+0x308>)
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f7f9 f88a 	bl	8000590 <__aeabi_dmul>
 800747c:	a380      	add	r3, pc, #512	; (adr r3, 8007680 <_dtoa_r+0x310>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f7f8 fecf 	bl	8000224 <__adddf3>
 8007486:	4606      	mov	r6, r0
 8007488:	4628      	mov	r0, r5
 800748a:	460f      	mov	r7, r1
 800748c:	f7f9 f816 	bl	80004bc <__aeabi_i2d>
 8007490:	a37d      	add	r3, pc, #500	; (adr r3, 8007688 <_dtoa_r+0x318>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f9 f87b 	bl	8000590 <__aeabi_dmul>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4630      	mov	r0, r6
 80074a0:	4639      	mov	r1, r7
 80074a2:	f7f8 febf 	bl	8000224 <__adddf3>
 80074a6:	4606      	mov	r6, r0
 80074a8:	460f      	mov	r7, r1
 80074aa:	f7f9 fb21 	bl	8000af0 <__aeabi_d2iz>
 80074ae:	2200      	movs	r2, #0
 80074b0:	4682      	mov	sl, r0
 80074b2:	2300      	movs	r3, #0
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f7f9 fadc 	bl	8000a74 <__aeabi_dcmplt>
 80074bc:	b148      	cbz	r0, 80074d2 <_dtoa_r+0x162>
 80074be:	4650      	mov	r0, sl
 80074c0:	f7f8 fffc 	bl	80004bc <__aeabi_i2d>
 80074c4:	4632      	mov	r2, r6
 80074c6:	463b      	mov	r3, r7
 80074c8:	f7f9 faca 	bl	8000a60 <__aeabi_dcmpeq>
 80074cc:	b908      	cbnz	r0, 80074d2 <_dtoa_r+0x162>
 80074ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074d2:	f1ba 0f16 	cmp.w	sl, #22
 80074d6:	d859      	bhi.n	800758c <_dtoa_r+0x21c>
 80074d8:	4970      	ldr	r1, [pc, #448]	; (800769c <_dtoa_r+0x32c>)
 80074da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e6:	f7f9 fae3 	bl	8000ab0 <__aeabi_dcmpgt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d050      	beq.n	8007590 <_dtoa_r+0x220>
 80074ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074f2:	2300      	movs	r3, #0
 80074f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f8:	1b5d      	subs	r5, r3, r5
 80074fa:	f1b5 0801 	subs.w	r8, r5, #1
 80074fe:	bf49      	itett	mi
 8007500:	f1c5 0301 	rsbmi	r3, r5, #1
 8007504:	2300      	movpl	r3, #0
 8007506:	9305      	strmi	r3, [sp, #20]
 8007508:	f04f 0800 	movmi.w	r8, #0
 800750c:	bf58      	it	pl
 800750e:	9305      	strpl	r3, [sp, #20]
 8007510:	f1ba 0f00 	cmp.w	sl, #0
 8007514:	db3e      	blt.n	8007594 <_dtoa_r+0x224>
 8007516:	2300      	movs	r3, #0
 8007518:	44d0      	add	r8, sl
 800751a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	9b06      	ldr	r3, [sp, #24]
 8007522:	2b09      	cmp	r3, #9
 8007524:	f200 8090 	bhi.w	8007648 <_dtoa_r+0x2d8>
 8007528:	2b05      	cmp	r3, #5
 800752a:	bfc4      	itt	gt
 800752c:	3b04      	subgt	r3, #4
 800752e:	9306      	strgt	r3, [sp, #24]
 8007530:	9b06      	ldr	r3, [sp, #24]
 8007532:	f1a3 0302 	sub.w	r3, r3, #2
 8007536:	bfcc      	ite	gt
 8007538:	2500      	movgt	r5, #0
 800753a:	2501      	movle	r5, #1
 800753c:	2b03      	cmp	r3, #3
 800753e:	f200 808f 	bhi.w	8007660 <_dtoa_r+0x2f0>
 8007542:	e8df f003 	tbb	[pc, r3]
 8007546:	7f7d      	.short	0x7f7d
 8007548:	7131      	.short	0x7131
 800754a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800754e:	441d      	add	r5, r3
 8007550:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007554:	2820      	cmp	r0, #32
 8007556:	dd13      	ble.n	8007580 <_dtoa_r+0x210>
 8007558:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800755c:	9b00      	ldr	r3, [sp, #0]
 800755e:	fa08 f800 	lsl.w	r8, r8, r0
 8007562:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007566:	fa23 f000 	lsr.w	r0, r3, r0
 800756a:	ea48 0000 	orr.w	r0, r8, r0
 800756e:	f7f8 ff95 	bl	800049c <__aeabi_ui2d>
 8007572:	2301      	movs	r3, #1
 8007574:	4682      	mov	sl, r0
 8007576:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800757a:	3d01      	subs	r5, #1
 800757c:	9313      	str	r3, [sp, #76]	; 0x4c
 800757e:	e772      	b.n	8007466 <_dtoa_r+0xf6>
 8007580:	9b00      	ldr	r3, [sp, #0]
 8007582:	f1c0 0020 	rsb	r0, r0, #32
 8007586:	fa03 f000 	lsl.w	r0, r3, r0
 800758a:	e7f0      	b.n	800756e <_dtoa_r+0x1fe>
 800758c:	2301      	movs	r3, #1
 800758e:	e7b1      	b.n	80074f4 <_dtoa_r+0x184>
 8007590:	900f      	str	r0, [sp, #60]	; 0x3c
 8007592:	e7b0      	b.n	80074f6 <_dtoa_r+0x186>
 8007594:	9b05      	ldr	r3, [sp, #20]
 8007596:	eba3 030a 	sub.w	r3, r3, sl
 800759a:	9305      	str	r3, [sp, #20]
 800759c:	f1ca 0300 	rsb	r3, sl, #0
 80075a0:	9307      	str	r3, [sp, #28]
 80075a2:	2300      	movs	r3, #0
 80075a4:	930e      	str	r3, [sp, #56]	; 0x38
 80075a6:	e7bb      	b.n	8007520 <_dtoa_r+0x1b0>
 80075a8:	2301      	movs	r3, #1
 80075aa:	930a      	str	r3, [sp, #40]	; 0x28
 80075ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd59      	ble.n	8007666 <_dtoa_r+0x2f6>
 80075b2:	9302      	str	r3, [sp, #8]
 80075b4:	4699      	mov	r9, r3
 80075b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075b8:	2200      	movs	r2, #0
 80075ba:	6072      	str	r2, [r6, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	f102 0014 	add.w	r0, r2, #20
 80075c2:	4298      	cmp	r0, r3
 80075c4:	6871      	ldr	r1, [r6, #4]
 80075c6:	d953      	bls.n	8007670 <_dtoa_r+0x300>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fe48 	bl	800825e <_Balloc>
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	6030      	str	r0, [r6, #0]
 80075d2:	f1b9 0f0e 	cmp.w	r9, #14
 80075d6:	f8d3 b000 	ldr.w	fp, [r3]
 80075da:	f200 80e6 	bhi.w	80077aa <_dtoa_r+0x43a>
 80075de:	2d00      	cmp	r5, #0
 80075e0:	f000 80e3 	beq.w	80077aa <_dtoa_r+0x43a>
 80075e4:	ed9d 7b00 	vldr	d7, [sp]
 80075e8:	f1ba 0f00 	cmp.w	sl, #0
 80075ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80075f0:	dd74      	ble.n	80076dc <_dtoa_r+0x36c>
 80075f2:	4a2a      	ldr	r2, [pc, #168]	; (800769c <_dtoa_r+0x32c>)
 80075f4:	f00a 030f 	and.w	r3, sl, #15
 80075f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075fc:	ed93 7b00 	vldr	d7, [r3]
 8007600:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007604:	06f0      	lsls	r0, r6, #27
 8007606:	ed8d 7b08 	vstr	d7, [sp, #32]
 800760a:	d565      	bpl.n	80076d8 <_dtoa_r+0x368>
 800760c:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <_dtoa_r+0x330>)
 800760e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007612:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007616:	f7f9 f8e5 	bl	80007e4 <__aeabi_ddiv>
 800761a:	e9cd 0100 	strd	r0, r1, [sp]
 800761e:	f006 060f 	and.w	r6, r6, #15
 8007622:	2503      	movs	r5, #3
 8007624:	4f1e      	ldr	r7, [pc, #120]	; (80076a0 <_dtoa_r+0x330>)
 8007626:	e04c      	b.n	80076c2 <_dtoa_r+0x352>
 8007628:	2301      	movs	r3, #1
 800762a:	930a      	str	r3, [sp, #40]	; 0x28
 800762c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762e:	4453      	add	r3, sl
 8007630:	f103 0901 	add.w	r9, r3, #1
 8007634:	9302      	str	r3, [sp, #8]
 8007636:	464b      	mov	r3, r9
 8007638:	2b01      	cmp	r3, #1
 800763a:	bfb8      	it	lt
 800763c:	2301      	movlt	r3, #1
 800763e:	e7ba      	b.n	80075b6 <_dtoa_r+0x246>
 8007640:	2300      	movs	r3, #0
 8007642:	e7b2      	b.n	80075aa <_dtoa_r+0x23a>
 8007644:	2300      	movs	r3, #0
 8007646:	e7f0      	b.n	800762a <_dtoa_r+0x2ba>
 8007648:	2501      	movs	r5, #1
 800764a:	2300      	movs	r3, #0
 800764c:	9306      	str	r3, [sp, #24]
 800764e:	950a      	str	r5, [sp, #40]	; 0x28
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	4699      	mov	r9, r3
 8007658:	2200      	movs	r2, #0
 800765a:	2312      	movs	r3, #18
 800765c:	920b      	str	r2, [sp, #44]	; 0x2c
 800765e:	e7aa      	b.n	80075b6 <_dtoa_r+0x246>
 8007660:	2301      	movs	r3, #1
 8007662:	930a      	str	r3, [sp, #40]	; 0x28
 8007664:	e7f4      	b.n	8007650 <_dtoa_r+0x2e0>
 8007666:	2301      	movs	r3, #1
 8007668:	9302      	str	r3, [sp, #8]
 800766a:	4699      	mov	r9, r3
 800766c:	461a      	mov	r2, r3
 800766e:	e7f5      	b.n	800765c <_dtoa_r+0x2ec>
 8007670:	3101      	adds	r1, #1
 8007672:	6071      	str	r1, [r6, #4]
 8007674:	0052      	lsls	r2, r2, #1
 8007676:	e7a2      	b.n	80075be <_dtoa_r+0x24e>
 8007678:	636f4361 	.word	0x636f4361
 800767c:	3fd287a7 	.word	0x3fd287a7
 8007680:	8b60c8b3 	.word	0x8b60c8b3
 8007684:	3fc68a28 	.word	0x3fc68a28
 8007688:	509f79fb 	.word	0x509f79fb
 800768c:	3fd34413 	.word	0x3fd34413
 8007690:	7ff00000 	.word	0x7ff00000
 8007694:	08009575 	.word	0x08009575
 8007698:	3ff80000 	.word	0x3ff80000
 800769c:	08009610 	.word	0x08009610
 80076a0:	080095e8 	.word	0x080095e8
 80076a4:	0800957f 	.word	0x0800957f
 80076a8:	07f1      	lsls	r1, r6, #31
 80076aa:	d508      	bpl.n	80076be <_dtoa_r+0x34e>
 80076ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b4:	f7f8 ff6c 	bl	8000590 <__aeabi_dmul>
 80076b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076bc:	3501      	adds	r5, #1
 80076be:	1076      	asrs	r6, r6, #1
 80076c0:	3708      	adds	r7, #8
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	d1f0      	bne.n	80076a8 <_dtoa_r+0x338>
 80076c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076ce:	f7f9 f889 	bl	80007e4 <__aeabi_ddiv>
 80076d2:	e9cd 0100 	strd	r0, r1, [sp]
 80076d6:	e01a      	b.n	800770e <_dtoa_r+0x39e>
 80076d8:	2502      	movs	r5, #2
 80076da:	e7a3      	b.n	8007624 <_dtoa_r+0x2b4>
 80076dc:	f000 80a0 	beq.w	8007820 <_dtoa_r+0x4b0>
 80076e0:	f1ca 0600 	rsb	r6, sl, #0
 80076e4:	4b9f      	ldr	r3, [pc, #636]	; (8007964 <_dtoa_r+0x5f4>)
 80076e6:	4fa0      	ldr	r7, [pc, #640]	; (8007968 <_dtoa_r+0x5f8>)
 80076e8:	f006 020f 	and.w	r2, r6, #15
 80076ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076f8:	f7f8 ff4a 	bl	8000590 <__aeabi_dmul>
 80076fc:	e9cd 0100 	strd	r0, r1, [sp]
 8007700:	1136      	asrs	r6, r6, #4
 8007702:	2300      	movs	r3, #0
 8007704:	2502      	movs	r5, #2
 8007706:	2e00      	cmp	r6, #0
 8007708:	d17f      	bne.n	800780a <_dtoa_r+0x49a>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e1      	bne.n	80076d2 <_dtoa_r+0x362>
 800770e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8087 	beq.w	8007824 <_dtoa_r+0x4b4>
 8007716:	e9dd 6700 	ldrd	r6, r7, [sp]
 800771a:	2200      	movs	r2, #0
 800771c:	4b93      	ldr	r3, [pc, #588]	; (800796c <_dtoa_r+0x5fc>)
 800771e:	4630      	mov	r0, r6
 8007720:	4639      	mov	r1, r7
 8007722:	f7f9 f9a7 	bl	8000a74 <__aeabi_dcmplt>
 8007726:	2800      	cmp	r0, #0
 8007728:	d07c      	beq.n	8007824 <_dtoa_r+0x4b4>
 800772a:	f1b9 0f00 	cmp.w	r9, #0
 800772e:	d079      	beq.n	8007824 <_dtoa_r+0x4b4>
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	dd35      	ble.n	80077a2 <_dtoa_r+0x432>
 8007736:	f10a 33ff 	add.w	r3, sl, #4294967295
 800773a:	9308      	str	r3, [sp, #32]
 800773c:	4639      	mov	r1, r7
 800773e:	2200      	movs	r2, #0
 8007740:	4b8b      	ldr	r3, [pc, #556]	; (8007970 <_dtoa_r+0x600>)
 8007742:	4630      	mov	r0, r6
 8007744:	f7f8 ff24 	bl	8000590 <__aeabi_dmul>
 8007748:	e9cd 0100 	strd	r0, r1, [sp]
 800774c:	9f02      	ldr	r7, [sp, #8]
 800774e:	3501      	adds	r5, #1
 8007750:	4628      	mov	r0, r5
 8007752:	f7f8 feb3 	bl	80004bc <__aeabi_i2d>
 8007756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775a:	f7f8 ff19 	bl	8000590 <__aeabi_dmul>
 800775e:	2200      	movs	r2, #0
 8007760:	4b84      	ldr	r3, [pc, #528]	; (8007974 <_dtoa_r+0x604>)
 8007762:	f7f8 fd5f 	bl	8000224 <__adddf3>
 8007766:	4605      	mov	r5, r0
 8007768:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800776c:	2f00      	cmp	r7, #0
 800776e:	d15d      	bne.n	800782c <_dtoa_r+0x4bc>
 8007770:	2200      	movs	r2, #0
 8007772:	4b81      	ldr	r3, [pc, #516]	; (8007978 <_dtoa_r+0x608>)
 8007774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007778:	f7f8 fd52 	bl	8000220 <__aeabi_dsub>
 800777c:	462a      	mov	r2, r5
 800777e:	4633      	mov	r3, r6
 8007780:	e9cd 0100 	strd	r0, r1, [sp]
 8007784:	f7f9 f994 	bl	8000ab0 <__aeabi_dcmpgt>
 8007788:	2800      	cmp	r0, #0
 800778a:	f040 8288 	bne.w	8007c9e <_dtoa_r+0x92e>
 800778e:	462a      	mov	r2, r5
 8007790:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007798:	f7f9 f96c 	bl	8000a74 <__aeabi_dcmplt>
 800779c:	2800      	cmp	r0, #0
 800779e:	f040 827c 	bne.w	8007c9a <_dtoa_r+0x92a>
 80077a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077a6:	e9cd 2300 	strd	r2, r3, [sp]
 80077aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f2c0 8150 	blt.w	8007a52 <_dtoa_r+0x6e2>
 80077b2:	f1ba 0f0e 	cmp.w	sl, #14
 80077b6:	f300 814c 	bgt.w	8007a52 <_dtoa_r+0x6e2>
 80077ba:	4b6a      	ldr	r3, [pc, #424]	; (8007964 <_dtoa_r+0x5f4>)
 80077bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077c0:	ed93 7b00 	vldr	d7, [r3]
 80077c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077cc:	f280 80d8 	bge.w	8007980 <_dtoa_r+0x610>
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	f300 80d4 	bgt.w	8007980 <_dtoa_r+0x610>
 80077d8:	f040 825e 	bne.w	8007c98 <_dtoa_r+0x928>
 80077dc:	2200      	movs	r2, #0
 80077de:	4b66      	ldr	r3, [pc, #408]	; (8007978 <_dtoa_r+0x608>)
 80077e0:	ec51 0b17 	vmov	r0, r1, d7
 80077e4:	f7f8 fed4 	bl	8000590 <__aeabi_dmul>
 80077e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ec:	f7f9 f956 	bl	8000a9c <__aeabi_dcmpge>
 80077f0:	464f      	mov	r7, r9
 80077f2:	464e      	mov	r6, r9
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f040 8234 	bne.w	8007c62 <_dtoa_r+0x8f2>
 80077fa:	2331      	movs	r3, #49	; 0x31
 80077fc:	f10b 0501 	add.w	r5, fp, #1
 8007800:	f88b 3000 	strb.w	r3, [fp]
 8007804:	f10a 0a01 	add.w	sl, sl, #1
 8007808:	e22f      	b.n	8007c6a <_dtoa_r+0x8fa>
 800780a:	07f2      	lsls	r2, r6, #31
 800780c:	d505      	bpl.n	800781a <_dtoa_r+0x4aa>
 800780e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007812:	f7f8 febd 	bl	8000590 <__aeabi_dmul>
 8007816:	3501      	adds	r5, #1
 8007818:	2301      	movs	r3, #1
 800781a:	1076      	asrs	r6, r6, #1
 800781c:	3708      	adds	r7, #8
 800781e:	e772      	b.n	8007706 <_dtoa_r+0x396>
 8007820:	2502      	movs	r5, #2
 8007822:	e774      	b.n	800770e <_dtoa_r+0x39e>
 8007824:	f8cd a020 	str.w	sl, [sp, #32]
 8007828:	464f      	mov	r7, r9
 800782a:	e791      	b.n	8007750 <_dtoa_r+0x3e0>
 800782c:	4b4d      	ldr	r3, [pc, #308]	; (8007964 <_dtoa_r+0x5f4>)
 800782e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007832:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d047      	beq.n	80078cc <_dtoa_r+0x55c>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	2000      	movs	r0, #0
 8007842:	494e      	ldr	r1, [pc, #312]	; (800797c <_dtoa_r+0x60c>)
 8007844:	f7f8 ffce 	bl	80007e4 <__aeabi_ddiv>
 8007848:	462a      	mov	r2, r5
 800784a:	4633      	mov	r3, r6
 800784c:	f7f8 fce8 	bl	8000220 <__aeabi_dsub>
 8007850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007854:	465d      	mov	r5, fp
 8007856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800785a:	f7f9 f949 	bl	8000af0 <__aeabi_d2iz>
 800785e:	4606      	mov	r6, r0
 8007860:	f7f8 fe2c 	bl	80004bc <__aeabi_i2d>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800786c:	f7f8 fcd8 	bl	8000220 <__aeabi_dsub>
 8007870:	3630      	adds	r6, #48	; 0x30
 8007872:	f805 6b01 	strb.w	r6, [r5], #1
 8007876:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800787a:	e9cd 0100 	strd	r0, r1, [sp]
 800787e:	f7f9 f8f9 	bl	8000a74 <__aeabi_dcmplt>
 8007882:	2800      	cmp	r0, #0
 8007884:	d163      	bne.n	800794e <_dtoa_r+0x5de>
 8007886:	e9dd 2300 	ldrd	r2, r3, [sp]
 800788a:	2000      	movs	r0, #0
 800788c:	4937      	ldr	r1, [pc, #220]	; (800796c <_dtoa_r+0x5fc>)
 800788e:	f7f8 fcc7 	bl	8000220 <__aeabi_dsub>
 8007892:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007896:	f7f9 f8ed 	bl	8000a74 <__aeabi_dcmplt>
 800789a:	2800      	cmp	r0, #0
 800789c:	f040 80b7 	bne.w	8007a0e <_dtoa_r+0x69e>
 80078a0:	eba5 030b 	sub.w	r3, r5, fp
 80078a4:	429f      	cmp	r7, r3
 80078a6:	f77f af7c 	ble.w	80077a2 <_dtoa_r+0x432>
 80078aa:	2200      	movs	r2, #0
 80078ac:	4b30      	ldr	r3, [pc, #192]	; (8007970 <_dtoa_r+0x600>)
 80078ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078b2:	f7f8 fe6d 	bl	8000590 <__aeabi_dmul>
 80078b6:	2200      	movs	r2, #0
 80078b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078bc:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <_dtoa_r+0x600>)
 80078be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c2:	f7f8 fe65 	bl	8000590 <__aeabi_dmul>
 80078c6:	e9cd 0100 	strd	r0, r1, [sp]
 80078ca:	e7c4      	b.n	8007856 <_dtoa_r+0x4e6>
 80078cc:	462a      	mov	r2, r5
 80078ce:	4633      	mov	r3, r6
 80078d0:	f7f8 fe5e 	bl	8000590 <__aeabi_dmul>
 80078d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078d8:	eb0b 0507 	add.w	r5, fp, r7
 80078dc:	465e      	mov	r6, fp
 80078de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078e2:	f7f9 f905 	bl	8000af0 <__aeabi_d2iz>
 80078e6:	4607      	mov	r7, r0
 80078e8:	f7f8 fde8 	bl	80004bc <__aeabi_i2d>
 80078ec:	3730      	adds	r7, #48	; 0x30
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f6:	f7f8 fc93 	bl	8000220 <__aeabi_dsub>
 80078fa:	f806 7b01 	strb.w	r7, [r6], #1
 80078fe:	42ae      	cmp	r6, r5
 8007900:	e9cd 0100 	strd	r0, r1, [sp]
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	d126      	bne.n	8007958 <_dtoa_r+0x5e8>
 800790a:	4b1c      	ldr	r3, [pc, #112]	; (800797c <_dtoa_r+0x60c>)
 800790c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007910:	f7f8 fc88 	bl	8000224 <__adddf3>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800791c:	f7f9 f8c8 	bl	8000ab0 <__aeabi_dcmpgt>
 8007920:	2800      	cmp	r0, #0
 8007922:	d174      	bne.n	8007a0e <_dtoa_r+0x69e>
 8007924:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007928:	2000      	movs	r0, #0
 800792a:	4914      	ldr	r1, [pc, #80]	; (800797c <_dtoa_r+0x60c>)
 800792c:	f7f8 fc78 	bl	8000220 <__aeabi_dsub>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007938:	f7f9 f89c 	bl	8000a74 <__aeabi_dcmplt>
 800793c:	2800      	cmp	r0, #0
 800793e:	f43f af30 	beq.w	80077a2 <_dtoa_r+0x432>
 8007942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007946:	2b30      	cmp	r3, #48	; 0x30
 8007948:	f105 32ff 	add.w	r2, r5, #4294967295
 800794c:	d002      	beq.n	8007954 <_dtoa_r+0x5e4>
 800794e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007952:	e04a      	b.n	80079ea <_dtoa_r+0x67a>
 8007954:	4615      	mov	r5, r2
 8007956:	e7f4      	b.n	8007942 <_dtoa_r+0x5d2>
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <_dtoa_r+0x600>)
 800795a:	f7f8 fe19 	bl	8000590 <__aeabi_dmul>
 800795e:	e9cd 0100 	strd	r0, r1, [sp]
 8007962:	e7bc      	b.n	80078de <_dtoa_r+0x56e>
 8007964:	08009610 	.word	0x08009610
 8007968:	080095e8 	.word	0x080095e8
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	40240000 	.word	0x40240000
 8007974:	401c0000 	.word	0x401c0000
 8007978:	40140000 	.word	0x40140000
 800797c:	3fe00000 	.word	0x3fe00000
 8007980:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007984:	465d      	mov	r5, fp
 8007986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800798a:	4630      	mov	r0, r6
 800798c:	4639      	mov	r1, r7
 800798e:	f7f8 ff29 	bl	80007e4 <__aeabi_ddiv>
 8007992:	f7f9 f8ad 	bl	8000af0 <__aeabi_d2iz>
 8007996:	4680      	mov	r8, r0
 8007998:	f7f8 fd90 	bl	80004bc <__aeabi_i2d>
 800799c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079a0:	f7f8 fdf6 	bl	8000590 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80079b0:	f7f8 fc36 	bl	8000220 <__aeabi_dsub>
 80079b4:	f805 6b01 	strb.w	r6, [r5], #1
 80079b8:	eba5 060b 	sub.w	r6, r5, fp
 80079bc:	45b1      	cmp	r9, r6
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	d139      	bne.n	8007a38 <_dtoa_r+0x6c8>
 80079c4:	f7f8 fc2e 	bl	8000224 <__adddf3>
 80079c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079cc:	4606      	mov	r6, r0
 80079ce:	460f      	mov	r7, r1
 80079d0:	f7f9 f86e 	bl	8000ab0 <__aeabi_dcmpgt>
 80079d4:	b9c8      	cbnz	r0, 8007a0a <_dtoa_r+0x69a>
 80079d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	f7f9 f83f 	bl	8000a60 <__aeabi_dcmpeq>
 80079e2:	b110      	cbz	r0, 80079ea <_dtoa_r+0x67a>
 80079e4:	f018 0f01 	tst.w	r8, #1
 80079e8:	d10f      	bne.n	8007a0a <_dtoa_r+0x69a>
 80079ea:	9904      	ldr	r1, [sp, #16]
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fc6a 	bl	80082c6 <_Bfree>
 80079f2:	2300      	movs	r3, #0
 80079f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079f6:	702b      	strb	r3, [r5, #0]
 80079f8:	f10a 0301 	add.w	r3, sl, #1
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8241 	beq.w	8007e88 <_dtoa_r+0xb18>
 8007a06:	601d      	str	r5, [r3, #0]
 8007a08:	e23e      	b.n	8007e88 <_dtoa_r+0xb18>
 8007a0a:	f8cd a020 	str.w	sl, [sp, #32]
 8007a0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a12:	2a39      	cmp	r2, #57	; 0x39
 8007a14:	f105 33ff 	add.w	r3, r5, #4294967295
 8007a18:	d108      	bne.n	8007a2c <_dtoa_r+0x6bc>
 8007a1a:	459b      	cmp	fp, r3
 8007a1c:	d10a      	bne.n	8007a34 <_dtoa_r+0x6c4>
 8007a1e:	9b08      	ldr	r3, [sp, #32]
 8007a20:	3301      	adds	r3, #1
 8007a22:	9308      	str	r3, [sp, #32]
 8007a24:	2330      	movs	r3, #48	; 0x30
 8007a26:	f88b 3000 	strb.w	r3, [fp]
 8007a2a:	465b      	mov	r3, fp
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	3201      	adds	r2, #1
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e78c      	b.n	800794e <_dtoa_r+0x5de>
 8007a34:	461d      	mov	r5, r3
 8007a36:	e7ea      	b.n	8007a0e <_dtoa_r+0x69e>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4b9b      	ldr	r3, [pc, #620]	; (8007ca8 <_dtoa_r+0x938>)
 8007a3c:	f7f8 fda8 	bl	8000590 <__aeabi_dmul>
 8007a40:	2200      	movs	r2, #0
 8007a42:	2300      	movs	r3, #0
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	f7f9 f80a 	bl	8000a60 <__aeabi_dcmpeq>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d09a      	beq.n	8007986 <_dtoa_r+0x616>
 8007a50:	e7cb      	b.n	80079ea <_dtoa_r+0x67a>
 8007a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	f000 808b 	beq.w	8007b70 <_dtoa_r+0x800>
 8007a5a:	9a06      	ldr	r2, [sp, #24]
 8007a5c:	2a01      	cmp	r2, #1
 8007a5e:	dc6e      	bgt.n	8007b3e <_dtoa_r+0x7ce>
 8007a60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d067      	beq.n	8007b36 <_dtoa_r+0x7c6>
 8007a66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a6a:	9f07      	ldr	r7, [sp, #28]
 8007a6c:	9d05      	ldr	r5, [sp, #20]
 8007a6e:	9a05      	ldr	r2, [sp, #20]
 8007a70:	2101      	movs	r1, #1
 8007a72:	441a      	add	r2, r3
 8007a74:	4620      	mov	r0, r4
 8007a76:	9205      	str	r2, [sp, #20]
 8007a78:	4498      	add	r8, r3
 8007a7a:	f000 fcc4 	bl	8008406 <__i2b>
 8007a7e:	4606      	mov	r6, r0
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	dd0c      	ble.n	8007a9e <_dtoa_r+0x72e>
 8007a84:	f1b8 0f00 	cmp.w	r8, #0
 8007a88:	dd09      	ble.n	8007a9e <_dtoa_r+0x72e>
 8007a8a:	4545      	cmp	r5, r8
 8007a8c:	9a05      	ldr	r2, [sp, #20]
 8007a8e:	462b      	mov	r3, r5
 8007a90:	bfa8      	it	ge
 8007a92:	4643      	movge	r3, r8
 8007a94:	1ad2      	subs	r2, r2, r3
 8007a96:	9205      	str	r2, [sp, #20]
 8007a98:	1aed      	subs	r5, r5, r3
 8007a9a:	eba8 0803 	sub.w	r8, r8, r3
 8007a9e:	9b07      	ldr	r3, [sp, #28]
 8007aa0:	b1eb      	cbz	r3, 8007ade <_dtoa_r+0x76e>
 8007aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d067      	beq.n	8007b78 <_dtoa_r+0x808>
 8007aa8:	b18f      	cbz	r7, 8007ace <_dtoa_r+0x75e>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	463a      	mov	r2, r7
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 fd48 	bl	8008544 <__pow5mult>
 8007ab4:	9a04      	ldr	r2, [sp, #16]
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	4606      	mov	r6, r0
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fcac 	bl	8008418 <__multiply>
 8007ac0:	9904      	ldr	r1, [sp, #16]
 8007ac2:	9008      	str	r0, [sp, #32]
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fbfe 	bl	80082c6 <_Bfree>
 8007aca:	9b08      	ldr	r3, [sp, #32]
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	9b07      	ldr	r3, [sp, #28]
 8007ad0:	1bda      	subs	r2, r3, r7
 8007ad2:	d004      	beq.n	8007ade <_dtoa_r+0x76e>
 8007ad4:	9904      	ldr	r1, [sp, #16]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 fd34 	bl	8008544 <__pow5mult>
 8007adc:	9004      	str	r0, [sp, #16]
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fc90 	bl	8008406 <__i2b>
 8007ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ae8:	4607      	mov	r7, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 81d0 	beq.w	8007e90 <_dtoa_r+0xb20>
 8007af0:	461a      	mov	r2, r3
 8007af2:	4601      	mov	r1, r0
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fd25 	bl	8008544 <__pow5mult>
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	4607      	mov	r7, r0
 8007b00:	dc40      	bgt.n	8007b84 <_dtoa_r+0x814>
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d139      	bne.n	8007b7c <_dtoa_r+0x80c>
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d136      	bne.n	8007b80 <_dtoa_r+0x810>
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b18:	0d1b      	lsrs	r3, r3, #20
 8007b1a:	051b      	lsls	r3, r3, #20
 8007b1c:	b12b      	cbz	r3, 8007b2a <_dtoa_r+0x7ba>
 8007b1e:	9b05      	ldr	r3, [sp, #20]
 8007b20:	3301      	adds	r3, #1
 8007b22:	9305      	str	r3, [sp, #20]
 8007b24:	f108 0801 	add.w	r8, r8, #1
 8007b28:	2301      	movs	r3, #1
 8007b2a:	9307      	str	r3, [sp, #28]
 8007b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d12a      	bne.n	8007b88 <_dtoa_r+0x818>
 8007b32:	2001      	movs	r0, #1
 8007b34:	e030      	b.n	8007b98 <_dtoa_r+0x828>
 8007b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b3c:	e795      	b.n	8007a6a <_dtoa_r+0x6fa>
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	f109 37ff 	add.w	r7, r9, #4294967295
 8007b44:	42bb      	cmp	r3, r7
 8007b46:	bfbf      	itttt	lt
 8007b48:	9b07      	ldrlt	r3, [sp, #28]
 8007b4a:	9707      	strlt	r7, [sp, #28]
 8007b4c:	1afa      	sublt	r2, r7, r3
 8007b4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b50:	bfbb      	ittet	lt
 8007b52:	189b      	addlt	r3, r3, r2
 8007b54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b56:	1bdf      	subge	r7, r3, r7
 8007b58:	2700      	movlt	r7, #0
 8007b5a:	f1b9 0f00 	cmp.w	r9, #0
 8007b5e:	bfb5      	itete	lt
 8007b60:	9b05      	ldrlt	r3, [sp, #20]
 8007b62:	9d05      	ldrge	r5, [sp, #20]
 8007b64:	eba3 0509 	sublt.w	r5, r3, r9
 8007b68:	464b      	movge	r3, r9
 8007b6a:	bfb8      	it	lt
 8007b6c:	2300      	movlt	r3, #0
 8007b6e:	e77e      	b.n	8007a6e <_dtoa_r+0x6fe>
 8007b70:	9f07      	ldr	r7, [sp, #28]
 8007b72:	9d05      	ldr	r5, [sp, #20]
 8007b74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007b76:	e783      	b.n	8007a80 <_dtoa_r+0x710>
 8007b78:	9a07      	ldr	r2, [sp, #28]
 8007b7a:	e7ab      	b.n	8007ad4 <_dtoa_r+0x764>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e7d4      	b.n	8007b2a <_dtoa_r+0x7ba>
 8007b80:	9b00      	ldr	r3, [sp, #0]
 8007b82:	e7d2      	b.n	8007b2a <_dtoa_r+0x7ba>
 8007b84:	2300      	movs	r3, #0
 8007b86:	9307      	str	r3, [sp, #28]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007b8e:	6918      	ldr	r0, [r3, #16]
 8007b90:	f000 fbeb 	bl	800836a <__hi0bits>
 8007b94:	f1c0 0020 	rsb	r0, r0, #32
 8007b98:	4440      	add	r0, r8
 8007b9a:	f010 001f 	ands.w	r0, r0, #31
 8007b9e:	d047      	beq.n	8007c30 <_dtoa_r+0x8c0>
 8007ba0:	f1c0 0320 	rsb	r3, r0, #32
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	dd3b      	ble.n	8007c20 <_dtoa_r+0x8b0>
 8007ba8:	9b05      	ldr	r3, [sp, #20]
 8007baa:	f1c0 001c 	rsb	r0, r0, #28
 8007bae:	4403      	add	r3, r0
 8007bb0:	9305      	str	r3, [sp, #20]
 8007bb2:	4405      	add	r5, r0
 8007bb4:	4480      	add	r8, r0
 8007bb6:	9b05      	ldr	r3, [sp, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	dd05      	ble.n	8007bc8 <_dtoa_r+0x858>
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	9904      	ldr	r1, [sp, #16]
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fd0d 	bl	80085e0 <__lshift>
 8007bc6:	9004      	str	r0, [sp, #16]
 8007bc8:	f1b8 0f00 	cmp.w	r8, #0
 8007bcc:	dd05      	ble.n	8007bda <_dtoa_r+0x86a>
 8007bce:	4639      	mov	r1, r7
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fd04 	bl	80085e0 <__lshift>
 8007bd8:	4607      	mov	r7, r0
 8007bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bdc:	b353      	cbz	r3, 8007c34 <_dtoa_r+0x8c4>
 8007bde:	4639      	mov	r1, r7
 8007be0:	9804      	ldr	r0, [sp, #16]
 8007be2:	f000 fd51 	bl	8008688 <__mcmp>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	da24      	bge.n	8007c34 <_dtoa_r+0x8c4>
 8007bea:	2300      	movs	r3, #0
 8007bec:	220a      	movs	r2, #10
 8007bee:	9904      	ldr	r1, [sp, #16]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fb7f 	bl	80082f4 <__multadd>
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	9004      	str	r0, [sp, #16]
 8007bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 814d 	beq.w	8007e9e <_dtoa_r+0xb2e>
 8007c04:	2300      	movs	r3, #0
 8007c06:	4631      	mov	r1, r6
 8007c08:	220a      	movs	r2, #10
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 fb72 	bl	80082f4 <__multadd>
 8007c10:	9b02      	ldr	r3, [sp, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	4606      	mov	r6, r0
 8007c16:	dc4f      	bgt.n	8007cb8 <_dtoa_r+0x948>
 8007c18:	9b06      	ldr	r3, [sp, #24]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	dd4c      	ble.n	8007cb8 <_dtoa_r+0x948>
 8007c1e:	e011      	b.n	8007c44 <_dtoa_r+0x8d4>
 8007c20:	d0c9      	beq.n	8007bb6 <_dtoa_r+0x846>
 8007c22:	9a05      	ldr	r2, [sp, #20]
 8007c24:	331c      	adds	r3, #28
 8007c26:	441a      	add	r2, r3
 8007c28:	9205      	str	r2, [sp, #20]
 8007c2a:	441d      	add	r5, r3
 8007c2c:	4498      	add	r8, r3
 8007c2e:	e7c2      	b.n	8007bb6 <_dtoa_r+0x846>
 8007c30:	4603      	mov	r3, r0
 8007c32:	e7f6      	b.n	8007c22 <_dtoa_r+0x8b2>
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	dc38      	bgt.n	8007cac <_dtoa_r+0x93c>
 8007c3a:	9b06      	ldr	r3, [sp, #24]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	dd35      	ble.n	8007cac <_dtoa_r+0x93c>
 8007c40:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	b963      	cbnz	r3, 8007c62 <_dtoa_r+0x8f2>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fb51 	bl	80082f4 <__multadd>
 8007c52:	4601      	mov	r1, r0
 8007c54:	4607      	mov	r7, r0
 8007c56:	9804      	ldr	r0, [sp, #16]
 8007c58:	f000 fd16 	bl	8008688 <__mcmp>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f73f adcc 	bgt.w	80077fa <_dtoa_r+0x48a>
 8007c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c64:	465d      	mov	r5, fp
 8007c66:	ea6f 0a03 	mvn.w	sl, r3
 8007c6a:	f04f 0900 	mov.w	r9, #0
 8007c6e:	4639      	mov	r1, r7
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fb28 	bl	80082c6 <_Bfree>
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	f43f aeb7 	beq.w	80079ea <_dtoa_r+0x67a>
 8007c7c:	f1b9 0f00 	cmp.w	r9, #0
 8007c80:	d005      	beq.n	8007c8e <_dtoa_r+0x91e>
 8007c82:	45b1      	cmp	r9, r6
 8007c84:	d003      	beq.n	8007c8e <_dtoa_r+0x91e>
 8007c86:	4649      	mov	r1, r9
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fb1c 	bl	80082c6 <_Bfree>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fb18 	bl	80082c6 <_Bfree>
 8007c96:	e6a8      	b.n	80079ea <_dtoa_r+0x67a>
 8007c98:	2700      	movs	r7, #0
 8007c9a:	463e      	mov	r6, r7
 8007c9c:	e7e1      	b.n	8007c62 <_dtoa_r+0x8f2>
 8007c9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ca2:	463e      	mov	r6, r7
 8007ca4:	e5a9      	b.n	80077fa <_dtoa_r+0x48a>
 8007ca6:	bf00      	nop
 8007ca8:	40240000 	.word	0x40240000
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	f8cd 9008 	str.w	r9, [sp, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 80fa 	beq.w	8007eac <_dtoa_r+0xb3c>
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	dd05      	ble.n	8007cc8 <_dtoa_r+0x958>
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fc8d 	bl	80085e0 <__lshift>
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	9b07      	ldr	r3, [sp, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d04c      	beq.n	8007d68 <_dtoa_r+0x9f8>
 8007cce:	6871      	ldr	r1, [r6, #4]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fac4 	bl	800825e <_Balloc>
 8007cd6:	6932      	ldr	r2, [r6, #16]
 8007cd8:	3202      	adds	r2, #2
 8007cda:	4605      	mov	r5, r0
 8007cdc:	0092      	lsls	r2, r2, #2
 8007cde:	f106 010c 	add.w	r1, r6, #12
 8007ce2:	300c      	adds	r0, #12
 8007ce4:	f000 fab0 	bl	8008248 <memcpy>
 8007ce8:	2201      	movs	r2, #1
 8007cea:	4629      	mov	r1, r5
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fc77 	bl	80085e0 <__lshift>
 8007cf2:	9b00      	ldr	r3, [sp, #0]
 8007cf4:	f8cd b014 	str.w	fp, [sp, #20]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	46b1      	mov	r9, r6
 8007cfe:	9307      	str	r3, [sp, #28]
 8007d00:	4606      	mov	r6, r0
 8007d02:	4639      	mov	r1, r7
 8007d04:	9804      	ldr	r0, [sp, #16]
 8007d06:	f7ff faa7 	bl	8007258 <quorem>
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d12:	9804      	ldr	r0, [sp, #16]
 8007d14:	f000 fcb8 	bl	8008688 <__mcmp>
 8007d18:	4632      	mov	r2, r6
 8007d1a:	9000      	str	r0, [sp, #0]
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 fccc 	bl	80086bc <__mdiff>
 8007d24:	68c3      	ldr	r3, [r0, #12]
 8007d26:	4602      	mov	r2, r0
 8007d28:	bb03      	cbnz	r3, 8007d6c <_dtoa_r+0x9fc>
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	9008      	str	r0, [sp, #32]
 8007d2e:	9804      	ldr	r0, [sp, #16]
 8007d30:	f000 fcaa 	bl	8008688 <__mcmp>
 8007d34:	9a08      	ldr	r2, [sp, #32]
 8007d36:	4603      	mov	r3, r0
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	9308      	str	r3, [sp, #32]
 8007d3e:	f000 fac2 	bl	80082c6 <_Bfree>
 8007d42:	9b08      	ldr	r3, [sp, #32]
 8007d44:	b9a3      	cbnz	r3, 8007d70 <_dtoa_r+0xa00>
 8007d46:	9a06      	ldr	r2, [sp, #24]
 8007d48:	b992      	cbnz	r2, 8007d70 <_dtoa_r+0xa00>
 8007d4a:	9a07      	ldr	r2, [sp, #28]
 8007d4c:	b982      	cbnz	r2, 8007d70 <_dtoa_r+0xa00>
 8007d4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d52:	d029      	beq.n	8007da8 <_dtoa_r+0xa38>
 8007d54:	9b00      	ldr	r3, [sp, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd01      	ble.n	8007d5e <_dtoa_r+0x9ee>
 8007d5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007d5e:	9b05      	ldr	r3, [sp, #20]
 8007d60:	1c5d      	adds	r5, r3, #1
 8007d62:	f883 8000 	strb.w	r8, [r3]
 8007d66:	e782      	b.n	8007c6e <_dtoa_r+0x8fe>
 8007d68:	4630      	mov	r0, r6
 8007d6a:	e7c2      	b.n	8007cf2 <_dtoa_r+0x982>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e7e3      	b.n	8007d38 <_dtoa_r+0x9c8>
 8007d70:	9a00      	ldr	r2, [sp, #0]
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	db04      	blt.n	8007d80 <_dtoa_r+0xa10>
 8007d76:	d125      	bne.n	8007dc4 <_dtoa_r+0xa54>
 8007d78:	9a06      	ldr	r2, [sp, #24]
 8007d7a:	bb1a      	cbnz	r2, 8007dc4 <_dtoa_r+0xa54>
 8007d7c:	9a07      	ldr	r2, [sp, #28]
 8007d7e:	bb0a      	cbnz	r2, 8007dc4 <_dtoa_r+0xa54>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	ddec      	ble.n	8007d5e <_dtoa_r+0x9ee>
 8007d84:	2201      	movs	r2, #1
 8007d86:	9904      	ldr	r1, [sp, #16]
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fc29 	bl	80085e0 <__lshift>
 8007d8e:	4639      	mov	r1, r7
 8007d90:	9004      	str	r0, [sp, #16]
 8007d92:	f000 fc79 	bl	8008688 <__mcmp>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	dc03      	bgt.n	8007da2 <_dtoa_r+0xa32>
 8007d9a:	d1e0      	bne.n	8007d5e <_dtoa_r+0x9ee>
 8007d9c:	f018 0f01 	tst.w	r8, #1
 8007da0:	d0dd      	beq.n	8007d5e <_dtoa_r+0x9ee>
 8007da2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007da6:	d1d8      	bne.n	8007d5a <_dtoa_r+0x9ea>
 8007da8:	9b05      	ldr	r3, [sp, #20]
 8007daa:	9a05      	ldr	r2, [sp, #20]
 8007dac:	1c5d      	adds	r5, r3, #1
 8007dae:	2339      	movs	r3, #57	; 0x39
 8007db0:	7013      	strb	r3, [r2, #0]
 8007db2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007db6:	2b39      	cmp	r3, #57	; 0x39
 8007db8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007dbc:	d04f      	beq.n	8007e5e <_dtoa_r+0xaee>
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	7013      	strb	r3, [r2, #0]
 8007dc2:	e754      	b.n	8007c6e <_dtoa_r+0x8fe>
 8007dc4:	9a05      	ldr	r2, [sp, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f102 0501 	add.w	r5, r2, #1
 8007dcc:	dd06      	ble.n	8007ddc <_dtoa_r+0xa6c>
 8007dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dd2:	d0e9      	beq.n	8007da8 <_dtoa_r+0xa38>
 8007dd4:	f108 0801 	add.w	r8, r8, #1
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	e7c2      	b.n	8007d62 <_dtoa_r+0x9f2>
 8007ddc:	9a02      	ldr	r2, [sp, #8]
 8007dde:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007de2:	eba5 030b 	sub.w	r3, r5, fp
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d021      	beq.n	8007e2e <_dtoa_r+0xabe>
 8007dea:	2300      	movs	r3, #0
 8007dec:	220a      	movs	r2, #10
 8007dee:	9904      	ldr	r1, [sp, #16]
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fa7f 	bl	80082f4 <__multadd>
 8007df6:	45b1      	cmp	r9, r6
 8007df8:	9004      	str	r0, [sp, #16]
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	f04f 020a 	mov.w	r2, #10
 8007e02:	4649      	mov	r1, r9
 8007e04:	4620      	mov	r0, r4
 8007e06:	d105      	bne.n	8007e14 <_dtoa_r+0xaa4>
 8007e08:	f000 fa74 	bl	80082f4 <__multadd>
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	4606      	mov	r6, r0
 8007e10:	9505      	str	r5, [sp, #20]
 8007e12:	e776      	b.n	8007d02 <_dtoa_r+0x992>
 8007e14:	f000 fa6e 	bl	80082f4 <__multadd>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4681      	mov	r9, r0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	220a      	movs	r2, #10
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fa67 	bl	80082f4 <__multadd>
 8007e26:	4606      	mov	r6, r0
 8007e28:	e7f2      	b.n	8007e10 <_dtoa_r+0xaa0>
 8007e2a:	f04f 0900 	mov.w	r9, #0
 8007e2e:	2201      	movs	r2, #1
 8007e30:	9904      	ldr	r1, [sp, #16]
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fbd4 	bl	80085e0 <__lshift>
 8007e38:	4639      	mov	r1, r7
 8007e3a:	9004      	str	r0, [sp, #16]
 8007e3c:	f000 fc24 	bl	8008688 <__mcmp>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	dcb6      	bgt.n	8007db2 <_dtoa_r+0xa42>
 8007e44:	d102      	bne.n	8007e4c <_dtoa_r+0xadc>
 8007e46:	f018 0f01 	tst.w	r8, #1
 8007e4a:	d1b2      	bne.n	8007db2 <_dtoa_r+0xa42>
 8007e4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e50:	2b30      	cmp	r3, #48	; 0x30
 8007e52:	f105 32ff 	add.w	r2, r5, #4294967295
 8007e56:	f47f af0a 	bne.w	8007c6e <_dtoa_r+0x8fe>
 8007e5a:	4615      	mov	r5, r2
 8007e5c:	e7f6      	b.n	8007e4c <_dtoa_r+0xadc>
 8007e5e:	4593      	cmp	fp, r2
 8007e60:	d105      	bne.n	8007e6e <_dtoa_r+0xafe>
 8007e62:	2331      	movs	r3, #49	; 0x31
 8007e64:	f10a 0a01 	add.w	sl, sl, #1
 8007e68:	f88b 3000 	strb.w	r3, [fp]
 8007e6c:	e6ff      	b.n	8007c6e <_dtoa_r+0x8fe>
 8007e6e:	4615      	mov	r5, r2
 8007e70:	e79f      	b.n	8007db2 <_dtoa_r+0xa42>
 8007e72:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007ed8 <_dtoa_r+0xb68>
 8007e76:	e007      	b.n	8007e88 <_dtoa_r+0xb18>
 8007e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007edc <_dtoa_r+0xb6c>
 8007e7e:	b11b      	cbz	r3, 8007e88 <_dtoa_r+0xb18>
 8007e80:	f10b 0308 	add.w	r3, fp, #8
 8007e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	4658      	mov	r0, fp
 8007e8a:	b017      	add	sp, #92	; 0x5c
 8007e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e90:	9b06      	ldr	r3, [sp, #24]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	f77f ae35 	ble.w	8007b02 <_dtoa_r+0x792>
 8007e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e9a:	9307      	str	r3, [sp, #28]
 8007e9c:	e649      	b.n	8007b32 <_dtoa_r+0x7c2>
 8007e9e:	9b02      	ldr	r3, [sp, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc03      	bgt.n	8007eac <_dtoa_r+0xb3c>
 8007ea4:	9b06      	ldr	r3, [sp, #24]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	f73f aecc 	bgt.w	8007c44 <_dtoa_r+0x8d4>
 8007eac:	465d      	mov	r5, fp
 8007eae:	4639      	mov	r1, r7
 8007eb0:	9804      	ldr	r0, [sp, #16]
 8007eb2:	f7ff f9d1 	bl	8007258 <quorem>
 8007eb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007eba:	f805 8b01 	strb.w	r8, [r5], #1
 8007ebe:	9a02      	ldr	r2, [sp, #8]
 8007ec0:	eba5 030b 	sub.w	r3, r5, fp
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	ddb0      	ble.n	8007e2a <_dtoa_r+0xaba>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	220a      	movs	r2, #10
 8007ecc:	9904      	ldr	r1, [sp, #16]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 fa10 	bl	80082f4 <__multadd>
 8007ed4:	9004      	str	r0, [sp, #16]
 8007ed6:	e7ea      	b.n	8007eae <_dtoa_r+0xb3e>
 8007ed8:	08009574 	.word	0x08009574
 8007edc:	08009576 	.word	0x08009576

08007ee0 <__sflush_r>:
 8007ee0:	898a      	ldrh	r2, [r1, #12]
 8007ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	0710      	lsls	r0, r2, #28
 8007eea:	460c      	mov	r4, r1
 8007eec:	d458      	bmi.n	8007fa0 <__sflush_r+0xc0>
 8007eee:	684b      	ldr	r3, [r1, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc05      	bgt.n	8007f00 <__sflush_r+0x20>
 8007ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dc02      	bgt.n	8007f00 <__sflush_r+0x20>
 8007efa:	2000      	movs	r0, #0
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	d0f9      	beq.n	8007efa <__sflush_r+0x1a>
 8007f06:	2300      	movs	r3, #0
 8007f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f0c:	682f      	ldr	r7, [r5, #0]
 8007f0e:	6a21      	ldr	r1, [r4, #32]
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	d032      	beq.n	8007f7a <__sflush_r+0x9a>
 8007f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	075a      	lsls	r2, r3, #29
 8007f1a:	d505      	bpl.n	8007f28 <__sflush_r+0x48>
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	1ac0      	subs	r0, r0, r3
 8007f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f22:	b10b      	cbz	r3, 8007f28 <__sflush_r+0x48>
 8007f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f26:	1ac0      	subs	r0, r0, r3
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f2e:	6a21      	ldr	r1, [r4, #32]
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b0      	blx	r6
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	d106      	bne.n	8007f48 <__sflush_r+0x68>
 8007f3a:	6829      	ldr	r1, [r5, #0]
 8007f3c:	291d      	cmp	r1, #29
 8007f3e:	d848      	bhi.n	8007fd2 <__sflush_r+0xf2>
 8007f40:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <__sflush_r+0x108>)
 8007f42:	40ca      	lsrs	r2, r1
 8007f44:	07d6      	lsls	r6, r2, #31
 8007f46:	d544      	bpl.n	8007fd2 <__sflush_r+0xf2>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	6062      	str	r2, [r4, #4]
 8007f4c:	04d9      	lsls	r1, r3, #19
 8007f4e:	6922      	ldr	r2, [r4, #16]
 8007f50:	6022      	str	r2, [r4, #0]
 8007f52:	d504      	bpl.n	8007f5e <__sflush_r+0x7e>
 8007f54:	1c42      	adds	r2, r0, #1
 8007f56:	d101      	bne.n	8007f5c <__sflush_r+0x7c>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b903      	cbnz	r3, 8007f5e <__sflush_r+0x7e>
 8007f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8007f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f60:	602f      	str	r7, [r5, #0]
 8007f62:	2900      	cmp	r1, #0
 8007f64:	d0c9      	beq.n	8007efa <__sflush_r+0x1a>
 8007f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f6a:	4299      	cmp	r1, r3
 8007f6c:	d002      	beq.n	8007f74 <__sflush_r+0x94>
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 fc5e 	bl	8008830 <_free_r>
 8007f74:	2000      	movs	r0, #0
 8007f76:	6360      	str	r0, [r4, #52]	; 0x34
 8007f78:	e7c0      	b.n	8007efc <__sflush_r+0x1c>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b0      	blx	r6
 8007f80:	1c41      	adds	r1, r0, #1
 8007f82:	d1c8      	bne.n	8007f16 <__sflush_r+0x36>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0c5      	beq.n	8007f16 <__sflush_r+0x36>
 8007f8a:	2b1d      	cmp	r3, #29
 8007f8c:	d001      	beq.n	8007f92 <__sflush_r+0xb2>
 8007f8e:	2b16      	cmp	r3, #22
 8007f90:	d101      	bne.n	8007f96 <__sflush_r+0xb6>
 8007f92:	602f      	str	r7, [r5, #0]
 8007f94:	e7b1      	b.n	8007efa <__sflush_r+0x1a>
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	e7ad      	b.n	8007efc <__sflush_r+0x1c>
 8007fa0:	690f      	ldr	r7, [r1, #16]
 8007fa2:	2f00      	cmp	r7, #0
 8007fa4:	d0a9      	beq.n	8007efa <__sflush_r+0x1a>
 8007fa6:	0793      	lsls	r3, r2, #30
 8007fa8:	680e      	ldr	r6, [r1, #0]
 8007faa:	bf08      	it	eq
 8007fac:	694b      	ldreq	r3, [r1, #20]
 8007fae:	600f      	str	r7, [r1, #0]
 8007fb0:	bf18      	it	ne
 8007fb2:	2300      	movne	r3, #0
 8007fb4:	eba6 0807 	sub.w	r8, r6, r7
 8007fb8:	608b      	str	r3, [r1, #8]
 8007fba:	f1b8 0f00 	cmp.w	r8, #0
 8007fbe:	dd9c      	ble.n	8007efa <__sflush_r+0x1a>
 8007fc0:	4643      	mov	r3, r8
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	6a21      	ldr	r1, [r4, #32]
 8007fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b0      	blx	r6
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	dc06      	bgt.n	8007fde <__sflush_r+0xfe>
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	e78e      	b.n	8007efc <__sflush_r+0x1c>
 8007fde:	4407      	add	r7, r0
 8007fe0:	eba8 0800 	sub.w	r8, r8, r0
 8007fe4:	e7e9      	b.n	8007fba <__sflush_r+0xda>
 8007fe6:	bf00      	nop
 8007fe8:	20400001 	.word	0x20400001

08007fec <_fflush_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	690b      	ldr	r3, [r1, #16]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	b1db      	cbz	r3, 800802e <_fflush_r+0x42>
 8007ff6:	b118      	cbz	r0, 8008000 <_fflush_r+0x14>
 8007ff8:	6983      	ldr	r3, [r0, #24]
 8007ffa:	b90b      	cbnz	r3, 8008000 <_fflush_r+0x14>
 8007ffc:	f000 f860 	bl	80080c0 <__sinit>
 8008000:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <_fflush_r+0x48>)
 8008002:	429c      	cmp	r4, r3
 8008004:	d109      	bne.n	800801a <_fflush_r+0x2e>
 8008006:	686c      	ldr	r4, [r5, #4]
 8008008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800c:	b17b      	cbz	r3, 800802e <_fflush_r+0x42>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008016:	f7ff bf63 	b.w	8007ee0 <__sflush_r>
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <_fflush_r+0x4c>)
 800801c:	429c      	cmp	r4, r3
 800801e:	d101      	bne.n	8008024 <_fflush_r+0x38>
 8008020:	68ac      	ldr	r4, [r5, #8]
 8008022:	e7f1      	b.n	8008008 <_fflush_r+0x1c>
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <_fflush_r+0x50>)
 8008026:	429c      	cmp	r4, r3
 8008028:	bf08      	it	eq
 800802a:	68ec      	ldreq	r4, [r5, #12]
 800802c:	e7ec      	b.n	8008008 <_fflush_r+0x1c>
 800802e:	2000      	movs	r0, #0
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	bf00      	nop
 8008034:	080095a4 	.word	0x080095a4
 8008038:	080095c4 	.word	0x080095c4
 800803c:	08009584 	.word	0x08009584

08008040 <std>:
 8008040:	2300      	movs	r3, #0
 8008042:	b510      	push	{r4, lr}
 8008044:	4604      	mov	r4, r0
 8008046:	e9c0 3300 	strd	r3, r3, [r0]
 800804a:	6083      	str	r3, [r0, #8]
 800804c:	8181      	strh	r1, [r0, #12]
 800804e:	6643      	str	r3, [r0, #100]	; 0x64
 8008050:	81c2      	strh	r2, [r0, #14]
 8008052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008056:	6183      	str	r3, [r0, #24]
 8008058:	4619      	mov	r1, r3
 800805a:	2208      	movs	r2, #8
 800805c:	305c      	adds	r0, #92	; 0x5c
 800805e:	f7fe fcf3 	bl	8006a48 <memset>
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <std+0x38>)
 8008064:	6263      	str	r3, [r4, #36]	; 0x24
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <std+0x3c>)
 8008068:	62a3      	str	r3, [r4, #40]	; 0x28
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <std+0x40>)
 800806c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <std+0x44>)
 8008070:	6224      	str	r4, [r4, #32]
 8008072:	6323      	str	r3, [r4, #48]	; 0x30
 8008074:	bd10      	pop	{r4, pc}
 8008076:	bf00      	nop
 8008078:	080089a1 	.word	0x080089a1
 800807c:	080089c3 	.word	0x080089c3
 8008080:	080089fb 	.word	0x080089fb
 8008084:	08008a1f 	.word	0x08008a1f

08008088 <_cleanup_r>:
 8008088:	4901      	ldr	r1, [pc, #4]	; (8008090 <_cleanup_r+0x8>)
 800808a:	f000 b885 	b.w	8008198 <_fwalk_reent>
 800808e:	bf00      	nop
 8008090:	08007fed 	.word	0x08007fed

08008094 <__sfmoreglue>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	1e4a      	subs	r2, r1, #1
 8008098:	2568      	movs	r5, #104	; 0x68
 800809a:	4355      	muls	r5, r2
 800809c:	460e      	mov	r6, r1
 800809e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080a2:	f000 fc13 	bl	80088cc <_malloc_r>
 80080a6:	4604      	mov	r4, r0
 80080a8:	b140      	cbz	r0, 80080bc <__sfmoreglue+0x28>
 80080aa:	2100      	movs	r1, #0
 80080ac:	e9c0 1600 	strd	r1, r6, [r0]
 80080b0:	300c      	adds	r0, #12
 80080b2:	60a0      	str	r0, [r4, #8]
 80080b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080b8:	f7fe fcc6 	bl	8006a48 <memset>
 80080bc:	4620      	mov	r0, r4
 80080be:	bd70      	pop	{r4, r5, r6, pc}

080080c0 <__sinit>:
 80080c0:	6983      	ldr	r3, [r0, #24]
 80080c2:	b510      	push	{r4, lr}
 80080c4:	4604      	mov	r4, r0
 80080c6:	bb33      	cbnz	r3, 8008116 <__sinit+0x56>
 80080c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80080cc:	6503      	str	r3, [r0, #80]	; 0x50
 80080ce:	4b12      	ldr	r3, [pc, #72]	; (8008118 <__sinit+0x58>)
 80080d0:	4a12      	ldr	r2, [pc, #72]	; (800811c <__sinit+0x5c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6282      	str	r2, [r0, #40]	; 0x28
 80080d6:	4298      	cmp	r0, r3
 80080d8:	bf04      	itt	eq
 80080da:	2301      	moveq	r3, #1
 80080dc:	6183      	streq	r3, [r0, #24]
 80080de:	f000 f81f 	bl	8008120 <__sfp>
 80080e2:	6060      	str	r0, [r4, #4]
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 f81b 	bl	8008120 <__sfp>
 80080ea:	60a0      	str	r0, [r4, #8]
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 f817 	bl	8008120 <__sfp>
 80080f2:	2200      	movs	r2, #0
 80080f4:	60e0      	str	r0, [r4, #12]
 80080f6:	2104      	movs	r1, #4
 80080f8:	6860      	ldr	r0, [r4, #4]
 80080fa:	f7ff ffa1 	bl	8008040 <std>
 80080fe:	2201      	movs	r2, #1
 8008100:	2109      	movs	r1, #9
 8008102:	68a0      	ldr	r0, [r4, #8]
 8008104:	f7ff ff9c 	bl	8008040 <std>
 8008108:	2202      	movs	r2, #2
 800810a:	2112      	movs	r1, #18
 800810c:	68e0      	ldr	r0, [r4, #12]
 800810e:	f7ff ff97 	bl	8008040 <std>
 8008112:	2301      	movs	r3, #1
 8008114:	61a3      	str	r3, [r4, #24]
 8008116:	bd10      	pop	{r4, pc}
 8008118:	08009560 	.word	0x08009560
 800811c:	08008089 	.word	0x08008089

08008120 <__sfp>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	4b1b      	ldr	r3, [pc, #108]	; (8008190 <__sfp+0x70>)
 8008124:	681e      	ldr	r6, [r3, #0]
 8008126:	69b3      	ldr	r3, [r6, #24]
 8008128:	4607      	mov	r7, r0
 800812a:	b913      	cbnz	r3, 8008132 <__sfp+0x12>
 800812c:	4630      	mov	r0, r6
 800812e:	f7ff ffc7 	bl	80080c0 <__sinit>
 8008132:	3648      	adds	r6, #72	; 0x48
 8008134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008138:	3b01      	subs	r3, #1
 800813a:	d503      	bpl.n	8008144 <__sfp+0x24>
 800813c:	6833      	ldr	r3, [r6, #0]
 800813e:	b133      	cbz	r3, 800814e <__sfp+0x2e>
 8008140:	6836      	ldr	r6, [r6, #0]
 8008142:	e7f7      	b.n	8008134 <__sfp+0x14>
 8008144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008148:	b16d      	cbz	r5, 8008166 <__sfp+0x46>
 800814a:	3468      	adds	r4, #104	; 0x68
 800814c:	e7f4      	b.n	8008138 <__sfp+0x18>
 800814e:	2104      	movs	r1, #4
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ff9f 	bl	8008094 <__sfmoreglue>
 8008156:	6030      	str	r0, [r6, #0]
 8008158:	2800      	cmp	r0, #0
 800815a:	d1f1      	bne.n	8008140 <__sfp+0x20>
 800815c:	230c      	movs	r3, #12
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	4604      	mov	r4, r0
 8008162:	4620      	mov	r0, r4
 8008164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <__sfp+0x74>)
 8008168:	6665      	str	r5, [r4, #100]	; 0x64
 800816a:	e9c4 5500 	strd	r5, r5, [r4]
 800816e:	60a5      	str	r5, [r4, #8]
 8008170:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008174:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008178:	2208      	movs	r2, #8
 800817a:	4629      	mov	r1, r5
 800817c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008180:	f7fe fc62 	bl	8006a48 <memset>
 8008184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800818c:	e7e9      	b.n	8008162 <__sfp+0x42>
 800818e:	bf00      	nop
 8008190:	08009560 	.word	0x08009560
 8008194:	ffff0001 	.word	0xffff0001

08008198 <_fwalk_reent>:
 8008198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800819c:	4680      	mov	r8, r0
 800819e:	4689      	mov	r9, r1
 80081a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081a4:	2600      	movs	r6, #0
 80081a6:	b914      	cbnz	r4, 80081ae <_fwalk_reent+0x16>
 80081a8:	4630      	mov	r0, r6
 80081aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80081b2:	3f01      	subs	r7, #1
 80081b4:	d501      	bpl.n	80081ba <_fwalk_reent+0x22>
 80081b6:	6824      	ldr	r4, [r4, #0]
 80081b8:	e7f5      	b.n	80081a6 <_fwalk_reent+0xe>
 80081ba:	89ab      	ldrh	r3, [r5, #12]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d907      	bls.n	80081d0 <_fwalk_reent+0x38>
 80081c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081c4:	3301      	adds	r3, #1
 80081c6:	d003      	beq.n	80081d0 <_fwalk_reent+0x38>
 80081c8:	4629      	mov	r1, r5
 80081ca:	4640      	mov	r0, r8
 80081cc:	47c8      	blx	r9
 80081ce:	4306      	orrs	r6, r0
 80081d0:	3568      	adds	r5, #104	; 0x68
 80081d2:	e7ee      	b.n	80081b2 <_fwalk_reent+0x1a>

080081d4 <_localeconv_r>:
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <_localeconv_r+0x14>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a18      	ldr	r0, [r3, #32]
 80081da:	4b04      	ldr	r3, [pc, #16]	; (80081ec <_localeconv_r+0x18>)
 80081dc:	2800      	cmp	r0, #0
 80081de:	bf08      	it	eq
 80081e0:	4618      	moveq	r0, r3
 80081e2:	30f0      	adds	r0, #240	; 0xf0
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	2000000c 	.word	0x2000000c
 80081ec:	20000070 	.word	0x20000070

080081f0 <__swhatbuf_r>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	460e      	mov	r6, r1
 80081f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f8:	2900      	cmp	r1, #0
 80081fa:	b096      	sub	sp, #88	; 0x58
 80081fc:	4614      	mov	r4, r2
 80081fe:	461d      	mov	r5, r3
 8008200:	da07      	bge.n	8008212 <__swhatbuf_r+0x22>
 8008202:	2300      	movs	r3, #0
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	89b3      	ldrh	r3, [r6, #12]
 8008208:	061a      	lsls	r2, r3, #24
 800820a:	d410      	bmi.n	800822e <__swhatbuf_r+0x3e>
 800820c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008210:	e00e      	b.n	8008230 <__swhatbuf_r+0x40>
 8008212:	466a      	mov	r2, sp
 8008214:	f000 fc2a 	bl	8008a6c <_fstat_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	dbf2      	blt.n	8008202 <__swhatbuf_r+0x12>
 800821c:	9a01      	ldr	r2, [sp, #4]
 800821e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008226:	425a      	negs	r2, r3
 8008228:	415a      	adcs	r2, r3
 800822a:	602a      	str	r2, [r5, #0]
 800822c:	e7ee      	b.n	800820c <__swhatbuf_r+0x1c>
 800822e:	2340      	movs	r3, #64	; 0x40
 8008230:	2000      	movs	r0, #0
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	b016      	add	sp, #88	; 0x58
 8008236:	bd70      	pop	{r4, r5, r6, pc}

08008238 <malloc>:
 8008238:	4b02      	ldr	r3, [pc, #8]	; (8008244 <malloc+0xc>)
 800823a:	4601      	mov	r1, r0
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	f000 bb45 	b.w	80088cc <_malloc_r>
 8008242:	bf00      	nop
 8008244:	2000000c 	.word	0x2000000c

08008248 <memcpy>:
 8008248:	b510      	push	{r4, lr}
 800824a:	1e43      	subs	r3, r0, #1
 800824c:	440a      	add	r2, r1
 800824e:	4291      	cmp	r1, r2
 8008250:	d100      	bne.n	8008254 <memcpy+0xc>
 8008252:	bd10      	pop	{r4, pc}
 8008254:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800825c:	e7f7      	b.n	800824e <memcpy+0x6>

0800825e <_Balloc>:
 800825e:	b570      	push	{r4, r5, r6, lr}
 8008260:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008262:	4604      	mov	r4, r0
 8008264:	460e      	mov	r6, r1
 8008266:	b93d      	cbnz	r5, 8008278 <_Balloc+0x1a>
 8008268:	2010      	movs	r0, #16
 800826a:	f7ff ffe5 	bl	8008238 <malloc>
 800826e:	6260      	str	r0, [r4, #36]	; 0x24
 8008270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008274:	6005      	str	r5, [r0, #0]
 8008276:	60c5      	str	r5, [r0, #12]
 8008278:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800827a:	68eb      	ldr	r3, [r5, #12]
 800827c:	b183      	cbz	r3, 80082a0 <_Balloc+0x42>
 800827e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008286:	b9b8      	cbnz	r0, 80082b8 <_Balloc+0x5a>
 8008288:	2101      	movs	r1, #1
 800828a:	fa01 f506 	lsl.w	r5, r1, r6
 800828e:	1d6a      	adds	r2, r5, #5
 8008290:	0092      	lsls	r2, r2, #2
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fabe 	bl	8008814 <_calloc_r>
 8008298:	b160      	cbz	r0, 80082b4 <_Balloc+0x56>
 800829a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800829e:	e00e      	b.n	80082be <_Balloc+0x60>
 80082a0:	2221      	movs	r2, #33	; 0x21
 80082a2:	2104      	movs	r1, #4
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fab5 	bl	8008814 <_calloc_r>
 80082aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ac:	60e8      	str	r0, [r5, #12]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e4      	bne.n	800827e <_Balloc+0x20>
 80082b4:	2000      	movs	r0, #0
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	6802      	ldr	r2, [r0, #0]
 80082ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80082be:	2300      	movs	r3, #0
 80082c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082c4:	e7f7      	b.n	80082b6 <_Balloc+0x58>

080082c6 <_Bfree>:
 80082c6:	b570      	push	{r4, r5, r6, lr}
 80082c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082ca:	4606      	mov	r6, r0
 80082cc:	460d      	mov	r5, r1
 80082ce:	b93c      	cbnz	r4, 80082e0 <_Bfree+0x1a>
 80082d0:	2010      	movs	r0, #16
 80082d2:	f7ff ffb1 	bl	8008238 <malloc>
 80082d6:	6270      	str	r0, [r6, #36]	; 0x24
 80082d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082dc:	6004      	str	r4, [r0, #0]
 80082de:	60c4      	str	r4, [r0, #12]
 80082e0:	b13d      	cbz	r5, 80082f2 <_Bfree+0x2c>
 80082e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082e4:	686a      	ldr	r2, [r5, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082ec:	6029      	str	r1, [r5, #0]
 80082ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80082f2:	bd70      	pop	{r4, r5, r6, pc}

080082f4 <__multadd>:
 80082f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f8:	690d      	ldr	r5, [r1, #16]
 80082fa:	461f      	mov	r7, r3
 80082fc:	4606      	mov	r6, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	f101 0c14 	add.w	ip, r1, #20
 8008304:	2300      	movs	r3, #0
 8008306:	f8dc 0000 	ldr.w	r0, [ip]
 800830a:	b281      	uxth	r1, r0
 800830c:	fb02 7101 	mla	r1, r2, r1, r7
 8008310:	0c0f      	lsrs	r7, r1, #16
 8008312:	0c00      	lsrs	r0, r0, #16
 8008314:	fb02 7000 	mla	r0, r2, r0, r7
 8008318:	b289      	uxth	r1, r1
 800831a:	3301      	adds	r3, #1
 800831c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008320:	429d      	cmp	r5, r3
 8008322:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008326:	f84c 1b04 	str.w	r1, [ip], #4
 800832a:	dcec      	bgt.n	8008306 <__multadd+0x12>
 800832c:	b1d7      	cbz	r7, 8008364 <__multadd+0x70>
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	42ab      	cmp	r3, r5
 8008332:	dc12      	bgt.n	800835a <__multadd+0x66>
 8008334:	6861      	ldr	r1, [r4, #4]
 8008336:	4630      	mov	r0, r6
 8008338:	3101      	adds	r1, #1
 800833a:	f7ff ff90 	bl	800825e <_Balloc>
 800833e:	6922      	ldr	r2, [r4, #16]
 8008340:	3202      	adds	r2, #2
 8008342:	f104 010c 	add.w	r1, r4, #12
 8008346:	4680      	mov	r8, r0
 8008348:	0092      	lsls	r2, r2, #2
 800834a:	300c      	adds	r0, #12
 800834c:	f7ff ff7c 	bl	8008248 <memcpy>
 8008350:	4621      	mov	r1, r4
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff ffb7 	bl	80082c6 <_Bfree>
 8008358:	4644      	mov	r4, r8
 800835a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800835e:	3501      	adds	r5, #1
 8008360:	615f      	str	r7, [r3, #20]
 8008362:	6125      	str	r5, [r4, #16]
 8008364:	4620      	mov	r0, r4
 8008366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800836a <__hi0bits>:
 800836a:	0c02      	lsrs	r2, r0, #16
 800836c:	0412      	lsls	r2, r2, #16
 800836e:	4603      	mov	r3, r0
 8008370:	b9b2      	cbnz	r2, 80083a0 <__hi0bits+0x36>
 8008372:	0403      	lsls	r3, r0, #16
 8008374:	2010      	movs	r0, #16
 8008376:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800837a:	bf04      	itt	eq
 800837c:	021b      	lsleq	r3, r3, #8
 800837e:	3008      	addeq	r0, #8
 8008380:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008384:	bf04      	itt	eq
 8008386:	011b      	lsleq	r3, r3, #4
 8008388:	3004      	addeq	r0, #4
 800838a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800838e:	bf04      	itt	eq
 8008390:	009b      	lsleq	r3, r3, #2
 8008392:	3002      	addeq	r0, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	db06      	blt.n	80083a6 <__hi0bits+0x3c>
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	d503      	bpl.n	80083a4 <__hi0bits+0x3a>
 800839c:	3001      	adds	r0, #1
 800839e:	4770      	bx	lr
 80083a0:	2000      	movs	r0, #0
 80083a2:	e7e8      	b.n	8008376 <__hi0bits+0xc>
 80083a4:	2020      	movs	r0, #32
 80083a6:	4770      	bx	lr

080083a8 <__lo0bits>:
 80083a8:	6803      	ldr	r3, [r0, #0]
 80083aa:	f013 0207 	ands.w	r2, r3, #7
 80083ae:	4601      	mov	r1, r0
 80083b0:	d00b      	beq.n	80083ca <__lo0bits+0x22>
 80083b2:	07da      	lsls	r2, r3, #31
 80083b4:	d423      	bmi.n	80083fe <__lo0bits+0x56>
 80083b6:	0798      	lsls	r0, r3, #30
 80083b8:	bf49      	itett	mi
 80083ba:	085b      	lsrmi	r3, r3, #1
 80083bc:	089b      	lsrpl	r3, r3, #2
 80083be:	2001      	movmi	r0, #1
 80083c0:	600b      	strmi	r3, [r1, #0]
 80083c2:	bf5c      	itt	pl
 80083c4:	600b      	strpl	r3, [r1, #0]
 80083c6:	2002      	movpl	r0, #2
 80083c8:	4770      	bx	lr
 80083ca:	b298      	uxth	r0, r3
 80083cc:	b9a8      	cbnz	r0, 80083fa <__lo0bits+0x52>
 80083ce:	0c1b      	lsrs	r3, r3, #16
 80083d0:	2010      	movs	r0, #16
 80083d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083d6:	bf04      	itt	eq
 80083d8:	0a1b      	lsreq	r3, r3, #8
 80083da:	3008      	addeq	r0, #8
 80083dc:	071a      	lsls	r2, r3, #28
 80083de:	bf04      	itt	eq
 80083e0:	091b      	lsreq	r3, r3, #4
 80083e2:	3004      	addeq	r0, #4
 80083e4:	079a      	lsls	r2, r3, #30
 80083e6:	bf04      	itt	eq
 80083e8:	089b      	lsreq	r3, r3, #2
 80083ea:	3002      	addeq	r0, #2
 80083ec:	07da      	lsls	r2, r3, #31
 80083ee:	d402      	bmi.n	80083f6 <__lo0bits+0x4e>
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	d006      	beq.n	8008402 <__lo0bits+0x5a>
 80083f4:	3001      	adds	r0, #1
 80083f6:	600b      	str	r3, [r1, #0]
 80083f8:	4770      	bx	lr
 80083fa:	4610      	mov	r0, r2
 80083fc:	e7e9      	b.n	80083d2 <__lo0bits+0x2a>
 80083fe:	2000      	movs	r0, #0
 8008400:	4770      	bx	lr
 8008402:	2020      	movs	r0, #32
 8008404:	4770      	bx	lr

08008406 <__i2b>:
 8008406:	b510      	push	{r4, lr}
 8008408:	460c      	mov	r4, r1
 800840a:	2101      	movs	r1, #1
 800840c:	f7ff ff27 	bl	800825e <_Balloc>
 8008410:	2201      	movs	r2, #1
 8008412:	6144      	str	r4, [r0, #20]
 8008414:	6102      	str	r2, [r0, #16]
 8008416:	bd10      	pop	{r4, pc}

08008418 <__multiply>:
 8008418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4614      	mov	r4, r2
 800841e:	690a      	ldr	r2, [r1, #16]
 8008420:	6923      	ldr	r3, [r4, #16]
 8008422:	429a      	cmp	r2, r3
 8008424:	bfb8      	it	lt
 8008426:	460b      	movlt	r3, r1
 8008428:	4688      	mov	r8, r1
 800842a:	bfbc      	itt	lt
 800842c:	46a0      	movlt	r8, r4
 800842e:	461c      	movlt	r4, r3
 8008430:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008434:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008438:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800843c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008440:	eb07 0609 	add.w	r6, r7, r9
 8008444:	42b3      	cmp	r3, r6
 8008446:	bfb8      	it	lt
 8008448:	3101      	addlt	r1, #1
 800844a:	f7ff ff08 	bl	800825e <_Balloc>
 800844e:	f100 0514 	add.w	r5, r0, #20
 8008452:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008456:	462b      	mov	r3, r5
 8008458:	2200      	movs	r2, #0
 800845a:	4573      	cmp	r3, lr
 800845c:	d316      	bcc.n	800848c <__multiply+0x74>
 800845e:	f104 0214 	add.w	r2, r4, #20
 8008462:	f108 0114 	add.w	r1, r8, #20
 8008466:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800846a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	9b00      	ldr	r3, [sp, #0]
 8008472:	9201      	str	r2, [sp, #4]
 8008474:	4293      	cmp	r3, r2
 8008476:	d80c      	bhi.n	8008492 <__multiply+0x7a>
 8008478:	2e00      	cmp	r6, #0
 800847a:	dd03      	ble.n	8008484 <__multiply+0x6c>
 800847c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008480:	2b00      	cmp	r3, #0
 8008482:	d05d      	beq.n	8008540 <__multiply+0x128>
 8008484:	6106      	str	r6, [r0, #16]
 8008486:	b003      	add	sp, #12
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	f843 2b04 	str.w	r2, [r3], #4
 8008490:	e7e3      	b.n	800845a <__multiply+0x42>
 8008492:	f8b2 b000 	ldrh.w	fp, [r2]
 8008496:	f1bb 0f00 	cmp.w	fp, #0
 800849a:	d023      	beq.n	80084e4 <__multiply+0xcc>
 800849c:	4689      	mov	r9, r1
 800849e:	46ac      	mov	ip, r5
 80084a0:	f04f 0800 	mov.w	r8, #0
 80084a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80084a8:	f8dc a000 	ldr.w	sl, [ip]
 80084ac:	b2a3      	uxth	r3, r4
 80084ae:	fa1f fa8a 	uxth.w	sl, sl
 80084b2:	fb0b a303 	mla	r3, fp, r3, sl
 80084b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80084ba:	f8dc 4000 	ldr.w	r4, [ip]
 80084be:	4443      	add	r3, r8
 80084c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80084c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80084c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80084cc:	46e2      	mov	sl, ip
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084d4:	454f      	cmp	r7, r9
 80084d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80084da:	f84a 3b04 	str.w	r3, [sl], #4
 80084de:	d82b      	bhi.n	8008538 <__multiply+0x120>
 80084e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80084ea:	3204      	adds	r2, #4
 80084ec:	f1ba 0f00 	cmp.w	sl, #0
 80084f0:	d020      	beq.n	8008534 <__multiply+0x11c>
 80084f2:	682b      	ldr	r3, [r5, #0]
 80084f4:	4689      	mov	r9, r1
 80084f6:	46a8      	mov	r8, r5
 80084f8:	f04f 0b00 	mov.w	fp, #0
 80084fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8008500:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008504:	fb0a 440c 	mla	r4, sl, ip, r4
 8008508:	445c      	add	r4, fp
 800850a:	46c4      	mov	ip, r8
 800850c:	b29b      	uxth	r3, r3
 800850e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008512:	f84c 3b04 	str.w	r3, [ip], #4
 8008516:	f859 3b04 	ldr.w	r3, [r9], #4
 800851a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800851e:	0c1b      	lsrs	r3, r3, #16
 8008520:	fb0a b303 	mla	r3, sl, r3, fp
 8008524:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008528:	454f      	cmp	r7, r9
 800852a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800852e:	d805      	bhi.n	800853c <__multiply+0x124>
 8008530:	f8c8 3004 	str.w	r3, [r8, #4]
 8008534:	3504      	adds	r5, #4
 8008536:	e79b      	b.n	8008470 <__multiply+0x58>
 8008538:	46d4      	mov	ip, sl
 800853a:	e7b3      	b.n	80084a4 <__multiply+0x8c>
 800853c:	46e0      	mov	r8, ip
 800853e:	e7dd      	b.n	80084fc <__multiply+0xe4>
 8008540:	3e01      	subs	r6, #1
 8008542:	e799      	b.n	8008478 <__multiply+0x60>

08008544 <__pow5mult>:
 8008544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008548:	4615      	mov	r5, r2
 800854a:	f012 0203 	ands.w	r2, r2, #3
 800854e:	4606      	mov	r6, r0
 8008550:	460f      	mov	r7, r1
 8008552:	d007      	beq.n	8008564 <__pow5mult+0x20>
 8008554:	3a01      	subs	r2, #1
 8008556:	4c21      	ldr	r4, [pc, #132]	; (80085dc <__pow5mult+0x98>)
 8008558:	2300      	movs	r3, #0
 800855a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800855e:	f7ff fec9 	bl	80082f4 <__multadd>
 8008562:	4607      	mov	r7, r0
 8008564:	10ad      	asrs	r5, r5, #2
 8008566:	d035      	beq.n	80085d4 <__pow5mult+0x90>
 8008568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800856a:	b93c      	cbnz	r4, 800857c <__pow5mult+0x38>
 800856c:	2010      	movs	r0, #16
 800856e:	f7ff fe63 	bl	8008238 <malloc>
 8008572:	6270      	str	r0, [r6, #36]	; 0x24
 8008574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008578:	6004      	str	r4, [r0, #0]
 800857a:	60c4      	str	r4, [r0, #12]
 800857c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008584:	b94c      	cbnz	r4, 800859a <__pow5mult+0x56>
 8008586:	f240 2171 	movw	r1, #625	; 0x271
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ff3b 	bl	8008406 <__i2b>
 8008590:	2300      	movs	r3, #0
 8008592:	f8c8 0008 	str.w	r0, [r8, #8]
 8008596:	4604      	mov	r4, r0
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	f04f 0800 	mov.w	r8, #0
 800859e:	07eb      	lsls	r3, r5, #31
 80085a0:	d50a      	bpl.n	80085b8 <__pow5mult+0x74>
 80085a2:	4639      	mov	r1, r7
 80085a4:	4622      	mov	r2, r4
 80085a6:	4630      	mov	r0, r6
 80085a8:	f7ff ff36 	bl	8008418 <__multiply>
 80085ac:	4639      	mov	r1, r7
 80085ae:	4681      	mov	r9, r0
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff fe88 	bl	80082c6 <_Bfree>
 80085b6:	464f      	mov	r7, r9
 80085b8:	106d      	asrs	r5, r5, #1
 80085ba:	d00b      	beq.n	80085d4 <__pow5mult+0x90>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	b938      	cbnz	r0, 80085d0 <__pow5mult+0x8c>
 80085c0:	4622      	mov	r2, r4
 80085c2:	4621      	mov	r1, r4
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff ff27 	bl	8008418 <__multiply>
 80085ca:	6020      	str	r0, [r4, #0]
 80085cc:	f8c0 8000 	str.w	r8, [r0]
 80085d0:	4604      	mov	r4, r0
 80085d2:	e7e4      	b.n	800859e <__pow5mult+0x5a>
 80085d4:	4638      	mov	r0, r7
 80085d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085da:	bf00      	nop
 80085dc:	080096d8 	.word	0x080096d8

080085e0 <__lshift>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	6849      	ldr	r1, [r1, #4]
 80085ee:	eb0a 0903 	add.w	r9, sl, r3
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	4607      	mov	r7, r0
 80085f6:	4616      	mov	r6, r2
 80085f8:	f109 0501 	add.w	r5, r9, #1
 80085fc:	42ab      	cmp	r3, r5
 80085fe:	db32      	blt.n	8008666 <__lshift+0x86>
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff fe2c 	bl	800825e <_Balloc>
 8008606:	2300      	movs	r3, #0
 8008608:	4680      	mov	r8, r0
 800860a:	f100 0114 	add.w	r1, r0, #20
 800860e:	461a      	mov	r2, r3
 8008610:	4553      	cmp	r3, sl
 8008612:	db2b      	blt.n	800866c <__lshift+0x8c>
 8008614:	6920      	ldr	r0, [r4, #16]
 8008616:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800861a:	f104 0314 	add.w	r3, r4, #20
 800861e:	f016 021f 	ands.w	r2, r6, #31
 8008622:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008626:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800862a:	d025      	beq.n	8008678 <__lshift+0x98>
 800862c:	f1c2 0e20 	rsb	lr, r2, #32
 8008630:	2000      	movs	r0, #0
 8008632:	681e      	ldr	r6, [r3, #0]
 8008634:	468a      	mov	sl, r1
 8008636:	4096      	lsls	r6, r2
 8008638:	4330      	orrs	r0, r6
 800863a:	f84a 0b04 	str.w	r0, [sl], #4
 800863e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008642:	459c      	cmp	ip, r3
 8008644:	fa20 f00e 	lsr.w	r0, r0, lr
 8008648:	d814      	bhi.n	8008674 <__lshift+0x94>
 800864a:	6048      	str	r0, [r1, #4]
 800864c:	b108      	cbz	r0, 8008652 <__lshift+0x72>
 800864e:	f109 0502 	add.w	r5, r9, #2
 8008652:	3d01      	subs	r5, #1
 8008654:	4638      	mov	r0, r7
 8008656:	f8c8 5010 	str.w	r5, [r8, #16]
 800865a:	4621      	mov	r1, r4
 800865c:	f7ff fe33 	bl	80082c6 <_Bfree>
 8008660:	4640      	mov	r0, r8
 8008662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008666:	3101      	adds	r1, #1
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	e7c7      	b.n	80085fc <__lshift+0x1c>
 800866c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008670:	3301      	adds	r3, #1
 8008672:	e7cd      	b.n	8008610 <__lshift+0x30>
 8008674:	4651      	mov	r1, sl
 8008676:	e7dc      	b.n	8008632 <__lshift+0x52>
 8008678:	3904      	subs	r1, #4
 800867a:	f853 2b04 	ldr.w	r2, [r3], #4
 800867e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008682:	459c      	cmp	ip, r3
 8008684:	d8f9      	bhi.n	800867a <__lshift+0x9a>
 8008686:	e7e4      	b.n	8008652 <__lshift+0x72>

08008688 <__mcmp>:
 8008688:	6903      	ldr	r3, [r0, #16]
 800868a:	690a      	ldr	r2, [r1, #16]
 800868c:	1a9b      	subs	r3, r3, r2
 800868e:	b530      	push	{r4, r5, lr}
 8008690:	d10c      	bne.n	80086ac <__mcmp+0x24>
 8008692:	0092      	lsls	r2, r2, #2
 8008694:	3014      	adds	r0, #20
 8008696:	3114      	adds	r1, #20
 8008698:	1884      	adds	r4, r0, r2
 800869a:	4411      	add	r1, r2
 800869c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086a4:	4295      	cmp	r5, r2
 80086a6:	d003      	beq.n	80086b0 <__mcmp+0x28>
 80086a8:	d305      	bcc.n	80086b6 <__mcmp+0x2e>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4618      	mov	r0, r3
 80086ae:	bd30      	pop	{r4, r5, pc}
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d3f3      	bcc.n	800869c <__mcmp+0x14>
 80086b4:	e7fa      	b.n	80086ac <__mcmp+0x24>
 80086b6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ba:	e7f7      	b.n	80086ac <__mcmp+0x24>

080086bc <__mdiff>:
 80086bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	460d      	mov	r5, r1
 80086c2:	4607      	mov	r7, r0
 80086c4:	4611      	mov	r1, r2
 80086c6:	4628      	mov	r0, r5
 80086c8:	4614      	mov	r4, r2
 80086ca:	f7ff ffdd 	bl	8008688 <__mcmp>
 80086ce:	1e06      	subs	r6, r0, #0
 80086d0:	d108      	bne.n	80086e4 <__mdiff+0x28>
 80086d2:	4631      	mov	r1, r6
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff fdc2 	bl	800825e <_Balloc>
 80086da:	2301      	movs	r3, #1
 80086dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80086e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e4:	bfa4      	itt	ge
 80086e6:	4623      	movge	r3, r4
 80086e8:	462c      	movge	r4, r5
 80086ea:	4638      	mov	r0, r7
 80086ec:	6861      	ldr	r1, [r4, #4]
 80086ee:	bfa6      	itte	ge
 80086f0:	461d      	movge	r5, r3
 80086f2:	2600      	movge	r6, #0
 80086f4:	2601      	movlt	r6, #1
 80086f6:	f7ff fdb2 	bl	800825e <_Balloc>
 80086fa:	692b      	ldr	r3, [r5, #16]
 80086fc:	60c6      	str	r6, [r0, #12]
 80086fe:	6926      	ldr	r6, [r4, #16]
 8008700:	f105 0914 	add.w	r9, r5, #20
 8008704:	f104 0214 	add.w	r2, r4, #20
 8008708:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800870c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008710:	f100 0514 	add.w	r5, r0, #20
 8008714:	f04f 0e00 	mov.w	lr, #0
 8008718:	f852 ab04 	ldr.w	sl, [r2], #4
 800871c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008720:	fa1e f18a 	uxtah	r1, lr, sl
 8008724:	b2a3      	uxth	r3, r4
 8008726:	1ac9      	subs	r1, r1, r3
 8008728:	0c23      	lsrs	r3, r4, #16
 800872a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800872e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008732:	b289      	uxth	r1, r1
 8008734:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008738:	45c8      	cmp	r8, r9
 800873a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800873e:	4694      	mov	ip, r2
 8008740:	f845 3b04 	str.w	r3, [r5], #4
 8008744:	d8e8      	bhi.n	8008718 <__mdiff+0x5c>
 8008746:	45bc      	cmp	ip, r7
 8008748:	d304      	bcc.n	8008754 <__mdiff+0x98>
 800874a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800874e:	b183      	cbz	r3, 8008772 <__mdiff+0xb6>
 8008750:	6106      	str	r6, [r0, #16]
 8008752:	e7c5      	b.n	80086e0 <__mdiff+0x24>
 8008754:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008758:	fa1e f381 	uxtah	r3, lr, r1
 800875c:	141a      	asrs	r2, r3, #16
 800875e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008762:	b29b      	uxth	r3, r3
 8008764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008768:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800876c:	f845 3b04 	str.w	r3, [r5], #4
 8008770:	e7e9      	b.n	8008746 <__mdiff+0x8a>
 8008772:	3e01      	subs	r6, #1
 8008774:	e7e9      	b.n	800874a <__mdiff+0x8e>

08008776 <__d2b>:
 8008776:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800877a:	460e      	mov	r6, r1
 800877c:	2101      	movs	r1, #1
 800877e:	ec59 8b10 	vmov	r8, r9, d0
 8008782:	4615      	mov	r5, r2
 8008784:	f7ff fd6b 	bl	800825e <_Balloc>
 8008788:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800878c:	4607      	mov	r7, r0
 800878e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008792:	bb34      	cbnz	r4, 80087e2 <__d2b+0x6c>
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	f1b8 0300 	subs.w	r3, r8, #0
 800879a:	d027      	beq.n	80087ec <__d2b+0x76>
 800879c:	a802      	add	r0, sp, #8
 800879e:	f840 3d08 	str.w	r3, [r0, #-8]!
 80087a2:	f7ff fe01 	bl	80083a8 <__lo0bits>
 80087a6:	9900      	ldr	r1, [sp, #0]
 80087a8:	b1f0      	cbz	r0, 80087e8 <__d2b+0x72>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	f1c0 0320 	rsb	r3, r0, #32
 80087b0:	fa02 f303 	lsl.w	r3, r2, r3
 80087b4:	430b      	orrs	r3, r1
 80087b6:	40c2      	lsrs	r2, r0
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	9201      	str	r2, [sp, #4]
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	bf14      	ite	ne
 80087c4:	2102      	movne	r1, #2
 80087c6:	2101      	moveq	r1, #1
 80087c8:	6139      	str	r1, [r7, #16]
 80087ca:	b1c4      	cbz	r4, 80087fe <__d2b+0x88>
 80087cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80087d0:	4404      	add	r4, r0
 80087d2:	6034      	str	r4, [r6, #0]
 80087d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087d8:	6028      	str	r0, [r5, #0]
 80087da:	4638      	mov	r0, r7
 80087dc:	b003      	add	sp, #12
 80087de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087e6:	e7d5      	b.n	8008794 <__d2b+0x1e>
 80087e8:	6179      	str	r1, [r7, #20]
 80087ea:	e7e7      	b.n	80087bc <__d2b+0x46>
 80087ec:	a801      	add	r0, sp, #4
 80087ee:	f7ff fddb 	bl	80083a8 <__lo0bits>
 80087f2:	9b01      	ldr	r3, [sp, #4]
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	2101      	movs	r1, #1
 80087f8:	6139      	str	r1, [r7, #16]
 80087fa:	3020      	adds	r0, #32
 80087fc:	e7e5      	b.n	80087ca <__d2b+0x54>
 80087fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008802:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008806:	6030      	str	r0, [r6, #0]
 8008808:	6918      	ldr	r0, [r3, #16]
 800880a:	f7ff fdae 	bl	800836a <__hi0bits>
 800880e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008812:	e7e1      	b.n	80087d8 <__d2b+0x62>

08008814 <_calloc_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	fb02 f401 	mul.w	r4, r2, r1
 800881a:	4621      	mov	r1, r4
 800881c:	f000 f856 	bl	80088cc <_malloc_r>
 8008820:	4605      	mov	r5, r0
 8008822:	b118      	cbz	r0, 800882c <_calloc_r+0x18>
 8008824:	4622      	mov	r2, r4
 8008826:	2100      	movs	r1, #0
 8008828:	f7fe f90e 	bl	8006a48 <memset>
 800882c:	4628      	mov	r0, r5
 800882e:	bd38      	pop	{r3, r4, r5, pc}

08008830 <_free_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	2900      	cmp	r1, #0
 8008836:	d045      	beq.n	80088c4 <_free_r+0x94>
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f0c      	subs	r4, r1, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfb8      	it	lt
 8008842:	18e4      	addlt	r4, r4, r3
 8008844:	f000 f948 	bl	8008ad8 <__malloc_lock>
 8008848:	4a1f      	ldr	r2, [pc, #124]	; (80088c8 <_free_r+0x98>)
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	4610      	mov	r0, r2
 800884e:	b933      	cbnz	r3, 800885e <_free_r+0x2e>
 8008850:	6063      	str	r3, [r4, #4]
 8008852:	6014      	str	r4, [r2, #0]
 8008854:	4628      	mov	r0, r5
 8008856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800885a:	f000 b93e 	b.w	8008ada <__malloc_unlock>
 800885e:	42a3      	cmp	r3, r4
 8008860:	d90c      	bls.n	800887c <_free_r+0x4c>
 8008862:	6821      	ldr	r1, [r4, #0]
 8008864:	1862      	adds	r2, r4, r1
 8008866:	4293      	cmp	r3, r2
 8008868:	bf04      	itt	eq
 800886a:	681a      	ldreq	r2, [r3, #0]
 800886c:	685b      	ldreq	r3, [r3, #4]
 800886e:	6063      	str	r3, [r4, #4]
 8008870:	bf04      	itt	eq
 8008872:	1852      	addeq	r2, r2, r1
 8008874:	6022      	streq	r2, [r4, #0]
 8008876:	6004      	str	r4, [r0, #0]
 8008878:	e7ec      	b.n	8008854 <_free_r+0x24>
 800887a:	4613      	mov	r3, r2
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	b10a      	cbz	r2, 8008884 <_free_r+0x54>
 8008880:	42a2      	cmp	r2, r4
 8008882:	d9fa      	bls.n	800887a <_free_r+0x4a>
 8008884:	6819      	ldr	r1, [r3, #0]
 8008886:	1858      	adds	r0, r3, r1
 8008888:	42a0      	cmp	r0, r4
 800888a:	d10b      	bne.n	80088a4 <_free_r+0x74>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	4401      	add	r1, r0
 8008890:	1858      	adds	r0, r3, r1
 8008892:	4282      	cmp	r2, r0
 8008894:	6019      	str	r1, [r3, #0]
 8008896:	d1dd      	bne.n	8008854 <_free_r+0x24>
 8008898:	6810      	ldr	r0, [r2, #0]
 800889a:	6852      	ldr	r2, [r2, #4]
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	4401      	add	r1, r0
 80088a0:	6019      	str	r1, [r3, #0]
 80088a2:	e7d7      	b.n	8008854 <_free_r+0x24>
 80088a4:	d902      	bls.n	80088ac <_free_r+0x7c>
 80088a6:	230c      	movs	r3, #12
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	e7d3      	b.n	8008854 <_free_r+0x24>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	1821      	adds	r1, r4, r0
 80088b0:	428a      	cmp	r2, r1
 80088b2:	bf04      	itt	eq
 80088b4:	6811      	ldreq	r1, [r2, #0]
 80088b6:	6852      	ldreq	r2, [r2, #4]
 80088b8:	6062      	str	r2, [r4, #4]
 80088ba:	bf04      	itt	eq
 80088bc:	1809      	addeq	r1, r1, r0
 80088be:	6021      	streq	r1, [r4, #0]
 80088c0:	605c      	str	r4, [r3, #4]
 80088c2:	e7c7      	b.n	8008854 <_free_r+0x24>
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	bf00      	nop
 80088c8:	20000200 	.word	0x20000200

080088cc <_malloc_r>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	1ccd      	adds	r5, r1, #3
 80088d0:	f025 0503 	bic.w	r5, r5, #3
 80088d4:	3508      	adds	r5, #8
 80088d6:	2d0c      	cmp	r5, #12
 80088d8:	bf38      	it	cc
 80088da:	250c      	movcc	r5, #12
 80088dc:	2d00      	cmp	r5, #0
 80088de:	4606      	mov	r6, r0
 80088e0:	db01      	blt.n	80088e6 <_malloc_r+0x1a>
 80088e2:	42a9      	cmp	r1, r5
 80088e4:	d903      	bls.n	80088ee <_malloc_r+0x22>
 80088e6:	230c      	movs	r3, #12
 80088e8:	6033      	str	r3, [r6, #0]
 80088ea:	2000      	movs	r0, #0
 80088ec:	bd70      	pop	{r4, r5, r6, pc}
 80088ee:	f000 f8f3 	bl	8008ad8 <__malloc_lock>
 80088f2:	4a21      	ldr	r2, [pc, #132]	; (8008978 <_malloc_r+0xac>)
 80088f4:	6814      	ldr	r4, [r2, #0]
 80088f6:	4621      	mov	r1, r4
 80088f8:	b991      	cbnz	r1, 8008920 <_malloc_r+0x54>
 80088fa:	4c20      	ldr	r4, [pc, #128]	; (800897c <_malloc_r+0xb0>)
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	b91b      	cbnz	r3, 8008908 <_malloc_r+0x3c>
 8008900:	4630      	mov	r0, r6
 8008902:	f000 f83d 	bl	8008980 <_sbrk_r>
 8008906:	6020      	str	r0, [r4, #0]
 8008908:	4629      	mov	r1, r5
 800890a:	4630      	mov	r0, r6
 800890c:	f000 f838 	bl	8008980 <_sbrk_r>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d124      	bne.n	800895e <_malloc_r+0x92>
 8008914:	230c      	movs	r3, #12
 8008916:	6033      	str	r3, [r6, #0]
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f8de 	bl	8008ada <__malloc_unlock>
 800891e:	e7e4      	b.n	80088ea <_malloc_r+0x1e>
 8008920:	680b      	ldr	r3, [r1, #0]
 8008922:	1b5b      	subs	r3, r3, r5
 8008924:	d418      	bmi.n	8008958 <_malloc_r+0x8c>
 8008926:	2b0b      	cmp	r3, #11
 8008928:	d90f      	bls.n	800894a <_malloc_r+0x7e>
 800892a:	600b      	str	r3, [r1, #0]
 800892c:	50cd      	str	r5, [r1, r3]
 800892e:	18cc      	adds	r4, r1, r3
 8008930:	4630      	mov	r0, r6
 8008932:	f000 f8d2 	bl	8008ada <__malloc_unlock>
 8008936:	f104 000b 	add.w	r0, r4, #11
 800893a:	1d23      	adds	r3, r4, #4
 800893c:	f020 0007 	bic.w	r0, r0, #7
 8008940:	1ac3      	subs	r3, r0, r3
 8008942:	d0d3      	beq.n	80088ec <_malloc_r+0x20>
 8008944:	425a      	negs	r2, r3
 8008946:	50e2      	str	r2, [r4, r3]
 8008948:	e7d0      	b.n	80088ec <_malloc_r+0x20>
 800894a:	428c      	cmp	r4, r1
 800894c:	684b      	ldr	r3, [r1, #4]
 800894e:	bf16      	itet	ne
 8008950:	6063      	strne	r3, [r4, #4]
 8008952:	6013      	streq	r3, [r2, #0]
 8008954:	460c      	movne	r4, r1
 8008956:	e7eb      	b.n	8008930 <_malloc_r+0x64>
 8008958:	460c      	mov	r4, r1
 800895a:	6849      	ldr	r1, [r1, #4]
 800895c:	e7cc      	b.n	80088f8 <_malloc_r+0x2c>
 800895e:	1cc4      	adds	r4, r0, #3
 8008960:	f024 0403 	bic.w	r4, r4, #3
 8008964:	42a0      	cmp	r0, r4
 8008966:	d005      	beq.n	8008974 <_malloc_r+0xa8>
 8008968:	1a21      	subs	r1, r4, r0
 800896a:	4630      	mov	r0, r6
 800896c:	f000 f808 	bl	8008980 <_sbrk_r>
 8008970:	3001      	adds	r0, #1
 8008972:	d0cf      	beq.n	8008914 <_malloc_r+0x48>
 8008974:	6025      	str	r5, [r4, #0]
 8008976:	e7db      	b.n	8008930 <_malloc_r+0x64>
 8008978:	20000200 	.word	0x20000200
 800897c:	20000204 	.word	0x20000204

08008980 <_sbrk_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4c06      	ldr	r4, [pc, #24]	; (800899c <_sbrk_r+0x1c>)
 8008984:	2300      	movs	r3, #0
 8008986:	4605      	mov	r5, r0
 8008988:	4608      	mov	r0, r1
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	f7fa f83c 	bl	8002a08 <_sbrk>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_sbrk_r+0x1a>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	b103      	cbz	r3, 800899a <_sbrk_r+0x1a>
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	20000614 	.word	0x20000614

080089a0 <__sread>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	f000 f898 	bl	8008adc <_read_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	bfab      	itete	ge
 80089b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089b2:	89a3      	ldrhlt	r3, [r4, #12]
 80089b4:	181b      	addge	r3, r3, r0
 80089b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ba:	bfac      	ite	ge
 80089bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80089be:	81a3      	strhlt	r3, [r4, #12]
 80089c0:	bd10      	pop	{r4, pc}

080089c2 <__swrite>:
 80089c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c6:	461f      	mov	r7, r3
 80089c8:	898b      	ldrh	r3, [r1, #12]
 80089ca:	05db      	lsls	r3, r3, #23
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4616      	mov	r6, r2
 80089d2:	d505      	bpl.n	80089e0 <__swrite+0x1e>
 80089d4:	2302      	movs	r3, #2
 80089d6:	2200      	movs	r2, #0
 80089d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089dc:	f000 f858 	bl	8008a90 <_lseek_r>
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089f6:	f000 b817 	b.w	8008a28 <_write_r>

080089fa <__sseek>:
 80089fa:	b510      	push	{r4, lr}
 80089fc:	460c      	mov	r4, r1
 80089fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a02:	f000 f845 	bl	8008a90 <_lseek_r>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	bf15      	itete	ne
 8008a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a16:	81a3      	strheq	r3, [r4, #12]
 8008a18:	bf18      	it	ne
 8008a1a:	81a3      	strhne	r3, [r4, #12]
 8008a1c:	bd10      	pop	{r4, pc}

08008a1e <__sclose>:
 8008a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a22:	f000 b813 	b.w	8008a4c <_close_r>
	...

08008a28 <_write_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4c07      	ldr	r4, [pc, #28]	; (8008a48 <_write_r+0x20>)
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	4608      	mov	r0, r1
 8008a30:	4611      	mov	r1, r2
 8008a32:	2200      	movs	r2, #0
 8008a34:	6022      	str	r2, [r4, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f7f9 ffa1 	bl	800297e <_write>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_write_r+0x1e>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_write_r+0x1e>
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	20000614 	.word	0x20000614

08008a4c <_close_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4c06      	ldr	r4, [pc, #24]	; (8008a68 <_close_r+0x1c>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4605      	mov	r5, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	f7f9 ffad 	bl	80029b6 <_close>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_close_r+0x1a>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_close_r+0x1a>
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	20000614 	.word	0x20000614

08008a6c <_fstat_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4c07      	ldr	r4, [pc, #28]	; (8008a8c <_fstat_r+0x20>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4605      	mov	r5, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	f7f9 ffa8 	bl	80029ce <_fstat>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	d102      	bne.n	8008a88 <_fstat_r+0x1c>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	b103      	cbz	r3, 8008a88 <_fstat_r+0x1c>
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	bd38      	pop	{r3, r4, r5, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000614 	.word	0x20000614

08008a90 <_lseek_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4c07      	ldr	r4, [pc, #28]	; (8008ab0 <_lseek_r+0x20>)
 8008a94:	4605      	mov	r5, r0
 8008a96:	4608      	mov	r0, r1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	6022      	str	r2, [r4, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f7f9 ffa5 	bl	80029ee <_lseek>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_lseek_r+0x1e>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_lseek_r+0x1e>
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	20000614 	.word	0x20000614

08008ab4 <__ascii_mbtowc>:
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	b901      	cbnz	r1, 8008aba <__ascii_mbtowc+0x6>
 8008ab8:	a901      	add	r1, sp, #4
 8008aba:	b142      	cbz	r2, 8008ace <__ascii_mbtowc+0x1a>
 8008abc:	b14b      	cbz	r3, 8008ad2 <__ascii_mbtowc+0x1e>
 8008abe:	7813      	ldrb	r3, [r2, #0]
 8008ac0:	600b      	str	r3, [r1, #0]
 8008ac2:	7812      	ldrb	r2, [r2, #0]
 8008ac4:	1c10      	adds	r0, r2, #0
 8008ac6:	bf18      	it	ne
 8008ac8:	2001      	movne	r0, #1
 8008aca:	b002      	add	sp, #8
 8008acc:	4770      	bx	lr
 8008ace:	4610      	mov	r0, r2
 8008ad0:	e7fb      	b.n	8008aca <__ascii_mbtowc+0x16>
 8008ad2:	f06f 0001 	mvn.w	r0, #1
 8008ad6:	e7f8      	b.n	8008aca <__ascii_mbtowc+0x16>

08008ad8 <__malloc_lock>:
 8008ad8:	4770      	bx	lr

08008ada <__malloc_unlock>:
 8008ada:	4770      	bx	lr

08008adc <_read_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4c07      	ldr	r4, [pc, #28]	; (8008afc <_read_r+0x20>)
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6022      	str	r2, [r4, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f7f9 ff2a 	bl	8002944 <_read>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_read_r+0x1e>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_read_r+0x1e>
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20000614 	.word	0x20000614

08008b00 <__ascii_wctomb>:
 8008b00:	b149      	cbz	r1, 8008b16 <__ascii_wctomb+0x16>
 8008b02:	2aff      	cmp	r2, #255	; 0xff
 8008b04:	bf85      	ittet	hi
 8008b06:	238a      	movhi	r3, #138	; 0x8a
 8008b08:	6003      	strhi	r3, [r0, #0]
 8008b0a:	700a      	strbls	r2, [r1, #0]
 8008b0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b10:	bf98      	it	ls
 8008b12:	2001      	movls	r0, #1
 8008b14:	4770      	bx	lr
 8008b16:	4608      	mov	r0, r1
 8008b18:	4770      	bx	lr
	...

08008b1c <powf>:
 8008b1c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008b20:	ed2d 8b04 	vpush	{d8-d9}
 8008b24:	4ca7      	ldr	r4, [pc, #668]	; (8008dc4 <powf+0x2a8>)
 8008b26:	b08a      	sub	sp, #40	; 0x28
 8008b28:	eef0 8a40 	vmov.f32	s17, s0
 8008b2c:	eeb0 8a60 	vmov.f32	s16, s1
 8008b30:	f000 f958 	bl	8008de4 <__ieee754_powf>
 8008b34:	f994 5000 	ldrsb.w	r5, [r4]
 8008b38:	1c6b      	adds	r3, r5, #1
 8008b3a:	eeb0 9a40 	vmov.f32	s18, s0
 8008b3e:	4626      	mov	r6, r4
 8008b40:	d05f      	beq.n	8008c02 <powf+0xe6>
 8008b42:	eeb4 8a48 	vcmp.f32	s16, s16
 8008b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b4a:	d65a      	bvs.n	8008c02 <powf+0xe6>
 8008b4c:	eef4 8a68 	vcmp.f32	s17, s17
 8008b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b54:	d721      	bvc.n	8008b9a <powf+0x7e>
 8008b56:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5e:	d150      	bne.n	8008c02 <powf+0xe6>
 8008b60:	2301      	movs	r3, #1
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	4b98      	ldr	r3, [pc, #608]	; (8008dc8 <powf+0x2ac>)
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	ee18 0a90 	vmov	r0, s17
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9308      	str	r3, [sp, #32]
 8008b70:	f7f7 fcb6 	bl	80004e0 <__aeabi_f2d>
 8008b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b78:	ee18 0a10 	vmov	r0, s16
 8008b7c:	f7f7 fcb0 	bl	80004e0 <__aeabi_f2d>
 8008b80:	4b92      	ldr	r3, [pc, #584]	; (8008dcc <powf+0x2b0>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	2d02      	cmp	r5, #2
 8008b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b8e:	d032      	beq.n	8008bf6 <powf+0xda>
 8008b90:	4668      	mov	r0, sp
 8008b92:	f000 fbea 	bl	800936a <matherr>
 8008b96:	bb40      	cbnz	r0, 8008bea <powf+0xce>
 8008b98:	e065      	b.n	8008c66 <powf+0x14a>
 8008b9a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8008dd0 <powf+0x2b4>
 8008b9e:	eef4 8a69 	vcmp.f32	s17, s19
 8008ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba6:	d163      	bne.n	8008c70 <powf+0x154>
 8008ba8:	eeb4 8a69 	vcmp.f32	s16, s19
 8008bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb0:	d12e      	bne.n	8008c10 <powf+0xf4>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	4b84      	ldr	r3, [pc, #528]	; (8008dc8 <powf+0x2ac>)
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	ee18 0a90 	vmov	r0, s17
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9308      	str	r3, [sp, #32]
 8008bc2:	f7f7 fc8d 	bl	80004e0 <__aeabi_f2d>
 8008bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bca:	ee18 0a10 	vmov	r0, s16
 8008bce:	f7f7 fc87 	bl	80004e0 <__aeabi_f2d>
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	d0d6      	beq.n	8008b90 <powf+0x74>
 8008be2:	4b7a      	ldr	r3, [pc, #488]	; (8008dcc <powf+0x2b0>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	b11b      	cbz	r3, 8008bf6 <powf+0xda>
 8008bee:	f7fd ff01 	bl	80069f4 <__errno>
 8008bf2:	9b08      	ldr	r3, [sp, #32]
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bfa:	f7f7 ffa1 	bl	8000b40 <__aeabi_d2f>
 8008bfe:	ee09 0a10 	vmov	s18, r0
 8008c02:	eeb0 0a49 	vmov.f32	s0, s18
 8008c06:	b00a      	add	sp, #40	; 0x28
 8008c08:	ecbd 8b04 	vpop	{d8-d9}
 8008c0c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008c10:	eeb0 0a48 	vmov.f32	s0, s16
 8008c14:	f000 fbb2 	bl	800937c <finitef>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d0f2      	beq.n	8008c02 <powf+0xe6>
 8008c1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	d5ed      	bpl.n	8008c02 <powf+0xe6>
 8008c26:	2301      	movs	r3, #1
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4b67      	ldr	r3, [pc, #412]	; (8008dc8 <powf+0x2ac>)
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	ee18 0a90 	vmov	r0, s17
 8008c32:	2300      	movs	r3, #0
 8008c34:	9308      	str	r3, [sp, #32]
 8008c36:	f7f7 fc53 	bl	80004e0 <__aeabi_f2d>
 8008c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c3e:	ee18 0a10 	vmov	r0, s16
 8008c42:	f7f7 fc4d 	bl	80004e0 <__aeabi_f2d>
 8008c46:	f994 3000 	ldrsb.w	r3, [r4]
 8008c4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c4e:	b923      	cbnz	r3, 8008c5a <powf+0x13e>
 8008c50:	2200      	movs	r2, #0
 8008c52:	2300      	movs	r3, #0
 8008c54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c58:	e79a      	b.n	8008b90 <powf+0x74>
 8008c5a:	495e      	ldr	r1, [pc, #376]	; (8008dd4 <powf+0x2b8>)
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d194      	bne.n	8008b90 <powf+0x74>
 8008c66:	f7fd fec5 	bl	80069f4 <__errno>
 8008c6a:	2321      	movs	r3, #33	; 0x21
 8008c6c:	6003      	str	r3, [r0, #0]
 8008c6e:	e7bc      	b.n	8008bea <powf+0xce>
 8008c70:	f000 fb84 	bl	800937c <finitef>
 8008c74:	4605      	mov	r5, r0
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d173      	bne.n	8008d62 <powf+0x246>
 8008c7a:	eeb0 0a68 	vmov.f32	s0, s17
 8008c7e:	f000 fb7d 	bl	800937c <finitef>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d06d      	beq.n	8008d62 <powf+0x246>
 8008c86:	eeb0 0a48 	vmov.f32	s0, s16
 8008c8a:	f000 fb77 	bl	800937c <finitef>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d067      	beq.n	8008d62 <powf+0x246>
 8008c92:	ee18 0a90 	vmov	r0, s17
 8008c96:	f7f7 fc23 	bl	80004e0 <__aeabi_f2d>
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	ee18 0a10 	vmov	r0, s16
 8008ca0:	4689      	mov	r9, r1
 8008ca2:	f7f7 fc1d 	bl	80004e0 <__aeabi_f2d>
 8008ca6:	eeb4 9a49 	vcmp.f32	s18, s18
 8008caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cae:	f994 4000 	ldrsb.w	r4, [r4]
 8008cb2:	4b45      	ldr	r3, [pc, #276]	; (8008dc8 <powf+0x2ac>)
 8008cb4:	d713      	bvc.n	8008cde <powf+0x1c2>
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	e9cd 2300 	strd	r2, r3, [sp]
 8008cbc:	9508      	str	r5, [sp, #32]
 8008cbe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008cc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc6:	2c00      	cmp	r4, #0
 8008cc8:	d0c2      	beq.n	8008c50 <powf+0x134>
 8008cca:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8008cce:	ee17 0a90 	vmov	r0, s15
 8008cd2:	f7f7 fc05 	bl	80004e0 <__aeabi_f2d>
 8008cd6:	2c02      	cmp	r4, #2
 8008cd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cdc:	e7c2      	b.n	8008c64 <powf+0x148>
 8008cde:	2203      	movs	r2, #3
 8008ce0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008ce4:	e9cd 2300 	strd	r2, r3, [sp]
 8008ce8:	9508      	str	r5, [sp, #32]
 8008cea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cf2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008cf6:	b9fc      	cbnz	r4, 8008d38 <powf+0x21c>
 8008cf8:	4b37      	ldr	r3, [pc, #220]	; (8008dd8 <powf+0x2bc>)
 8008cfa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008cfe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d0a:	d553      	bpl.n	8008db4 <powf+0x298>
 8008d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d10:	f000 fb44 	bl	800939c <rintf>
 8008d14:	eeb4 0a48 	vcmp.f32	s0, s16
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	d004      	beq.n	8008d28 <powf+0x20c>
 8008d1e:	4b2f      	ldr	r3, [pc, #188]	; (8008ddc <powf+0x2c0>)
 8008d20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008d24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d28:	f996 3000 	ldrsb.w	r3, [r6]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d141      	bne.n	8008db4 <powf+0x298>
 8008d30:	f7fd fe60 	bl	80069f4 <__errno>
 8008d34:	2322      	movs	r3, #34	; 0x22
 8008d36:	e799      	b.n	8008c6c <powf+0x150>
 8008d38:	4b29      	ldr	r3, [pc, #164]	; (8008de0 <powf+0x2c4>)
 8008d3a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d48:	d5ee      	bpl.n	8008d28 <powf+0x20c>
 8008d4a:	eeb0 0a48 	vmov.f32	s0, s16
 8008d4e:	f000 fb25 	bl	800939c <rintf>
 8008d52:	eeb4 0a48 	vcmp.f32	s0, s16
 8008d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5a:	d0e5      	beq.n	8008d28 <powf+0x20c>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4b1d      	ldr	r3, [pc, #116]	; (8008dd4 <powf+0x2b8>)
 8008d60:	e7e0      	b.n	8008d24 <powf+0x208>
 8008d62:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8008d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6a:	f47f af4a 	bne.w	8008c02 <powf+0xe6>
 8008d6e:	eeb0 0a68 	vmov.f32	s0, s17
 8008d72:	f000 fb03 	bl	800937c <finitef>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f43f af43 	beq.w	8008c02 <powf+0xe6>
 8008d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d80:	f000 fafc 	bl	800937c <finitef>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f43f af3c 	beq.w	8008c02 <powf+0xe6>
 8008d8a:	2304      	movs	r3, #4
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <powf+0x2ac>)
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	ee18 0a90 	vmov	r0, s17
 8008d96:	2300      	movs	r3, #0
 8008d98:	9308      	str	r3, [sp, #32]
 8008d9a:	f7f7 fba1 	bl	80004e0 <__aeabi_f2d>
 8008d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da2:	ee18 0a10 	vmov	r0, s16
 8008da6:	f7f7 fb9b 	bl	80004e0 <__aeabi_f2d>
 8008daa:	2200      	movs	r2, #0
 8008dac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008db0:	2300      	movs	r3, #0
 8008db2:	e7b7      	b.n	8008d24 <powf+0x208>
 8008db4:	4668      	mov	r0, sp
 8008db6:	f000 fad8 	bl	800936a <matherr>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f47f af15 	bne.w	8008bea <powf+0xce>
 8008dc0:	e7b6      	b.n	8008d30 <powf+0x214>
 8008dc2:	bf00      	nop
 8008dc4:	200001dc 	.word	0x200001dc
 8008dc8:	080097ef 	.word	0x080097ef
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	00000000 	.word	0x00000000
 8008dd4:	fff00000 	.word	0xfff00000
 8008dd8:	47efffff 	.word	0x47efffff
 8008ddc:	c7efffff 	.word	0xc7efffff
 8008de0:	7ff00000 	.word	0x7ff00000

08008de4 <__ieee754_powf>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	ee10 5a90 	vmov	r5, s1
 8008dec:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8008df0:	ed2d 8b02 	vpush	{d8}
 8008df4:	eeb0 8a40 	vmov.f32	s16, s0
 8008df8:	eef0 8a60 	vmov.f32	s17, s1
 8008dfc:	f000 8293 	beq.w	8009326 <__ieee754_powf+0x542>
 8008e00:	ee10 8a10 	vmov	r8, s0
 8008e04:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8008e08:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008e0c:	dc06      	bgt.n	8008e1c <__ieee754_powf+0x38>
 8008e0e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8008e12:	dd0a      	ble.n	8008e2a <__ieee754_powf+0x46>
 8008e14:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008e18:	f000 8285 	beq.w	8009326 <__ieee754_powf+0x542>
 8008e1c:	ecbd 8b02 	vpop	{d8}
 8008e20:	48d9      	ldr	r0, [pc, #868]	; (8009188 <__ieee754_powf+0x3a4>)
 8008e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e26:	f000 bab3 	b.w	8009390 <nanf>
 8008e2a:	f1b8 0f00 	cmp.w	r8, #0
 8008e2e:	da1d      	bge.n	8008e6c <__ieee754_powf+0x88>
 8008e30:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8008e34:	da2c      	bge.n	8008e90 <__ieee754_powf+0xac>
 8008e36:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8008e3a:	db30      	blt.n	8008e9e <__ieee754_powf+0xba>
 8008e3c:	15fb      	asrs	r3, r7, #23
 8008e3e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008e42:	fa47 f603 	asr.w	r6, r7, r3
 8008e46:	fa06 f303 	lsl.w	r3, r6, r3
 8008e4a:	42bb      	cmp	r3, r7
 8008e4c:	d127      	bne.n	8008e9e <__ieee754_powf+0xba>
 8008e4e:	f006 0601 	and.w	r6, r6, #1
 8008e52:	f1c6 0602 	rsb	r6, r6, #2
 8008e56:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8008e5a:	d122      	bne.n	8008ea2 <__ieee754_powf+0xbe>
 8008e5c:	2d00      	cmp	r5, #0
 8008e5e:	f280 8268 	bge.w	8009332 <__ieee754_powf+0x54e>
 8008e62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008e66:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008e6a:	e00d      	b.n	8008e88 <__ieee754_powf+0xa4>
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8008e72:	d1f0      	bne.n	8008e56 <__ieee754_powf+0x72>
 8008e74:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008e78:	f000 8255 	beq.w	8009326 <__ieee754_powf+0x542>
 8008e7c:	dd0a      	ble.n	8008e94 <__ieee754_powf+0xb0>
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	f280 8254 	bge.w	800932c <__ieee754_powf+0x548>
 8008e84:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800918c <__ieee754_powf+0x3a8>
 8008e88:	ecbd 8b02 	vpop	{d8}
 8008e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e90:	2602      	movs	r6, #2
 8008e92:	e7ec      	b.n	8008e6e <__ieee754_powf+0x8a>
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	daf5      	bge.n	8008e84 <__ieee754_powf+0xa0>
 8008e98:	eeb1 0a68 	vneg.f32	s0, s17
 8008e9c:	e7f4      	b.n	8008e88 <__ieee754_powf+0xa4>
 8008e9e:	2600      	movs	r6, #0
 8008ea0:	e7d9      	b.n	8008e56 <__ieee754_powf+0x72>
 8008ea2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8008ea6:	d102      	bne.n	8008eae <__ieee754_powf+0xca>
 8008ea8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008eac:	e7ec      	b.n	8008e88 <__ieee754_powf+0xa4>
 8008eae:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8008eb2:	eeb0 0a48 	vmov.f32	s0, s16
 8008eb6:	d108      	bne.n	8008eca <__ieee754_powf+0xe6>
 8008eb8:	f1b8 0f00 	cmp.w	r8, #0
 8008ebc:	db05      	blt.n	8008eca <__ieee754_powf+0xe6>
 8008ebe:	ecbd 8b02 	vpop	{d8}
 8008ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec6:	f000 ba4d 	b.w	8009364 <__ieee754_sqrtf>
 8008eca:	f000 fa50 	bl	800936e <fabsf>
 8008ece:	b124      	cbz	r4, 8008eda <__ieee754_powf+0xf6>
 8008ed0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8008ed4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008ed8:	d117      	bne.n	8008f0a <__ieee754_powf+0x126>
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	bfbc      	itt	lt
 8008ede:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8008ee2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008ee6:	f1b8 0f00 	cmp.w	r8, #0
 8008eea:	dacd      	bge.n	8008e88 <__ieee754_powf+0xa4>
 8008eec:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8008ef0:	ea54 0306 	orrs.w	r3, r4, r6
 8008ef4:	d104      	bne.n	8008f00 <__ieee754_powf+0x11c>
 8008ef6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008efa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008efe:	e7c3      	b.n	8008e88 <__ieee754_powf+0xa4>
 8008f00:	2e01      	cmp	r6, #1
 8008f02:	d1c1      	bne.n	8008e88 <__ieee754_powf+0xa4>
 8008f04:	eeb1 0a40 	vneg.f32	s0, s0
 8008f08:	e7be      	b.n	8008e88 <__ieee754_powf+0xa4>
 8008f0a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8008f0e:	3801      	subs	r0, #1
 8008f10:	ea56 0300 	orrs.w	r3, r6, r0
 8008f14:	d104      	bne.n	8008f20 <__ieee754_powf+0x13c>
 8008f16:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008f1a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008f1e:	e7b3      	b.n	8008e88 <__ieee754_powf+0xa4>
 8008f20:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8008f24:	dd6d      	ble.n	8009002 <__ieee754_powf+0x21e>
 8008f26:	4b9a      	ldr	r3, [pc, #616]	; (8009190 <__ieee754_powf+0x3ac>)
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	dc06      	bgt.n	8008f3a <__ieee754_powf+0x156>
 8008f2c:	2d00      	cmp	r5, #0
 8008f2e:	daa9      	bge.n	8008e84 <__ieee754_powf+0xa0>
 8008f30:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8009194 <__ieee754_powf+0x3b0>
 8008f34:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f38:	e7a6      	b.n	8008e88 <__ieee754_powf+0xa4>
 8008f3a:	4b97      	ldr	r3, [pc, #604]	; (8009198 <__ieee754_powf+0x3b4>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	dd02      	ble.n	8008f46 <__ieee754_powf+0x162>
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	dcf5      	bgt.n	8008f30 <__ieee754_powf+0x14c>
 8008f44:	e79e      	b.n	8008e84 <__ieee754_powf+0xa0>
 8008f46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f4e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800919c <__ieee754_powf+0x3b8>
 8008f52:	eef1 6a40 	vneg.f32	s13, s0
 8008f56:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008f5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008f5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008f62:	eee7 7a40 	vfms.f32	s15, s14, s0
 8008f66:	ee60 0a00 	vmul.f32	s1, s0, s0
 8008f6a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80091a0 <__ieee754_powf+0x3bc>
 8008f6e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8008f72:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80091a4 <__ieee754_powf+0x3c0>
 8008f76:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8008f7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008f7e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80091a8 <__ieee754_powf+0x3c4>
 8008f82:	eeb0 6a67 	vmov.f32	s12, s15
 8008f86:	eea0 6a07 	vfma.f32	s12, s0, s14
 8008f8a:	ee16 3a10 	vmov	r3, s12
 8008f8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008f92:	f023 030f 	bic.w	r3, r3, #15
 8008f96:	ee00 3a90 	vmov	s1, r3
 8008f9a:	eee6 0a87 	vfma.f32	s1, s13, s14
 8008f9e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008fa2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8008fa6:	f025 050f 	bic.w	r5, r5, #15
 8008faa:	ee07 5a10 	vmov	s14, r5
 8008fae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8008fb2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008fbe:	3e01      	subs	r6, #1
 8008fc0:	ea56 0200 	orrs.w	r2, r6, r0
 8008fc4:	ee07 5a10 	vmov	s14, r5
 8008fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fcc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008fd0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008fd4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008fd8:	ee17 4a10 	vmov	r4, s14
 8008fdc:	bf08      	it	eq
 8008fde:	eeb0 8a40 	vmoveq.f32	s16, s0
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008fe8:	f340 8184 	ble.w	80092f4 <__ieee754_powf+0x510>
 8008fec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8008ff0:	f340 80fc 	ble.w	80091ec <__ieee754_powf+0x408>
 8008ff4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8009194 <__ieee754_powf+0x3b0>
 8008ff8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8008ffc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009000:	e742      	b.n	8008e88 <__ieee754_powf+0xa4>
 8009002:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8009006:	bfbf      	itttt	lt
 8009008:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80091ac <__ieee754_powf+0x3c8>
 800900c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009010:	f06f 0217 	mvnlt.w	r2, #23
 8009014:	ee17 4a90 	vmovlt	r4, s15
 8009018:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800901c:	bfa8      	it	ge
 800901e:	2200      	movge	r2, #0
 8009020:	3b7f      	subs	r3, #127	; 0x7f
 8009022:	4413      	add	r3, r2
 8009024:	4a62      	ldr	r2, [pc, #392]	; (80091b0 <__ieee754_powf+0x3cc>)
 8009026:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800902a:	4294      	cmp	r4, r2
 800902c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8009030:	dd06      	ble.n	8009040 <__ieee754_powf+0x25c>
 8009032:	4a60      	ldr	r2, [pc, #384]	; (80091b4 <__ieee754_powf+0x3d0>)
 8009034:	4294      	cmp	r4, r2
 8009036:	f340 80a5 	ble.w	8009184 <__ieee754_powf+0x3a0>
 800903a:	3301      	adds	r3, #1
 800903c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009040:	2400      	movs	r4, #0
 8009042:	4a5d      	ldr	r2, [pc, #372]	; (80091b8 <__ieee754_powf+0x3d4>)
 8009044:	00a7      	lsls	r7, r4, #2
 8009046:	443a      	add	r2, r7
 8009048:	ee07 1a90 	vmov	s15, r1
 800904c:	ed92 7a00 	vldr	s14, [r2]
 8009050:	4a5a      	ldr	r2, [pc, #360]	; (80091bc <__ieee754_powf+0x3d8>)
 8009052:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009056:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800905a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800905e:	1049      	asrs	r1, r1, #1
 8009060:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009064:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009068:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800906c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009070:	ee06 1a10 	vmov	s12, r1
 8009074:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8009078:	ee14 ca90 	vmov	ip, s9
 800907c:	ea02 0c0c 	and.w	ip, r2, ip
 8009080:	ee05 ca10 	vmov	s10, ip
 8009084:	eeb1 4a45 	vneg.f32	s8, s10
 8009088:	eee4 5a06 	vfma.f32	s11, s8, s12
 800908c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009090:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80091c0 <__ieee754_powf+0x3dc>
 8009094:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8009098:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800909c:	eee4 5a06 	vfma.f32	s11, s8, s12
 80090a0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80090a4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80090a8:	eddf 5a46 	vldr	s11, [pc, #280]	; 80091c4 <__ieee754_powf+0x3e0>
 80090ac:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80090b0:	eddf 5a45 	vldr	s11, [pc, #276]	; 80091c8 <__ieee754_powf+0x3e4>
 80090b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80090b8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800919c <__ieee754_powf+0x3b8>
 80090bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80090c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80091cc <__ieee754_powf+0x3e8>
 80090c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80090c8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80091d0 <__ieee754_powf+0x3ec>
 80090cc:	ee75 6a24 	vadd.f32	s13, s10, s9
 80090d0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80090d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80090d8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80090dc:	eef0 7a65 	vmov.f32	s15, s11
 80090e0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80090e4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80090e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ec:	ee17 1a90 	vmov	r1, s15
 80090f0:	4011      	ands	r1, r2
 80090f2:	ee07 1a90 	vmov	s15, r1
 80090f6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80090fa:	eddf 5a36 	vldr	s11, [pc, #216]	; 80091d4 <__ieee754_powf+0x3f0>
 80090fe:	eea4 7a05 	vfma.f32	s14, s8, s10
 8009102:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009106:	ee27 7a24 	vmul.f32	s14, s14, s9
 800910a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800910e:	eeb0 6a47 	vmov.f32	s12, s14
 8009112:	eea5 6a27 	vfma.f32	s12, s10, s15
 8009116:	ee16 1a10 	vmov	r1, s12
 800911a:	4011      	ands	r1, r2
 800911c:	ee06 1a90 	vmov	s13, r1
 8009120:	eee4 6a27 	vfma.f32	s13, s8, s15
 8009124:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80091d8 <__ieee754_powf+0x3f4>
 8009128:	ee37 7a66 	vsub.f32	s14, s14, s13
 800912c:	ee06 1a10 	vmov	s12, r1
 8009130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009134:	eddf 7a29 	vldr	s15, [pc, #164]	; 80091dc <__ieee754_powf+0x3f8>
 8009138:	4929      	ldr	r1, [pc, #164]	; (80091e0 <__ieee754_powf+0x3fc>)
 800913a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800913e:	4439      	add	r1, r7
 8009140:	edd1 7a00 	vldr	s15, [r1]
 8009144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef0 0a47 	vmov.f32	s1, s14
 8009150:	4b24      	ldr	r3, [pc, #144]	; (80091e4 <__ieee754_powf+0x400>)
 8009152:	eee6 0a25 	vfma.f32	s1, s12, s11
 8009156:	443b      	add	r3, r7
 8009158:	ed93 5a00 	vldr	s10, [r3]
 800915c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009160:	ee70 0a85 	vadd.f32	s1, s1, s10
 8009164:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8009168:	ee17 3a90 	vmov	r3, s15
 800916c:	4013      	ands	r3, r2
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009176:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800917a:	eee6 7a65 	vfms.f32	s15, s12, s11
 800917e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009182:	e70e      	b.n	8008fa2 <__ieee754_powf+0x1be>
 8009184:	2401      	movs	r4, #1
 8009186:	e75c      	b.n	8009042 <__ieee754_powf+0x25e>
 8009188:	080096ed 	.word	0x080096ed
 800918c:	00000000 	.word	0x00000000
 8009190:	3f7ffff7 	.word	0x3f7ffff7
 8009194:	7149f2ca 	.word	0x7149f2ca
 8009198:	3f800007 	.word	0x3f800007
 800919c:	3eaaaaab 	.word	0x3eaaaaab
 80091a0:	36eca570 	.word	0x36eca570
 80091a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80091a8:	3fb8aa00 	.word	0x3fb8aa00
 80091ac:	4b800000 	.word	0x4b800000
 80091b0:	001cc471 	.word	0x001cc471
 80091b4:	005db3d6 	.word	0x005db3d6
 80091b8:	080097f4 	.word	0x080097f4
 80091bc:	fffff000 	.word	0xfffff000
 80091c0:	3e6c3255 	.word	0x3e6c3255
 80091c4:	3e53f142 	.word	0x3e53f142
 80091c8:	3e8ba305 	.word	0x3e8ba305
 80091cc:	3edb6db7 	.word	0x3edb6db7
 80091d0:	3f19999a 	.word	0x3f19999a
 80091d4:	3f763800 	.word	0x3f763800
 80091d8:	3f76384f 	.word	0x3f76384f
 80091dc:	369dc3a0 	.word	0x369dc3a0
 80091e0:	08009804 	.word	0x08009804
 80091e4:	080097fc 	.word	0x080097fc
 80091e8:	3338aa3c 	.word	0x3338aa3c
 80091ec:	f040 8092 	bne.w	8009314 <__ieee754_powf+0x530>
 80091f0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80091e8 <__ieee754_powf+0x404>
 80091f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091f8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80091fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009204:	f73f aef6 	bgt.w	8008ff4 <__ieee754_powf+0x210>
 8009208:	15db      	asrs	r3, r3, #23
 800920a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800920e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009212:	4103      	asrs	r3, r0
 8009214:	4423      	add	r3, r4
 8009216:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800921a:	4947      	ldr	r1, [pc, #284]	; (8009338 <__ieee754_powf+0x554>)
 800921c:	3a7f      	subs	r2, #127	; 0x7f
 800921e:	4111      	asrs	r1, r2
 8009220:	ea23 0101 	bic.w	r1, r3, r1
 8009224:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8009228:	ee07 1a10 	vmov	s14, r1
 800922c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009230:	f1c2 0217 	rsb	r2, r2, #23
 8009234:	4110      	asrs	r0, r2
 8009236:	2c00      	cmp	r4, #0
 8009238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800923c:	bfb8      	it	lt
 800923e:	4240      	neglt	r0, r0
 8009240:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009244:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800933c <__ieee754_powf+0x558>
 8009248:	ee17 3a10 	vmov	r3, s14
 800924c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009250:	f023 030f 	bic.w	r3, r3, #15
 8009254:	ee07 3a10 	vmov	s14, r3
 8009258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800925c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009260:	eddf 7a37 	vldr	s15, [pc, #220]	; 8009340 <__ieee754_powf+0x55c>
 8009264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009268:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800926c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8009344 <__ieee754_powf+0x560>
 8009270:	eeb0 0a67 	vmov.f32	s0, s15
 8009274:	eea7 0a26 	vfma.f32	s0, s14, s13
 8009278:	eeb0 6a40 	vmov.f32	s12, s0
 800927c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009280:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009284:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009288:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009348 <__ieee754_powf+0x564>
 800928c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800934c <__ieee754_powf+0x568>
 8009290:	eea7 6a26 	vfma.f32	s12, s14, s13
 8009294:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8009350 <__ieee754_powf+0x56c>
 8009298:	eee6 6a07 	vfma.f32	s13, s12, s14
 800929c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8009354 <__ieee754_powf+0x570>
 80092a0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80092a4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8009358 <__ieee754_powf+0x574>
 80092a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80092ac:	eeb0 6a40 	vmov.f32	s12, s0
 80092b0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80092b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80092b8:	eeb0 7a46 	vmov.f32	s14, s12
 80092bc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80092c0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80092c4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80092c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80092cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80092d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80092d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80092dc:	ee10 3a10 	vmov	r3, s0
 80092e0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80092e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092e8:	da1a      	bge.n	8009320 <__ieee754_powf+0x53c>
 80092ea:	f000 f8b1 	bl	8009450 <scalbnf>
 80092ee:	ee20 0a08 	vmul.f32	s0, s0, s16
 80092f2:	e5c9      	b.n	8008e88 <__ieee754_powf+0xa4>
 80092f4:	4a19      	ldr	r2, [pc, #100]	; (800935c <__ieee754_powf+0x578>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	dd02      	ble.n	8009300 <__ieee754_powf+0x51c>
 80092fa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009360 <__ieee754_powf+0x57c>
 80092fe:	e67b      	b.n	8008ff8 <__ieee754_powf+0x214>
 8009300:	d108      	bne.n	8009314 <__ieee754_powf+0x530>
 8009302:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009306:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800930a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930e:	f6ff af7b 	blt.w	8009208 <__ieee754_powf+0x424>
 8009312:	e7f2      	b.n	80092fa <__ieee754_powf+0x516>
 8009314:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009318:	f73f af76 	bgt.w	8009208 <__ieee754_powf+0x424>
 800931c:	2000      	movs	r0, #0
 800931e:	e78f      	b.n	8009240 <__ieee754_powf+0x45c>
 8009320:	ee00 3a10 	vmov	s0, r3
 8009324:	e7e3      	b.n	80092ee <__ieee754_powf+0x50a>
 8009326:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800932a:	e5ad      	b.n	8008e88 <__ieee754_powf+0xa4>
 800932c:	eeb0 0a68 	vmov.f32	s0, s17
 8009330:	e5aa      	b.n	8008e88 <__ieee754_powf+0xa4>
 8009332:	eeb0 0a48 	vmov.f32	s0, s16
 8009336:	e5a7      	b.n	8008e88 <__ieee754_powf+0xa4>
 8009338:	007fffff 	.word	0x007fffff
 800933c:	3f317218 	.word	0x3f317218
 8009340:	35bfbe8c 	.word	0x35bfbe8c
 8009344:	3f317200 	.word	0x3f317200
 8009348:	3331bb4c 	.word	0x3331bb4c
 800934c:	b5ddea0e 	.word	0xb5ddea0e
 8009350:	388ab355 	.word	0x388ab355
 8009354:	bb360b61 	.word	0xbb360b61
 8009358:	3e2aaaab 	.word	0x3e2aaaab
 800935c:	43160000 	.word	0x43160000
 8009360:	0da24260 	.word	0x0da24260

08009364 <__ieee754_sqrtf>:
 8009364:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009368:	4770      	bx	lr

0800936a <matherr>:
 800936a:	2000      	movs	r0, #0
 800936c:	4770      	bx	lr

0800936e <fabsf>:
 800936e:	ee10 3a10 	vmov	r3, s0
 8009372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009376:	ee00 3a10 	vmov	s0, r3
 800937a:	4770      	bx	lr

0800937c <finitef>:
 800937c:	ee10 3a10 	vmov	r3, s0
 8009380:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8009384:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009388:	bfac      	ite	ge
 800938a:	2000      	movge	r0, #0
 800938c:	2001      	movlt	r0, #1
 800938e:	4770      	bx	lr

08009390 <nanf>:
 8009390:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009398 <nanf+0x8>
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	7fc00000 	.word	0x7fc00000

0800939c <rintf>:
 800939c:	b513      	push	{r0, r1, r4, lr}
 800939e:	ee10 1a10 	vmov	r1, s0
 80093a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093a6:	0ddc      	lsrs	r4, r3, #23
 80093a8:	3c7f      	subs	r4, #127	; 0x7f
 80093aa:	2c16      	cmp	r4, #22
 80093ac:	dc46      	bgt.n	800943c <rintf+0xa0>
 80093ae:	b32b      	cbz	r3, 80093fc <rintf+0x60>
 80093b0:	2c00      	cmp	r4, #0
 80093b2:	ee10 2a10 	vmov	r2, s0
 80093b6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80093ba:	da21      	bge.n	8009400 <rintf+0x64>
 80093bc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80093c0:	425b      	negs	r3, r3
 80093c2:	4a21      	ldr	r2, [pc, #132]	; (8009448 <rintf+0xac>)
 80093c4:	0a5b      	lsrs	r3, r3, #9
 80093c6:	0d09      	lsrs	r1, r1, #20
 80093c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093cc:	0509      	lsls	r1, r1, #20
 80093ce:	430b      	orrs	r3, r1
 80093d0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80093d4:	ee07 3a90 	vmov	s15, r3
 80093d8:	edd2 6a00 	vldr	s13, [r2]
 80093dc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80093e0:	ed8d 7a01 	vstr	s14, [sp, #4]
 80093e4:	eddd 7a01 	vldr	s15, [sp, #4]
 80093e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093ec:	ee17 3a90 	vmov	r3, s15
 80093f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093f4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80093f8:	ee00 3a10 	vmov	s0, r3
 80093fc:	b002      	add	sp, #8
 80093fe:	bd10      	pop	{r4, pc}
 8009400:	4b12      	ldr	r3, [pc, #72]	; (800944c <rintf+0xb0>)
 8009402:	4123      	asrs	r3, r4
 8009404:	4219      	tst	r1, r3
 8009406:	d0f9      	beq.n	80093fc <rintf+0x60>
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	4219      	tst	r1, r3
 800940c:	d006      	beq.n	800941c <rintf+0x80>
 800940e:	ea21 0203 	bic.w	r2, r1, r3
 8009412:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009416:	fa43 f404 	asr.w	r4, r3, r4
 800941a:	4322      	orrs	r2, r4
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <rintf+0xac>)
 800941e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009422:	ed90 7a00 	vldr	s14, [r0]
 8009426:	ee07 2a90 	vmov	s15, r2
 800942a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800942e:	edcd 7a01 	vstr	s15, [sp, #4]
 8009432:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009436:	ee30 0a47 	vsub.f32	s0, s0, s14
 800943a:	e7df      	b.n	80093fc <rintf+0x60>
 800943c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009440:	d3dc      	bcc.n	80093fc <rintf+0x60>
 8009442:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009446:	e7d9      	b.n	80093fc <rintf+0x60>
 8009448:	0800980c 	.word	0x0800980c
 800944c:	007fffff 	.word	0x007fffff

08009450 <scalbnf>:
 8009450:	b508      	push	{r3, lr}
 8009452:	ee10 2a10 	vmov	r2, s0
 8009456:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800945a:	ed2d 8b02 	vpush	{d8}
 800945e:	eef0 0a40 	vmov.f32	s1, s0
 8009462:	d004      	beq.n	800946e <scalbnf+0x1e>
 8009464:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009468:	d306      	bcc.n	8009478 <scalbnf+0x28>
 800946a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800946e:	ecbd 8b02 	vpop	{d8}
 8009472:	eeb0 0a60 	vmov.f32	s0, s1
 8009476:	bd08      	pop	{r3, pc}
 8009478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800947c:	d21c      	bcs.n	80094b8 <scalbnf+0x68>
 800947e:	4b1f      	ldr	r3, [pc, #124]	; (80094fc <scalbnf+0xac>)
 8009480:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009500 <scalbnf+0xb0>
 8009484:	4298      	cmp	r0, r3
 8009486:	ee60 0a27 	vmul.f32	s1, s0, s15
 800948a:	db10      	blt.n	80094ae <scalbnf+0x5e>
 800948c:	ee10 2a90 	vmov	r2, s1
 8009490:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009494:	3b19      	subs	r3, #25
 8009496:	4403      	add	r3, r0
 8009498:	2bfe      	cmp	r3, #254	; 0xfe
 800949a:	dd0f      	ble.n	80094bc <scalbnf+0x6c>
 800949c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009504 <scalbnf+0xb4>
 80094a0:	eeb0 0a48 	vmov.f32	s0, s16
 80094a4:	f000 f834 	bl	8009510 <copysignf>
 80094a8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80094ac:	e7df      	b.n	800946e <scalbnf+0x1e>
 80094ae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009508 <scalbnf+0xb8>
 80094b2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80094b6:	e7da      	b.n	800946e <scalbnf+0x1e>
 80094b8:	0ddb      	lsrs	r3, r3, #23
 80094ba:	e7ec      	b.n	8009496 <scalbnf+0x46>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dd06      	ble.n	80094ce <scalbnf+0x7e>
 80094c0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80094c4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80094c8:	ee00 3a90 	vmov	s1, r3
 80094cc:	e7cf      	b.n	800946e <scalbnf+0x1e>
 80094ce:	f113 0f16 	cmn.w	r3, #22
 80094d2:	da06      	bge.n	80094e2 <scalbnf+0x92>
 80094d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80094d8:	4298      	cmp	r0, r3
 80094da:	dcdf      	bgt.n	800949c <scalbnf+0x4c>
 80094dc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009508 <scalbnf+0xb8>
 80094e0:	e7de      	b.n	80094a0 <scalbnf+0x50>
 80094e2:	3319      	adds	r3, #25
 80094e4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80094e8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80094ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 800950c <scalbnf+0xbc>
 80094f0:	ee07 3a10 	vmov	s14, r3
 80094f4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80094f8:	e7b9      	b.n	800946e <scalbnf+0x1e>
 80094fa:	bf00      	nop
 80094fc:	ffff3cb0 	.word	0xffff3cb0
 8009500:	4c000000 	.word	0x4c000000
 8009504:	7149f2ca 	.word	0x7149f2ca
 8009508:	0da24260 	.word	0x0da24260
 800950c:	33000000 	.word	0x33000000

08009510 <copysignf>:
 8009510:	ee10 3a10 	vmov	r3, s0
 8009514:	ee10 2a90 	vmov	r2, s1
 8009518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800951c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009520:	4313      	orrs	r3, r2
 8009522:	ee00 3a10 	vmov	s0, r3
 8009526:	4770      	bx	lr

08009528 <_init>:
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952a:	bf00      	nop
 800952c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952e:	bc08      	pop	{r3}
 8009530:	469e      	mov	lr, r3
 8009532:	4770      	bx	lr

08009534 <_fini>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr
