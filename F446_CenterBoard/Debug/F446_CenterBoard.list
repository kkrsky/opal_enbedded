
F446_CenterBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009fb8  08009fb8  00019fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3dc  0800a3dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e4  0800a3e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001e0  0800a5cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800a5cc  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3c5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409b  00000000  00000000  0003b5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  00040ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026adc  00000000  00000000  00041d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018940  00000000  00000000  000687e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d951b  00000000  00000000  00081124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a63f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006438  00000000  00000000  0015a694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009fa0 	.word	0x08009fa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009fa0 	.word	0x08009fa0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <DFPlayer_init>:

#include "DFPlayer_Mini_mp3.h"

uint8_t cmd[8];

void DFPlayer_init(UART_HandleTypeDef *handler){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	huart_DFPlayer = handler;
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <DFPlayer_init+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000208 	.word	0x20000208

08000fa0 <DFPlayer_setvolume>:

void DFPlayer_setvolume(uint8_t volume){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[8];
	cmd[0]= 0x7E;
 8000faa:	237e      	movs	r3, #126	; 0x7e
 8000fac:	723b      	strb	r3, [r7, #8]
	cmd[1]= 0xFF;
 8000fae:	23ff      	movs	r3, #255	; 0xff
 8000fb0:	727b      	strb	r3, [r7, #9]
	cmd[2]=	0x06;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	72bb      	strb	r3, [r7, #10]
	cmd[3]=	0x06;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	72fb      	strb	r3, [r7, #11]
	cmd[4]=	0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	733b      	strb	r3, [r7, #12]
	cmd[5]=	0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	737b      	strb	r3, [r7, #13]
	cmd[6]=	volume;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	73bb      	strb	r3, [r7, #14]
	cmd[7]=	0xEF;
 8000fc6:	23ef      	movs	r3, #239	; 0xef
 8000fc8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart_DFPlayer,(uint8_t*)cmd,8,0xF);
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <DFPlayer_setvolume+0x44>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f107 0108 	add.w	r1, r7, #8
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	f004 fffa 	bl	8005fce <HAL_UART_Transmit>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000208 	.word	0x20000208

08000fe8 <DFPlayer_playmp3>:
void DFPlayer_playmp3(uint8_t playnumber){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[8];
	cmd[0]= 0x7E;
 8000ff2:	237e      	movs	r3, #126	; 0x7e
 8000ff4:	723b      	strb	r3, [r7, #8]
	cmd[1]= 0xFF;
 8000ff6:	23ff      	movs	r3, #255	; 0xff
 8000ff8:	727b      	strb	r3, [r7, #9]
	cmd[2]=	0x06;
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	72bb      	strb	r3, [r7, #10]
	cmd[3]=	0x0F;
 8000ffe:	230f      	movs	r3, #15
 8001000:	72fb      	strb	r3, [r7, #11]
	cmd[4]=	0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	733b      	strb	r3, [r7, #12]
	cmd[5]=	1;
 8001006:	2301      	movs	r3, #1
 8001008:	737b      	strb	r3, [r7, #13]
	cmd[6]=	playnumber;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	73bb      	strb	r3, [r7, #14]
	cmd[7]=	0xEF;
 800100e:	23ef      	movs	r3, #239	; 0xef
 8001010:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart_DFPlayer,(uint8_t*)cmd,8,0xF);
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <DFPlayer_playmp3+0x44>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f107 0108 	add.w	r1, r7, #8
 800101a:	230f      	movs	r3, #15
 800101c:	2208      	movs	r2, #8
 800101e:	f004 ffd6 	bl	8005fce <HAL_UART_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000208 	.word	0x20000208

08001030 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_CAN1_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_CAN1_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_CAN1_Init+0x64>)
 800103c:	2206      	movs	r2, #6
 800103e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_CAN1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_CAN1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_CAN1_Init+0x64>)
 800104e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001052:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_CAN1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_CAN1_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_CAN1_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_CAN1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_CAN1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_CAN1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_CAN1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_CAN1_Init+0x64>)
 8001080:	f002 f880 	bl	8003184 <HAL_CAN_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800108a:	f001 fb6b 	bl	8002764 <Error_Handler>
  }

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000214 	.word	0x20000214
 8001098:	40006400 	.word	0x40006400

0800109c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a25      	ldr	r2, [pc, #148]	; (8001150 <HAL_CAN_MspInit+0xb4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d144      	bne.n	8001148 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_CAN_MspInit+0xb8>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <HAL_CAN_MspInit+0xb8>)
 80010c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_CAN_MspInit+0xb8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_CAN_MspInit+0xb8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_CAN_MspInit+0xb8>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_CAN_MspInit+0xb8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001108:	2309      	movs	r3, #9
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <HAL_CAN_MspInit+0xbc>)
 8001114:	f003 fca8 	bl	8004a68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2101      	movs	r1, #1
 800111c:	2013      	movs	r0, #19
 800111e:	f002 ffa4 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001122:	2013      	movs	r0, #19
 8001124:	f002 ffbd 	bl	80040a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	2014      	movs	r0, #20
 800112e:	f002 ff9c 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001132:	2014      	movs	r0, #20
 8001134:	f002 ffb5 	bl	80040a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2103      	movs	r1, #3
 800113c:	2015      	movs	r0, #21
 800113e:	f002 ff94 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001142:	2015      	movs	r0, #21
 8001144:	f002 ffad 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40006400 	.word	0x40006400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000

0800115c <can_init>:
 */

#include "can_ibis.h"


void can_init(CAN_HandleTypeDef* handler){
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	  CAN_ibis = handler;
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <can_init+0x78>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
	  CAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.FilterBank = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterMode =  CAN_FILTERMODE_IDMASK;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
	  sFilterConfig.FilterIdHigh = 0x000;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIdLow = 0x000;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterMaskIdHigh = 0x000;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterMaskIdLow = 0x000;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterActivation = ENABLE;
 800118a:	2301      	movs	r3, #1
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
	  sFilterConfig.SlaveStartFilterBank = 14;
 800118e:	230e      	movs	r3, #14
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){  Error_Handler();}
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4619      	mov	r1, r3
 8001198:	480f      	ldr	r0, [pc, #60]	; (80011d8 <can_init+0x7c>)
 800119a:	f002 f8ef 	bl	800337c <HAL_CAN_ConfigFilter>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <can_init+0x4c>
 80011a4:	f001 fade 	bl	8002764 <Error_Handler>
	  if (HAL_CAN_Start(&hcan1) != HAL_OK){ Error_Handler();}
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <can_init+0x7c>)
 80011aa:	f002 f9c7 	bl	800353c <HAL_CAN_Start>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <can_init+0x5c>
 80011b4:	f001 fad6 	bl	8002764 <Error_Handler>
	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {Error_Handler(); }
 80011b8:	2102      	movs	r1, #2
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <can_init+0x7c>)
 80011bc:	f002 fc24 	bl	8003a08 <HAL_CAN_ActivateNotification>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <can_init+0x6e>
 80011c6:	f001 facd 	bl	8002764 <Error_Handler>
}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	; 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000298 	.word	0x20000298
 80011d8:	20000214 	.word	0x20000214

080011dc <can_send>:

void can_send(int id, uint8_t senddata[8]){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]

	TxHeader.StdId = id;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <can_send+0x68>)
 80011ea:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <can_send+0x68>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <can_send+0x68>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <can_send+0x68>)
 80011fa:	2208      	movs	r2, #8
 80011fc:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <can_send+0x68>)
 8001200:	2200      	movs	r2, #0
 8001202:	751a      	strb	r2, [r3, #20]

	/* Request transmission */
	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,senddata, &TxMailbox) != HAL_OK)
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <can_send+0x6c>)
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <can_send+0x68>)
 800120a:	4810      	ldr	r0, [pc, #64]	; (800124c <can_send+0x70>)
 800120c:	f002 f9da 	bl	80035c4 <HAL_CAN_AddTxMessage>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <can_send+0x4a>
	{
		Error_Handler();
 8001216:	f001 faa5 	bl	8002764 <Error_Handler>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 800121a:	e004      	b.n	8001226 <can_send+0x4a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,1);
 800121c:	2201      	movs	r2, #1
 800121e:	2102      	movs	r1, #2
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <can_send+0x74>)
 8001222:	f003 fdb5 	bl	8004d90 <HAL_GPIO_WritePin>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <can_send+0x70>)
 8001228:	f002 faa7 	bl	800377a <HAL_CAN_GetTxMailboxesFreeLevel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b03      	cmp	r3, #3
 8001230:	d1f4      	bne.n	800121c <can_send+0x40>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,0);
 8001232:	2200      	movs	r2, #0
 8001234:	2102      	movs	r1, #2
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <can_send+0x74>)
 8001238:	f003 fdaa 	bl	8004d90 <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000034c 	.word	0x2000034c
 8001248:	20000308 	.word	0x20000308
 800124c:	20000214 	.word	0x20000214
 8001250:	40020800 	.word	0x40020800

08001254 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_DAC_Init+0x60>)
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <MX_DAC_Init+0x64>)
 8001266:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001268:	4812      	ldr	r0, [pc, #72]	; (80012b4 <MX_DAC_Init+0x60>)
 800126a:	f002 ff34 	bl	80040d6 <HAL_DAC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001274:	f001 fa76 	bl	8002764 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <MX_DAC_Init+0x60>)
 8001288:	f003 f801 	bl	800428e <HAL_DAC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001292:	f001 fa67 	bl	8002764 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	2210      	movs	r2, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_DAC_Init+0x60>)
 800129e:	f002 fff6 	bl	800428e <HAL_DAC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80012a8:	f001 fa5c 	bl	8002764 <Error_Handler>
  }

}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000398 	.word	0x20000398
 80012b8:	40007400 	.word	0x40007400

080012bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_DAC_MspInit+0x8c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12f      	bne.n	800133e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_DAC_MspInit+0x90>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_DAC_MspInit+0x90>)
 80012e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_DAC_MspInit+0x90>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_DAC_MspInit+0x90>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_DAC_MspInit+0x90>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_DAC_MspInit+0x90>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001316:	2330      	movs	r3, #48	; 0x30
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <HAL_DAC_MspInit+0x94>)
 800132a:	f003 fb9d 	bl	8004a68 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2104      	movs	r1, #4
 8001332:	2036      	movs	r0, #54	; 0x36
 8001334:	f002 fe99 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001338:	2036      	movs	r0, #54	; 0x36
 800133a:	f002 feb2 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40007400 	.word	0x40007400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_DMA_Init+0x4c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <MX_DMA_Init+0x4c>)
 8001364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_DMA_Init+0x4c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 9, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2109      	movs	r1, #9
 800137a:	2010      	movs	r0, #16
 800137c:	f002 fe75 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001380:	2010      	movs	r0, #16
 8001382:	f002 fe8e 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 10, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	210a      	movs	r1, #10
 800138a:	2011      	movs	r0, #17
 800138c:	f002 fe6d 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001390:	2011      	movs	r0, #17
 8001392:	f002 fe86 	bl	80040a2 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <MX_GPIO_Init+0xf8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a36      	ldr	r2, [pc, #216]	; (800149c <MX_GPIO_Init+0xf8>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <MX_GPIO_Init+0xf8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <MX_GPIO_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a2f      	ldr	r2, [pc, #188]	; (800149c <MX_GPIO_Init+0xf8>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <MX_GPIO_Init+0xf8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <MX_GPIO_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a28      	ldr	r2, [pc, #160]	; (800149c <MX_GPIO_Init+0xf8>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <MX_GPIO_Init+0xf8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <MX_GPIO_Init+0xf8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <MX_GPIO_Init+0xf8>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <MX_GPIO_Init+0xf8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2103      	movs	r1, #3
 800142e:	481c      	ldr	r0, [pc, #112]	; (80014a0 <MX_GPIO_Init+0xfc>)
 8001430:	f003 fcae 	bl	8004d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143a:	481a      	ldr	r0, [pc, #104]	; (80014a4 <MX_GPIO_Init+0x100>)
 800143c:	f003 fca8 	bl	8004d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001440:	2303      	movs	r3, #3
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4812      	ldr	r0, [pc, #72]	; (80014a0 <MX_GPIO_Init+0xfc>)
 8001458:	f003 fb06 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_GPIO_Init+0x100>)
 8001476:	f003 faf7 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800147a:	2340      	movs	r3, #64	; 0x40
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_GPIO_Init+0x104>)
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_GPIO_Init+0xfc>)
 800148e:	f003 faeb 	bl	8004a68 <HAL_GPIO_Init>

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020400 	.word	0x40020400
 80014a8:	10110000 	.word	0x10110000

080014ac <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_IWDG_Init+0x2c>)
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <MX_IWDG_Init+0x30>)
 80014b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_IWDG_Init+0x2c>)
 80014b8:	2202      	movs	r2, #2
 80014ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_IWDG_Init+0x2c>)
 80014be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_IWDG_Init+0x2c>)
 80014c6:	f003 fc97 	bl	8004df8 <HAL_IWDG_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80014d0:	f001 f948 	bl	8002764 <Error_Handler>
  }

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200003ac 	.word	0x200003ac
 80014dc:	40003000 	.word	0x40003000

080014e0 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80014ea:	1df9      	adds	r1, r7, #7
 80014ec:	2301      	movs	r3, #1
 80014ee:	2201      	movs	r2, #1
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <__io_putchar+0x20>)
 80014f2:	f004 fd6c 	bl	8005fce <HAL_UART_Transmit>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000590 	.word	0x20000590

08001504 <map>:
uint8_t Craction_in,Break_in,Flont_Lamp_in,Key_in,EX_in,Winker_L_in,Winker_R_in;
uint8_t state,cnt,connect,EN,EN_rear,EN_front,mode;
float slot,speed,slot_data;
float rol,pit,pit_acc,rol_acc,pit_temp,rol_temp;

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0a05 	vstr	s0, [r7, #20]
 800150e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001512:	ed87 1a03 	vstr	s2, [r7, #12]
 8001516:	edc7 1a02 	vstr	s3, [r7, #8]
 800151a:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800151e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001522:	edd7 7a04 	vldr	s15, [r7, #16]
 8001526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152a:	edd7 6a01 	vldr	s13, [r7, #4]
 800152e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001532:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001536:	ee67 6a27 	vmul.f32	s13, s14, s15
 800153a:	ed97 7a03 	vldr	s14, [r7, #12]
 800153e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800154a:	edd7 7a02 	vldr	s15, [r7, #8]
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001564:	f001 fd78 	bl	8003058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001568:	f000 f888 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156c:	f7ff ff1a 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001570:	f7ff fef0 	bl	8001354 <MX_DMA_Init>
  MX_CAN1_Init();
 8001574:	f7ff fd5c 	bl	8001030 <MX_CAN1_Init>
  MX_DAC_Init();
 8001578:	f7ff fe6c 	bl	8001254 <MX_DAC_Init>
  MX_SPI2_Init();
 800157c:	f001 f916 	bl	80027ac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001580:	f001 fb6e 	bl	8002c60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001584:	f001 fb96 	bl	8002cb4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001588:	f001 fbbe 	bl	8002d08 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800158c:	f001 fb0a 	bl	8002ba4 <MX_TIM6_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  EN_rear=0;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <main+0xf0>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
  EN_front=0;
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <main+0xf4>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
  setbuf(stdout, NULL);
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <main+0xf8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 ff81 	bl	80074ac <setbuf>
  can_init(&hcan1);
 80015aa:	482c      	ldr	r0, [pc, #176]	; (800165c <main+0xfc>)
 80015ac:	f7ff fdd6 	bl	800115c <can_init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80015b0:	2100      	movs	r1, #0
 80015b2:	482b      	ldr	r0, [pc, #172]	; (8001660 <main+0x100>)
 80015b4:	f002 fdb1 	bl	800411a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80015b8:	2110      	movs	r1, #16
 80015ba:	4829      	ldr	r0, [pc, #164]	; (8001660 <main+0x100>)
 80015bc:	f002 fdad 	bl	800411a <HAL_DAC_Start>
  HAL_UART_Init(&huart2);
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <main+0x104>)
 80015c2:	f004 fcb7 	bl	8005f34 <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_ESP32,Rxbufsize_from_ESP32);
 80015c6:	2205      	movs	r2, #5
 80015c8:	4927      	ldr	r1, [pc, #156]	; (8001668 <main+0x108>)
 80015ca:	4826      	ldr	r0, [pc, #152]	; (8001664 <main+0x104>)
 80015cc:	f004 fd98 	bl	8006100 <HAL_UART_Receive_DMA>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80015d0:	2300      	movs	r3, #0
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	4822      	ldr	r0, [pc, #136]	; (8001660 <main+0x100>)
 80015d8:	f002 fea6 	bl	8004328 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80015dc:	2300      	movs	r3, #0
 80015de:	2200      	movs	r2, #0
 80015e0:	2110      	movs	r1, #16
 80015e2:	481f      	ldr	r0, [pc, #124]	; (8001660 <main+0x100>)
 80015e4:	f002 fea0 	bl	8004328 <HAL_DAC_SetValue>
  //mpu9250_init(&hspi2);

  while(1){
      	if(EN_front==1 && EN_rear==1){break;}
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <main+0xf4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d103      	bne.n	80015f8 <main+0x98>
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <main+0xf0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d008      	beq.n	800160a <main+0xaa>
      	if(HAL_GetTick()>1000){
 80015f8:	f001 fd94 	bl	8003124 <HAL_GetTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001602:	d9f1      	bls.n	80015e8 <main+0x88>
      		Error_Handler();
 8001604:	f001 f8ae 	bl	8002764 <Error_Handler>
      	if(EN_front==1 && EN_rear==1){break;}
 8001608:	e7ee      	b.n	80015e8 <main+0x88>
 800160a:	bf00      	nop
      	}
      }

  connect=0;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <main+0x10c>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
  DFPlayer_init(&huart3);
 8001612:	4817      	ldr	r0, [pc, #92]	; (8001670 <main+0x110>)
 8001614:	f7ff fcb4 	bl	8000f80 <DFPlayer_init>
  HAL_Delay(500);
 8001618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161c:	f001 fd8e 	bl	800313c <HAL_Delay>
  DFPlayer_setvolume(0x40);
 8001620:	2040      	movs	r0, #64	; 0x40
 8001622:	f7ff fcbd 	bl	8000fa0 <DFPlayer_setvolume>
  HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f001 fd87 	bl	800313c <HAL_Delay>
  DFPlayer_playmp3(2);
 800162e:	2002      	movs	r0, #2
 8001630:	f7ff fcda 	bl	8000fe8 <DFPlayer_playmp3>
  HAL_Delay(3000);
 8001634:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001638:	f001 fd80 	bl	800313c <HAL_Delay>

  MX_IWDG_Init();
 800163c:	f7ff ff36 	bl	80014ac <MX_IWDG_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <main+0x114>)
 8001642:	f004 f9f2 	bl	8005a2a <HAL_TIM_Base_Start_IT>
	  printf(" Rol=%7.4f",rol);
	  printf(" Pit=%7.4f",pit);*/

	  //printf("\r\n");

	  HAL_IWDG_Refresh(&hiwdg);
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <main+0x118>)
 8001648:	f003 fc0f 	bl	8004e6a <HAL_IWDG_Refresh>
 800164c:	e7fb      	b.n	8001646 <main+0xe6>
 800164e:	bf00      	nop
 8001650:	200003e5 	.word	0x200003e5
 8001654:	200003dc 	.word	0x200003dc
 8001658:	2000000c 	.word	0x2000000c
 800165c:	20000214 	.word	0x20000214
 8001660:	20000398 	.word	0x20000398
 8001664:	200005d0 	.word	0x200005d0
 8001668:	20000270 	.word	0x20000270
 800166c:	200003ba 	.word	0x200003ba
 8001670:	200004f0 	.word	0x200004f0
 8001674:	20000450 	.word	0x20000450
 8001678:	200003ac 	.word	0x200003ac

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2234      	movs	r2, #52	; 0x34
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f005 fa9c 	bl	8006bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <SystemClock_Config+0xd8>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a2a      	ldr	r2, [pc, #168]	; (8001754 <SystemClock_Config+0xd8>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <SystemClock_Config+0xd8>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <SystemClock_Config+0xdc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016c8:	4a23      	ldr	r2, [pc, #140]	; (8001758 <SystemClock_Config+0xdc>)
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <SystemClock_Config+0xdc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80016dc:	2309      	movs	r3, #9
 80016de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016e6:	2301      	movs	r3, #1
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ea:	2302      	movs	r3, #2
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f4:	2304      	movs	r3, #4
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001700:	2302      	movs	r3, #2
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001704:	2302      	movs	r3, #2
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fea3 	bl	8005458 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001718:	f001 f824 	bl	8002764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001720:	2303      	movs	r3, #3
 8001722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800172c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	2104      	movs	r1, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fbc0 	bl	8004ec0 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001746:	f001 f80d 	bl	8002764 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3750      	adds	r7, #80	; 0x50
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000

0800175c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001764:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001766:	4a48      	ldr	r2, [pc, #288]	; (8001888 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8001768:	2100      	movs	r1, #0
 800176a:	4848      	ldr	r0, [pc, #288]	; (800188c <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800176c:	f002 f83a 	bl	80037e4 <HAL_CAN_GetRxMessage>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  	{
	    		Error_Handler();
 8001776:	f000 fff5 	bl	8002764 <Error_Handler>
	  	}
	switch (RxHeader.StdId){
 800177a:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001782:	d06a      	beq.n	800185a <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 8001784:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001788:	d873      	bhi.n	8001872 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
 800178a:	f240 1201 	movw	r2, #257	; 0x101
 800178e:	4293      	cmp	r3, r2
 8001790:	d05a      	beq.n	8001848 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
 8001792:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001796:	d26c      	bcs.n	8001872 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 800179c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a0:	d00d      	beq.n	80017be <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 80017a2:	e066      	b.n	8001872 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
	//error
	case 0x000:
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80017a4:	2300      	movs	r3, #0
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	4839      	ldr	r0, [pc, #228]	; (8001890 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80017ac:	f002 fdbc 	bl	8004328 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80017b0:	2300      	movs	r3, #0
 80017b2:	2200      	movs	r2, #0
 80017b4:	2110      	movs	r1, #16
 80017b6:	4836      	ldr	r0, [pc, #216]	; (8001890 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80017b8:	f002 fdb6 	bl	8004328 <HAL_DAC_SetValue>
		break;
 80017bc:	e059      	b.n	8001872 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>

	//state button
	case 0x100:
		state=RxData[0];
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80017c4:	701a      	strb	r2, [r3, #0]
		Winker_L_in=  (state & 0b01000000)>>6;
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	119b      	asrs	r3, r3, #6
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80017d6:	701a      	strb	r2, [r3, #0]
		Winker_R_in=  (state & 0b00100000)>>5;
 80017d8:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	115b      	asrs	r3, r3, #5
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80017e8:	701a      	strb	r2, [r3, #0]
		Craction_in=  (state & 0b00010000)>>4;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	111b      	asrs	r3, r3, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80017fa:	701a      	strb	r2, [r3, #0]
		Break_in=     (state & 0b00001000)>>3;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	10db      	asrs	r3, r3, #3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 800180c:	701a      	strb	r2, [r3, #0]
		Flont_Lamp_in=(state & 0b00000100)>>2;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	109b      	asrs	r3, r3, #2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 800181e:	701a      	strb	r2, [r3, #0]
		Key_in=       (state & 0b00000010)>>1;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	105b      	asrs	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8001830:	701a      	strb	r2, [r3, #0]
		EX_in=        (state & 0b00000001);
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800183e:	701a      	strb	r2, [r3, #0]

		EN_front=1;
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
		break;
 8001846:	e014      	b.n	8001872 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
	//slot
	case 0x101:
		slot=uchar4_to_float(RxData);
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800184a:	f001 fbc1 	bl	8002fd0 <uchar4_to_float>
 800184e:	eef0 7a40 	vmov.f32	s15, s0
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001858:	e00b      	b.n	8001872 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
	//speed
	case 0x102:
		speed=uchar4_to_float(RxData);
 800185a:	480a      	ldr	r0, [pc, #40]	; (8001884 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800185c:	f001 fbb8 	bl	8002fd0 <uchar4_to_float>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8001866:	edc3 7a00 	vstr	s15, [r3]
		EN_rear=1;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
		break;
 8001870:	bf00      	nop

	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001872:	2102      	movs	r1, #2
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001876:	f003 faa4 	bl	8004dc2 <HAL_GPIO_TogglePin>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000324 	.word	0x20000324
 8001888:	20000364 	.word	0x20000364
 800188c:	20000214 	.word	0x20000214
 8001890:	20000398 	.word	0x20000398
 8001894:	200003d5 	.word	0x200003d5
 8001898:	200003f1 	.word	0x200003f1
 800189c:	200003f0 	.word	0x200003f0
 80018a0:	200003e6 	.word	0x200003e6
 80018a4:	200003bc 	.word	0x200003bc
 80018a8:	200003b8 	.word	0x200003b8
 80018ac:	200003c4 	.word	0x200003c4
 80018b0:	200003b9 	.word	0x200003b9
 80018b4:	200003dc 	.word	0x200003dc
 80018b8:	200003f4 	.word	0x200003f4
 80018bc:	200003e8 	.word	0x200003e8
 80018c0:	200003e5 	.word	0x200003e5
 80018c4:	40020800 	.word	0x40020800

080018c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	mode=data_from_esp32[0];
 80018d0:	4bcd      	ldr	r3, [pc, #820]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	4bcd      	ldr	r3, [pc, #820]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018d6:	701a      	strb	r2, [r3, #0]
	//mode=1;

	if(mode==1){
 80018d8:	4bcc      	ldr	r3, [pc, #816]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d114      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0x42>
		slot_data=map(slot,0.650,3.265,0.9,3.5);//norm}
 80018e0:	4bcb      	ldr	r3, [pc, #812]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eeb0 2a0c 	vmov.f32	s4, #12	; 0x40600000  3.5
 80018ea:	eddf 1aca 	vldr	s3, [pc, #808]	; 8001c14 <HAL_TIM_PeriodElapsedCallback+0x34c>
 80018ee:	ed9f 1aca 	vldr	s2, [pc, #808]	; 8001c18 <HAL_TIM_PeriodElapsedCallback+0x350>
 80018f2:	eddf 0aca 	vldr	s1, [pc, #808]	; 8001c1c <HAL_TIM_PeriodElapsedCallback+0x354>
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	f7ff fe03 	bl	8001504 <map>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	4bc7      	ldr	r3, [pc, #796]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001904:	edc3 7a00 	vstr	s15, [r3]
 8001908:	e236      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x4b0>
	}
	else if(mode==2){
 800190a:	4bc0      	ldr	r3, [pc, #768]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d114      	bne.n	800193c <HAL_TIM_PeriodElapsedCallback+0x74>
		slot_data=map(slot,0.650,3.265,0.9,2.5);//eco
 8001912:	4bbf      	ldr	r3, [pc, #764]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	eeb0 2a04 	vmov.f32	s4, #4	; 0x40200000  2.5
 800191c:	eddf 1abd 	vldr	s3, [pc, #756]	; 8001c14 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8001920:	ed9f 1abd 	vldr	s2, [pc, #756]	; 8001c18 <HAL_TIM_PeriodElapsedCallback+0x350>
 8001924:	eddf 0abd 	vldr	s1, [pc, #756]	; 8001c1c <HAL_TIM_PeriodElapsedCallback+0x354>
 8001928:	eeb0 0a67 	vmov.f32	s0, s15
 800192c:	f7ff fdea 	bl	8001504 <map>
 8001930:	eef0 7a40 	vmov.f32	s15, s0
 8001934:	4bba      	ldr	r3, [pc, #744]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001936:	edc3 7a00 	vstr	s15, [r3]
 800193a:	e21d      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x4b0>
	}
	else if(mode==3){
 800193c:	4bb3      	ldr	r3, [pc, #716]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d156      	bne.n	80019f2 <HAL_TIM_PeriodElapsedCallback+0x12a>
		slot_data=powf(slot,3)*0.3713+powf(slot,2)*(-1.8438)+slot*(3.1176)-0.4461;//snow
 8001944:	4bb2      	ldr	r3, [pc, #712]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	f007 fee1 	bl	8009718 <powf>
 8001956:	ee10 3a10 	vmov	r3, s0
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fe14 	bl	8000588 <__aeabi_f2d>
 8001960:	a38f      	add	r3, pc, #572	; (adr r3, 8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fe67 	bl	8000638 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4614      	mov	r4, r2
 8001970:	461d      	mov	r5, r3
 8001972:	4ba7      	ldr	r3, [pc, #668]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800197c:	eeb0 0a67 	vmov.f32	s0, s15
 8001980:	f007 feca 	bl	8009718 <powf>
 8001984:	ee10 3a10 	vmov	r3, s0
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fdfd 	bl	8000588 <__aeabi_f2d>
 800198e:	a386      	add	r3, pc, #536	; (adr r3, 8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fe50 	bl	8000638 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fc94 	bl	80002cc <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	4b98      	ldr	r3, [pc, #608]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fde9 	bl	8000588 <__aeabi_f2d>
 80019b6:	a37e      	add	r3, pc, #504	; (adr r3, 8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe3c 	bl	8000638 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fc80 	bl	80002cc <__adddf3>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	a378      	add	r3, pc, #480	; (adr r3, 8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fc75 	bl	80002c8 <__aeabi_dsub>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8ff 	bl	8000be8 <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a8c      	ldr	r2, [pc, #560]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e1c2      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x4b0>
	}
	else if(mode==4){
 80019f2:	4b86      	ldr	r3, [pc, #536]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d173      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x21a>
		slot_data=powf(slot,4)*(0.3067)+powf(slot,3)*(-2.4464)+powf(slot,2)*(6.3486)+slot*(-4.8485)+1.9619;//sport
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001a04:	eeb0 0a67 	vmov.f32	s0, s15
 8001a08:	f007 fe86 	bl	8009718 <powf>
 8001a0c:	ee10 3a10 	vmov	r3, s0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fdb9 	bl	8000588 <__aeabi_f2d>
 8001a16:	a36a      	add	r3, pc, #424	; (adr r3, 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fe0c 	bl	8000638 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	f007 fe6f 	bl	8009718 <powf>
 8001a3a:	ee10 3a10 	vmov	r3, s0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fda2 	bl	8000588 <__aeabi_f2d>
 8001a44:	a360      	add	r3, pc, #384	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fdf5 	bl	8000638 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fc39 	bl	80002cc <__adddf3>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4614      	mov	r4, r2
 8001a60:	461d      	mov	r5, r3
 8001a62:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	f007 fe52 	bl	8009718 <powf>
 8001a74:	ee10 3a10 	vmov	r3, s0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd85 	bl	8000588 <__aeabi_f2d>
 8001a7e:	a354      	add	r3, pc, #336	; (adr r3, 8001bd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fdd8 	bl	8000638 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fc1c 	bl	80002cc <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4b5c      	ldr	r3, [pc, #368]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd71 	bl	8000588 <__aeabi_f2d>
 8001aa6:	a34c      	add	r3, pc, #304	; (adr r3, 8001bd8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fdc4 	bl	8000638 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fc08 	bl	80002cc <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	a346      	add	r3, pc, #280	; (adr r3, 8001be0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fbff 	bl	80002cc <__adddf3>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f887 	bl	8000be8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a50      	ldr	r2, [pc, #320]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e14a      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x4b0>
	}
	else if(mode==5){
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	f040 809c 	bne.w	8001c24 <HAL_TIM_PeriodElapsedCallback+0x35c>
		slot_data=powf(slot,3)*0.1732+powf(slot,2)*(-1.6682)+slot*(5.2727)-1.9883;//sport plus
 8001aec:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	f007 fe0d 	bl	8009718 <powf>
 8001afe:	ee10 3a10 	vmov	r3, s0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd40 	bl	8000588 <__aeabi_f2d>
 8001b08:	a337      	add	r3, pc, #220	; (adr r3, 8001be8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fd93 	bl	8000638 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	f007 fdf6 	bl	8009718 <powf>
 8001b2c:	ee10 3a10 	vmov	r3, s0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd29 	bl	8000588 <__aeabi_f2d>
 8001b36:	a32e      	add	r3, pc, #184	; (adr r3, 8001bf0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fd7c 	bl	8000638 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fbc0 	bl	80002cc <__adddf3>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	461d      	mov	r5, r3
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd15 	bl	8000588 <__aeabi_f2d>
 8001b5e:	a326      	add	r3, pc, #152	; (adr r3, 8001bf8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd68 	bl	8000638 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbac 	bl	80002cc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	a320      	add	r3, pc, #128	; (adr r3, 8001c00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fba1 	bl	80002c8 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f82b 	bl	8000be8 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e0ee      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x4b0>
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	13404ea5 	.word	0x13404ea5
 8001ba4:	3fd7c361 	.word	0x3fd7c361
 8001ba8:	6dc5d639 	.word	0x6dc5d639
 8001bac:	bffd8034 	.word	0xbffd8034
 8001bb0:	44d013a9 	.word	0x44d013a9
 8001bb4:	4008f0d8 	.word	0x4008f0d8
 8001bb8:	03afb7e9 	.word	0x03afb7e9
 8001bbc:	3fdc8ce7 	.word	0x3fdc8ce7
 8001bc0:	096bb98c 	.word	0x096bb98c
 8001bc4:	3fd3a0f9 	.word	0x3fd3a0f9
 8001bc8:	29c779a7 	.word	0x29c779a7
 8001bcc:	c003923a 	.word	0xc003923a
 8001bd0:	65fd8adb 	.word	0x65fd8adb
 8001bd4:	401964f7 	.word	0x401964f7
 8001bd8:	2f1a9fbe 	.word	0x2f1a9fbe
 8001bdc:	c01364dd 	.word	0xc01364dd
 8001be0:	41205bc0 	.word	0x41205bc0
 8001be4:	3fff63f1 	.word	0x3fff63f1
 8001be8:	e7d566cf 	.word	0xe7d566cf
 8001bec:	3fc62b6a 	.word	0x3fc62b6a
 8001bf0:	7bb2fec5 	.word	0x7bb2fec5
 8001bf4:	bffab0f2 	.word	0xbffab0f2
 8001bf8:	ab367a10 	.word	0xab367a10
 8001bfc:	4015173e 	.word	0x4015173e
 8001c00:	a92a3055 	.word	0xa92a3055
 8001c04:	3fffd013 	.word	0x3fffd013
 8001c08:	200002e8 	.word	0x200002e8
 8001c0c:	200003e4 	.word	0x200003e4
 8001c10:	200003f4 	.word	0x200003f4
 8001c14:	3f666666 	.word	0x3f666666
 8001c18:	4050f5c3 	.word	0x4050f5c3
 8001c1c:	3f266666 	.word	0x3f266666
 8001c20:	200003ec 	.word	0x200003ec
	}
	else if(mode==10){
 8001c24:	4bb2      	ldr	r3, [pc, #712]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b0a      	cmp	r3, #10
 8001c2a:	f040 8091 	bne.w	8001d50 <HAL_TIM_PeriodElapsedCallback+0x488>
		slot_data=powf(slot,5)*(0.0532)+powf(slot,4)*(-0.839)+powf(slot,3)*(4.9461)+powf(slot,2)*(-13.884)+slot*(18.813)-6.4772;//extreme
 8001c2e:	4bb1      	ldr	r3, [pc, #708]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001c38:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3c:	f007 fd6c 	bl	8009718 <powf>
 8001c40:	ee10 3a10 	vmov	r3, s0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc9f 	bl	8000588 <__aeabi_f2d>
 8001c4a:	a397      	add	r3, pc, #604	; (adr r3, 8001ea8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fcf2 	bl	8000638 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	4ba5      	ldr	r3, [pc, #660]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	f007 fd55 	bl	8009718 <powf>
 8001c6e:	ee10 3a10 	vmov	r3, s0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc88 	bl	8000588 <__aeabi_f2d>
 8001c78:	a38d      	add	r3, pc, #564	; (adr r3, 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fcdb 	bl	8000638 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4620      	mov	r0, r4
 8001c88:	4629      	mov	r1, r5
 8001c8a:	f7fe fb1f 	bl	80002cc <__adddf3>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4614      	mov	r4, r2
 8001c94:	461d      	mov	r5, r3
 8001c96:	4b97      	ldr	r3, [pc, #604]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca4:	f007 fd38 	bl	8009718 <powf>
 8001ca8:	ee10 3a10 	vmov	r3, s0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc6b 	bl	8000588 <__aeabi_f2d>
 8001cb2:	a381      	add	r3, pc, #516	; (adr r3, 8001eb8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe fb02 	bl	80002cc <__adddf3>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4614      	mov	r4, r2
 8001cce:	461d      	mov	r5, r3
 8001cd0:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	f007 fd1b 	bl	8009718 <powf>
 8001ce2:	ee10 3a10 	vmov	r3, s0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc4e 	bl	8000588 <__aeabi_f2d>
 8001cec:	a374      	add	r3, pc, #464	; (adr r3, 8001ec0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fca1 	bl	8000638 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe fae5 	bl	80002cc <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc3a 	bl	8000588 <__aeabi_f2d>
 8001d14:	a36c      	add	r3, pc, #432	; (adr r3, 8001ec8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc8d 	bl	8000638 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fad1 	bl	80002cc <__adddf3>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	a367      	add	r3, pc, #412	; (adr r3, 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fac6 	bl	80002c8 <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe ff50 	bl	8000be8 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a6b      	ldr	r2, [pc, #428]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e013      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x4b0>
	}
	else{slot_data=map(slot,0.650,3.265,0.9,2.5);//eco
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	eeb0 2a04 	vmov.f32	s4, #4	; 0x40200000  2.5
 8001d5a:	eddf 1a68 	vldr	s3, [pc, #416]	; 8001efc <HAL_TIM_PeriodElapsedCallback+0x634>
 8001d5e:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8001f00 <HAL_TIM_PeriodElapsedCallback+0x638>
 8001d62:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001f04 <HAL_TIM_PeriodElapsedCallback+0x63c>
 8001d66:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6a:	f7ff fbcb 	bl	8001504 <map>
 8001d6e:	eef0 7a40 	vmov.f32	s15, s0
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001d74:	edc3 7a00 	vstr	s15, [r3]
	}


	if(slot_data>3.5){slot_data=3.5;}
 8001d78:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd02      	ble.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x4ca>
 8001d8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001d90:	601a      	str	r2, [r3, #0]
	if(slot_data<0.9){slot_data=0.9;}
 8001d92:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbf6 	bl	8000588 <__aeabi_f2d>
 8001d9c:	a34e      	add	r3, pc, #312	; (adr r3, 8001ed8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe febb 	bl	8000b1c <__aeabi_dcmplt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x4ea>
 8001dac:	4b52      	ldr	r3, [pc, #328]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001dae:	4a57      	ldr	r2, [pc, #348]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001db0:	601a      	str	r2, [r3, #0]

	float setvalue1=(4095.0/9.9)*slot_data;
 8001db2:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbe6 	bl	8000588 <__aeabi_f2d>
 8001dbc:	a348      	add	r3, pc, #288	; (adr r3, 8001ee0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fc39 	bl	8000638 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe ff0b 	bl	8000be8 <__aeabi_d2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	617b      	str	r3, [r7, #20]
	float setvalue2=(4095.0/9.9)*slot_data;
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbd4 	bl	8000588 <__aeabi_f2d>
 8001de0:	a33f      	add	r3, pc, #252	; (adr r3, 8001ee0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fc27 	bl	8000638 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe fef9 	bl	8000be8 <__aeabi_d2f>
 8001df6:	4603      	mov	r3, r0
 8001df8:	613b      	str	r3, [r7, #16]

	if(EN==1){
 8001dfa:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	f040 83b6 	bne.w	8002570 <HAL_TIM_PeriodElapsedCallback+0xca8>
		if(mode==4){//sport
 8001e04:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	f040 8191 	bne.w	8002130 <HAL_TIM_PeriodElapsedCallback+0x868>
			if(speed==0.0) {
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	d17e      	bne.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x654>
				setvalue1=(4095.0/9.9)*slot_data;
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fbb0 	bl	8000588 <__aeabi_f2d>
 8001e28:	a32d      	add	r3, pc, #180	; (adr r3, 8001ee0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fc03 	bl	8000638 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fed5 	bl	8000be8 <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.6;
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb9e 	bl	8000588 <__aeabi_f2d>
 8001e4c:	a324      	add	r3, pc, #144	; (adr r3, 8001ee0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbf1 	bl	8000638 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	a322      	add	r3, pc, #136	; (adr r3, 8001ee8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fbe8 	bl	8000638 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe feba 	bl	8000be8 <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8001e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e80:	ee17 3a90 	vmov	r3, s15
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4823      	ldr	r0, [pc, #140]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001e8a:	f002 fa4d 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8001e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	481e      	ldr	r0, [pc, #120]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001ea0:	f002 fa42 	bl	8004328 <HAL_DAC_SetValue>
 8001ea4:	e370      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
 8001ea6:	bf00      	nop
 8001ea8:	c84b5dcc 	.word	0xc84b5dcc
 8001eac:	3fab3d07 	.word	0x3fab3d07
 8001eb0:	872b020c 	.word	0x872b020c
 8001eb4:	bfead916 	.word	0xbfead916
 8001eb8:	703afb7f 	.word	0x703afb7f
 8001ebc:	4013c8ce 	.word	0x4013c8ce
 8001ec0:	a5e353f8 	.word	0xa5e353f8
 8001ec4:	c02bc49b 	.word	0xc02bc49b
 8001ec8:	c49ba5e3 	.word	0xc49ba5e3
 8001ecc:	4032d020 	.word	0x4032d020
 8001ed0:	1de69ad4 	.word	0x1de69ad4
 8001ed4:	4019e8a7 	.word	0x4019e8a7
 8001ed8:	cccccccd 	.word	0xcccccccd
 8001edc:	3feccccc 	.word	0x3feccccc
 8001ee0:	8ba2e8ba 	.word	0x8ba2e8ba
 8001ee4:	4079da2e 	.word	0x4079da2e
 8001ee8:	33333333 	.word	0x33333333
 8001eec:	3fe33333 	.word	0x3fe33333
 8001ef0:	200003e4 	.word	0x200003e4
 8001ef4:	200003f4 	.word	0x200003f4
 8001ef8:	200003ec 	.word	0x200003ec
 8001efc:	3f666666 	.word	0x3f666666
 8001f00:	4050f5c3 	.word	0x4050f5c3
 8001f04:	3f266666 	.word	0x3f266666
 8001f08:	40600000 	.word	0x40600000
 8001f0c:	3f666666 	.word	0x3f666666
 8001f10:	200003bb 	.word	0x200003bb
 8001f14:	200003e8 	.word	0x200003e8
 8001f18:	20000398 	.word	0x20000398
			}
			else if(speed==0.01) {
 8001f1c:	4bbc      	ldr	r3, [pc, #752]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fb31 	bl	8000588 <__aeabi_f2d>
 8001f26:	a3ac      	add	r3, pc, #688	; (adr r3, 80021d8 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fdec 	bl	8000b08 <__aeabi_dcmpeq>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d043      	beq.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x6f6>
				setvalue1=(4095.0/9.9)*slot_data;
 8001f36:	4bb7      	ldr	r3, [pc, #732]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb24 	bl	8000588 <__aeabi_f2d>
 8001f40:	a3a7      	add	r3, pc, #668	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe fb77 	bl	8000638 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe49 	bl	8000be8 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.7;
 8001f5a:	4bae      	ldr	r3, [pc, #696]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fb12 	bl	8000588 <__aeabi_f2d>
 8001f64:	a39e      	add	r3, pc, #632	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb65 	bl	8000638 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	a39c      	add	r3, pc, #624	; (adr r3, 80021e8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fb5c 	bl	8000638 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fe2e 	bl	8000be8 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8001f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f98:	ee17 3a90 	vmov	r3, s15
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	489d      	ldr	r0, [pc, #628]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001fa2:	f002 f9c1 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8001fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fae:	ee17 3a90 	vmov	r3, s15
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	4898      	ldr	r0, [pc, #608]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001fb8:	f002 f9b6 	bl	8004328 <HAL_DAC_SetValue>
 8001fbc:	e2e4      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
			}
			else if(speed==0.02) {
 8001fbe:	4b94      	ldr	r3, [pc, #592]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fae0 	bl	8000588 <__aeabi_f2d>
 8001fc8:	a389      	add	r3, pc, #548	; (adr r3, 80021f0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d043      	beq.n	8002060 <HAL_TIM_PeriodElapsedCallback+0x798>
				setvalue1=(4095.0/9.9)*slot_data;
 8001fd8:	4b8e      	ldr	r3, [pc, #568]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fad3 	bl	8000588 <__aeabi_f2d>
 8001fe2:	a37f      	add	r3, pc, #508	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb26 	bl	8000638 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fdf8 	bl	8000be8 <__aeabi_d2f>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.8;
 8001ffc:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fac1 	bl	8000588 <__aeabi_f2d>
 8002006:	a376      	add	r3, pc, #472	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fb14 	bl	8000638 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	a377      	add	r3, pc, #476	; (adr r3, 80021f8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fb0b 	bl	8000638 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fddd 	bl	8000be8 <__aeabi_d2f>
 800202e:	4603      	mov	r3, r0
 8002030:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002032:	edd7 7a05 	vldr	s15, [r7, #20]
 8002036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203a:	ee17 3a90 	vmov	r3, s15
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	4875      	ldr	r0, [pc, #468]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8002044:	f002 f970 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002048:	edd7 7a04 	vldr	s15, [r7, #16]
 800204c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002050:	ee17 3a90 	vmov	r3, s15
 8002054:	2200      	movs	r2, #0
 8002056:	2110      	movs	r1, #16
 8002058:	486f      	ldr	r0, [pc, #444]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800205a:	f002 f965 	bl	8004328 <HAL_DAC_SetValue>
 800205e:	e293      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
			}
			else if(speed==0.03) {
 8002060:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa8f 	bl	8000588 <__aeabi_f2d>
 800206a:	a365      	add	r3, pc, #404	; (adr r3, 8002200 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe fd4a 	bl	8000b08 <__aeabi_dcmpeq>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d043      	beq.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x83a>
				setvalue1=(4095.0/9.9)*slot_data;
 800207a:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fa82 	bl	8000588 <__aeabi_f2d>
 8002084:	a356      	add	r3, pc, #344	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe fad5 	bl	8000638 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fda7 	bl	8000be8 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.9;
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fa70 	bl	8000588 <__aeabi_f2d>
 80020a8:	a34d      	add	r3, pc, #308	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe fac3 	bl	8000638 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	a353      	add	r3, pc, #332	; (adr r3, 8002208 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe faba 	bl	8000638 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fd8c 	bl	8000be8 <__aeabi_d2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80020d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020dc:	ee17 3a90 	vmov	r3, s15
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	484c      	ldr	r0, [pc, #304]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 80020e6:	f002 f91f 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80020ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f2:	ee17 3a90 	vmov	r3, s15
 80020f6:	2200      	movs	r2, #0
 80020f8:	2110      	movs	r1, #16
 80020fa:	4847      	ldr	r0, [pc, #284]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 80020fc:	f002 f914 	bl	8004328 <HAL_DAC_SetValue>
 8002100:	e242      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
			}
			else {
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002102:	edd7 7a05 	vldr	s15, [r7, #20]
 8002106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210a:	ee17 3a90 	vmov	r3, s15
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	4841      	ldr	r0, [pc, #260]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8002114:	f002 f908 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8002118:	edd7 7a04 	vldr	s15, [r7, #16]
 800211c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002120:	ee17 3a90 	vmov	r3, s15
 8002124:	2200      	movs	r2, #0
 8002126:	2110      	movs	r1, #16
 8002128:	483b      	ldr	r0, [pc, #236]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800212a:	f002 f8fd 	bl	8004328 <HAL_DAC_SetValue>
 800212e:	e22b      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
			}
		}

		else if(mode==5){//sport plus
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x954>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b05      	cmp	r3, #5
 8002136:	f040 812c 	bne.w	8002392 <HAL_TIM_PeriodElapsedCallback+0xaca>
			if(speed==0.0) {
 800213a:	4b35      	ldr	r3, [pc, #212]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d16a      	bne.n	8002220 <HAL_TIM_PeriodElapsedCallback+0x958>
				setvalue1=(4095.0/9.9)*slot_data;
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fa1a 	bl	8000588 <__aeabi_f2d>
 8002154:	a322      	add	r3, pc, #136	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe fa6d 	bl	8000638 <__aeabi_dmul>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fd3f 	bl	8000be8 <__aeabi_d2f>
 800216a:	4603      	mov	r3, r0
 800216c:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.7;
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fa08 	bl	8000588 <__aeabi_f2d>
 8002178:	a319      	add	r3, pc, #100	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa5b 	bl	8000638 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	a317      	add	r3, pc, #92	; (adr r3, 80021e8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe fa52 	bl	8000638 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fd24 	bl	8000be8 <__aeabi_d2f>
 80021a0:	4603      	mov	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80021a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	ee17 3a90 	vmov	r3, s15
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	4818      	ldr	r0, [pc, #96]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 80021b6:	f002 f8b7 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80021ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80021be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c2:	ee17 3a90 	vmov	r3, s15
 80021c6:	2200      	movs	r2, #0
 80021c8:	2110      	movs	r1, #16
 80021ca:	4813      	ldr	r0, [pc, #76]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x950>)
 80021cc:	f002 f8ac 	bl	8004328 <HAL_DAC_SetValue>
 80021d0:	e1da      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
 80021d2:	bf00      	nop
 80021d4:	f3af 8000 	nop.w
 80021d8:	47ae147b 	.word	0x47ae147b
 80021dc:	3f847ae1 	.word	0x3f847ae1
 80021e0:	8ba2e8ba 	.word	0x8ba2e8ba
 80021e4:	4079da2e 	.word	0x4079da2e
 80021e8:	66666666 	.word	0x66666666
 80021ec:	3fe66666 	.word	0x3fe66666
 80021f0:	47ae147b 	.word	0x47ae147b
 80021f4:	3f947ae1 	.word	0x3f947ae1
 80021f8:	9999999a 	.word	0x9999999a
 80021fc:	3fe99999 	.word	0x3fe99999
 8002200:	eb851eb8 	.word	0xeb851eb8
 8002204:	3f9eb851 	.word	0x3f9eb851
 8002208:	cccccccd 	.word	0xcccccccd
 800220c:	3feccccc 	.word	0x3feccccc
 8002210:	200003e8 	.word	0x200003e8
 8002214:	200003ec 	.word	0x200003ec
 8002218:	20000398 	.word	0x20000398
 800221c:	200003e4 	.word	0x200003e4
			}
			else if(speed==0.01) {
 8002220:	4bcf      	ldr	r3, [pc, #828]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe f9af 	bl	8000588 <__aeabi_f2d>
 800222a:	a3c3      	add	r3, pc, #780	; (adr r3, 8002538 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	f7fe fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d043      	beq.n	80022c2 <HAL_TIM_PeriodElapsedCallback+0x9fa>
				setvalue1=(4095.0/9.9)*slot_data;
 800223a:	4bca      	ldr	r3, [pc, #808]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f9a2 	bl	8000588 <__aeabi_f2d>
 8002244:	a3be      	add	r3, pc, #760	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f9f5 	bl	8000638 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f7fe fcc7 	bl	8000be8 <__aeabi_d2f>
 800225a:	4603      	mov	r3, r0
 800225c:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.8;
 800225e:	4bc1      	ldr	r3, [pc, #772]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f990 	bl	8000588 <__aeabi_f2d>
 8002268:	a3b5      	add	r3, pc, #724	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f9e3 	bl	8000638 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	a3b3      	add	r3, pc, #716	; (adr r3, 8002548 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f9da 	bl	8000638 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fcac 	bl	8000be8 <__aeabi_d2f>
 8002290:	4603      	mov	r3, r0
 8002292:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002294:	edd7 7a05 	vldr	s15, [r7, #20]
 8002298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229c:	ee17 3a90 	vmov	r3, s15
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	48b0      	ldr	r0, [pc, #704]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80022a6:	f002 f83f 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80022aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b2:	ee17 3a90 	vmov	r3, s15
 80022b6:	2200      	movs	r2, #0
 80022b8:	2110      	movs	r1, #16
 80022ba:	48ab      	ldr	r0, [pc, #684]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80022bc:	f002 f834 	bl	8004328 <HAL_DAC_SetValue>
 80022c0:	e162      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
			}
			else if(speed==0.02) {
 80022c2:	4ba7      	ldr	r3, [pc, #668]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f95e 	bl	8000588 <__aeabi_f2d>
 80022cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8002550 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fe fc19 	bl	8000b08 <__aeabi_dcmpeq>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d043      	beq.n	8002364 <HAL_TIM_PeriodElapsedCallback+0xa9c>
				setvalue1=(4095.0/9.9)*slot_data;
 80022dc:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f951 	bl	8000588 <__aeabi_f2d>
 80022e6:	a396      	add	r3, pc, #600	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f9a4 	bl	8000638 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fc76 	bl	8000be8 <__aeabi_d2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.9;
 8002300:	4b98      	ldr	r3, [pc, #608]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f93f 	bl	8000588 <__aeabi_f2d>
 800230a:	a38d      	add	r3, pc, #564	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fe f992 	bl	8000638 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	a38e      	add	r3, pc, #568	; (adr r3, 8002558 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f989 	bl	8000638 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fc5b 	bl	8000be8 <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002336:	edd7 7a05 	vldr	s15, [r7, #20]
 800233a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233e:	ee17 3a90 	vmov	r3, s15
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	4888      	ldr	r0, [pc, #544]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8002348:	f001 ffee 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800234c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002354:	ee17 3a90 	vmov	r3, s15
 8002358:	2200      	movs	r2, #0
 800235a:	2110      	movs	r1, #16
 800235c:	4882      	ldr	r0, [pc, #520]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 800235e:	f001 ffe3 	bl	8004328 <HAL_DAC_SetValue>
 8002362:	e111      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
			}
			else {
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002364:	edd7 7a05 	vldr	s15, [r7, #20]
 8002368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800236c:	ee17 3a90 	vmov	r3, s15
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	487c      	ldr	r0, [pc, #496]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8002376:	f001 ffd7 	bl	8004328 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800237a:	edd7 7a04 	vldr	s15, [r7, #16]
 800237e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002382:	ee17 3a90 	vmov	r3, s15
 8002386:	2200      	movs	r2, #0
 8002388:	2110      	movs	r1, #16
 800238a:	4877      	ldr	r0, [pc, #476]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 800238c:	f001 ffcc 	bl	8004328 <HAL_DAC_SetValue>
 8002390:	e0fa      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
			}
		}
		else if(mode==10){//extreme
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <HAL_TIM_PeriodElapsedCallback+0xca4>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b0a      	cmp	r3, #10
 8002398:	f040 80b4 	bne.w	8002504 <HAL_TIM_PeriodElapsedCallback+0xc3c>
					if(speed==0.0) {
 800239c:	4b70      	ldr	r3, [pc, #448]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	d143      	bne.n	8002434 <HAL_TIM_PeriodElapsedCallback+0xb6c>
						setvalue1=(4095.0/9.9)*slot_data*0.8;
 80023ac:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8e9 	bl	8000588 <__aeabi_f2d>
 80023b6:	a362      	add	r3, pc, #392	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe f93c 	bl	8000638 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	a35f      	add	r3, pc, #380	; (adr r3, 8002548 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fe f933 	bl	8000638 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fc05 	bl	8000be8 <__aeabi_d2f>
 80023de:	4603      	mov	r3, r0
 80023e0:	617b      	str	r3, [r7, #20]
						setvalue2=(4095.0/9.9)*slot_data;
 80023e2:	4b60      	ldr	r3, [pc, #384]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8ce 	bl	8000588 <__aeabi_f2d>
 80023ec:	a354      	add	r3, pc, #336	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe f921 	bl	8000638 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fbf3 	bl	8000be8 <__aeabi_d2f>
 8002402:	4603      	mov	r3, r0
 8002404:	613b      	str	r3, [r7, #16]
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002406:	edd7 7a05 	vldr	s15, [r7, #20]
 800240a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240e:	ee17 3a90 	vmov	r3, s15
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	4854      	ldr	r0, [pc, #336]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8002418:	f001 ff86 	bl	8004328 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800241c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002424:	ee17 3a90 	vmov	r3, s15
 8002428:	2200      	movs	r2, #0
 800242a:	2110      	movs	r1, #16
 800242c:	484e      	ldr	r0, [pc, #312]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 800242e:	f001 ff7b 	bl	8004328 <HAL_DAC_SetValue>
 8002432:	e0a9      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
					}
					else if(speed==0.01) {
 8002434:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f8a5 	bl	8000588 <__aeabi_f2d>
 800243e:	a33e      	add	r3, pc, #248	; (adr r3, 8002538 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe fb60 	bl	8000b08 <__aeabi_dcmpeq>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d043      	beq.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0xc0e>
						setvalue1=(4095.0/9.9)*slot_data*0.9;
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f898 	bl	8000588 <__aeabi_f2d>
 8002458:	a339      	add	r3, pc, #228	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f8eb 	bl	8000638 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	a33b      	add	r3, pc, #236	; (adr r3, 8002558 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f8e2 	bl	8000638 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fbb4 	bl	8000be8 <__aeabi_d2f>
 8002480:	4603      	mov	r3, r0
 8002482:	617b      	str	r3, [r7, #20]
						setvalue2=(4095.0/9.9)*slot_data;
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f87d 	bl	8000588 <__aeabi_f2d>
 800248e:	a32c      	add	r3, pc, #176	; (adr r3, 8002540 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f7fe f8d0 	bl	8000638 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fba2 	bl	8000be8 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	613b      	str	r3, [r7, #16]
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80024a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b0:	ee17 3a90 	vmov	r3, s15
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	482b      	ldr	r0, [pc, #172]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80024ba:	f001 ff35 	bl	8004328 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80024be:	edd7 7a04 	vldr	s15, [r7, #16]
 80024c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c6:	ee17 3a90 	vmov	r3, s15
 80024ca:	2200      	movs	r2, #0
 80024cc:	2110      	movs	r1, #16
 80024ce:	4826      	ldr	r0, [pc, #152]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80024d0:	f001 ff2a 	bl	8004328 <HAL_DAC_SetValue>
 80024d4:	e058      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
					}
					else {
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80024d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80024da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024de:	ee17 3a90 	vmov	r3, s15
 80024e2:	2200      	movs	r2, #0
 80024e4:	2100      	movs	r1, #0
 80024e6:	4820      	ldr	r0, [pc, #128]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80024e8:	f001 ff1e 	bl	8004328 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80024ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f4:	ee17 3a90 	vmov	r3, s15
 80024f8:	2200      	movs	r2, #0
 80024fa:	2110      	movs	r1, #16
 80024fc:	481a      	ldr	r0, [pc, #104]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80024fe:	f001 ff13 	bl	8004328 <HAL_DAC_SetValue>
 8002502:	e041      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
					}
				}

		else{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002504:	edd7 7a05 	vldr	s15, [r7, #20]
 8002508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250c:	ee17 3a90 	vmov	r3, s15
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	4814      	ldr	r0, [pc, #80]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8002516:	f001 ff07 	bl	8004328 <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800251a:	edd7 7a04 	vldr	s15, [r7, #16]
 800251e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002522:	ee17 3a90 	vmov	r3, s15
 8002526:	2200      	movs	r2, #0
 8002528:	2110      	movs	r1, #16
 800252a:	480f      	ldr	r0, [pc, #60]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 800252c:	f001 fefc 	bl	8004328 <HAL_DAC_SetValue>
 8002530:	e02a      	b.n	8002588 <HAL_TIM_PeriodElapsedCallback+0xcc0>
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
 8002538:	47ae147b 	.word	0x47ae147b
 800253c:	3f847ae1 	.word	0x3f847ae1
 8002540:	8ba2e8ba 	.word	0x8ba2e8ba
 8002544:	4079da2e 	.word	0x4079da2e
 8002548:	9999999a 	.word	0x9999999a
 800254c:	3fe99999 	.word	0x3fe99999
 8002550:	47ae147b 	.word	0x47ae147b
 8002554:	3f947ae1 	.word	0x3f947ae1
 8002558:	cccccccd 	.word	0xcccccccd
 800255c:	3feccccc 	.word	0x3feccccc
 8002560:	200003e8 	.word	0x200003e8
 8002564:	200003ec 	.word	0x200003ec
 8002568:	20000398 	.word	0x20000398
 800256c:	200003e4 	.word	0x200003e4
		}
	}
	else{
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002570:	2300      	movs	r3, #0
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	4836      	ldr	r0, [pc, #216]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002578:	f001 fed6 	bl	8004328 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800257c:	2300      	movs	r3, #0
 800257e:	2200      	movs	r2, #0
 8002580:	2110      	movs	r1, #16
 8002582:	4833      	ldr	r0, [pc, #204]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002584:	f001 fed0 	bl	8004328 <HAL_DAC_SetValue>
	}

	uint8_t senddata[5];
	senddata[0]=254;
 8002588:	23fe      	movs	r3, #254	; 0xfe
 800258a:	723b      	strb	r3, [r7, #8]
	senddata[1]=state;
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	727b      	strb	r3, [r7, #9]
	senddata[2]=0;
 8002592:	2300      	movs	r3, #0
 8002594:	72bb      	strb	r3, [r7, #10]
	senddata[3]=cnt;
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	72fb      	strb	r3, [r7, #11]
	senddata[4]=253;
 800259c:	23fd      	movs	r3, #253	; 0xfd
 800259e:	733b      	strb	r3, [r7, #12]

	HAL_UART_Transmit(&huart2,(uint8_t*)senddata ,5, 0x0f);
 80025a0:	f107 0108 	add.w	r1, r7, #8
 80025a4:	230f      	movs	r3, #15
 80025a6:	2205      	movs	r2, #5
 80025a8:	482c      	ldr	r0, [pc, #176]	; (800265c <HAL_TIM_PeriodElapsedCallback+0xd94>)
 80025aa:	f003 fd10 	bl	8005fce <HAL_UART_Transmit>

	if(cnt>250){
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2bfa      	cmp	r3, #250	; 0xfa
 80025b4:	d917      	bls.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0xd1e>
		cnt=0;
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
		if(EN_front==0){
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <HAL_TIM_PeriodElapsedCallback+0xd02>
			Error_Handler();
 80025c4:	f000 f8ce 	bl	8002764 <Error_Handler>
 80025c8:	e002      	b.n	80025d0 <HAL_TIM_PeriodElapsedCallback+0xd08>
		}
		else{
			EN_front=0;
 80025ca:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
		}
		if(EN_rear==0){
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_TIM_PeriodElapsedCallback+0xd16>
			Error_Handler();
 80025d8:	f000 f8c4 	bl	8002764 <Error_Handler>
 80025dc:	e009      	b.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0xd2a>
		}
		else{
			EN_rear=0;
 80025de:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0xd2a>
		}
	}
	else{
		cnt++;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 80025f0:	701a      	strb	r2, [r3, #0]
	pit=0.95*(gyro_data[0]*0.002+pit_temp)+0.05*pit_acc;
	rol=0.95*(gyro_data[1]*0.002+rol_temp)+0.05*rol_acc;
	pit_temp=pit;
	rol_temp=rol;*/

	if(data_from_esp32[1]>0){
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <HAL_TIM_PeriodElapsedCallback+0xd64>
		if(connect==0){
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_TIM_PeriodElapsedCallback+0xda4>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d110      	bne.n	8002624 <HAL_TIM_PeriodElapsedCallback+0xd5c>
			if(data_from_esp32[1]==1){
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d106      	bne.n	8002618 <HAL_TIM_PeriodElapsedCallback+0xd50>
				DFPlayer_playmp3(6);
 800260a:	2006      	movs	r0, #6
 800260c:	f7fe fcec 	bl	8000fe8 <DFPlayer_playmp3>
				EN=1;
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e005      	b.n	8002624 <HAL_TIM_PeriodElapsedCallback+0xd5c>
			}
			else{
				EN=0;
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
				DFPlayer_playmp3(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f7fe fce2 	bl	8000fe8 <DFPlayer_playmp3>
			}
		}
		connect=1;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
		connect=0;
		EN=0;
	}


}
 800262a:	e00c      	b.n	8002646 <HAL_TIM_PeriodElapsedCallback+0xd7e>
		if(connect==1){
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_TIM_PeriodElapsedCallback+0xda4>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <HAL_TIM_PeriodElapsedCallback+0xd72>
			DFPlayer_playmp3(3);
 8002634:	2003      	movs	r0, #3
 8002636:	f7fe fcd7 	bl	8000fe8 <DFPlayer_playmp3>
		connect=0;
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_TIM_PeriodElapsedCallback+0xda4>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
		EN=0;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	bf00      	nop
 8002650:	20000398 	.word	0x20000398
 8002654:	200003d5 	.word	0x200003d5
 8002658:	200003d4 	.word	0x200003d4
 800265c:	200005d0 	.word	0x200005d0
 8002660:	200003dc 	.word	0x200003dc
 8002664:	200003e5 	.word	0x200003e5
 8002668:	200002e8 	.word	0x200002e8
 800266c:	200003ba 	.word	0x200003ba
 8002670:	200003bb 	.word	0x200003bb

08002674 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_ESP32[j] != 254 &&  j<sizeof(Rxbuf_from_ESP32)) {
 8002680:	e002      	b.n	8002688 <HAL_UART_RxCpltCallback+0x14>
		j++;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	3301      	adds	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_ESP32[j] != 254 &&  j<sizeof(Rxbuf_from_ESP32)) {
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	4a32      	ldr	r2, [pc, #200]	; (8002754 <HAL_UART_RxCpltCallback+0xe0>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	2bfe      	cmp	r3, #254	; 0xfe
 8002690:	d002      	beq.n	8002698 <HAL_UART_RxCpltCallback+0x24>
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d9f4      	bls.n	8002682 <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_from_ESP32)){
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d912      	bls.n	80026c4 <HAL_UART_RxCpltCallback+0x50>
		for(uint8_t k=0;k<(sizeof(data_from_esp32));k++){
 800269e:	2300      	movs	r3, #0
 80026a0:	73bb      	strb	r3, [r7, #14]
 80026a2:	e006      	b.n	80026b2 <HAL_UART_RxCpltCallback+0x3e>
			data_from_esp32[k]=0;
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <HAL_UART_RxCpltCallback+0xe4>)
 80026a8:	2100      	movs	r1, #0
 80026aa:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_from_esp32));k++){
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73bb      	strb	r3, [r7, #14]
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d9f5      	bls.n	80026a4 <HAL_UART_RxCpltCallback+0x30>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,1);
 80026b8:	2201      	movs	r2, #1
 80026ba:	2102      	movs	r1, #2
 80026bc:	4827      	ldr	r0, [pc, #156]	; (800275c <HAL_UART_RxCpltCallback+0xe8>)
 80026be:	f002 fb67 	bl	8004d90 <HAL_GPIO_WritePin>
 80026c2:	e020      	b.n	8002706 <HAL_UART_RxCpltCallback+0x92>
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_from_esp32); k++) {
 80026c4:	2300      	movs	r3, #0
 80026c6:	737b      	strb	r3, [r7, #13]
 80026c8:	e01a      	b.n	8002700 <HAL_UART_RxCpltCallback+0x8c>
			if ((j + k) >= sizeof(data_from_esp32)) {
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	7b7b      	ldrb	r3, [r7, #13]
 80026ce:	4413      	add	r3, r2
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d909      	bls.n	80026e8 <HAL_UART_RxCpltCallback+0x74>
				data_from_esp32[k] = Rxbuf_from_ESP32[k - (sizeof(data_from_esp32) - j)];
 80026d4:	7b7a      	ldrb	r2, [r7, #13]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	4413      	add	r3, r2
 80026da:	1f1a      	subs	r2, r3, #4
 80026dc:	7b7b      	ldrb	r3, [r7, #13]
 80026de:	491d      	ldr	r1, [pc, #116]	; (8002754 <HAL_UART_RxCpltCallback+0xe0>)
 80026e0:	5c89      	ldrb	r1, [r1, r2]
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <HAL_UART_RxCpltCallback+0xe4>)
 80026e4:	54d1      	strb	r1, [r2, r3]
 80026e6:	e008      	b.n	80026fa <HAL_UART_RxCpltCallback+0x86>
			}
			else {
				data_from_esp32[k] = Rxbuf_from_ESP32[j + k + 1];
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	7b7b      	ldrb	r3, [r7, #13]
 80026ec:	4413      	add	r3, r2
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	7b7b      	ldrb	r3, [r7, #13]
 80026f2:	4918      	ldr	r1, [pc, #96]	; (8002754 <HAL_UART_RxCpltCallback+0xe0>)
 80026f4:	5c89      	ldrb	r1, [r1, r2]
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_UART_RxCpltCallback+0xe4>)
 80026f8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_esp32); k++) {
 80026fa:	7b7b      	ldrb	r3, [r7, #13]
 80026fc:	3301      	adds	r3, #1
 80026fe:	737b      	strb	r3, [r7, #13]
 8002700:	7b7b      	ldrb	r3, [r7, #13]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d9e1      	bls.n	80026ca <HAL_UART_RxCpltCallback+0x56>
			}
		}
	}
	if(data_from_esp32[sizeof(data_from_esp32)-1]==253){
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_UART_RxCpltCallback+0xe4>)
 8002708:	78db      	ldrb	r3, [r3, #3]
 800270a:	2bfd      	cmp	r3, #253	; 0xfd
 800270c:	d10f      	bne.n	800272e <HAL_UART_RxCpltCallback+0xba>
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 800270e:	2300      	movs	r3, #0
 8002710:	733b      	strb	r3, [r7, #12]
 8002712:	e008      	b.n	8002726 <HAL_UART_RxCpltCallback+0xb2>
			Rxbuf_from_ESP32_temp[k]=data_from_esp32[k];
 8002714:	7b3a      	ldrb	r2, [r7, #12]
 8002716:	7b3b      	ldrb	r3, [r7, #12]
 8002718:	490f      	ldr	r1, [pc, #60]	; (8002758 <HAL_UART_RxCpltCallback+0xe4>)
 800271a:	5c89      	ldrb	r1, [r1, r2]
 800271c:	4a10      	ldr	r2, [pc, #64]	; (8002760 <HAL_UART_RxCpltCallback+0xec>)
 800271e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 8002720:	7b3b      	ldrb	r3, [r7, #12]
 8002722:	3301      	adds	r3, #1
 8002724:	733b      	strb	r3, [r7, #12]
 8002726:	7b3b      	ldrb	r3, [r7, #12]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d9f3      	bls.n	8002714 <HAL_UART_RxCpltCallback+0xa0>
			data_from_esp32[k]=Rxbuf_from_ESP32_temp[k];
		}
	}


}
 800272c:	e00e      	b.n	800274c <HAL_UART_RxCpltCallback+0xd8>
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 800272e:	2300      	movs	r3, #0
 8002730:	72fb      	strb	r3, [r7, #11]
 8002732:	e008      	b.n	8002746 <HAL_UART_RxCpltCallback+0xd2>
			data_from_esp32[k]=Rxbuf_from_ESP32_temp[k];
 8002734:	7afa      	ldrb	r2, [r7, #11]
 8002736:	7afb      	ldrb	r3, [r7, #11]
 8002738:	4909      	ldr	r1, [pc, #36]	; (8002760 <HAL_UART_RxCpltCallback+0xec>)
 800273a:	5c89      	ldrb	r1, [r1, r2]
 800273c:	4a06      	ldr	r2, [pc, #24]	; (8002758 <HAL_UART_RxCpltCallback+0xe4>)
 800273e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	3301      	adds	r3, #1
 8002744:	72fb      	strb	r3, [r7, #11]
 8002746:	7afb      	ldrb	r3, [r7, #11]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d9f3      	bls.n	8002734 <HAL_UART_RxCpltCallback+0xc0>
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000270 	.word	0x20000270
 8002758:	200002e8 	.word	0x200002e8
 800275c:	40020400 	.word	0x40020400
 8002760:	2000029c 	.word	0x2000029c

08002764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	TxData[0]=0x02;
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <Error_Handler+0x3c>)
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
	TxData[1]=0xFF;
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <Error_Handler+0x3c>)
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	705a      	strb	r2, [r3, #1]
	can_send(0x000,(uint8_t*)TxData);
 8002774:	490a      	ldr	r1, [pc, #40]	; (80027a0 <Error_Handler+0x3c>)
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe fd30 	bl	80011dc <can_send>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800277c:	2101      	movs	r1, #1
 800277e:	4809      	ldr	r0, [pc, #36]	; (80027a4 <Error_Handler+0x40>)
 8002780:	f002 fb1f 	bl	8004dc2 <HAL_GPIO_TogglePin>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002784:	2300      	movs	r3, #0
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <Error_Handler+0x44>)
 800278c:	f001 fdcc 	bl	8004328 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8002790:	2300      	movs	r3, #0
 8002792:	2200      	movs	r2, #0
 8002794:	2110      	movs	r1, #16
 8002796:	4804      	ldr	r0, [pc, #16]	; (80027a8 <Error_Handler+0x44>)
 8002798:	f001 fdc6 	bl	8004328 <HAL_DAC_SetValue>

	//NVIC_SystemReset();
  /* USER CODE END Error_Handler_Debug */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200002e0 	.word	0x200002e0
 80027a4:	40020800 	.word	0x40020800
 80027a8:	20000398 	.word	0x20000398

080027ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <MX_SPI2_Init+0x64>)
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <MX_SPI2_Init+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <MX_SPI2_Init+0x64>)
 80027b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_SPI2_Init+0x64>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <MX_SPI2_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <MX_SPI2_Init+0x64>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_SPI2_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <MX_SPI2_Init+0x64>)
 80027d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_SPI2_Init+0x64>)
 80027e0:	2228      	movs	r2, #40	; 0x28
 80027e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <MX_SPI2_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_SPI2_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <MX_SPI2_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_SPI2_Init+0x64>)
 80027f8:	220a      	movs	r2, #10
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <MX_SPI2_Init+0x64>)
 80027fe:	f003 f885 	bl	800590c <HAL_SPI_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002808:	f7ff ffac 	bl	8002764 <Error_Handler>
  }

}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200003f8 	.word	0x200003f8
 8002814:	40003800 	.word	0x40003800

08002818 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_SPI_MspInit+0x84>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12c      	bne.n	8002894 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_SPI_MspInit+0x88>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_SPI_MspInit+0x88>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_SPI_MspInit+0x88>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_SPI_MspInit+0x88>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_SPI_MspInit+0x88>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_SPI_MspInit+0x88>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002872:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002884:	2305      	movs	r3, #5
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <HAL_SPI_MspInit+0x8c>)
 8002890:	f002 f8ea 	bl	8004a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40003800 	.word	0x40003800
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020400 	.word	0x40020400

080028a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_MspInit+0x58>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <HAL_MspInit+0x58>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_MspInit+0x58>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_MspInit+0x58>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <HAL_MspInit+0x58>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_MspInit+0x58>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2105      	movs	r1, #5
 80028ea:	2001      	movs	r0, #1
 80028ec:	f001 fbbd 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f001 fbd6 	bl	80040a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <MemManage_Handler+0x4>

0800291e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <UsageFault_Handler+0x4>

0800292a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002958:	f000 fbd0 	bl	80030fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002964:	f002 fa92 	bl	8004e8c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}

0800296c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <DMA1_Stream5_IRQHandler+0x10>)
 8002972:	f001 fe0f 	bl	8004594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000490 	.word	0x20000490

08002980 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <DMA1_Stream6_IRQHandler+0x10>)
 8002986:	f001 fe05 	bl	8004594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000530 	.word	0x20000530

08002994 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <CAN1_TX_IRQHandler+0x10>)
 800299a:	f001 f85b 	bl	8003a54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000214 	.word	0x20000214

080029a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <CAN1_RX0_IRQHandler+0x10>)
 80029ae:	f001 f851 	bl	8003a54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000214 	.word	0x20000214

080029bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <CAN1_RX1_IRQHandler+0x10>)
 80029c2:	f001 f847 	bl	8003a54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000214 	.word	0x20000214

080029d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <TIM6_DAC_IRQHandler+0x14>)
 80029d6:	f001 fc06 	bl	80041e6 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80029da:	4803      	ldr	r0, [pc, #12]	; (80029e8 <TIM6_DAC_IRQHandler+0x18>)
 80029dc:	f003 f849 	bl	8005a72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000398 	.word	0x20000398
 80029e8:	20000450 	.word	0x20000450

080029ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
	return 1;
 80029f0:	2301      	movs	r3, #1
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <_kill>:

int _kill(int pid, int sig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a06:	f004 f8b5 	bl	8006b74 <__errno>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2216      	movs	r2, #22
 8002a0e:	601a      	str	r2, [r3, #0]
	return -1;
 8002a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_exit>:

void _exit (int status)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ffe7 	bl	80029fc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a2e:	e7fe      	b.n	8002a2e <_exit+0x12>

08002a30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e00a      	b.n	8002a58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a42:	f3af 8000 	nop.w
 8002a46:	4601      	mov	r1, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	b2ca      	uxtb	r2, r1
 8002a50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	dbf0      	blt.n	8002a42 <_read+0x12>
	}

return len;
 8002a60:	687b      	ldr	r3, [r7, #4]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e009      	b.n	8002a90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	60ba      	str	r2, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fd2b 	bl	80014e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	dbf1      	blt.n	8002a7c <_write+0x12>
	}
	return len;
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_close>:

int _close(int file)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
	return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aca:	605a      	str	r2, [r3, #4]
	return 0;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <_isatty>:

int _isatty(int file)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	return 0;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <_sbrk+0x5c>)
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <_sbrk+0x60>)
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <_sbrk+0x64>)
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <_sbrk+0x68>)
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d207      	bcs.n	8002b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b3c:	f004 f81a 	bl	8006b74 <__errno>
 8002b40:	4603      	mov	r3, r0
 8002b42:	220c      	movs	r2, #12
 8002b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	e009      	b.n	8002b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <_sbrk+0x64>)
 8002b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20020000 	.word	0x20020000
 8002b6c:	00000400 	.word	0x00000400
 8002b70:	200001fc 	.word	0x200001fc
 8002b74:	20000628 	.word	0x20000628

08002b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <SystemInit+0x28>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <SystemInit+0x28>)
 8002b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <SystemInit+0x28>)
 8002b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b92:	609a      	str	r2, [r3, #8]
#endif
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002baa:	463b      	mov	r3, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_TIM6_Init+0x64>)
 8002bb4:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <MX_TIM6_Init+0x68>)
 8002bb6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_TIM6_Init+0x64>)
 8002bba:	2240      	movs	r2, #64	; 0x40
 8002bbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_TIM6_Init+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_TIM6_Init+0x64>)
 8002bc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002bca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_TIM6_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_TIM6_Init+0x64>)
 8002bd4:	f002 fefe 	bl	80059d4 <HAL_TIM_Base_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002bde:	f7ff fdc1 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bea:	463b      	mov	r3, r7
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <MX_TIM6_Init+0x64>)
 8002bf0:	f003 f910 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002bfa:	f7ff fdb3 	bl	8002764 <Error_Handler>
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000450 	.word	0x20000450
 8002c0c:	40001000 	.word	0x40001000

08002c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <HAL_TIM_Base_MspInit+0x48>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d115      	bne.n	8002c4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_TIM_Base_MspInit+0x4c>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <HAL_TIM_Base_MspInit+0x4c>)
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_TIM_Base_MspInit+0x4c>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2104      	movs	r1, #4
 8002c42:	2036      	movs	r0, #54	; 0x36
 8002c44:	f001 fa11 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c48:	2036      	movs	r0, #54	; 0x36
 8002c4a:	f001 fa2a 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40001000 	.word	0x40001000
 8002c5c:	40023800 	.word	0x40023800

08002c60 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <MX_USART1_UART_Init+0x50>)
 8002c68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c86:	220c      	movs	r2, #12
 8002c88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c98:	f003 f94c 	bl	8005f34 <HAL_UART_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ca2:	f7ff fd5f 	bl	8002764 <Error_Handler>
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000590 	.word	0x20000590
 8002cb0:	40011000 	.word	0x40011000

08002cb4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <MX_USART2_UART_Init+0x50>)
 8002cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cda:	220c      	movs	r2, #12
 8002cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cec:	f003 f922 	bl	8005f34 <HAL_UART_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cf6:	f7ff fd35 	bl	8002764 <Error_Handler>
  }

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200005d0 	.word	0x200005d0
 8002d04:	40004400 	.word	0x40004400

08002d08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <MX_USART3_UART_Init+0x50>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d40:	f003 f8f8 	bl	8005f34 <HAL_UART_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d4a:	f7ff fd0b 	bl	8002764 <Error_Handler>
  }

}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200004f0 	.word	0x200004f0
 8002d58:	40004800 	.word	0x40004800

08002d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	; 0x38
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a8a      	ldr	r2, [pc, #552]	; (8002fa4 <HAL_UART_MspInit+0x248>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d12d      	bne.n	8002dda <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
 8002d82:	4b89      	ldr	r3, [pc, #548]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4a88      	ldr	r2, [pc, #544]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002d88:	f043 0310 	orr.w	r3, r3, #16
 8002d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8e:	4b86      	ldr	r3, [pc, #536]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a81      	ldr	r2, [pc, #516]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002db6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dc8:	2307      	movs	r3, #7
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4876      	ldr	r0, [pc, #472]	; (8002fac <HAL_UART_MspInit+0x250>)
 8002dd4:	f001 fe48 	bl	8004a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002dd8:	e0e0      	b.n	8002f9c <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a74      	ldr	r2, [pc, #464]	; (8002fb0 <HAL_UART_MspInit+0x254>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	f040 808b 	bne.w	8002efc <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	4b6f      	ldr	r3, [pc, #444]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a6e      	ldr	r2, [pc, #440]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a67      	ldr	r2, [pc, #412]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e1e:	230c      	movs	r3, #12
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e2e:	2307      	movs	r3, #7
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e36:	4619      	mov	r1, r3
 8002e38:	485c      	ldr	r0, [pc, #368]	; (8002fac <HAL_UART_MspInit+0x250>)
 8002e3a:	f001 fe15 	bl	8004a68 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e3e:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e40:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <HAL_UART_MspInit+0x25c>)
 8002e42:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e44:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e52:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e60:	4b54      	ldr	r3, [pc, #336]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e66:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e6c:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e74:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e7a:	4b4e      	ldr	r3, [pc, #312]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e80:	484c      	ldr	r0, [pc, #304]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e82:	f001 fa81 	bl	8004388 <HAL_DMA_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002e8c:	f7ff fc6a 	bl	8002764 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a48      	ldr	r2, [pc, #288]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34
 8002e96:	4a47      	ldr	r2, [pc, #284]	; (8002fb4 <HAL_UART_MspInit+0x258>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e9c:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002e9e:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <HAL_UART_MspInit+0x264>)
 8002ea0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eaa:	4b44      	ldr	r3, [pc, #272]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002eac:	2240      	movs	r2, #64	; 0x40
 8002eae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eb6:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ebc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002eca:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ed8:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ede:	4837      	ldr	r0, [pc, #220]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ee0:	f001 fa52 	bl	8004388 <HAL_DMA_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_UART_MspInit+0x192>
      Error_Handler();
 8002eea:	f7ff fc3b 	bl	8002764 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef4:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <HAL_UART_MspInit+0x260>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002efa:	e04f      	b.n	8002f9c <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <HAL_UART_MspInit+0x268>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d14a      	bne.n	8002f9c <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_UART_MspInit+0x24c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f72:	4619      	mov	r1, r3
 8002f74:	4814      	ldr	r0, [pc, #80]	; (8002fc8 <HAL_UART_MspInit+0x26c>)
 8002f76:	f001 fd77 	bl	8004a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f94:	4619      	mov	r1, r3
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <HAL_UART_MspInit+0x270>)
 8002f98:	f001 fd66 	bl	8004a68 <HAL_GPIO_Init>
}
 8002f9c:	bf00      	nop
 8002f9e:	3738      	adds	r7, #56	; 0x38
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	20000490 	.word	0x20000490
 8002fb8:	40026088 	.word	0x40026088
 8002fbc:	20000530 	.word	0x20000530
 8002fc0:	400260a0 	.word	0x400260a0
 8002fc4:	40004800 	.word	0x40004800
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020400 	.word	0x40020400

08002fd0 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	789b      	ldrb	r3, [r3, #2]
 8002fe8:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	78db      	ldrb	r3, [r3, #3]
 8002fee:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	ee07 3a90 	vmov	s15, r3
}
 8002ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800303c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800300a:	e003      	b.n	8003014 <LoopCopyDataInit>

0800300c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800300e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003012:	3104      	adds	r1, #4

08003014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003014:	480b      	ldr	r0, [pc, #44]	; (8003044 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800301a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800301c:	d3f6      	bcc.n	800300c <CopyDataInit>
  ldr  r2, =_sbss
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003020:	e002      	b.n	8003028 <LoopFillZerobss>

08003022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003024:	f842 3b04 	str.w	r3, [r2], #4

08003028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800302a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800302c:	d3f9      	bcc.n	8003022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800302e:	f7ff fda3 	bl	8002b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003032:	f003 fda5 	bl	8006b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003036:	f7fe fa93 	bl	8001560 <main>
  bx  lr    
 800303a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800303c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003040:	0800a3ec 	.word	0x0800a3ec
  ldr  r0, =_sdata
 8003044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003048:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800304c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003050:	20000624 	.word	0x20000624

08003054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003054:	e7fe      	b.n	8003054 <ADC_IRQHandler>
	...

08003058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_Init+0x40>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <HAL_Init+0x40>)
 8003062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_Init+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_Init+0x40>)
 800306e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_Init+0x40>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a07      	ldr	r2, [pc, #28]	; (8003098 <HAL_Init+0x40>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003080:	2003      	movs	r0, #3
 8003082:	f000 ffe7 	bl	8004054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003086:	2000      	movs	r0, #0
 8003088:	f000 f808 	bl	800309c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800308c:	f7ff fc0c 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023c00 	.word	0x40023c00

0800309c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_InitTick+0x54>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_InitTick+0x58>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ffff 	bl	80040be <HAL_SYSTICK_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00e      	b.n	80030e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b0f      	cmp	r3, #15
 80030ce:	d80a      	bhi.n	80030e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d0:	2200      	movs	r2, #0
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	f000 ffc7 	bl	800406a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030dc:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <HAL_InitTick+0x5c>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000008 	.word	0x20000008
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_IncTick+0x20>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_IncTick+0x24>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4413      	add	r3, r2
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <HAL_IncTick+0x24>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000008 	.word	0x20000008
 8003120:	20000610 	.word	0x20000610

08003124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_GetTick+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000610 	.word	0x20000610

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff ffee 	bl	8003124 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d005      	beq.n	8003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_Delay+0x44>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003162:	bf00      	nop
 8003164:	f7ff ffde 	bl	8003124 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8f7      	bhi.n	8003164 <HAL_Delay+0x28>
  {
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000008 	.word	0x20000008

08003184 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0ed      	b.n	8003372 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd ff7a 	bl	800109c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0202 	bic.w	r2, r2, #2
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b8:	f7ff ffb4 	bl	8003124 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031be:	e012      	b.n	80031e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031c0:	f7ff ffb0 	bl	8003124 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b0a      	cmp	r3, #10
 80031cc:	d90b      	bls.n	80031e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2205      	movs	r2, #5
 80031de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0c5      	b.n	8003372 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e5      	bne.n	80031c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003204:	f7ff ff8e 	bl	8003124 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800320a:	e012      	b.n	8003232 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800320c:	f7ff ff8a 	bl	8003124 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b0a      	cmp	r3, #10
 8003218:	d90b      	bls.n	8003232 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2205      	movs	r2, #5
 800322a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e09f      	b.n	8003372 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0e5      	beq.n	800320c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7e1b      	ldrb	r3, [r3, #24]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d108      	bne.n	800325a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e007      	b.n	800326a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003268:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7e5b      	ldrb	r3, [r3, #25]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e007      	b.n	8003294 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7e9b      	ldrb	r3, [r3, #26]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e007      	b.n	80032be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0220 	bic.w	r2, r2, #32
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7edb      	ldrb	r3, [r3, #27]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0210 	bic.w	r2, r2, #16
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e007      	b.n	80032e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0210 	orr.w	r2, r2, #16
 80032e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7f1b      	ldrb	r3, [r3, #28]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d108      	bne.n	8003302 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0208 	orr.w	r2, r2, #8
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e007      	b.n	8003312 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0208 	bic.w	r2, r2, #8
 8003310:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7f5b      	ldrb	r3, [r3, #29]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0204 	orr.w	r2, r2, #4
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e007      	b.n	800333c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	ea42 0103 	orr.w	r1, r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d003      	beq.n	80033a2 <HAL_CAN_ConfigFilter+0x26>
 800339a:	7cfb      	ldrb	r3, [r7, #19]
 800339c:	2b02      	cmp	r3, #2
 800339e:	f040 80be 	bne.w	800351e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80033a2:	4b65      	ldr	r3, [pc, #404]	; (8003538 <HAL_CAN_ConfigFilter+0x1bc>)
 80033a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	431a      	orrs	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2201      	movs	r2, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	401a      	ands	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d123      	bne.n	800344c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003426:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3248      	adds	r2, #72	; 0x48
 800342c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003440:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003442:	6979      	ldr	r1, [r7, #20]
 8003444:	3348      	adds	r3, #72	; 0x48
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d122      	bne.n	800349a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	431a      	orrs	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003474:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3248      	adds	r2, #72	; 0x48
 800347a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800348e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	3348      	adds	r3, #72	; 0x48
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034b4:	e007      	b.n	80034c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	431a      	orrs	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	401a      	ands	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80034e0:	e007      	b.n	80034f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	431a      	orrs	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003510:	f023 0201 	bic.w	r2, r3, #1
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e006      	b.n	800352c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
  }
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40006400 	.word	0x40006400

0800353c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d12e      	bne.n	80035ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003568:	f7ff fddc 	bl	8003124 <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800356e:	e012      	b.n	8003596 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003570:	f7ff fdd8 	bl	8003124 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b0a      	cmp	r3, #10
 800357c:	d90b      	bls.n	8003596 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2205      	movs	r2, #5
 800358e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e012      	b.n	80035bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e5      	bne.n	8003570 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e006      	b.n	80035bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d003      	beq.n	80035f0 <HAL_CAN_AddTxMessage+0x2c>
 80035e8:	7ffb      	ldrb	r3, [r7, #31]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	f040 80b8 	bne.w	8003760 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a0 	beq.w	8003750 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	0e1b      	lsrs	r3, r3, #24
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d907      	bls.n	8003630 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e09e      	b.n	800376e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003630:	2201      	movs	r2, #1
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	409a      	lsls	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800364c:	68f9      	ldr	r1, [r7, #12]
 800364e:	6809      	ldr	r1, [r1, #0]
 8003650:	431a      	orrs	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3318      	adds	r3, #24
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	440b      	add	r3, r1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e00f      	b.n	800367e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003668:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003672:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3318      	adds	r3, #24
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	440b      	add	r3, r1
 800367c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	3318      	adds	r3, #24
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	440b      	add	r3, r1
 800368e:	3304      	adds	r3, #4
 8003690:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	7d1b      	ldrb	r3, [r3, #20]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d111      	bne.n	80036be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3318      	adds	r3, #24
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	6811      	ldr	r1, [r2, #0]
 80036ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3318      	adds	r3, #24
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	440b      	add	r3, r1
 80036ba:	3304      	adds	r3, #4
 80036bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3307      	adds	r3, #7
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	061a      	lsls	r2, r3, #24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3306      	adds	r3, #6
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3305      	adds	r3, #5
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	4313      	orrs	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	3204      	adds	r2, #4
 80036de:	7812      	ldrb	r2, [r2, #0]
 80036e0:	4610      	mov	r0, r2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	6811      	ldr	r1, [r2, #0]
 80036e6:	ea43 0200 	orr.w	r2, r3, r0
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	440b      	add	r3, r1
 80036f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80036f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3303      	adds	r3, #3
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	061a      	lsls	r2, r3, #24
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3302      	adds	r3, #2
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3301      	adds	r3, #1
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	4313      	orrs	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	4610      	mov	r0, r2
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6811      	ldr	r1, [r2, #0]
 800371c:	ea43 0200 	orr.w	r2, r3, r0
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	440b      	add	r3, r1
 8003726:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800372a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	3318      	adds	r3, #24
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	6811      	ldr	r1, [r2, #0]
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3318      	adds	r3, #24
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	440b      	add	r3, r1
 800374a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e00e      	b.n	800376e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e006      	b.n	800376e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	; 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800378e:	7afb      	ldrb	r3, [r7, #11]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d002      	beq.n	800379a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003794:	7afb      	ldrb	r3, [r7, #11]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d11d      	bne.n	80037d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3301      	adds	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3301      	adds	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d003      	beq.n	8003808 <HAL_CAN_GetRxMessage+0x24>
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b02      	cmp	r3, #2
 8003804:	f040 80f3 	bne.w	80039ee <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10e      	bne.n	800382c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d116      	bne.n	800384a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0e7      	b.n	80039fc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d107      	bne.n	800384a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0d8      	b.n	80039fc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	331b      	adds	r3, #27
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	4413      	add	r3, r2
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0204 	and.w	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10c      	bne.n	8003882 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	331b      	adds	r3, #27
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	4413      	add	r3, r2
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0d5b      	lsrs	r3, r3, #21
 8003878:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e00b      	b.n	800389a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	331b      	adds	r3, #27
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	4413      	add	r3, r2
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	331b      	adds	r3, #27
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0202 	and.w	r2, r3, #2
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	331b      	adds	r3, #27
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	4413      	add	r3, r2
 80038bc:	3304      	adds	r3, #4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	331b      	adds	r3, #27
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	331b      	adds	r3, #27
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	4413      	add	r3, r2
 8003918:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0a1a      	lsrs	r2, r3, #8
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4413      	add	r3, r2
 8003932:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	0c1a      	lsrs	r2, r3, #16
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	3302      	adds	r3, #2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	4413      	add	r3, r2
 800394c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0e1a      	lsrs	r2, r3, #24
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	3303      	adds	r3, #3
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4413      	add	r3, r2
 8003966:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	3304      	adds	r3, #4
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0a1a      	lsrs	r2, r3, #8
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	3305      	adds	r3, #5
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	4413      	add	r3, r2
 8003998:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	0c1a      	lsrs	r2, r3, #16
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	3306      	adds	r3, #6
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0e1a      	lsrs	r2, r3, #24
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	3307      	adds	r3, #7
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0220 	orr.w	r2, r2, #32
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	e007      	b.n	80039ea <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0220 	orr.w	r2, r2, #32
 80039e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e006      	b.n	80039fc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a18:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d002      	beq.n	8003a26 <HAL_CAN_ActivateNotification+0x1e>
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d109      	bne.n	8003a3a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6959      	ldr	r1, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e006      	b.n	8003a48 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d07c      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d023      	beq.n	8003aec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f983 	bl	8003dc2 <HAL_CAN_TxMailbox0CompleteCallback>
 8003abc:	e016      	b.n	8003aec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	e00c      	b.n	8003aec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	e002      	b.n	8003aec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f989 	bl	8003dfe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d024      	beq.n	8003b40 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003afe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f963 	bl	8003dd6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b10:	e016      	b.n	8003b40 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	e00c      	b.n	8003b40 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	e002      	b.n	8003b40 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f969 	bl	8003e12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d024      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f943 	bl	8003dea <HAL_CAN_TxMailbox2CompleteCallback>
 8003b64:	e016      	b.n	8003b94 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	e00c      	b.n	8003b94 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	e002      	b.n	8003b94 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f949 	bl	8003e26 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d006      	beq.n	8003bda <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f930 	bl	8003e3a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d009      	beq.n	8003bf8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd fdb2 	bl	800175c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2208      	movs	r2, #8
 8003c36:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f912 	bl	8003e62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8f9 	bl	8003e4e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d006      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2210      	movs	r2, #16
 8003c76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8fc 	bl	8003e76 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2208      	movs	r2, #8
 8003c98:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8f5 	bl	8003e8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d07b      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d072      	beq.n	8003d9a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d043      	beq.n	8003d9a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d03e      	beq.n	8003d9a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d22:	2b60      	cmp	r3, #96	; 0x60
 8003d24:	d02b      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x32a>
 8003d26:	2b60      	cmp	r3, #96	; 0x60
 8003d28:	d82e      	bhi.n	8003d88 <HAL_CAN_IRQHandler+0x334>
 8003d2a:	2b50      	cmp	r3, #80	; 0x50
 8003d2c:	d022      	beq.n	8003d74 <HAL_CAN_IRQHandler+0x320>
 8003d2e:	2b50      	cmp	r3, #80	; 0x50
 8003d30:	d82a      	bhi.n	8003d88 <HAL_CAN_IRQHandler+0x334>
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d019      	beq.n	8003d6a <HAL_CAN_IRQHandler+0x316>
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d826      	bhi.n	8003d88 <HAL_CAN_IRQHandler+0x334>
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d010      	beq.n	8003d60 <HAL_CAN_IRQHandler+0x30c>
 8003d3e:	2b30      	cmp	r3, #48	; 0x30
 8003d40:	d822      	bhi.n	8003d88 <HAL_CAN_IRQHandler+0x334>
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d002      	beq.n	8003d4c <HAL_CAN_IRQHandler+0x2f8>
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d005      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d4a:	e01d      	b.n	8003d88 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	f043 0308 	orr.w	r3, r3, #8
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d54:	e019      	b.n	8003d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f043 0310 	orr.w	r3, r3, #16
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d5e:	e014      	b.n	8003d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	f043 0320 	orr.w	r3, r3, #32
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d68:	e00f      	b.n	8003d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d72:	e00a      	b.n	8003d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d7c:	e005      	b.n	8003d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d86:	e000      	b.n	8003d8a <HAL_CAN_IRQHandler+0x336>
            break;
 8003d88:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d98:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f872 	bl	8003e9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003dba:	bf00      	nop
 8003dbc:	3728      	adds	r7, #40	; 0x28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__NVIC_GetPriorityGrouping+0x18>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0307 	and.w	r3, r3, #7
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	db0b      	blt.n	8003f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	f003 021f 	and.w	r2, r3, #31
 8003f30:	4907      	ldr	r1, [pc, #28]	; (8003f50 <__NVIC_EnableIRQ+0x38>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2001      	movs	r0, #1
 8003f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000e100 	.word	0xe000e100

08003f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db0a      	blt.n	8003f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	490c      	ldr	r1, [pc, #48]	; (8003fa0 <__NVIC_SetPriority+0x4c>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	440b      	add	r3, r1
 8003f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f7c:	e00a      	b.n	8003f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4908      	ldr	r1, [pc, #32]	; (8003fa4 <__NVIC_SetPriority+0x50>)
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	3b04      	subs	r3, #4
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	440b      	add	r3, r1
 8003f92:	761a      	strb	r2, [r3, #24]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000e100 	.word	0xe000e100
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	; 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f1c3 0307 	rsb	r3, r3, #7
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf28      	it	cs
 8003fc6:	2304      	movcs	r3, #4
 8003fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d902      	bls.n	8003fd8 <NVIC_EncodePriority+0x30>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3b03      	subs	r3, #3
 8003fd6:	e000      	b.n	8003fda <NVIC_EncodePriority+0x32>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	401a      	ands	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	43d9      	mvns	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004000:	4313      	orrs	r3, r2
         );
}
 8004002:	4618      	mov	r0, r3
 8004004:	3724      	adds	r7, #36	; 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004020:	d301      	bcc.n	8004026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004022:	2301      	movs	r3, #1
 8004024:	e00f      	b.n	8004046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004026:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <SysTick_Config+0x40>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402e:	210f      	movs	r1, #15
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	f7ff ff8e 	bl	8003f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <SysTick_Config+0x40>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <SysTick_Config+0x40>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000e010 	.word	0xe000e010

08004054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff29 	bl	8003eb4 <__NVIC_SetPriorityGrouping>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800407c:	f7ff ff3e 	bl	8003efc <__NVIC_GetPriorityGrouping>
 8004080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff ff8e 	bl	8003fa8 <NVIC_EncodePriority>
 800408c:	4602      	mov	r2, r0
 800408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff5d 	bl	8003f54 <__NVIC_SetPriority>
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff31 	bl	8003f18 <__NVIC_EnableIRQ>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffa2 	bl	8004010 <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e014      	b.n	8004112 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	791b      	ldrb	r3, [r3, #4]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fd f8df 	bl	80012bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	795b      	ldrb	r3, [r3, #5]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_DAC_Start+0x1e>
 8004134:	2302      	movs	r3, #2
 8004136:	e050      	b.n	80041da <HAL_DAC_Start+0xc0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	2201      	movs	r2, #1
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	409a      	lsls	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11a      	bne.n	8004194 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004174:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d127      	bne.n	80041cc <HAL_DAC_Start+0xb2>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b38      	cmp	r3, #56	; 0x38
 8004180:	d124      	bne.n	80041cc <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	e01b      	b.n	80041cc <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80041aa:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041b2:	d10b      	bne.n	80041cc <HAL_DAC_Start+0xb2>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80041ba:	d107      	bne.n	80041cc <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0202 	orr.w	r2, r2, #2
 80041ca:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fc:	d118      	bne.n	8004230 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004218:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004228:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f825 	bl	800427a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423e:	d118      	bne.n	8004272 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800425a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800426a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f880 	bl	8004372 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800428e:	b480      	push	{r7}
 8004290:	b087      	sub	sp, #28
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	795b      	ldrb	r3, [r3, #5]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_DAC_ConfigChannel+0x20>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e036      	b.n	800431c <HAL_DAC_ConfigChannel+0x8e>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2202      	movs	r2, #2
 80042b8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80042c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4013      	ands	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6819      	ldr	r1, [r3, #0]
 80042fc:	22c0      	movs	r2, #192	; 0xc0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43da      	mvns	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	400a      	ands	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	3308      	adds	r3, #8
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e004      	b.n	800435c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	3314      	adds	r3, #20
 800435a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	461a      	mov	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7fe fec6 	bl	8003124 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e099      	b.n	80044d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c4:	e00f      	b.n	80043e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c6:	f7fe fead 	bl	8003124 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d908      	bls.n	80043e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2203      	movs	r2, #3
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e078      	b.n	80044d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e8      	bne.n	80043c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <HAL_DMA_Init+0x158>)
 8004400:	4013      	ands	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b04      	cmp	r3, #4
 800443e:	d107      	bne.n	8004450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	4313      	orrs	r3, r2
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b04      	cmp	r3, #4
 8004478:	d117      	bne.n	80044aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fa6f 	bl	8004970 <DMA_CheckFifoParam>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044a6:	2301      	movs	r3, #1
 80044a8:	e016      	b.n	80044d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa26 	bl	8004904 <DMA_CalcBaseAndBitshift>
 80044b8:	4603      	mov	r3, r0
 80044ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	223f      	movs	r2, #63	; 0x3f
 80044c2:	409a      	lsls	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	f010803f 	.word	0xf010803f

080044e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_DMA_Start_IT+0x26>
 8004506:	2302      	movs	r3, #2
 8004508:	e040      	b.n	800458c <HAL_DMA_Start_IT+0xa8>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d12f      	bne.n	800457e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f9b8 	bl	80048a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	223f      	movs	r2, #63	; 0x3f
 800453e:	409a      	lsls	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0216 	orr.w	r2, r2, #22
 8004552:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0208 	orr.w	r2, r2, #8
 800456a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e005      	b.n	800458a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004586:	2302      	movs	r3, #2
 8004588:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800458a:	7dfb      	ldrb	r3, [r7, #23]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045a0:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_DMA_IRQHandler+0x258>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a92      	ldr	r2, [pc, #584]	; (80047f0 <HAL_DMA_IRQHandler+0x25c>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	0a9b      	lsrs	r3, r3, #10
 80045ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	2208      	movs	r2, #8
 80045c0:	409a      	lsls	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01a      	beq.n	8004600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	2208      	movs	r2, #8
 80045ee:	409a      	lsls	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	2201      	movs	r2, #1
 8004624:	409a      	lsls	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f043 0202 	orr.w	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463a:	2204      	movs	r2, #4
 800463c:	409a      	lsls	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d012      	beq.n	800466c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	2204      	movs	r2, #4
 800465a:	409a      	lsls	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	2210      	movs	r2, #16
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d043      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d03c      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	2210      	movs	r2, #16
 8004690:	409a      	lsls	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d018      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d024      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
 80046c2:	e01f      	b.n	8004704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
 80046d4:	e016      	b.n	8004704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0208 	bic.w	r2, r2, #8
 80046f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	2220      	movs	r2, #32
 800470a:	409a      	lsls	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 808e 	beq.w	8004832 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8086 	beq.w	8004832 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	2220      	movs	r2, #32
 800472c:	409a      	lsls	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b05      	cmp	r3, #5
 800473c:	d136      	bne.n	80047ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0216 	bic.w	r2, r2, #22
 800474c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800475c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_DMA_IRQHandler+0x1da>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0208 	bic.w	r2, r2, #8
 800477c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	223f      	movs	r2, #63	; 0x3f
 8004784:	409a      	lsls	r2, r3
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d07d      	beq.n	800489e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
        }
        return;
 80047aa:	e078      	b.n	800489e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01c      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d108      	bne.n	80047da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d030      	beq.n	8004832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
 80047d8:	e02b      	b.n	8004832 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d027      	beq.n	8004832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
 80047ea:	e022      	b.n	8004832 <HAL_DMA_IRQHandler+0x29e>
 80047ec:	20000000 	.word	0x20000000
 80047f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0210 	bic.w	r2, r2, #16
 8004810:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	2b00      	cmp	r3, #0
 8004838:	d032      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d022      	beq.n	800488c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2205      	movs	r2, #5
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3301      	adds	r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	429a      	cmp	r2, r3
 8004868:	d307      	bcc.n	800487a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f2      	bne.n	800485e <HAL_DMA_IRQHandler+0x2ca>
 8004878:	e000      	b.n	800487c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800487a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
 800489c:	e000      	b.n	80048a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800489e:	bf00      	nop
    }
  }
}
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop

080048a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d108      	bne.n	80048e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048e6:	e007      	b.n	80048f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	3b10      	subs	r3, #16
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <DMA_CalcBaseAndBitshift+0x64>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800491e:	4a13      	ldr	r2, [pc, #76]	; (800496c <DMA_CalcBaseAndBitshift+0x68>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d909      	bls.n	8004946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	1d1a      	adds	r2, r3, #4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	659a      	str	r2, [r3, #88]	; 0x58
 8004944:	e007      	b.n	8004956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	aaaaaaab 	.word	0xaaaaaaab
 800496c:	08009fd0 	.word	0x08009fd0

08004970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11f      	bne.n	80049ca <DMA_CheckFifoParam+0x5a>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d856      	bhi.n	8004a3e <DMA_CheckFifoParam+0xce>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <DMA_CheckFifoParam+0x28>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049bb 	.word	0x080049bb
 80049a0:	080049a9 	.word	0x080049a9
 80049a4:	08004a3f 	.word	0x08004a3f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d046      	beq.n	8004a42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b8:	e043      	b.n	8004a42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049c2:	d140      	bne.n	8004a46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c8:	e03d      	b.n	8004a46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d121      	bne.n	8004a18 <DMA_CheckFifoParam+0xa8>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d837      	bhi.n	8004a4a <DMA_CheckFifoParam+0xda>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <DMA_CheckFifoParam+0x70>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	080049f1 	.word	0x080049f1
 80049e4:	080049f7 	.word	0x080049f7
 80049e8:	080049f1 	.word	0x080049f1
 80049ec:	08004a09 	.word	0x08004a09
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	e030      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d025      	beq.n	8004a4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a06:	e022      	b.n	8004a4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a10:	d11f      	bne.n	8004a52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a16:	e01c      	b.n	8004a52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d903      	bls.n	8004a26 <DMA_CheckFifoParam+0xb6>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d003      	beq.n	8004a2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a24:	e018      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
      break;
 8004a2a:	e015      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00e      	beq.n	8004a56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3c:	e00b      	b.n	8004a56 <DMA_CheckFifoParam+0xe6>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e00a      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      break;
 8004a42:	bf00      	nop
 8004a44:	e008      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      break;
 8004a46:	bf00      	nop
 8004a48:	e006      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e004      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <DMA_CheckFifoParam+0xe8>
      break;
 8004a56:	bf00      	nop
    }
  } 
  
  return status; 
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop

08004a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e165      	b.n	8004d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f040 8154 	bne.w	8004d4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_GPIO_Init+0x5a>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d007      	beq.n	8004ac2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ab6:	2b11      	cmp	r3, #17
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b12      	cmp	r3, #18
 8004ac0:	d130      	bne.n	8004b24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	2203      	movs	r2, #3
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004af8:	2201      	movs	r2, #1
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 0201 	and.w	r2, r3, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0xfc>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b12      	cmp	r3, #18
 8004b62:	d123      	bne.n	8004bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	08da      	lsrs	r2, r3, #3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3208      	adds	r2, #8
 8004b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	220f      	movs	r2, #15
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	08da      	lsrs	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3208      	adds	r2, #8
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0203 	and.w	r2, r3, #3
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80ae 	beq.w	8004d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b5d      	ldr	r3, [pc, #372]	; (8004d68 <HAL_GPIO_Init+0x300>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	4a5c      	ldr	r2, [pc, #368]	; (8004d68 <HAL_GPIO_Init+0x300>)
 8004bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfe:	4b5a      	ldr	r3, [pc, #360]	; (8004d68 <HAL_GPIO_Init+0x300>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c0a:	4a58      	ldr	r2, [pc, #352]	; (8004d6c <HAL_GPIO_Init+0x304>)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	3302      	adds	r3, #2
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a4f      	ldr	r2, [pc, #316]	; (8004d70 <HAL_GPIO_Init+0x308>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d025      	beq.n	8004c82 <HAL_GPIO_Init+0x21a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a4e      	ldr	r2, [pc, #312]	; (8004d74 <HAL_GPIO_Init+0x30c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01f      	beq.n	8004c7e <HAL_GPIO_Init+0x216>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a4d      	ldr	r2, [pc, #308]	; (8004d78 <HAL_GPIO_Init+0x310>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d019      	beq.n	8004c7a <HAL_GPIO_Init+0x212>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4c      	ldr	r2, [pc, #304]	; (8004d7c <HAL_GPIO_Init+0x314>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_GPIO_Init+0x20e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a4b      	ldr	r2, [pc, #300]	; (8004d80 <HAL_GPIO_Init+0x318>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00d      	beq.n	8004c72 <HAL_GPIO_Init+0x20a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a4a      	ldr	r2, [pc, #296]	; (8004d84 <HAL_GPIO_Init+0x31c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <HAL_GPIO_Init+0x206>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a49      	ldr	r2, [pc, #292]	; (8004d88 <HAL_GPIO_Init+0x320>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d101      	bne.n	8004c6a <HAL_GPIO_Init+0x202>
 8004c66:	2306      	movs	r3, #6
 8004c68:	e00c      	b.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	e00a      	b.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c6e:	2305      	movs	r3, #5
 8004c70:	e008      	b.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c72:	2304      	movs	r3, #4
 8004c74:	e006      	b.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c76:	2303      	movs	r3, #3
 8004c78:	e004      	b.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e002      	b.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c82:	2300      	movs	r3, #0
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	f002 0203 	and.w	r2, r2, #3
 8004c8a:	0092      	lsls	r2, r2, #2
 8004c8c:	4093      	lsls	r3, r2
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c94:	4935      	ldr	r1, [pc, #212]	; (8004d6c <HAL_GPIO_Init+0x304>)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	089b      	lsrs	r3, r3, #2
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cc6:	4a31      	ldr	r2, [pc, #196]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ccc:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cf0:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cf6:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d1a:	4a1c      	ldr	r2, [pc, #112]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d44:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b0f      	cmp	r3, #15
 8004d54:	f67f ae96 	bls.w	8004a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3724      	adds	r7, #36	; 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40013800 	.word	0x40013800
 8004d70:	40020000 	.word	0x40020000
 8004d74:	40020400 	.word	0x40020400
 8004d78:	40020800 	.word	0x40020800
 8004d7c:	40020c00 	.word	0x40020c00
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40021400 	.word	0x40021400
 8004d88:	40021800 	.word	0x40021800
 8004d8c:	40013c00 	.word	0x40013c00

08004d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004da0:	787b      	ldrb	r3, [r7, #1]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dac:	e003      	b.n	8004db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dae:	887b      	ldrh	r3, [r7, #2]
 8004db0:	041a      	lsls	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	619a      	str	r2, [r3, #24]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	887b      	ldrh	r3, [r7, #2]
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	887b      	ldrh	r3, [r7, #2]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d104      	bne.n	8004de6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	041a      	lsls	r2, r3, #16
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004de4:	e002      	b.n	8004dec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e02b      	b.n	8004e62 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004e12:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f245 5255 	movw	r2, #21845	; 0x5555
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6852      	ldr	r2, [r2, #4]
 8004e26:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6892      	ldr	r2, [r2, #8]
 8004e30:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004e32:	f7fe f977 	bl	8003124 <HAL_GetTick>
 8004e36:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004e38:	e008      	b.n	8004e4c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004e3a:	f7fe f973 	bl	8003124 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d901      	bls.n	8004e4c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e00a      	b.n	8004e62 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f1      	bne.n	8004e3a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <HAL_PWR_PVD_IRQHandler+0x20>)
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004e9c:	f000 f808 	bl	8004eb0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004ea0:	4b02      	ldr	r3, [pc, #8]	; (8004eac <HAL_PWR_PVD_IRQHandler+0x20>)
 8004ea2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ea6:	615a      	str	r2, [r3, #20]
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40013c00 	.word	0x40013c00

08004eb0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0cc      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b68      	ldr	r3, [pc, #416]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d90c      	bls.n	8004efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b65      	ldr	r3, [pc, #404]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b63      	ldr	r3, [pc, #396]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0b8      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f14:	4b59      	ldr	r3, [pc, #356]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a58      	ldr	r2, [pc, #352]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f2c:	4b53      	ldr	r3, [pc, #332]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a52      	ldr	r2, [pc, #328]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f38:	4b50      	ldr	r3, [pc, #320]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	494d      	ldr	r1, [pc, #308]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d044      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d107      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5e:	4b47      	ldr	r3, [pc, #284]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d119      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e07f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	4b3f      	ldr	r3, [pc, #252]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e06f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e067      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f9e:	4b37      	ldr	r3, [pc, #220]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f023 0203 	bic.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4934      	ldr	r1, [pc, #208]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fe f8b8 	bl	8003124 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fe f8b4 	bl	8003124 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e04f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	4b2b      	ldr	r3, [pc, #172]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 020c 	and.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d1eb      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d20c      	bcs.n	8005008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e032      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4916      	ldr	r1, [pc, #88]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	490e      	ldr	r1, [pc, #56]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005046:	f000 f855 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 800504a:	4602      	mov	r2, r0
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	490a      	ldr	r1, [pc, #40]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	5ccb      	ldrb	r3, [r1, r3]
 800505a:	fa22 f303 	lsr.w	r3, r2, r3
 800505e:	4a09      	ldr	r2, [pc, #36]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8005060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_RCC_ClockConfig+0x1c8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe f818 	bl	800309c <HAL_InitTick>

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023c00 	.word	0x40023c00
 800507c:	40023800 	.word	0x40023800
 8005080:	08009fb8 	.word	0x08009fb8
 8005084:	20000000 	.word	0x20000000
 8005088:	20000004 	.word	0x20000004

0800508c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000000 	.word	0x20000000

080050a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a8:	f7ff fff0 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0a9b      	lsrs	r3, r3, #10
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	08009fc8 	.word	0x08009fc8

080050cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050d0:	f7ff ffdc 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	0b5b      	lsrs	r3, r3, #13
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	4903      	ldr	r1, [pc, #12]	; (80050f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050e2:	5ccb      	ldrb	r3, [r1, r3]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40023800 	.word	0x40023800
 80050f0:	08009fc8 	.word	0x08009fc8

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005110:	4bce      	ldr	r3, [pc, #824]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b0c      	cmp	r3, #12
 800511a:	f200 818d 	bhi.w	8005438 <HAL_RCC_GetSysClockFreq+0x344>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <HAL_RCC_GetSysClockFreq+0x30>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005159 	.word	0x08005159
 8005128:	08005439 	.word	0x08005439
 800512c:	08005439 	.word	0x08005439
 8005130:	08005439 	.word	0x08005439
 8005134:	0800515f 	.word	0x0800515f
 8005138:	08005439 	.word	0x08005439
 800513c:	08005439 	.word	0x08005439
 8005140:	08005439 	.word	0x08005439
 8005144:	08005165 	.word	0x08005165
 8005148:	08005439 	.word	0x08005439
 800514c:	08005439 	.word	0x08005439
 8005150:	08005439 	.word	0x08005439
 8005154:	080052d9 	.word	0x080052d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005158:	4bbd      	ldr	r3, [pc, #756]	; (8005450 <HAL_RCC_GetSysClockFreq+0x35c>)
 800515a:	61bb      	str	r3, [r7, #24]
       break;
 800515c:	e16f      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800515e:	4bbd      	ldr	r3, [pc, #756]	; (8005454 <HAL_RCC_GetSysClockFreq+0x360>)
 8005160:	61bb      	str	r3, [r7, #24]
      break;
 8005162:	e16c      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005164:	4bb9      	ldr	r3, [pc, #740]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800516c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800516e:	4bb7      	ldr	r3, [pc, #732]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d053      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800517a:	4bb4      	ldr	r3, [pc, #720]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	099b      	lsrs	r3, r3, #6
 8005180:	461a      	mov	r2, r3
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f240 10ff 	movw	r0, #511	; 0x1ff
 800518a:	f04f 0100 	mov.w	r1, #0
 800518e:	ea02 0400 	and.w	r4, r2, r0
 8005192:	603c      	str	r4, [r7, #0]
 8005194:	400b      	ands	r3, r1
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	e9d7 4500 	ldrd	r4, r5, [r7]
 800519c:	4620      	mov	r0, r4
 800519e:	4629      	mov	r1, r5
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	014b      	lsls	r3, r1, #5
 80051aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051ae:	0142      	lsls	r2, r0, #5
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	4623      	mov	r3, r4
 80051b6:	1ac0      	subs	r0, r0, r3
 80051b8:	462b      	mov	r3, r5
 80051ba:	eb61 0103 	sbc.w	r1, r1, r3
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	018b      	lsls	r3, r1, #6
 80051c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051cc:	0182      	lsls	r2, r0, #6
 80051ce:	1a12      	subs	r2, r2, r0
 80051d0:	eb63 0301 	sbc.w	r3, r3, r1
 80051d4:	f04f 0000 	mov.w	r0, #0
 80051d8:	f04f 0100 	mov.w	r1, #0
 80051dc:	00d9      	lsls	r1, r3, #3
 80051de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e2:	00d0      	lsls	r0, r2, #3
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4621      	mov	r1, r4
 80051ea:	1852      	adds	r2, r2, r1
 80051ec:	4629      	mov	r1, r5
 80051ee:	eb43 0101 	adc.w	r1, r3, r1
 80051f2:	460b      	mov	r3, r1
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	0259      	lsls	r1, r3, #9
 80051fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005202:	0250      	lsls	r0, r2, #9
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	461a      	mov	r2, r3
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	f7fb fd38 	bl	8000c88 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	e04c      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005222:	4b8a      	ldr	r3, [pc, #552]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	461a      	mov	r2, r3
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	ea02 0a00 	and.w	sl, r2, r0
 800523a:	ea03 0b01 	and.w	fp, r3, r1
 800523e:	4650      	mov	r0, sl
 8005240:	4659      	mov	r1, fp
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	014b      	lsls	r3, r1, #5
 800524c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005250:	0142      	lsls	r2, r0, #5
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	ebb0 000a 	subs.w	r0, r0, sl
 800525a:	eb61 010b 	sbc.w	r1, r1, fp
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	018b      	lsls	r3, r1, #6
 8005268:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800526c:	0182      	lsls	r2, r0, #6
 800526e:	1a12      	subs	r2, r2, r0
 8005270:	eb63 0301 	sbc.w	r3, r3, r1
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f04f 0100 	mov.w	r1, #0
 800527c:	00d9      	lsls	r1, r3, #3
 800527e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005282:	00d0      	lsls	r0, r2, #3
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	eb12 020a 	adds.w	r2, r2, sl
 800528c:	eb43 030b 	adc.w	r3, r3, fp
 8005290:	f04f 0000 	mov.w	r0, #0
 8005294:	f04f 0100 	mov.w	r1, #0
 8005298:	0299      	lsls	r1, r3, #10
 800529a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800529e:	0290      	lsls	r0, r2, #10
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	f7fb fcea 	bl	8000c88 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052bc:	4b63      	ldr	r3, [pc, #396]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	61bb      	str	r3, [r7, #24]
      break;
 80052d6:	e0b2      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052d8:	4b5c      	ldr	r3, [pc, #368]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e2:	4b5a      	ldr	r3, [pc, #360]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d04d      	beq.n	800538a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ee:	4b57      	ldr	r3, [pc, #348]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	461a      	mov	r2, r3
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	ea02 0800 	and.w	r8, r2, r0
 8005306:	ea03 0901 	and.w	r9, r3, r1
 800530a:	4640      	mov	r0, r8
 800530c:	4649      	mov	r1, r9
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	014b      	lsls	r3, r1, #5
 8005318:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800531c:	0142      	lsls	r2, r0, #5
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	ebb0 0008 	subs.w	r0, r0, r8
 8005326:	eb61 0109 	sbc.w	r1, r1, r9
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	018b      	lsls	r3, r1, #6
 8005334:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005338:	0182      	lsls	r2, r0, #6
 800533a:	1a12      	subs	r2, r2, r0
 800533c:	eb63 0301 	sbc.w	r3, r3, r1
 8005340:	f04f 0000 	mov.w	r0, #0
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	00d9      	lsls	r1, r3, #3
 800534a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800534e:	00d0      	lsls	r0, r2, #3
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	eb12 0208 	adds.w	r2, r2, r8
 8005358:	eb43 0309 	adc.w	r3, r3, r9
 800535c:	f04f 0000 	mov.w	r0, #0
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	0259      	lsls	r1, r3, #9
 8005366:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800536a:	0250      	lsls	r0, r2, #9
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f7fb fc84 	bl	8000c88 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4613      	mov	r3, r2
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e04a      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538a:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	461a      	mov	r2, r3
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f240 10ff 	movw	r0, #511	; 0x1ff
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	ea02 0400 	and.w	r4, r2, r0
 80053a2:	ea03 0501 	and.w	r5, r3, r1
 80053a6:	4620      	mov	r0, r4
 80053a8:	4629      	mov	r1, r5
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	014b      	lsls	r3, r1, #5
 80053b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053b8:	0142      	lsls	r2, r0, #5
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	1b00      	subs	r0, r0, r4
 80053c0:	eb61 0105 	sbc.w	r1, r1, r5
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	018b      	lsls	r3, r1, #6
 80053ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053d2:	0182      	lsls	r2, r0, #6
 80053d4:	1a12      	subs	r2, r2, r0
 80053d6:	eb63 0301 	sbc.w	r3, r3, r1
 80053da:	f04f 0000 	mov.w	r0, #0
 80053de:	f04f 0100 	mov.w	r1, #0
 80053e2:	00d9      	lsls	r1, r3, #3
 80053e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053e8:	00d0      	lsls	r0, r2, #3
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	1912      	adds	r2, r2, r4
 80053f0:	eb45 0303 	adc.w	r3, r5, r3
 80053f4:	f04f 0000 	mov.w	r0, #0
 80053f8:	f04f 0100 	mov.w	r1, #0
 80053fc:	0299      	lsls	r1, r3, #10
 80053fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005402:	0290      	lsls	r0, r2, #10
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4610      	mov	r0, r2
 800540a:	4619      	mov	r1, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	461a      	mov	r2, r3
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	f7fb fc38 	bl	8000c88 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4613      	mov	r3, r2
 800541e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <HAL_RCC_GetSysClockFreq+0x358>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	0f1b      	lsrs	r3, r3, #28
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	61bb      	str	r3, [r7, #24]
      break;
 8005436:	e002      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_RCC_GetSysClockFreq+0x35c>)
 800543a:	61bb      	str	r3, [r7, #24]
      break;
 800543c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543e:	69bb      	ldr	r3, [r7, #24]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	00f42400 	.word	0x00f42400
 8005454:	007a1200 	.word	0x007a1200

08005458 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8083 	beq.w	8005578 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005472:	4b95      	ldr	r3, [pc, #596]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b04      	cmp	r3, #4
 800547c:	d019      	beq.n	80054b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800547e:	4b92      	ldr	r3, [pc, #584]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005486:	2b08      	cmp	r3, #8
 8005488:	d106      	bne.n	8005498 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800548a:	4b8f      	ldr	r3, [pc, #572]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005496:	d00c      	beq.n	80054b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005498:	4b8b      	ldr	r3, [pc, #556]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d112      	bne.n	80054ca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a4:	4b88      	ldr	r3, [pc, #544]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b0:	d10b      	bne.n	80054ca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b2:	4b85      	ldr	r3, [pc, #532]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d05b      	beq.n	8005576 <HAL_RCC_OscConfig+0x11e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d157      	bne.n	8005576 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e216      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x8a>
 80054d4:	4b7c      	ldr	r3, [pc, #496]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a7b      	ldr	r2, [pc, #492]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e01d      	b.n	800551e <HAL_RCC_OscConfig+0xc6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054ea:	d10c      	bne.n	8005506 <HAL_RCC_OscConfig+0xae>
 80054ec:	4b76      	ldr	r3, [pc, #472]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a75      	ldr	r2, [pc, #468]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a72      	ldr	r2, [pc, #456]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e00b      	b.n	800551e <HAL_RCC_OscConfig+0xc6>
 8005506:	4b70      	ldr	r3, [pc, #448]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6f      	ldr	r2, [pc, #444]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800550c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	4b6d      	ldr	r3, [pc, #436]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a6c      	ldr	r2, [pc, #432]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d013      	beq.n	800554e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fd fdfd 	bl	8003124 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800552e:	f7fd fdf9 	bl	8003124 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b64      	cmp	r3, #100	; 0x64
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e1db      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005540:	4b61      	ldr	r3, [pc, #388]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0xd6>
 800554c:	e014      	b.n	8005578 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7fd fde9 	bl	8003124 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005556:	f7fd fde5 	bl	8003124 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b64      	cmp	r3, #100	; 0x64
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e1c7      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005568:	4b57      	ldr	r3, [pc, #348]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCC_OscConfig+0xfe>
 8005574:	e000      	b.n	8005578 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005576:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d06f      	beq.n	8005664 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005584:	4b50      	ldr	r3, [pc, #320]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b00      	cmp	r3, #0
 800558e:	d017      	beq.n	80055c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005590:	4b4d      	ldr	r3, [pc, #308]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005598:	2b08      	cmp	r3, #8
 800559a:	d105      	bne.n	80055a8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800559c:	4b4a      	ldr	r3, [pc, #296]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a8:	4b47      	ldr	r3, [pc, #284]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	d11c      	bne.n	80055ee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055b4:	4b44      	ldr	r3, [pc, #272]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c0:	4b41      	ldr	r3, [pc, #260]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_OscConfig+0x180>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d001      	beq.n	80055d8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e18f      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b3b      	ldr	r3, [pc, #236]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4938      	ldr	r1, [pc, #224]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ec:	e03a      	b.n	8005664 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f6:	4b35      	ldr	r3, [pc, #212]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fd fd92 	bl	8003124 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005604:	f7fd fd8e 	bl	8003124 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e170      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005616:	4b2c      	ldr	r3, [pc, #176]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005622:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4925      	ldr	r1, [pc, #148]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
 8005636:	e015      	b.n	8005664 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005638:	4b24      	ldr	r3, [pc, #144]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563e:	f7fd fd71 	bl	8003124 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005646:	f7fd fd6d 	bl	8003124 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e14f      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005658:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1f0      	bne.n	8005646 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d037      	beq.n	80056e0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d016      	beq.n	80056a6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <HAL_RCC_OscConfig+0x278>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567e:	f7fd fd51 	bl	8003124 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005686:	f7fd fd4d 	bl	8003124 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e12f      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x22e>
 80056a4:	e01c      	b.n	80056e0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <HAL_RCC_OscConfig+0x278>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fd fd3a 	bl	8003124 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b2:	e00f      	b.n	80056d4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b4:	f7fd fd36 	bl	8003124 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d908      	bls.n	80056d4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e118      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470000 	.word	0x42470000
 80056d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d4:	4b8a      	ldr	r3, [pc, #552]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e9      	bne.n	80056b4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8097 	beq.w	800581c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f2:	4b83      	ldr	r3, [pc, #524]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10f      	bne.n	800571e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b7f      	ldr	r3, [pc, #508]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4a7e      	ldr	r2, [pc, #504]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	6413      	str	r3, [r2, #64]	; 0x40
 800570e:	4b7c      	ldr	r3, [pc, #496]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800571a:	2301      	movs	r3, #1
 800571c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571e:	4b79      	ldr	r3, [pc, #484]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d118      	bne.n	800575c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572a:	4b76      	ldr	r3, [pc, #472]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a75      	ldr	r2, [pc, #468]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005736:	f7fd fcf5 	bl	8003124 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573e:	f7fd fcf1 	bl	8003124 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e0d3      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005750:	4b6c      	ldr	r3, [pc, #432]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d106      	bne.n	8005772 <HAL_RCC_OscConfig+0x31a>
 8005764:	4b66      	ldr	r3, [pc, #408]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a65      	ldr	r2, [pc, #404]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	e01c      	b.n	80057ac <HAL_RCC_OscConfig+0x354>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b05      	cmp	r3, #5
 8005778:	d10c      	bne.n	8005794 <HAL_RCC_OscConfig+0x33c>
 800577a:	4b61      	ldr	r3, [pc, #388]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a60      	ldr	r2, [pc, #384]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005780:	f043 0304 	orr.w	r3, r3, #4
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	4b5e      	ldr	r3, [pc, #376]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	4a5d      	ldr	r2, [pc, #372]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6713      	str	r3, [r2, #112]	; 0x70
 8005792:	e00b      	b.n	80057ac <HAL_RCC_OscConfig+0x354>
 8005794:	4b5a      	ldr	r3, [pc, #360]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a59      	ldr	r2, [pc, #356]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
 80057a0:	4b57      	ldr	r3, [pc, #348]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	4a56      	ldr	r2, [pc, #344]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 80057a6:	f023 0304 	bic.w	r3, r3, #4
 80057aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d015      	beq.n	80057e0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fd fcb6 	bl	8003124 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ba:	e00a      	b.n	80057d2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057bc:	f7fd fcb2 	bl	8003124 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e092      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d2:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0ee      	beq.n	80057bc <HAL_RCC_OscConfig+0x364>
 80057de:	e014      	b.n	800580a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fd fca0 	bl	8003124 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e6:	e00a      	b.n	80057fe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e8:	f7fd fc9c 	bl	8003124 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e07c      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fe:	4b40      	ldr	r3, [pc, #256]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1ee      	bne.n	80057e8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d105      	bne.n	800581c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005810:	4b3b      	ldr	r3, [pc, #236]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	4a3a      	ldr	r2, [pc, #232]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d068      	beq.n	80058f6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005824:	4b36      	ldr	r3, [pc, #216]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	2b08      	cmp	r3, #8
 800582e:	d060      	beq.n	80058f2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d145      	bne.n	80058c4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005838:	4b33      	ldr	r3, [pc, #204]	; (8005908 <HAL_RCC_OscConfig+0x4b0>)
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fd fc71 	bl	8003124 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005846:	f7fd fc6d 	bl	8003124 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e04f      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005858:	4b29      	ldr	r3, [pc, #164]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	019b      	lsls	r3, r3, #6
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	3b01      	subs	r3, #1
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	071b      	lsls	r3, r3, #28
 8005890:	491b      	ldr	r1, [pc, #108]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005896:	4b1c      	ldr	r3, [pc, #112]	; (8005908 <HAL_RCC_OscConfig+0x4b0>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fd fc42 	bl	8003124 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a4:	f7fd fc3e 	bl	8003124 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e020      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0x44c>
 80058c2:	e018      	b.n	80058f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c4:	4b10      	ldr	r3, [pc, #64]	; (8005908 <HAL_RCC_OscConfig+0x4b0>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fd fc2b 	bl	8003124 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fd fc27 	bl	8003124 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e009      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_OscConfig+0x4a8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f0      	bne.n	80058d2 <HAL_RCC_OscConfig+0x47a>
 80058f0:	e001      	b.n	80058f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	40007000 	.word	0x40007000
 8005908:	42470060 	.word	0x42470060

0800590c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e056      	b.n	80059cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fc ff6d 	bl	8002818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005954:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	ea42 0103 	orr.w	r1, r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f003 0104 	and.w	r1, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e01d      	b.n	8005a22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fd f908 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f000 f95e 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d122      	bne.n	8005ace <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d11b      	bne.n	8005ace <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f06f 0202 	mvn.w	r2, #2
 8005a9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f8ee 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 8005aba:	e005      	b.n	8005ac8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8e0 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f8f1 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d122      	bne.n	8005b22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d11b      	bne.n	8005b22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0204 	mvn.w	r2, #4
 8005af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8c4 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 8005b0e:	e005      	b.n	8005b1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8b6 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8c7 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d122      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d11b      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f06f 0208 	mvn.w	r2, #8
 8005b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f89a 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 8005b62:	e005      	b.n	8005b70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f88c 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f89d 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d122      	bne.n	8005bca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d11b      	bne.n	8005bca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f06f 0210 	mvn.w	r2, #16
 8005b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f870 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 8005bb6:	e005      	b.n	8005bc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f862 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f873 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10e      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f06f 0201 	mvn.w	r2, #1
 8005bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fb fe69 	bl	80018c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c00:	2b80      	cmp	r3, #128	; 0x80
 8005c02:	d10e      	bne.n	8005c22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d107      	bne.n	8005c22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f97f 	bl	8005f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d10e      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d107      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f838 	bl	8005cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d10e      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d107      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f06f 0220 	mvn.w	r2, #32
 8005c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f949 	bl	8005f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a40      	ldr	r2, [pc, #256]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf2:	d00f      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3d      	ldr	r2, [pc, #244]	; (8005dec <TIM_Base_SetConfig+0x118>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3c      	ldr	r2, [pc, #240]	; (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3b      	ldr	r2, [pc, #236]	; (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3a      	ldr	r2, [pc, #232]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2f      	ldr	r2, [pc, #188]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d027      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2c      	ldr	r2, [pc, #176]	; (8005dec <TIM_Base_SetConfig+0x118>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d023      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01f      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a29      	ldr	r2, [pc, #164]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d017      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <TIM_Base_SetConfig+0x128>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a27      	ldr	r2, [pc, #156]	; (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <TIM_Base_SetConfig+0x130>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <TIM_Base_SetConfig+0x134>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a24      	ldr	r2, [pc, #144]	; (8005e0c <TIM_Base_SetConfig+0x138>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a23      	ldr	r2, [pc, #140]	; (8005e10 <TIM_Base_SetConfig+0x13c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d108      	bne.n	8005d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a0c      	ldr	r2, [pc, #48]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d103      	bne.n	8005dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	615a      	str	r2, [r3, #20]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40010400 	.word	0x40010400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	40001800 	.word	0x40001800
 8005e0c:	40001c00 	.word	0x40001c00
 8005e10:	40002000 	.word	0x40002000

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e05a      	b.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1b      	ldr	r2, [pc, #108]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1a      	ldr	r2, [pc, #104]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e03f      	b.n	8005fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fc fefe 	bl	8002d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fa5f 	bl	800643c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b088      	sub	sp, #32
 8005fd2:	af02      	add	r7, sp, #8
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	f040 8083 	bne.w	80060f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_UART_Transmit+0x2e>
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e07b      	b.n	80060f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_UART_Transmit+0x40>
 800600a:	2302      	movs	r3, #2
 800600c:	e074      	b.n	80060f8 <HAL_UART_Transmit+0x12a>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2221      	movs	r2, #33	; 0x21
 8006020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006024:	f7fd f87e 	bl	8003124 <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	88fa      	ldrh	r2, [r7, #6]
 800602e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800603e:	e042      	b.n	80060c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006056:	d122      	bne.n	800609e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2200      	movs	r2, #0
 8006060:	2180      	movs	r1, #128	; 0x80
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f96c 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e042      	b.n	80060f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006084:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	3302      	adds	r3, #2
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	e017      	b.n	80060c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	3301      	adds	r3, #1
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	e013      	b.n	80060c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	2180      	movs	r1, #128	; 0x80
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f949 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e01f      	b.n	80060f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	60ba      	str	r2, [r7, #8]
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1b7      	bne.n	8006040 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	2140      	movs	r1, #64	; 0x40
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f930 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e006      	b.n	80060f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e000      	b.n	80060f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80060f6:	2302      	movs	r3, #2
  }
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b20      	cmp	r3, #32
 8006118:	d166      	bne.n	80061e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_UART_Receive_DMA+0x26>
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e05f      	b.n	80061ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_UART_Receive_DMA+0x38>
 8006134:	2302      	movs	r3, #2
 8006136:	e058      	b.n	80061ea <HAL_UART_Receive_DMA+0xea>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	88fa      	ldrh	r2, [r7, #6]
 800614a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2222      	movs	r2, #34	; 0x22
 8006156:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <HAL_UART_Receive_DMA+0xf4>)
 8006160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	4a24      	ldr	r2, [pc, #144]	; (80061f8 <HAL_UART_Receive_DMA+0xf8>)
 8006168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616e:	4a23      	ldr	r2, [pc, #140]	; (80061fc <HAL_UART_Receive_DMA+0xfc>)
 8006170:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006176:	2200      	movs	r2, #0
 8006178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800617a:	f107 0308 	add.w	r3, r7, #8
 800617e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	f7fe f9a7 	bl	80044e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006196:	2300      	movs	r3, #0
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	08006229 	.word	0x08006229
 80061f8:	08006291 	.word	0x08006291
 80061fc:	080062ad 	.word	0x080062ad

08006200 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11e      	bne.n	8006282 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006258:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695a      	ldr	r2, [r3, #20]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006278:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7fc f9f6 	bl	8002674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff ffae 	bl	8006200 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b21      	cmp	r3, #33	; 0x21
 80062de:	d108      	bne.n	80062f2 <UART_DMAError+0x46>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2200      	movs	r2, #0
 80062ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f000 f871 	bl	80063d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	bf0c      	ite	eq
 8006300:	2301      	moveq	r3, #1
 8006302:	2300      	movne	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b22      	cmp	r3, #34	; 0x22
 8006312:	d108      	bne.n	8006326 <UART_DMAError+0x7a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006320:	68b8      	ldr	r0, [r7, #8]
 8006322:	f000 f86d 	bl	8006400 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	f043 0210 	orr.w	r2, r3, #16
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006332:	68b8      	ldr	r0, [r7, #8]
 8006334:	f7ff ff6e 	bl	8006214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006350:	e02c      	b.n	80063ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d028      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <UART_WaitOnFlagUntilTimeout+0x30>
 8006360:	f7fc fee0 	bl	8003124 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	429a      	cmp	r2, r3
 800636e:	d21d      	bcs.n	80063ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800637e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e00f      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4013      	ands	r3, r2
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d0c3      	beq.n	8006352 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006416:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0201 	bic.w	r2, r2, #1
 8006426:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	b0bd      	sub	sp, #244	; 0xf4
 8006442:	af00      	add	r7, sp, #0
 8006444:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	68d9      	ldr	r1, [r3, #12]
 800645a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	ea40 0301 	orr.w	r3, r0, r1
 8006464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	431a      	orrs	r2, r3
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	431a      	orrs	r2, r3
 800647c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006494:	f021 010c 	bic.w	r1, r1, #12
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064a2:	430b      	orrs	r3, r1
 80064a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	6999      	ldr	r1, [r3, #24]
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	ea40 0301 	orr.w	r3, r0, r1
 80064c2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ce:	f040 81a5 	bne.w	800681c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4bcd      	ldr	r3, [pc, #820]	; (8006810 <UART_SetConfig+0x3d4>)
 80064da:	429a      	cmp	r2, r3
 80064dc:	d006      	beq.n	80064ec <UART_SetConfig+0xb0>
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4bcb      	ldr	r3, [pc, #812]	; (8006814 <UART_SetConfig+0x3d8>)
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f040 80cb 	bne.w	8006682 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064ec:	f7fe fdee 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 80064f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064f8:	461c      	mov	r4, r3
 80064fa:	f04f 0500 	mov.w	r5, #0
 80064fe:	4622      	mov	r2, r4
 8006500:	462b      	mov	r3, r5
 8006502:	1891      	adds	r1, r2, r2
 8006504:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006508:	415b      	adcs	r3, r3
 800650a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800650e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006512:	1912      	adds	r2, r2, r4
 8006514:	eb45 0303 	adc.w	r3, r5, r3
 8006518:	f04f 0000 	mov.w	r0, #0
 800651c:	f04f 0100 	mov.w	r1, #0
 8006520:	00d9      	lsls	r1, r3, #3
 8006522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006526:	00d0      	lsls	r0, r2, #3
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	1911      	adds	r1, r2, r4
 800652e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006532:	416b      	adcs	r3, r5
 8006534:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	461a      	mov	r2, r3
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	1891      	adds	r1, r2, r2
 8006546:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800654a:	415b      	adcs	r3, r3
 800654c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006550:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006554:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006558:	f7fa fb96 	bl	8000c88 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4bad      	ldr	r3, [pc, #692]	; (8006818 <UART_SetConfig+0x3dc>)
 8006562:	fba3 2302 	umull	r2, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	011e      	lsls	r6, r3, #4
 800656a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800656e:	461c      	mov	r4, r3
 8006570:	f04f 0500 	mov.w	r5, #0
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	1891      	adds	r1, r2, r2
 800657a:	67b9      	str	r1, [r7, #120]	; 0x78
 800657c:	415b      	adcs	r3, r3
 800657e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006580:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006584:	1912      	adds	r2, r2, r4
 8006586:	eb45 0303 	adc.w	r3, r5, r3
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	00d9      	lsls	r1, r3, #3
 8006594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006598:	00d0      	lsls	r0, r2, #3
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	1911      	adds	r1, r2, r4
 80065a0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80065a4:	416b      	adcs	r3, r5
 80065a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	461a      	mov	r2, r3
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	1891      	adds	r1, r2, r2
 80065b8:	6739      	str	r1, [r7, #112]	; 0x70
 80065ba:	415b      	adcs	r3, r3
 80065bc:	677b      	str	r3, [r7, #116]	; 0x74
 80065be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80065c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80065c6:	f7fa fb5f 	bl	8000c88 <__aeabi_uldivmod>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4b92      	ldr	r3, [pc, #584]	; (8006818 <UART_SetConfig+0x3dc>)
 80065d0:	fba3 1302 	umull	r1, r3, r3, r2
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	2164      	movs	r1, #100	; 0x64
 80065d8:	fb01 f303 	mul.w	r3, r1, r3
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	3332      	adds	r3, #50	; 0x32
 80065e2:	4a8d      	ldr	r2, [pc, #564]	; (8006818 <UART_SetConfig+0x3dc>)
 80065e4:	fba2 2303 	umull	r2, r3, r2, r3
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065f0:	441e      	add	r6, r3
 80065f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f04f 0100 	mov.w	r1, #0
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	1894      	adds	r4, r2, r2
 8006602:	66bc      	str	r4, [r7, #104]	; 0x68
 8006604:	415b      	adcs	r3, r3
 8006606:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006608:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800660c:	1812      	adds	r2, r2, r0
 800660e:	eb41 0303 	adc.w	r3, r1, r3
 8006612:	f04f 0400 	mov.w	r4, #0
 8006616:	f04f 0500 	mov.w	r5, #0
 800661a:	00dd      	lsls	r5, r3, #3
 800661c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006620:	00d4      	lsls	r4, r2, #3
 8006622:	4622      	mov	r2, r4
 8006624:	462b      	mov	r3, r5
 8006626:	1814      	adds	r4, r2, r0
 8006628:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800662c:	414b      	adcs	r3, r1
 800662e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	461a      	mov	r2, r3
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	1891      	adds	r1, r2, r2
 8006640:	6639      	str	r1, [r7, #96]	; 0x60
 8006642:	415b      	adcs	r3, r3
 8006644:	667b      	str	r3, [r7, #100]	; 0x64
 8006646:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800664a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800664e:	f7fa fb1b 	bl	8000c88 <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4b70      	ldr	r3, [pc, #448]	; (8006818 <UART_SetConfig+0x3dc>)
 8006658:	fba3 1302 	umull	r1, r3, r3, r2
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	2164      	movs	r1, #100	; 0x64
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	3332      	adds	r3, #50	; 0x32
 800666a:	4a6b      	ldr	r2, [pc, #428]	; (8006818 <UART_SetConfig+0x3dc>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	f003 0207 	and.w	r2, r3, #7
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4432      	add	r2, r6
 800667e:	609a      	str	r2, [r3, #8]
 8006680:	e26d      	b.n	8006b5e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006682:	f7fe fd0f 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8006686:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800668a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800668e:	461c      	mov	r4, r3
 8006690:	f04f 0500 	mov.w	r5, #0
 8006694:	4622      	mov	r2, r4
 8006696:	462b      	mov	r3, r5
 8006698:	1891      	adds	r1, r2, r2
 800669a:	65b9      	str	r1, [r7, #88]	; 0x58
 800669c:	415b      	adcs	r3, r3
 800669e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066a4:	1912      	adds	r2, r2, r4
 80066a6:	eb45 0303 	adc.w	r3, r5, r3
 80066aa:	f04f 0000 	mov.w	r0, #0
 80066ae:	f04f 0100 	mov.w	r1, #0
 80066b2:	00d9      	lsls	r1, r3, #3
 80066b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066b8:	00d0      	lsls	r0, r2, #3
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	1911      	adds	r1, r2, r4
 80066c0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80066c4:	416b      	adcs	r3, r5
 80066c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	461a      	mov	r2, r3
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	1891      	adds	r1, r2, r2
 80066d8:	6539      	str	r1, [r7, #80]	; 0x50
 80066da:	415b      	adcs	r3, r3
 80066dc:	657b      	str	r3, [r7, #84]	; 0x54
 80066de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80066e6:	f7fa facf 	bl	8000c88 <__aeabi_uldivmod>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4b4a      	ldr	r3, [pc, #296]	; (8006818 <UART_SetConfig+0x3dc>)
 80066f0:	fba3 2302 	umull	r2, r3, r3, r2
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	011e      	lsls	r6, r3, #4
 80066f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066fc:	461c      	mov	r4, r3
 80066fe:	f04f 0500 	mov.w	r5, #0
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	1891      	adds	r1, r2, r2
 8006708:	64b9      	str	r1, [r7, #72]	; 0x48
 800670a:	415b      	adcs	r3, r3
 800670c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006712:	1912      	adds	r2, r2, r4
 8006714:	eb45 0303 	adc.w	r3, r5, r3
 8006718:	f04f 0000 	mov.w	r0, #0
 800671c:	f04f 0100 	mov.w	r1, #0
 8006720:	00d9      	lsls	r1, r3, #3
 8006722:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006726:	00d0      	lsls	r0, r2, #3
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	1911      	adds	r1, r2, r4
 800672e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006732:	416b      	adcs	r3, r5
 8006734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	461a      	mov	r2, r3
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	1891      	adds	r1, r2, r2
 8006746:	6439      	str	r1, [r7, #64]	; 0x40
 8006748:	415b      	adcs	r3, r3
 800674a:	647b      	str	r3, [r7, #68]	; 0x44
 800674c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006750:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006754:	f7fa fa98 	bl	8000c88 <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4b2e      	ldr	r3, [pc, #184]	; (8006818 <UART_SetConfig+0x3dc>)
 800675e:	fba3 1302 	umull	r1, r3, r3, r2
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	2164      	movs	r1, #100	; 0x64
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	3332      	adds	r3, #50	; 0x32
 8006770:	4a29      	ldr	r2, [pc, #164]	; (8006818 <UART_SetConfig+0x3dc>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800677e:	441e      	add	r6, r3
 8006780:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006784:	4618      	mov	r0, r3
 8006786:	f04f 0100 	mov.w	r1, #0
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	1894      	adds	r4, r2, r2
 8006790:	63bc      	str	r4, [r7, #56]	; 0x38
 8006792:	415b      	adcs	r3, r3
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006796:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800679a:	1812      	adds	r2, r2, r0
 800679c:	eb41 0303 	adc.w	r3, r1, r3
 80067a0:	f04f 0400 	mov.w	r4, #0
 80067a4:	f04f 0500 	mov.w	r5, #0
 80067a8:	00dd      	lsls	r5, r3, #3
 80067aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ae:	00d4      	lsls	r4, r2, #3
 80067b0:	4622      	mov	r2, r4
 80067b2:	462b      	mov	r3, r5
 80067b4:	1814      	adds	r4, r2, r0
 80067b6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80067ba:	414b      	adcs	r3, r1
 80067bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	1891      	adds	r1, r2, r2
 80067ce:	6339      	str	r1, [r7, #48]	; 0x30
 80067d0:	415b      	adcs	r3, r3
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
 80067d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067dc:	f7fa fa54 	bl	8000c88 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <UART_SetConfig+0x3dc>)
 80067e6:	fba3 1302 	umull	r1, r3, r3, r2
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	2164      	movs	r1, #100	; 0x64
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	3332      	adds	r3, #50	; 0x32
 80067f8:	4a07      	ldr	r2, [pc, #28]	; (8006818 <UART_SetConfig+0x3dc>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	f003 0207 	and.w	r2, r3, #7
 8006804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4432      	add	r2, r6
 800680c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800680e:	e1a6      	b.n	8006b5e <UART_SetConfig+0x722>
 8006810:	40011000 	.word	0x40011000
 8006814:	40011400 	.word	0x40011400
 8006818:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4bd1      	ldr	r3, [pc, #836]	; (8006b68 <UART_SetConfig+0x72c>)
 8006824:	429a      	cmp	r2, r3
 8006826:	d006      	beq.n	8006836 <UART_SetConfig+0x3fa>
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4bcf      	ldr	r3, [pc, #828]	; (8006b6c <UART_SetConfig+0x730>)
 8006830:	429a      	cmp	r2, r3
 8006832:	f040 80ca 	bne.w	80069ca <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006836:	f7fe fc49 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 800683a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006842:	461c      	mov	r4, r3
 8006844:	f04f 0500 	mov.w	r5, #0
 8006848:	4622      	mov	r2, r4
 800684a:	462b      	mov	r3, r5
 800684c:	1891      	adds	r1, r2, r2
 800684e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006850:	415b      	adcs	r3, r3
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006858:	1912      	adds	r2, r2, r4
 800685a:	eb45 0303 	adc.w	r3, r5, r3
 800685e:	f04f 0000 	mov.w	r0, #0
 8006862:	f04f 0100 	mov.w	r1, #0
 8006866:	00d9      	lsls	r1, r3, #3
 8006868:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800686c:	00d0      	lsls	r0, r2, #3
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	eb12 0a04 	adds.w	sl, r2, r4
 8006876:	eb43 0b05 	adc.w	fp, r3, r5
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4618      	mov	r0, r3
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	008b      	lsls	r3, r1, #2
 8006890:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006894:	0082      	lsls	r2, r0, #2
 8006896:	4650      	mov	r0, sl
 8006898:	4659      	mov	r1, fp
 800689a:	f7fa f9f5 	bl	8000c88 <__aeabi_uldivmod>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4bb3      	ldr	r3, [pc, #716]	; (8006b70 <UART_SetConfig+0x734>)
 80068a4:	fba3 2302 	umull	r2, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	011e      	lsls	r6, r3, #4
 80068ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068b0:	4618      	mov	r0, r3
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	1894      	adds	r4, r2, r2
 80068bc:	623c      	str	r4, [r7, #32]
 80068be:	415b      	adcs	r3, r3
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
 80068c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068c6:	1812      	adds	r2, r2, r0
 80068c8:	eb41 0303 	adc.w	r3, r1, r3
 80068cc:	f04f 0400 	mov.w	r4, #0
 80068d0:	f04f 0500 	mov.w	r5, #0
 80068d4:	00dd      	lsls	r5, r3, #3
 80068d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068da:	00d4      	lsls	r4, r2, #3
 80068dc:	4622      	mov	r2, r4
 80068de:	462b      	mov	r3, r5
 80068e0:	1814      	adds	r4, r2, r0
 80068e2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80068e6:	414b      	adcs	r3, r1
 80068e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f04f 0100 	mov.w	r1, #0
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	008b      	lsls	r3, r1, #2
 8006902:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006906:	0082      	lsls	r2, r0, #2
 8006908:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800690c:	f7fa f9bc 	bl	8000c88 <__aeabi_uldivmod>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4b96      	ldr	r3, [pc, #600]	; (8006b70 <UART_SetConfig+0x734>)
 8006916:	fba3 1302 	umull	r1, r3, r3, r2
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	2164      	movs	r1, #100	; 0x64
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	3332      	adds	r3, #50	; 0x32
 8006928:	4a91      	ldr	r2, [pc, #580]	; (8006b70 <UART_SetConfig+0x734>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006934:	441e      	add	r6, r3
 8006936:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800693a:	4618      	mov	r0, r3
 800693c:	f04f 0100 	mov.w	r1, #0
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	1894      	adds	r4, r2, r2
 8006946:	61bc      	str	r4, [r7, #24]
 8006948:	415b      	adcs	r3, r3
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006950:	1812      	adds	r2, r2, r0
 8006952:	eb41 0303 	adc.w	r3, r1, r3
 8006956:	f04f 0400 	mov.w	r4, #0
 800695a:	f04f 0500 	mov.w	r5, #0
 800695e:	00dd      	lsls	r5, r3, #3
 8006960:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006964:	00d4      	lsls	r4, r2, #3
 8006966:	4622      	mov	r2, r4
 8006968:	462b      	mov	r3, r5
 800696a:	1814      	adds	r4, r2, r0
 800696c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006970:	414b      	adcs	r3, r1
 8006972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4618      	mov	r0, r3
 800697e:	f04f 0100 	mov.w	r1, #0
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	008b      	lsls	r3, r1, #2
 800698c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006990:	0082      	lsls	r2, r0, #2
 8006992:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006996:	f7fa f977 	bl	8000c88 <__aeabi_uldivmod>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4b74      	ldr	r3, [pc, #464]	; (8006b70 <UART_SetConfig+0x734>)
 80069a0:	fba3 1302 	umull	r1, r3, r3, r2
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	2164      	movs	r1, #100	; 0x64
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	3332      	adds	r3, #50	; 0x32
 80069b2:	4a6f      	ldr	r2, [pc, #444]	; (8006b70 <UART_SetConfig+0x734>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4432      	add	r2, r6
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	e0c9      	b.n	8006b5e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80069ca:	f7fe fb6b 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 80069ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069d6:	461c      	mov	r4, r3
 80069d8:	f04f 0500 	mov.w	r5, #0
 80069dc:	4622      	mov	r2, r4
 80069de:	462b      	mov	r3, r5
 80069e0:	1891      	adds	r1, r2, r2
 80069e2:	6139      	str	r1, [r7, #16]
 80069e4:	415b      	adcs	r3, r3
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069ec:	1912      	adds	r2, r2, r4
 80069ee:	eb45 0303 	adc.w	r3, r5, r3
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	00d9      	lsls	r1, r3, #3
 80069fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a00:	00d0      	lsls	r0, r2, #3
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	eb12 0804 	adds.w	r8, r2, r4
 8006a0a:	eb43 0905 	adc.w	r9, r3, r5
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f04f 0100 	mov.w	r1, #0
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	008b      	lsls	r3, r1, #2
 8006a24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a28:	0082      	lsls	r2, r0, #2
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7fa f92b 	bl	8000c88 <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4b4e      	ldr	r3, [pc, #312]	; (8006b70 <UART_SetConfig+0x734>)
 8006a38:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	011e      	lsls	r6, r3, #4
 8006a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a44:	4618      	mov	r0, r3
 8006a46:	f04f 0100 	mov.w	r1, #0
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	1894      	adds	r4, r2, r2
 8006a50:	60bc      	str	r4, [r7, #8]
 8006a52:	415b      	adcs	r3, r3
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a5a:	1812      	adds	r2, r2, r0
 8006a5c:	eb41 0303 	adc.w	r3, r1, r3
 8006a60:	f04f 0400 	mov.w	r4, #0
 8006a64:	f04f 0500 	mov.w	r5, #0
 8006a68:	00dd      	lsls	r5, r3, #3
 8006a6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a6e:	00d4      	lsls	r4, r2, #3
 8006a70:	4622      	mov	r2, r4
 8006a72:	462b      	mov	r3, r5
 8006a74:	1814      	adds	r4, r2, r0
 8006a76:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006a7a:	414b      	adcs	r3, r1
 8006a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	008b      	lsls	r3, r1, #2
 8006a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a9a:	0082      	lsls	r2, r0, #2
 8006a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006aa0:	f7fa f8f2 	bl	8000c88 <__aeabi_uldivmod>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <UART_SetConfig+0x734>)
 8006aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	2164      	movs	r1, #100	; 0x64
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	3332      	adds	r3, #50	; 0x32
 8006abc:	4a2c      	ldr	r2, [pc, #176]	; (8006b70 <UART_SetConfig+0x734>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac8:	441e      	add	r6, r3
 8006aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f04f 0100 	mov.w	r1, #0
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	1894      	adds	r4, r2, r2
 8006ada:	603c      	str	r4, [r7, #0]
 8006adc:	415b      	adcs	r3, r3
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae4:	1812      	adds	r2, r2, r0
 8006ae6:	eb41 0303 	adc.w	r3, r1, r3
 8006aea:	f04f 0400 	mov.w	r4, #0
 8006aee:	f04f 0500 	mov.w	r5, #0
 8006af2:	00dd      	lsls	r5, r3, #3
 8006af4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006af8:	00d4      	lsls	r4, r2, #3
 8006afa:	4622      	mov	r2, r4
 8006afc:	462b      	mov	r3, r5
 8006afe:	1814      	adds	r4, r2, r0
 8006b00:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006b04:	414b      	adcs	r3, r1
 8006b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	008b      	lsls	r3, r1, #2
 8006b20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b24:	0082      	lsls	r2, r0, #2
 8006b26:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006b2a:	f7fa f8ad 	bl	8000c88 <__aeabi_uldivmod>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <UART_SetConfig+0x734>)
 8006b34:	fba3 1302 	umull	r1, r3, r3, r2
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	2164      	movs	r1, #100	; 0x64
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	3332      	adds	r3, #50	; 0x32
 8006b46:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <UART_SetConfig+0x734>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f003 020f 	and.w	r2, r3, #15
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4432      	add	r2, r6
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	e7ff      	b.n	8006b5e <UART_SetConfig+0x722>
 8006b5e:	bf00      	nop
 8006b60:	37f4      	adds	r7, #244	; 0xf4
 8006b62:	46bd      	mov	sp, r7
 8006b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b68:	40011000 	.word	0x40011000
 8006b6c:	40011400 	.word	0x40011400
 8006b70:	51eb851f 	.word	0x51eb851f

08006b74 <__errno>:
 8006b74:	4b01      	ldr	r3, [pc, #4]	; (8006b7c <__errno+0x8>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	2000000c 	.word	0x2000000c

08006b80 <__libc_init_array>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	4d0d      	ldr	r5, [pc, #52]	; (8006bb8 <__libc_init_array+0x38>)
 8006b84:	4c0d      	ldr	r4, [pc, #52]	; (8006bbc <__libc_init_array+0x3c>)
 8006b86:	1b64      	subs	r4, r4, r5
 8006b88:	10a4      	asrs	r4, r4, #2
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	42a6      	cmp	r6, r4
 8006b8e:	d109      	bne.n	8006ba4 <__libc_init_array+0x24>
 8006b90:	4d0b      	ldr	r5, [pc, #44]	; (8006bc0 <__libc_init_array+0x40>)
 8006b92:	4c0c      	ldr	r4, [pc, #48]	; (8006bc4 <__libc_init_array+0x44>)
 8006b94:	f003 fa04 	bl	8009fa0 <_init>
 8006b98:	1b64      	subs	r4, r4, r5
 8006b9a:	10a4      	asrs	r4, r4, #2
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	42a6      	cmp	r6, r4
 8006ba0:	d105      	bne.n	8006bae <__libc_init_array+0x2e>
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba8:	4798      	blx	r3
 8006baa:	3601      	adds	r6, #1
 8006bac:	e7ee      	b.n	8006b8c <__libc_init_array+0xc>
 8006bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb2:	4798      	blx	r3
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	e7f2      	b.n	8006b9e <__libc_init_array+0x1e>
 8006bb8:	0800a3e4 	.word	0x0800a3e4
 8006bbc:	0800a3e4 	.word	0x0800a3e4
 8006bc0:	0800a3e4 	.word	0x0800a3e4
 8006bc4:	0800a3e8 	.word	0x0800a3e8

08006bc8 <memset>:
 8006bc8:	4402      	add	r2, r0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <memset+0xa>
 8006bd0:	4770      	bx	lr
 8006bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd6:	e7f9      	b.n	8006bcc <memset+0x4>

08006bd8 <__cvt>:
 8006bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	ec55 4b10 	vmov	r4, r5, d0
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	460e      	mov	r6, r1
 8006be4:	4619      	mov	r1, r3
 8006be6:	462b      	mov	r3, r5
 8006be8:	bfbb      	ittet	lt
 8006bea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bee:	461d      	movlt	r5, r3
 8006bf0:	2300      	movge	r3, #0
 8006bf2:	232d      	movlt	r3, #45	; 0x2d
 8006bf4:	700b      	strb	r3, [r1, #0]
 8006bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bfc:	4691      	mov	r9, r2
 8006bfe:	f023 0820 	bic.w	r8, r3, #32
 8006c02:	bfbc      	itt	lt
 8006c04:	4622      	movlt	r2, r4
 8006c06:	4614      	movlt	r4, r2
 8006c08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c0c:	d005      	beq.n	8006c1a <__cvt+0x42>
 8006c0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c12:	d100      	bne.n	8006c16 <__cvt+0x3e>
 8006c14:	3601      	adds	r6, #1
 8006c16:	2102      	movs	r1, #2
 8006c18:	e000      	b.n	8006c1c <__cvt+0x44>
 8006c1a:	2103      	movs	r1, #3
 8006c1c:	ab03      	add	r3, sp, #12
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	ab02      	add	r3, sp, #8
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	ec45 4b10 	vmov	d0, r4, r5
 8006c28:	4653      	mov	r3, sl
 8006c2a:	4632      	mov	r2, r6
 8006c2c:	f000 fd98 	bl	8007760 <_dtoa_r>
 8006c30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c34:	4607      	mov	r7, r0
 8006c36:	d102      	bne.n	8006c3e <__cvt+0x66>
 8006c38:	f019 0f01 	tst.w	r9, #1
 8006c3c:	d022      	beq.n	8006c84 <__cvt+0xac>
 8006c3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c42:	eb07 0906 	add.w	r9, r7, r6
 8006c46:	d110      	bne.n	8006c6a <__cvt+0x92>
 8006c48:	783b      	ldrb	r3, [r7, #0]
 8006c4a:	2b30      	cmp	r3, #48	; 0x30
 8006c4c:	d10a      	bne.n	8006c64 <__cvt+0x8c>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2300      	movs	r3, #0
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	f7f9 ff57 	bl	8000b08 <__aeabi_dcmpeq>
 8006c5a:	b918      	cbnz	r0, 8006c64 <__cvt+0x8c>
 8006c5c:	f1c6 0601 	rsb	r6, r6, #1
 8006c60:	f8ca 6000 	str.w	r6, [sl]
 8006c64:	f8da 3000 	ldr.w	r3, [sl]
 8006c68:	4499      	add	r9, r3
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 ff49 	bl	8000b08 <__aeabi_dcmpeq>
 8006c76:	b108      	cbz	r0, 8006c7c <__cvt+0xa4>
 8006c78:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c7c:	2230      	movs	r2, #48	; 0x30
 8006c7e:	9b03      	ldr	r3, [sp, #12]
 8006c80:	454b      	cmp	r3, r9
 8006c82:	d307      	bcc.n	8006c94 <__cvt+0xbc>
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c88:	1bdb      	subs	r3, r3, r7
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	b004      	add	sp, #16
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	1c59      	adds	r1, r3, #1
 8006c96:	9103      	str	r1, [sp, #12]
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e7f0      	b.n	8006c7e <__cvt+0xa6>

08006c9c <__exponent>:
 8006c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	bfb8      	it	lt
 8006ca4:	4249      	neglt	r1, r1
 8006ca6:	f803 2b02 	strb.w	r2, [r3], #2
 8006caa:	bfb4      	ite	lt
 8006cac:	222d      	movlt	r2, #45	; 0x2d
 8006cae:	222b      	movge	r2, #43	; 0x2b
 8006cb0:	2909      	cmp	r1, #9
 8006cb2:	7042      	strb	r2, [r0, #1]
 8006cb4:	dd2a      	ble.n	8006d0c <__exponent+0x70>
 8006cb6:	f10d 0407 	add.w	r4, sp, #7
 8006cba:	46a4      	mov	ip, r4
 8006cbc:	270a      	movs	r7, #10
 8006cbe:	46a6      	mov	lr, r4
 8006cc0:	460a      	mov	r2, r1
 8006cc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cc6:	fb07 1516 	mls	r5, r7, r6, r1
 8006cca:	3530      	adds	r5, #48	; 0x30
 8006ccc:	2a63      	cmp	r2, #99	; 0x63
 8006cce:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	dcf1      	bgt.n	8006cbe <__exponent+0x22>
 8006cda:	3130      	adds	r1, #48	; 0x30
 8006cdc:	f1ae 0502 	sub.w	r5, lr, #2
 8006ce0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ce4:	1c44      	adds	r4, r0, #1
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4561      	cmp	r1, ip
 8006cea:	d30a      	bcc.n	8006d02 <__exponent+0x66>
 8006cec:	f10d 0209 	add.w	r2, sp, #9
 8006cf0:	eba2 020e 	sub.w	r2, r2, lr
 8006cf4:	4565      	cmp	r5, ip
 8006cf6:	bf88      	it	hi
 8006cf8:	2200      	movhi	r2, #0
 8006cfa:	4413      	add	r3, r2
 8006cfc:	1a18      	subs	r0, r3, r0
 8006cfe:	b003      	add	sp, #12
 8006d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d0a:	e7ed      	b.n	8006ce8 <__exponent+0x4c>
 8006d0c:	2330      	movs	r3, #48	; 0x30
 8006d0e:	3130      	adds	r1, #48	; 0x30
 8006d10:	7083      	strb	r3, [r0, #2]
 8006d12:	70c1      	strb	r1, [r0, #3]
 8006d14:	1d03      	adds	r3, r0, #4
 8006d16:	e7f1      	b.n	8006cfc <__exponent+0x60>

08006d18 <_printf_float>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	ed2d 8b02 	vpush	{d8}
 8006d20:	b08d      	sub	sp, #52	; 0x34
 8006d22:	460c      	mov	r4, r1
 8006d24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d28:	4616      	mov	r6, r2
 8006d2a:	461f      	mov	r7, r3
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	f001 fcbb 	bl	80086a8 <_localeconv_r>
 8006d32:	f8d0 a000 	ldr.w	sl, [r0]
 8006d36:	4650      	mov	r0, sl
 8006d38:	f7f9 fa6a 	bl	8000210 <strlen>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	9305      	str	r3, [sp, #20]
 8006d44:	f8d8 3000 	ldr.w	r3, [r8]
 8006d48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d4c:	3307      	adds	r3, #7
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	f103 0208 	add.w	r2, r3, #8
 8006d56:	f8c8 2000 	str.w	r2, [r8]
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d6a:	9307      	str	r3, [sp, #28]
 8006d6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d70:	ee08 0a10 	vmov	s16, r0
 8006d74:	4b9f      	ldr	r3, [pc, #636]	; (8006ff4 <_printf_float+0x2dc>)
 8006d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	f7f9 fef5 	bl	8000b6c <__aeabi_dcmpun>
 8006d82:	bb88      	cbnz	r0, 8006de8 <_printf_float+0xd0>
 8006d84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d88:	4b9a      	ldr	r3, [pc, #616]	; (8006ff4 <_printf_float+0x2dc>)
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	f7f9 fecf 	bl	8000b30 <__aeabi_dcmple>
 8006d92:	bb48      	cbnz	r0, 8006de8 <_printf_float+0xd0>
 8006d94:	2200      	movs	r2, #0
 8006d96:	2300      	movs	r3, #0
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	f7f9 febe 	bl	8000b1c <__aeabi_dcmplt>
 8006da0:	b110      	cbz	r0, 8006da8 <_printf_float+0x90>
 8006da2:	232d      	movs	r3, #45	; 0x2d
 8006da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da8:	4b93      	ldr	r3, [pc, #588]	; (8006ff8 <_printf_float+0x2e0>)
 8006daa:	4894      	ldr	r0, [pc, #592]	; (8006ffc <_printf_float+0x2e4>)
 8006dac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006db0:	bf94      	ite	ls
 8006db2:	4698      	movls	r8, r3
 8006db4:	4680      	movhi	r8, r0
 8006db6:	2303      	movs	r3, #3
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	f023 0204 	bic.w	r2, r3, #4
 8006dc0:	6022      	str	r2, [r4, #0]
 8006dc2:	f04f 0900 	mov.w	r9, #0
 8006dc6:	9700      	str	r7, [sp, #0]
 8006dc8:	4633      	mov	r3, r6
 8006dca:	aa0b      	add	r2, sp, #44	; 0x2c
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 f9d8 	bl	8007184 <_printf_common>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	f040 8090 	bne.w	8006efa <_printf_float+0x1e2>
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295
 8006dde:	b00d      	add	sp, #52	; 0x34
 8006de0:	ecbd 8b02 	vpop	{d8}
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	4640      	mov	r0, r8
 8006dee:	4649      	mov	r1, r9
 8006df0:	f7f9 febc 	bl	8000b6c <__aeabi_dcmpun>
 8006df4:	b140      	cbz	r0, 8006e08 <_printf_float+0xf0>
 8006df6:	464b      	mov	r3, r9
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfbc      	itt	lt
 8006dfc:	232d      	movlt	r3, #45	; 0x2d
 8006dfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e02:	487f      	ldr	r0, [pc, #508]	; (8007000 <_printf_float+0x2e8>)
 8006e04:	4b7f      	ldr	r3, [pc, #508]	; (8007004 <_printf_float+0x2ec>)
 8006e06:	e7d1      	b.n	8006dac <_printf_float+0x94>
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e0e:	9206      	str	r2, [sp, #24]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	d13f      	bne.n	8006e94 <_printf_float+0x17c>
 8006e14:	2306      	movs	r3, #6
 8006e16:	6063      	str	r3, [r4, #4]
 8006e18:	9b05      	ldr	r3, [sp, #20]
 8006e1a:	6861      	ldr	r1, [r4, #4]
 8006e1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e20:	2300      	movs	r3, #0
 8006e22:	9303      	str	r3, [sp, #12]
 8006e24:	ab0a      	add	r3, sp, #40	; 0x28
 8006e26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e2a:	ab09      	add	r3, sp, #36	; 0x24
 8006e2c:	ec49 8b10 	vmov	d0, r8, r9
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	6022      	str	r2, [r4, #0]
 8006e34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f7ff fecd 	bl	8006bd8 <__cvt>
 8006e3e:	9b06      	ldr	r3, [sp, #24]
 8006e40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e42:	2b47      	cmp	r3, #71	; 0x47
 8006e44:	4680      	mov	r8, r0
 8006e46:	d108      	bne.n	8006e5a <_printf_float+0x142>
 8006e48:	1cc8      	adds	r0, r1, #3
 8006e4a:	db02      	blt.n	8006e52 <_printf_float+0x13a>
 8006e4c:	6863      	ldr	r3, [r4, #4]
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	dd41      	ble.n	8006ed6 <_printf_float+0x1be>
 8006e52:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e56:	fa5f fb8b 	uxtb.w	fp, fp
 8006e5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e5e:	d820      	bhi.n	8006ea2 <_printf_float+0x18a>
 8006e60:	3901      	subs	r1, #1
 8006e62:	465a      	mov	r2, fp
 8006e64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e68:	9109      	str	r1, [sp, #36]	; 0x24
 8006e6a:	f7ff ff17 	bl	8006c9c <__exponent>
 8006e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e70:	1813      	adds	r3, r2, r0
 8006e72:	2a01      	cmp	r2, #1
 8006e74:	4681      	mov	r9, r0
 8006e76:	6123      	str	r3, [r4, #16]
 8006e78:	dc02      	bgt.n	8006e80 <_printf_float+0x168>
 8006e7a:	6822      	ldr	r2, [r4, #0]
 8006e7c:	07d2      	lsls	r2, r2, #31
 8006e7e:	d501      	bpl.n	8006e84 <_printf_float+0x16c>
 8006e80:	3301      	adds	r3, #1
 8006e82:	6123      	str	r3, [r4, #16]
 8006e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d09c      	beq.n	8006dc6 <_printf_float+0xae>
 8006e8c:	232d      	movs	r3, #45	; 0x2d
 8006e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e92:	e798      	b.n	8006dc6 <_printf_float+0xae>
 8006e94:	9a06      	ldr	r2, [sp, #24]
 8006e96:	2a47      	cmp	r2, #71	; 0x47
 8006e98:	d1be      	bne.n	8006e18 <_printf_float+0x100>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1bc      	bne.n	8006e18 <_printf_float+0x100>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e7b9      	b.n	8006e16 <_printf_float+0xfe>
 8006ea2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ea6:	d118      	bne.n	8006eda <_printf_float+0x1c2>
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	6863      	ldr	r3, [r4, #4]
 8006eac:	dd0b      	ble.n	8006ec6 <_printf_float+0x1ae>
 8006eae:	6121      	str	r1, [r4, #16]
 8006eb0:	b913      	cbnz	r3, 8006eb8 <_printf_float+0x1a0>
 8006eb2:	6822      	ldr	r2, [r4, #0]
 8006eb4:	07d0      	lsls	r0, r2, #31
 8006eb6:	d502      	bpl.n	8006ebe <_printf_float+0x1a6>
 8006eb8:	3301      	adds	r3, #1
 8006eba:	440b      	add	r3, r1
 8006ebc:	6123      	str	r3, [r4, #16]
 8006ebe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ec0:	f04f 0900 	mov.w	r9, #0
 8006ec4:	e7de      	b.n	8006e84 <_printf_float+0x16c>
 8006ec6:	b913      	cbnz	r3, 8006ece <_printf_float+0x1b6>
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	07d2      	lsls	r2, r2, #31
 8006ecc:	d501      	bpl.n	8006ed2 <_printf_float+0x1ba>
 8006ece:	3302      	adds	r3, #2
 8006ed0:	e7f4      	b.n	8006ebc <_printf_float+0x1a4>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e7f2      	b.n	8006ebc <_printf_float+0x1a4>
 8006ed6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006edc:	4299      	cmp	r1, r3
 8006ede:	db05      	blt.n	8006eec <_printf_float+0x1d4>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	6121      	str	r1, [r4, #16]
 8006ee4:	07d8      	lsls	r0, r3, #31
 8006ee6:	d5ea      	bpl.n	8006ebe <_printf_float+0x1a6>
 8006ee8:	1c4b      	adds	r3, r1, #1
 8006eea:	e7e7      	b.n	8006ebc <_printf_float+0x1a4>
 8006eec:	2900      	cmp	r1, #0
 8006eee:	bfd4      	ite	le
 8006ef0:	f1c1 0202 	rsble	r2, r1, #2
 8006ef4:	2201      	movgt	r2, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	e7e0      	b.n	8006ebc <_printf_float+0x1a4>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	055a      	lsls	r2, r3, #21
 8006efe:	d407      	bmi.n	8006f10 <_printf_float+0x1f8>
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	4642      	mov	r2, r8
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d12c      	bne.n	8006f68 <_printf_float+0x250>
 8006f0e:	e764      	b.n	8006dda <_printf_float+0xc2>
 8006f10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f14:	f240 80e0 	bls.w	80070d8 <_printf_float+0x3c0>
 8006f18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f7f9 fdf2 	bl	8000b08 <__aeabi_dcmpeq>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d034      	beq.n	8006f92 <_printf_float+0x27a>
 8006f28:	4a37      	ldr	r2, [pc, #220]	; (8007008 <_printf_float+0x2f0>)
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f af51 	beq.w	8006dda <_printf_float+0xc2>
 8006f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	db02      	blt.n	8006f46 <_printf_float+0x22e>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07d8      	lsls	r0, r3, #31
 8006f44:	d510      	bpl.n	8006f68 <_printf_float+0x250>
 8006f46:	ee18 3a10 	vmov	r3, s16
 8006f4a:	4652      	mov	r2, sl
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	f43f af41 	beq.w	8006dda <_printf_float+0xc2>
 8006f58:	f04f 0800 	mov.w	r8, #0
 8006f5c:	f104 091a 	add.w	r9, r4, #26
 8006f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f62:	3b01      	subs	r3, #1
 8006f64:	4543      	cmp	r3, r8
 8006f66:	dc09      	bgt.n	8006f7c <_printf_float+0x264>
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	079b      	lsls	r3, r3, #30
 8006f6c:	f100 8105 	bmi.w	800717a <_printf_float+0x462>
 8006f70:	68e0      	ldr	r0, [r4, #12]
 8006f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f74:	4298      	cmp	r0, r3
 8006f76:	bfb8      	it	lt
 8006f78:	4618      	movlt	r0, r3
 8006f7a:	e730      	b.n	8006dde <_printf_float+0xc6>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	464a      	mov	r2, r9
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f af27 	beq.w	8006dda <_printf_float+0xc2>
 8006f8c:	f108 0801 	add.w	r8, r8, #1
 8006f90:	e7e6      	b.n	8006f60 <_printf_float+0x248>
 8006f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dc39      	bgt.n	800700c <_printf_float+0x2f4>
 8006f98:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <_printf_float+0x2f0>)
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	f43f af19 	beq.w	8006dda <_printf_float+0xc2>
 8006fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d102      	bne.n	8006fb6 <_printf_float+0x29e>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	07d9      	lsls	r1, r3, #31
 8006fb4:	d5d8      	bpl.n	8006f68 <_printf_float+0x250>
 8006fb6:	ee18 3a10 	vmov	r3, s16
 8006fba:	4652      	mov	r2, sl
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f af09 	beq.w	8006dda <_printf_float+0xc2>
 8006fc8:	f04f 0900 	mov.w	r9, #0
 8006fcc:	f104 0a1a 	add.w	sl, r4, #26
 8006fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd2:	425b      	negs	r3, r3
 8006fd4:	454b      	cmp	r3, r9
 8006fd6:	dc01      	bgt.n	8006fdc <_printf_float+0x2c4>
 8006fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fda:	e792      	b.n	8006f02 <_printf_float+0x1ea>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4652      	mov	r2, sl
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	f43f aef7 	beq.w	8006dda <_printf_float+0xc2>
 8006fec:	f109 0901 	add.w	r9, r9, #1
 8006ff0:	e7ee      	b.n	8006fd0 <_printf_float+0x2b8>
 8006ff2:	bf00      	nop
 8006ff4:	7fefffff 	.word	0x7fefffff
 8006ff8:	08009fdc 	.word	0x08009fdc
 8006ffc:	08009fe0 	.word	0x08009fe0
 8007000:	08009fe8 	.word	0x08009fe8
 8007004:	08009fe4 	.word	0x08009fe4
 8007008:	08009fec 	.word	0x08009fec
 800700c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800700e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007010:	429a      	cmp	r2, r3
 8007012:	bfa8      	it	ge
 8007014:	461a      	movge	r2, r3
 8007016:	2a00      	cmp	r2, #0
 8007018:	4691      	mov	r9, r2
 800701a:	dc37      	bgt.n	800708c <_printf_float+0x374>
 800701c:	f04f 0b00 	mov.w	fp, #0
 8007020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007024:	f104 021a 	add.w	r2, r4, #26
 8007028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800702a:	9305      	str	r3, [sp, #20]
 800702c:	eba3 0309 	sub.w	r3, r3, r9
 8007030:	455b      	cmp	r3, fp
 8007032:	dc33      	bgt.n	800709c <_printf_float+0x384>
 8007034:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007038:	429a      	cmp	r2, r3
 800703a:	db3b      	blt.n	80070b4 <_printf_float+0x39c>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	07da      	lsls	r2, r3, #31
 8007040:	d438      	bmi.n	80070b4 <_printf_float+0x39c>
 8007042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007044:	9b05      	ldr	r3, [sp, #20]
 8007046:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	eba2 0901 	sub.w	r9, r2, r1
 800704e:	4599      	cmp	r9, r3
 8007050:	bfa8      	it	ge
 8007052:	4699      	movge	r9, r3
 8007054:	f1b9 0f00 	cmp.w	r9, #0
 8007058:	dc35      	bgt.n	80070c6 <_printf_float+0x3ae>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007062:	f104 0a1a 	add.w	sl, r4, #26
 8007066:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	eba3 0309 	sub.w	r3, r3, r9
 8007070:	4543      	cmp	r3, r8
 8007072:	f77f af79 	ble.w	8006f68 <_printf_float+0x250>
 8007076:	2301      	movs	r3, #1
 8007078:	4652      	mov	r2, sl
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f aeaa 	beq.w	8006dda <_printf_float+0xc2>
 8007086:	f108 0801 	add.w	r8, r8, #1
 800708a:	e7ec      	b.n	8007066 <_printf_float+0x34e>
 800708c:	4613      	mov	r3, r2
 800708e:	4631      	mov	r1, r6
 8007090:	4642      	mov	r2, r8
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c0      	bne.n	800701c <_printf_float+0x304>
 800709a:	e69e      	b.n	8006dda <_printf_float+0xc2>
 800709c:	2301      	movs	r3, #1
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	9205      	str	r2, [sp, #20]
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f ae97 	beq.w	8006dda <_printf_float+0xc2>
 80070ac:	9a05      	ldr	r2, [sp, #20]
 80070ae:	f10b 0b01 	add.w	fp, fp, #1
 80070b2:	e7b9      	b.n	8007028 <_printf_float+0x310>
 80070b4:	ee18 3a10 	vmov	r3, s16
 80070b8:	4652      	mov	r2, sl
 80070ba:	4631      	mov	r1, r6
 80070bc:	4628      	mov	r0, r5
 80070be:	47b8      	blx	r7
 80070c0:	3001      	adds	r0, #1
 80070c2:	d1be      	bne.n	8007042 <_printf_float+0x32a>
 80070c4:	e689      	b.n	8006dda <_printf_float+0xc2>
 80070c6:	9a05      	ldr	r2, [sp, #20]
 80070c8:	464b      	mov	r3, r9
 80070ca:	4442      	add	r2, r8
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	d1c1      	bne.n	800705a <_printf_float+0x342>
 80070d6:	e680      	b.n	8006dda <_printf_float+0xc2>
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070da:	2a01      	cmp	r2, #1
 80070dc:	dc01      	bgt.n	80070e2 <_printf_float+0x3ca>
 80070de:	07db      	lsls	r3, r3, #31
 80070e0:	d538      	bpl.n	8007154 <_printf_float+0x43c>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4642      	mov	r2, r8
 80070e6:	4631      	mov	r1, r6
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b8      	blx	r7
 80070ec:	3001      	adds	r0, #1
 80070ee:	f43f ae74 	beq.w	8006dda <_printf_float+0xc2>
 80070f2:	ee18 3a10 	vmov	r3, s16
 80070f6:	4652      	mov	r2, sl
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f ae6b 	beq.w	8006dda <_printf_float+0xc2>
 8007104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007108:	2200      	movs	r2, #0
 800710a:	2300      	movs	r3, #0
 800710c:	f7f9 fcfc 	bl	8000b08 <__aeabi_dcmpeq>
 8007110:	b9d8      	cbnz	r0, 800714a <_printf_float+0x432>
 8007112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007114:	f108 0201 	add.w	r2, r8, #1
 8007118:	3b01      	subs	r3, #1
 800711a:	4631      	mov	r1, r6
 800711c:	4628      	mov	r0, r5
 800711e:	47b8      	blx	r7
 8007120:	3001      	adds	r0, #1
 8007122:	d10e      	bne.n	8007142 <_printf_float+0x42a>
 8007124:	e659      	b.n	8006dda <_printf_float+0xc2>
 8007126:	2301      	movs	r3, #1
 8007128:	4652      	mov	r2, sl
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f ae52 	beq.w	8006dda <_printf_float+0xc2>
 8007136:	f108 0801 	add.w	r8, r8, #1
 800713a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713c:	3b01      	subs	r3, #1
 800713e:	4543      	cmp	r3, r8
 8007140:	dcf1      	bgt.n	8007126 <_printf_float+0x40e>
 8007142:	464b      	mov	r3, r9
 8007144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007148:	e6dc      	b.n	8006f04 <_printf_float+0x1ec>
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	f104 0a1a 	add.w	sl, r4, #26
 8007152:	e7f2      	b.n	800713a <_printf_float+0x422>
 8007154:	2301      	movs	r3, #1
 8007156:	4642      	mov	r2, r8
 8007158:	e7df      	b.n	800711a <_printf_float+0x402>
 800715a:	2301      	movs	r3, #1
 800715c:	464a      	mov	r2, r9
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f ae38 	beq.w	8006dda <_printf_float+0xc2>
 800716a:	f108 0801 	add.w	r8, r8, #1
 800716e:	68e3      	ldr	r3, [r4, #12]
 8007170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007172:	1a5b      	subs	r3, r3, r1
 8007174:	4543      	cmp	r3, r8
 8007176:	dcf0      	bgt.n	800715a <_printf_float+0x442>
 8007178:	e6fa      	b.n	8006f70 <_printf_float+0x258>
 800717a:	f04f 0800 	mov.w	r8, #0
 800717e:	f104 0919 	add.w	r9, r4, #25
 8007182:	e7f4      	b.n	800716e <_printf_float+0x456>

08007184 <_printf_common>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	4616      	mov	r6, r2
 800718a:	4699      	mov	r9, r3
 800718c:	688a      	ldr	r2, [r1, #8]
 800718e:	690b      	ldr	r3, [r1, #16]
 8007190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007194:	4293      	cmp	r3, r2
 8007196:	bfb8      	it	lt
 8007198:	4613      	movlt	r3, r2
 800719a:	6033      	str	r3, [r6, #0]
 800719c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071a0:	4607      	mov	r7, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	b10a      	cbz	r2, 80071aa <_printf_common+0x26>
 80071a6:	3301      	adds	r3, #1
 80071a8:	6033      	str	r3, [r6, #0]
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	0699      	lsls	r1, r3, #26
 80071ae:	bf42      	ittt	mi
 80071b0:	6833      	ldrmi	r3, [r6, #0]
 80071b2:	3302      	addmi	r3, #2
 80071b4:	6033      	strmi	r3, [r6, #0]
 80071b6:	6825      	ldr	r5, [r4, #0]
 80071b8:	f015 0506 	ands.w	r5, r5, #6
 80071bc:	d106      	bne.n	80071cc <_printf_common+0x48>
 80071be:	f104 0a19 	add.w	sl, r4, #25
 80071c2:	68e3      	ldr	r3, [r4, #12]
 80071c4:	6832      	ldr	r2, [r6, #0]
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	42ab      	cmp	r3, r5
 80071ca:	dc26      	bgt.n	800721a <_printf_common+0x96>
 80071cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071d0:	1e13      	subs	r3, r2, #0
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	bf18      	it	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	0692      	lsls	r2, r2, #26
 80071da:	d42b      	bmi.n	8007234 <_printf_common+0xb0>
 80071dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e0:	4649      	mov	r1, r9
 80071e2:	4638      	mov	r0, r7
 80071e4:	47c0      	blx	r8
 80071e6:	3001      	adds	r0, #1
 80071e8:	d01e      	beq.n	8007228 <_printf_common+0xa4>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	68e5      	ldr	r5, [r4, #12]
 80071ee:	6832      	ldr	r2, [r6, #0]
 80071f0:	f003 0306 	and.w	r3, r3, #6
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	bf08      	it	eq
 80071f8:	1aad      	subeq	r5, r5, r2
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	6922      	ldr	r2, [r4, #16]
 80071fe:	bf0c      	ite	eq
 8007200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007204:	2500      	movne	r5, #0
 8007206:	4293      	cmp	r3, r2
 8007208:	bfc4      	itt	gt
 800720a:	1a9b      	subgt	r3, r3, r2
 800720c:	18ed      	addgt	r5, r5, r3
 800720e:	2600      	movs	r6, #0
 8007210:	341a      	adds	r4, #26
 8007212:	42b5      	cmp	r5, r6
 8007214:	d11a      	bne.n	800724c <_printf_common+0xc8>
 8007216:	2000      	movs	r0, #0
 8007218:	e008      	b.n	800722c <_printf_common+0xa8>
 800721a:	2301      	movs	r3, #1
 800721c:	4652      	mov	r2, sl
 800721e:	4649      	mov	r1, r9
 8007220:	4638      	mov	r0, r7
 8007222:	47c0      	blx	r8
 8007224:	3001      	adds	r0, #1
 8007226:	d103      	bne.n	8007230 <_printf_common+0xac>
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	3501      	adds	r5, #1
 8007232:	e7c6      	b.n	80071c2 <_printf_common+0x3e>
 8007234:	18e1      	adds	r1, r4, r3
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	2030      	movs	r0, #48	; 0x30
 800723a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800723e:	4422      	add	r2, r4
 8007240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007248:	3302      	adds	r3, #2
 800724a:	e7c7      	b.n	80071dc <_printf_common+0x58>
 800724c:	2301      	movs	r3, #1
 800724e:	4622      	mov	r2, r4
 8007250:	4649      	mov	r1, r9
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d0e6      	beq.n	8007228 <_printf_common+0xa4>
 800725a:	3601      	adds	r6, #1
 800725c:	e7d9      	b.n	8007212 <_printf_common+0x8e>
	...

08007260 <_printf_i>:
 8007260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	460c      	mov	r4, r1
 8007266:	4691      	mov	r9, r2
 8007268:	7e27      	ldrb	r7, [r4, #24]
 800726a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800726c:	2f78      	cmp	r7, #120	; 0x78
 800726e:	4680      	mov	r8, r0
 8007270:	469a      	mov	sl, r3
 8007272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007276:	d807      	bhi.n	8007288 <_printf_i+0x28>
 8007278:	2f62      	cmp	r7, #98	; 0x62
 800727a:	d80a      	bhi.n	8007292 <_printf_i+0x32>
 800727c:	2f00      	cmp	r7, #0
 800727e:	f000 80d8 	beq.w	8007432 <_printf_i+0x1d2>
 8007282:	2f58      	cmp	r7, #88	; 0x58
 8007284:	f000 80a3 	beq.w	80073ce <_printf_i+0x16e>
 8007288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800728c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007290:	e03a      	b.n	8007308 <_printf_i+0xa8>
 8007292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007296:	2b15      	cmp	r3, #21
 8007298:	d8f6      	bhi.n	8007288 <_printf_i+0x28>
 800729a:	a001      	add	r0, pc, #4	; (adr r0, 80072a0 <_printf_i+0x40>)
 800729c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072a0:	080072f9 	.word	0x080072f9
 80072a4:	0800730d 	.word	0x0800730d
 80072a8:	08007289 	.word	0x08007289
 80072ac:	08007289 	.word	0x08007289
 80072b0:	08007289 	.word	0x08007289
 80072b4:	08007289 	.word	0x08007289
 80072b8:	0800730d 	.word	0x0800730d
 80072bc:	08007289 	.word	0x08007289
 80072c0:	08007289 	.word	0x08007289
 80072c4:	08007289 	.word	0x08007289
 80072c8:	08007289 	.word	0x08007289
 80072cc:	08007419 	.word	0x08007419
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	080073fb 	.word	0x080073fb
 80072d8:	08007289 	.word	0x08007289
 80072dc:	08007289 	.word	0x08007289
 80072e0:	0800743b 	.word	0x0800743b
 80072e4:	08007289 	.word	0x08007289
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	08007289 	.word	0x08007289
 80072f0:	08007289 	.word	0x08007289
 80072f4:	08007403 	.word	0x08007403
 80072f8:	680b      	ldr	r3, [r1, #0]
 80072fa:	1d1a      	adds	r2, r3, #4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	600a      	str	r2, [r1, #0]
 8007300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007308:	2301      	movs	r3, #1
 800730a:	e0a3      	b.n	8007454 <_printf_i+0x1f4>
 800730c:	6825      	ldr	r5, [r4, #0]
 800730e:	6808      	ldr	r0, [r1, #0]
 8007310:	062e      	lsls	r6, r5, #24
 8007312:	f100 0304 	add.w	r3, r0, #4
 8007316:	d50a      	bpl.n	800732e <_printf_i+0xce>
 8007318:	6805      	ldr	r5, [r0, #0]
 800731a:	600b      	str	r3, [r1, #0]
 800731c:	2d00      	cmp	r5, #0
 800731e:	da03      	bge.n	8007328 <_printf_i+0xc8>
 8007320:	232d      	movs	r3, #45	; 0x2d
 8007322:	426d      	negs	r5, r5
 8007324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007328:	485e      	ldr	r0, [pc, #376]	; (80074a4 <_printf_i+0x244>)
 800732a:	230a      	movs	r3, #10
 800732c:	e019      	b.n	8007362 <_printf_i+0x102>
 800732e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007332:	6805      	ldr	r5, [r0, #0]
 8007334:	600b      	str	r3, [r1, #0]
 8007336:	bf18      	it	ne
 8007338:	b22d      	sxthne	r5, r5
 800733a:	e7ef      	b.n	800731c <_printf_i+0xbc>
 800733c:	680b      	ldr	r3, [r1, #0]
 800733e:	6825      	ldr	r5, [r4, #0]
 8007340:	1d18      	adds	r0, r3, #4
 8007342:	6008      	str	r0, [r1, #0]
 8007344:	0628      	lsls	r0, r5, #24
 8007346:	d501      	bpl.n	800734c <_printf_i+0xec>
 8007348:	681d      	ldr	r5, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0xf2>
 800734c:	0669      	lsls	r1, r5, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0xe8>
 8007350:	881d      	ldrh	r5, [r3, #0]
 8007352:	4854      	ldr	r0, [pc, #336]	; (80074a4 <_printf_i+0x244>)
 8007354:	2f6f      	cmp	r7, #111	; 0x6f
 8007356:	bf0c      	ite	eq
 8007358:	2308      	moveq	r3, #8
 800735a:	230a      	movne	r3, #10
 800735c:	2100      	movs	r1, #0
 800735e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007362:	6866      	ldr	r6, [r4, #4]
 8007364:	60a6      	str	r6, [r4, #8]
 8007366:	2e00      	cmp	r6, #0
 8007368:	bfa2      	ittt	ge
 800736a:	6821      	ldrge	r1, [r4, #0]
 800736c:	f021 0104 	bicge.w	r1, r1, #4
 8007370:	6021      	strge	r1, [r4, #0]
 8007372:	b90d      	cbnz	r5, 8007378 <_printf_i+0x118>
 8007374:	2e00      	cmp	r6, #0
 8007376:	d04d      	beq.n	8007414 <_printf_i+0x1b4>
 8007378:	4616      	mov	r6, r2
 800737a:	fbb5 f1f3 	udiv	r1, r5, r3
 800737e:	fb03 5711 	mls	r7, r3, r1, r5
 8007382:	5dc7      	ldrb	r7, [r0, r7]
 8007384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007388:	462f      	mov	r7, r5
 800738a:	42bb      	cmp	r3, r7
 800738c:	460d      	mov	r5, r1
 800738e:	d9f4      	bls.n	800737a <_printf_i+0x11a>
 8007390:	2b08      	cmp	r3, #8
 8007392:	d10b      	bne.n	80073ac <_printf_i+0x14c>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	07df      	lsls	r7, r3, #31
 8007398:	d508      	bpl.n	80073ac <_printf_i+0x14c>
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	6861      	ldr	r1, [r4, #4]
 800739e:	4299      	cmp	r1, r3
 80073a0:	bfde      	ittt	le
 80073a2:	2330      	movle	r3, #48	; 0x30
 80073a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073ac:	1b92      	subs	r2, r2, r6
 80073ae:	6122      	str	r2, [r4, #16]
 80073b0:	f8cd a000 	str.w	sl, [sp]
 80073b4:	464b      	mov	r3, r9
 80073b6:	aa03      	add	r2, sp, #12
 80073b8:	4621      	mov	r1, r4
 80073ba:	4640      	mov	r0, r8
 80073bc:	f7ff fee2 	bl	8007184 <_printf_common>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d14c      	bne.n	800745e <_printf_i+0x1fe>
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	b004      	add	sp, #16
 80073ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ce:	4835      	ldr	r0, [pc, #212]	; (80074a4 <_printf_i+0x244>)
 80073d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	680e      	ldr	r6, [r1, #0]
 80073d8:	061f      	lsls	r7, r3, #24
 80073da:	f856 5b04 	ldr.w	r5, [r6], #4
 80073de:	600e      	str	r6, [r1, #0]
 80073e0:	d514      	bpl.n	800740c <_printf_i+0x1ac>
 80073e2:	07d9      	lsls	r1, r3, #31
 80073e4:	bf44      	itt	mi
 80073e6:	f043 0320 	orrmi.w	r3, r3, #32
 80073ea:	6023      	strmi	r3, [r4, #0]
 80073ec:	b91d      	cbnz	r5, 80073f6 <_printf_i+0x196>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	f023 0320 	bic.w	r3, r3, #32
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	2310      	movs	r3, #16
 80073f8:	e7b0      	b.n	800735c <_printf_i+0xfc>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	f043 0320 	orr.w	r3, r3, #32
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	2378      	movs	r3, #120	; 0x78
 8007404:	4828      	ldr	r0, [pc, #160]	; (80074a8 <_printf_i+0x248>)
 8007406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800740a:	e7e3      	b.n	80073d4 <_printf_i+0x174>
 800740c:	065e      	lsls	r6, r3, #25
 800740e:	bf48      	it	mi
 8007410:	b2ad      	uxthmi	r5, r5
 8007412:	e7e6      	b.n	80073e2 <_printf_i+0x182>
 8007414:	4616      	mov	r6, r2
 8007416:	e7bb      	b.n	8007390 <_printf_i+0x130>
 8007418:	680b      	ldr	r3, [r1, #0]
 800741a:	6826      	ldr	r6, [r4, #0]
 800741c:	6960      	ldr	r0, [r4, #20]
 800741e:	1d1d      	adds	r5, r3, #4
 8007420:	600d      	str	r5, [r1, #0]
 8007422:	0635      	lsls	r5, r6, #24
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	d501      	bpl.n	800742c <_printf_i+0x1cc>
 8007428:	6018      	str	r0, [r3, #0]
 800742a:	e002      	b.n	8007432 <_printf_i+0x1d2>
 800742c:	0671      	lsls	r1, r6, #25
 800742e:	d5fb      	bpl.n	8007428 <_printf_i+0x1c8>
 8007430:	8018      	strh	r0, [r3, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	4616      	mov	r6, r2
 8007438:	e7ba      	b.n	80073b0 <_printf_i+0x150>
 800743a:	680b      	ldr	r3, [r1, #0]
 800743c:	1d1a      	adds	r2, r3, #4
 800743e:	600a      	str	r2, [r1, #0]
 8007440:	681e      	ldr	r6, [r3, #0]
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	2100      	movs	r1, #0
 8007446:	4630      	mov	r0, r6
 8007448:	f7f8 feea 	bl	8000220 <memchr>
 800744c:	b108      	cbz	r0, 8007452 <_printf_i+0x1f2>
 800744e:	1b80      	subs	r0, r0, r6
 8007450:	6060      	str	r0, [r4, #4]
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	6123      	str	r3, [r4, #16]
 8007456:	2300      	movs	r3, #0
 8007458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800745c:	e7a8      	b.n	80073b0 <_printf_i+0x150>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	4632      	mov	r2, r6
 8007462:	4649      	mov	r1, r9
 8007464:	4640      	mov	r0, r8
 8007466:	47d0      	blx	sl
 8007468:	3001      	adds	r0, #1
 800746a:	d0ab      	beq.n	80073c4 <_printf_i+0x164>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	079b      	lsls	r3, r3, #30
 8007470:	d413      	bmi.n	800749a <_printf_i+0x23a>
 8007472:	68e0      	ldr	r0, [r4, #12]
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	4298      	cmp	r0, r3
 8007478:	bfb8      	it	lt
 800747a:	4618      	movlt	r0, r3
 800747c:	e7a4      	b.n	80073c8 <_printf_i+0x168>
 800747e:	2301      	movs	r3, #1
 8007480:	4632      	mov	r2, r6
 8007482:	4649      	mov	r1, r9
 8007484:	4640      	mov	r0, r8
 8007486:	47d0      	blx	sl
 8007488:	3001      	adds	r0, #1
 800748a:	d09b      	beq.n	80073c4 <_printf_i+0x164>
 800748c:	3501      	adds	r5, #1
 800748e:	68e3      	ldr	r3, [r4, #12]
 8007490:	9903      	ldr	r1, [sp, #12]
 8007492:	1a5b      	subs	r3, r3, r1
 8007494:	42ab      	cmp	r3, r5
 8007496:	dcf2      	bgt.n	800747e <_printf_i+0x21e>
 8007498:	e7eb      	b.n	8007472 <_printf_i+0x212>
 800749a:	2500      	movs	r5, #0
 800749c:	f104 0619 	add.w	r6, r4, #25
 80074a0:	e7f5      	b.n	800748e <_printf_i+0x22e>
 80074a2:	bf00      	nop
 80074a4:	08009fee 	.word	0x08009fee
 80074a8:	08009fff 	.word	0x08009fff

080074ac <setbuf>:
 80074ac:	2900      	cmp	r1, #0
 80074ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074b2:	bf0c      	ite	eq
 80074b4:	2202      	moveq	r2, #2
 80074b6:	2200      	movne	r2, #0
 80074b8:	f000 b800 	b.w	80074bc <setvbuf>

080074bc <setvbuf>:
 80074bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074c0:	461d      	mov	r5, r3
 80074c2:	4b5d      	ldr	r3, [pc, #372]	; (8007638 <setvbuf+0x17c>)
 80074c4:	681f      	ldr	r7, [r3, #0]
 80074c6:	4604      	mov	r4, r0
 80074c8:	460e      	mov	r6, r1
 80074ca:	4690      	mov	r8, r2
 80074cc:	b127      	cbz	r7, 80074d8 <setvbuf+0x1c>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	b913      	cbnz	r3, 80074d8 <setvbuf+0x1c>
 80074d2:	4638      	mov	r0, r7
 80074d4:	f001 f84a 	bl	800856c <__sinit>
 80074d8:	4b58      	ldr	r3, [pc, #352]	; (800763c <setvbuf+0x180>)
 80074da:	429c      	cmp	r4, r3
 80074dc:	d167      	bne.n	80075ae <setvbuf+0xf2>
 80074de:	687c      	ldr	r4, [r7, #4]
 80074e0:	f1b8 0f02 	cmp.w	r8, #2
 80074e4:	d006      	beq.n	80074f4 <setvbuf+0x38>
 80074e6:	f1b8 0f01 	cmp.w	r8, #1
 80074ea:	f200 809f 	bhi.w	800762c <setvbuf+0x170>
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	f2c0 809c 	blt.w	800762c <setvbuf+0x170>
 80074f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074f6:	07db      	lsls	r3, r3, #31
 80074f8:	d405      	bmi.n	8007506 <setvbuf+0x4a>
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	0598      	lsls	r0, r3, #22
 80074fe:	d402      	bmi.n	8007506 <setvbuf+0x4a>
 8007500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007502:	f001 f8d6 	bl	80086b2 <__retarget_lock_acquire_recursive>
 8007506:	4621      	mov	r1, r4
 8007508:	4638      	mov	r0, r7
 800750a:	f000 ff9b 	bl	8008444 <_fflush_r>
 800750e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007510:	b141      	cbz	r1, 8007524 <setvbuf+0x68>
 8007512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007516:	4299      	cmp	r1, r3
 8007518:	d002      	beq.n	8007520 <setvbuf+0x64>
 800751a:	4638      	mov	r0, r7
 800751c:	f001 fcd4 	bl	8008ec8 <_free_r>
 8007520:	2300      	movs	r3, #0
 8007522:	6363      	str	r3, [r4, #52]	; 0x34
 8007524:	2300      	movs	r3, #0
 8007526:	61a3      	str	r3, [r4, #24]
 8007528:	6063      	str	r3, [r4, #4]
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	0619      	lsls	r1, r3, #24
 800752e:	d503      	bpl.n	8007538 <setvbuf+0x7c>
 8007530:	6921      	ldr	r1, [r4, #16]
 8007532:	4638      	mov	r0, r7
 8007534:	f001 fcc8 	bl	8008ec8 <_free_r>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	f1b8 0f02 	cmp.w	r8, #2
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	d06c      	beq.n	8007624 <setvbuf+0x168>
 800754a:	ab01      	add	r3, sp, #4
 800754c:	466a      	mov	r2, sp
 800754e:	4621      	mov	r1, r4
 8007550:	4638      	mov	r0, r7
 8007552:	f001 f8b0 	bl	80086b6 <__swhatbuf_r>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	4318      	orrs	r0, r3
 800755a:	81a0      	strh	r0, [r4, #12]
 800755c:	2d00      	cmp	r5, #0
 800755e:	d130      	bne.n	80075c2 <setvbuf+0x106>
 8007560:	9d00      	ldr	r5, [sp, #0]
 8007562:	4628      	mov	r0, r5
 8007564:	f001 f90c 	bl	8008780 <malloc>
 8007568:	4606      	mov	r6, r0
 800756a:	2800      	cmp	r0, #0
 800756c:	d155      	bne.n	800761a <setvbuf+0x15e>
 800756e:	f8dd 9000 	ldr.w	r9, [sp]
 8007572:	45a9      	cmp	r9, r5
 8007574:	d14a      	bne.n	800760c <setvbuf+0x150>
 8007576:	f04f 35ff 	mov.w	r5, #4294967295
 800757a:	2200      	movs	r2, #0
 800757c:	60a2      	str	r2, [r4, #8]
 800757e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007582:	6022      	str	r2, [r4, #0]
 8007584:	6122      	str	r2, [r4, #16]
 8007586:	2201      	movs	r2, #1
 8007588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758c:	6162      	str	r2, [r4, #20]
 800758e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007590:	f043 0302 	orr.w	r3, r3, #2
 8007594:	07d2      	lsls	r2, r2, #31
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	d405      	bmi.n	80075a6 <setvbuf+0xea>
 800759a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800759e:	d102      	bne.n	80075a6 <setvbuf+0xea>
 80075a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075a2:	f001 f887 	bl	80086b4 <__retarget_lock_release_recursive>
 80075a6:	4628      	mov	r0, r5
 80075a8:	b003      	add	sp, #12
 80075aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <setvbuf+0x184>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d101      	bne.n	80075b8 <setvbuf+0xfc>
 80075b4:	68bc      	ldr	r4, [r7, #8]
 80075b6:	e793      	b.n	80074e0 <setvbuf+0x24>
 80075b8:	4b22      	ldr	r3, [pc, #136]	; (8007644 <setvbuf+0x188>)
 80075ba:	429c      	cmp	r4, r3
 80075bc:	bf08      	it	eq
 80075be:	68fc      	ldreq	r4, [r7, #12]
 80075c0:	e78e      	b.n	80074e0 <setvbuf+0x24>
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d0cd      	beq.n	8007562 <setvbuf+0xa6>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	b913      	cbnz	r3, 80075d0 <setvbuf+0x114>
 80075ca:	4638      	mov	r0, r7
 80075cc:	f000 ffce 	bl	800856c <__sinit>
 80075d0:	f1b8 0f01 	cmp.w	r8, #1
 80075d4:	bf08      	it	eq
 80075d6:	89a3      	ldrheq	r3, [r4, #12]
 80075d8:	6026      	str	r6, [r4, #0]
 80075da:	bf04      	itt	eq
 80075dc:	f043 0301 	orreq.w	r3, r3, #1
 80075e0:	81a3      	strheq	r3, [r4, #12]
 80075e2:	89a2      	ldrh	r2, [r4, #12]
 80075e4:	f012 0308 	ands.w	r3, r2, #8
 80075e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80075ec:	d01c      	beq.n	8007628 <setvbuf+0x16c>
 80075ee:	07d3      	lsls	r3, r2, #31
 80075f0:	bf41      	itttt	mi
 80075f2:	2300      	movmi	r3, #0
 80075f4:	426d      	negmi	r5, r5
 80075f6:	60a3      	strmi	r3, [r4, #8]
 80075f8:	61a5      	strmi	r5, [r4, #24]
 80075fa:	bf58      	it	pl
 80075fc:	60a5      	strpl	r5, [r4, #8]
 80075fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007600:	f015 0501 	ands.w	r5, r5, #1
 8007604:	d115      	bne.n	8007632 <setvbuf+0x176>
 8007606:	f412 7f00 	tst.w	r2, #512	; 0x200
 800760a:	e7c8      	b.n	800759e <setvbuf+0xe2>
 800760c:	4648      	mov	r0, r9
 800760e:	f001 f8b7 	bl	8008780 <malloc>
 8007612:	4606      	mov	r6, r0
 8007614:	2800      	cmp	r0, #0
 8007616:	d0ae      	beq.n	8007576 <setvbuf+0xba>
 8007618:	464d      	mov	r5, r9
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	e7d0      	b.n	80075c6 <setvbuf+0x10a>
 8007624:	2500      	movs	r5, #0
 8007626:	e7a8      	b.n	800757a <setvbuf+0xbe>
 8007628:	60a3      	str	r3, [r4, #8]
 800762a:	e7e8      	b.n	80075fe <setvbuf+0x142>
 800762c:	f04f 35ff 	mov.w	r5, #4294967295
 8007630:	e7b9      	b.n	80075a6 <setvbuf+0xea>
 8007632:	2500      	movs	r5, #0
 8007634:	e7b7      	b.n	80075a6 <setvbuf+0xea>
 8007636:	bf00      	nop
 8007638:	2000000c 	.word	0x2000000c
 800763c:	0800a0c4 	.word	0x0800a0c4
 8007640:	0800a0e4 	.word	0x0800a0e4
 8007644:	0800a0a4 	.word	0x0800a0a4

08007648 <quorem>:
 8007648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	6903      	ldr	r3, [r0, #16]
 800764e:	690c      	ldr	r4, [r1, #16]
 8007650:	42a3      	cmp	r3, r4
 8007652:	4607      	mov	r7, r0
 8007654:	f2c0 8081 	blt.w	800775a <quorem+0x112>
 8007658:	3c01      	subs	r4, #1
 800765a:	f101 0814 	add.w	r8, r1, #20
 800765e:	f100 0514 	add.w	r5, r0, #20
 8007662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800766c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007670:	3301      	adds	r3, #1
 8007672:	429a      	cmp	r2, r3
 8007674:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007678:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800767c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007680:	d331      	bcc.n	80076e6 <quorem+0x9e>
 8007682:	f04f 0e00 	mov.w	lr, #0
 8007686:	4640      	mov	r0, r8
 8007688:	46ac      	mov	ip, r5
 800768a:	46f2      	mov	sl, lr
 800768c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007690:	b293      	uxth	r3, r2
 8007692:	fb06 e303 	mla	r3, r6, r3, lr
 8007696:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800769a:	b29b      	uxth	r3, r3
 800769c:	ebaa 0303 	sub.w	r3, sl, r3
 80076a0:	0c12      	lsrs	r2, r2, #16
 80076a2:	f8dc a000 	ldr.w	sl, [ip]
 80076a6:	fb06 e202 	mla	r2, r6, r2, lr
 80076aa:	fa13 f38a 	uxtah	r3, r3, sl
 80076ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076b2:	fa1f fa82 	uxth.w	sl, r2
 80076b6:	f8dc 2000 	ldr.w	r2, [ip]
 80076ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80076be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c8:	4581      	cmp	r9, r0
 80076ca:	f84c 3b04 	str.w	r3, [ip], #4
 80076ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076d2:	d2db      	bcs.n	800768c <quorem+0x44>
 80076d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80076d8:	b92b      	cbnz	r3, 80076e6 <quorem+0x9e>
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	3b04      	subs	r3, #4
 80076de:	429d      	cmp	r5, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	d32e      	bcc.n	8007742 <quorem+0xfa>
 80076e4:	613c      	str	r4, [r7, #16]
 80076e6:	4638      	mov	r0, r7
 80076e8:	f001 fade 	bl	8008ca8 <__mcmp>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	db24      	blt.n	800773a <quorem+0xf2>
 80076f0:	3601      	adds	r6, #1
 80076f2:	4628      	mov	r0, r5
 80076f4:	f04f 0c00 	mov.w	ip, #0
 80076f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80076fc:	f8d0 e000 	ldr.w	lr, [r0]
 8007700:	b293      	uxth	r3, r2
 8007702:	ebac 0303 	sub.w	r3, ip, r3
 8007706:	0c12      	lsrs	r2, r2, #16
 8007708:	fa13 f38e 	uxtah	r3, r3, lr
 800770c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007714:	b29b      	uxth	r3, r3
 8007716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800771a:	45c1      	cmp	r9, r8
 800771c:	f840 3b04 	str.w	r3, [r0], #4
 8007720:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007724:	d2e8      	bcs.n	80076f8 <quorem+0xb0>
 8007726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800772a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800772e:	b922      	cbnz	r2, 800773a <quorem+0xf2>
 8007730:	3b04      	subs	r3, #4
 8007732:	429d      	cmp	r5, r3
 8007734:	461a      	mov	r2, r3
 8007736:	d30a      	bcc.n	800774e <quorem+0x106>
 8007738:	613c      	str	r4, [r7, #16]
 800773a:	4630      	mov	r0, r6
 800773c:	b003      	add	sp, #12
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	3b04      	subs	r3, #4
 8007746:	2a00      	cmp	r2, #0
 8007748:	d1cc      	bne.n	80076e4 <quorem+0x9c>
 800774a:	3c01      	subs	r4, #1
 800774c:	e7c7      	b.n	80076de <quorem+0x96>
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	3b04      	subs	r3, #4
 8007752:	2a00      	cmp	r2, #0
 8007754:	d1f0      	bne.n	8007738 <quorem+0xf0>
 8007756:	3c01      	subs	r4, #1
 8007758:	e7eb      	b.n	8007732 <quorem+0xea>
 800775a:	2000      	movs	r0, #0
 800775c:	e7ee      	b.n	800773c <quorem+0xf4>
	...

08007760 <_dtoa_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	ed2d 8b02 	vpush	{d8}
 8007768:	ec57 6b10 	vmov	r6, r7, d0
 800776c:	b095      	sub	sp, #84	; 0x54
 800776e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007774:	9105      	str	r1, [sp, #20]
 8007776:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800777a:	4604      	mov	r4, r0
 800777c:	9209      	str	r2, [sp, #36]	; 0x24
 800777e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007780:	b975      	cbnz	r5, 80077a0 <_dtoa_r+0x40>
 8007782:	2010      	movs	r0, #16
 8007784:	f000 fffc 	bl	8008780 <malloc>
 8007788:	4602      	mov	r2, r0
 800778a:	6260      	str	r0, [r4, #36]	; 0x24
 800778c:	b920      	cbnz	r0, 8007798 <_dtoa_r+0x38>
 800778e:	4bb2      	ldr	r3, [pc, #712]	; (8007a58 <_dtoa_r+0x2f8>)
 8007790:	21ea      	movs	r1, #234	; 0xea
 8007792:	48b2      	ldr	r0, [pc, #712]	; (8007a5c <_dtoa_r+0x2fc>)
 8007794:	f001 fca8 	bl	80090e8 <__assert_func>
 8007798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800779c:	6005      	str	r5, [r0, #0]
 800779e:	60c5      	str	r5, [r0, #12]
 80077a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	b151      	cbz	r1, 80077bc <_dtoa_r+0x5c>
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	604a      	str	r2, [r1, #4]
 80077aa:	2301      	movs	r3, #1
 80077ac:	4093      	lsls	r3, r2
 80077ae:	608b      	str	r3, [r1, #8]
 80077b0:	4620      	mov	r0, r4
 80077b2:	f001 f83b 	bl	800882c <_Bfree>
 80077b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	1e3b      	subs	r3, r7, #0
 80077be:	bfb9      	ittee	lt
 80077c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077c4:	9303      	strlt	r3, [sp, #12]
 80077c6:	2300      	movge	r3, #0
 80077c8:	f8c8 3000 	strge.w	r3, [r8]
 80077cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80077d0:	4ba3      	ldr	r3, [pc, #652]	; (8007a60 <_dtoa_r+0x300>)
 80077d2:	bfbc      	itt	lt
 80077d4:	2201      	movlt	r2, #1
 80077d6:	f8c8 2000 	strlt.w	r2, [r8]
 80077da:	ea33 0309 	bics.w	r3, r3, r9
 80077de:	d11b      	bne.n	8007818 <_dtoa_r+0xb8>
 80077e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ec:	4333      	orrs	r3, r6
 80077ee:	f000 857a 	beq.w	80082e6 <_dtoa_r+0xb86>
 80077f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f4:	b963      	cbnz	r3, 8007810 <_dtoa_r+0xb0>
 80077f6:	4b9b      	ldr	r3, [pc, #620]	; (8007a64 <_dtoa_r+0x304>)
 80077f8:	e024      	b.n	8007844 <_dtoa_r+0xe4>
 80077fa:	4b9b      	ldr	r3, [pc, #620]	; (8007a68 <_dtoa_r+0x308>)
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	9800      	ldr	r0, [sp, #0]
 8007806:	b015      	add	sp, #84	; 0x54
 8007808:	ecbd 8b02 	vpop	{d8}
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	4b94      	ldr	r3, [pc, #592]	; (8007a64 <_dtoa_r+0x304>)
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	3303      	adds	r3, #3
 8007816:	e7f3      	b.n	8007800 <_dtoa_r+0xa0>
 8007818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800781c:	2200      	movs	r2, #0
 800781e:	ec51 0b17 	vmov	r0, r1, d7
 8007822:	2300      	movs	r3, #0
 8007824:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007828:	f7f9 f96e 	bl	8000b08 <__aeabi_dcmpeq>
 800782c:	4680      	mov	r8, r0
 800782e:	b158      	cbz	r0, 8007848 <_dtoa_r+0xe8>
 8007830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007832:	2301      	movs	r3, #1
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8551 	beq.w	80082e0 <_dtoa_r+0xb80>
 800783e:	488b      	ldr	r0, [pc, #556]	; (8007a6c <_dtoa_r+0x30c>)
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	1e43      	subs	r3, r0, #1
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	e7dd      	b.n	8007804 <_dtoa_r+0xa4>
 8007848:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800784c:	aa12      	add	r2, sp, #72	; 0x48
 800784e:	a913      	add	r1, sp, #76	; 0x4c
 8007850:	4620      	mov	r0, r4
 8007852:	f001 facd 	bl	8008df0 <__d2b>
 8007856:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800785a:	4683      	mov	fp, r0
 800785c:	2d00      	cmp	r5, #0
 800785e:	d07c      	beq.n	800795a <_dtoa_r+0x1fa>
 8007860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007862:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800786e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800787a:	4b7d      	ldr	r3, [pc, #500]	; (8007a70 <_dtoa_r+0x310>)
 800787c:	2200      	movs	r2, #0
 800787e:	4630      	mov	r0, r6
 8007880:	4639      	mov	r1, r7
 8007882:	f7f8 fd21 	bl	80002c8 <__aeabi_dsub>
 8007886:	a36e      	add	r3, pc, #440	; (adr r3, 8007a40 <_dtoa_r+0x2e0>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f8 fed4 	bl	8000638 <__aeabi_dmul>
 8007890:	a36d      	add	r3, pc, #436	; (adr r3, 8007a48 <_dtoa_r+0x2e8>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f8 fd19 	bl	80002cc <__adddf3>
 800789a:	4606      	mov	r6, r0
 800789c:	4628      	mov	r0, r5
 800789e:	460f      	mov	r7, r1
 80078a0:	f7f8 fe60 	bl	8000564 <__aeabi_i2d>
 80078a4:	a36a      	add	r3, pc, #424	; (adr r3, 8007a50 <_dtoa_r+0x2f0>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fec5 	bl	8000638 <__aeabi_dmul>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	f7f8 fd09 	bl	80002cc <__adddf3>
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	f7f9 f96b 	bl	8000b98 <__aeabi_d2iz>
 80078c2:	2200      	movs	r2, #0
 80078c4:	4682      	mov	sl, r0
 80078c6:	2300      	movs	r3, #0
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f9 f926 	bl	8000b1c <__aeabi_dcmplt>
 80078d0:	b148      	cbz	r0, 80078e6 <_dtoa_r+0x186>
 80078d2:	4650      	mov	r0, sl
 80078d4:	f7f8 fe46 	bl	8000564 <__aeabi_i2d>
 80078d8:	4632      	mov	r2, r6
 80078da:	463b      	mov	r3, r7
 80078dc:	f7f9 f914 	bl	8000b08 <__aeabi_dcmpeq>
 80078e0:	b908      	cbnz	r0, 80078e6 <_dtoa_r+0x186>
 80078e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078e6:	f1ba 0f16 	cmp.w	sl, #22
 80078ea:	d854      	bhi.n	8007996 <_dtoa_r+0x236>
 80078ec:	4b61      	ldr	r3, [pc, #388]	; (8007a74 <_dtoa_r+0x314>)
 80078ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078fa:	f7f9 f90f 	bl	8000b1c <__aeabi_dcmplt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d04b      	beq.n	800799a <_dtoa_r+0x23a>
 8007902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007906:	2300      	movs	r3, #0
 8007908:	930e      	str	r3, [sp, #56]	; 0x38
 800790a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800790c:	1b5d      	subs	r5, r3, r5
 800790e:	1e6b      	subs	r3, r5, #1
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	bf43      	ittte	mi
 8007914:	2300      	movmi	r3, #0
 8007916:	f1c5 0801 	rsbmi	r8, r5, #1
 800791a:	9304      	strmi	r3, [sp, #16]
 800791c:	f04f 0800 	movpl.w	r8, #0
 8007920:	f1ba 0f00 	cmp.w	sl, #0
 8007924:	db3b      	blt.n	800799e <_dtoa_r+0x23e>
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800792c:	4453      	add	r3, sl
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	2300      	movs	r3, #0
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	2b09      	cmp	r3, #9
 8007938:	d869      	bhi.n	8007a0e <_dtoa_r+0x2ae>
 800793a:	2b05      	cmp	r3, #5
 800793c:	bfc4      	itt	gt
 800793e:	3b04      	subgt	r3, #4
 8007940:	9305      	strgt	r3, [sp, #20]
 8007942:	9b05      	ldr	r3, [sp, #20]
 8007944:	f1a3 0302 	sub.w	r3, r3, #2
 8007948:	bfcc      	ite	gt
 800794a:	2500      	movgt	r5, #0
 800794c:	2501      	movle	r5, #1
 800794e:	2b03      	cmp	r3, #3
 8007950:	d869      	bhi.n	8007a26 <_dtoa_r+0x2c6>
 8007952:	e8df f003 	tbb	[pc, r3]
 8007956:	4e2c      	.short	0x4e2c
 8007958:	5a4c      	.short	0x5a4c
 800795a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800795e:	441d      	add	r5, r3
 8007960:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007964:	2b20      	cmp	r3, #32
 8007966:	bfc1      	itttt	gt
 8007968:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800796c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007970:	fa09 f303 	lslgt.w	r3, r9, r3
 8007974:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007978:	bfda      	itte	le
 800797a:	f1c3 0320 	rsble	r3, r3, #32
 800797e:	fa06 f003 	lslle.w	r0, r6, r3
 8007982:	4318      	orrgt	r0, r3
 8007984:	f7f8 fdde 	bl	8000544 <__aeabi_ui2d>
 8007988:	2301      	movs	r3, #1
 800798a:	4606      	mov	r6, r0
 800798c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007990:	3d01      	subs	r5, #1
 8007992:	9310      	str	r3, [sp, #64]	; 0x40
 8007994:	e771      	b.n	800787a <_dtoa_r+0x11a>
 8007996:	2301      	movs	r3, #1
 8007998:	e7b6      	b.n	8007908 <_dtoa_r+0x1a8>
 800799a:	900e      	str	r0, [sp, #56]	; 0x38
 800799c:	e7b5      	b.n	800790a <_dtoa_r+0x1aa>
 800799e:	f1ca 0300 	rsb	r3, sl, #0
 80079a2:	9306      	str	r3, [sp, #24]
 80079a4:	2300      	movs	r3, #0
 80079a6:	eba8 080a 	sub.w	r8, r8, sl
 80079aa:	930d      	str	r3, [sp, #52]	; 0x34
 80079ac:	e7c2      	b.n	8007934 <_dtoa_r+0x1d4>
 80079ae:	2300      	movs	r3, #0
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dc39      	bgt.n	8007a2c <_dtoa_r+0x2cc>
 80079b8:	f04f 0901 	mov.w	r9, #1
 80079bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079c0:	464b      	mov	r3, r9
 80079c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80079c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079c8:	2200      	movs	r2, #0
 80079ca:	6042      	str	r2, [r0, #4]
 80079cc:	2204      	movs	r2, #4
 80079ce:	f102 0614 	add.w	r6, r2, #20
 80079d2:	429e      	cmp	r6, r3
 80079d4:	6841      	ldr	r1, [r0, #4]
 80079d6:	d92f      	bls.n	8007a38 <_dtoa_r+0x2d8>
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fee7 	bl	80087ac <_Balloc>
 80079de:	9000      	str	r0, [sp, #0]
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d14b      	bne.n	8007a7c <_dtoa_r+0x31c>
 80079e4:	4b24      	ldr	r3, [pc, #144]	; (8007a78 <_dtoa_r+0x318>)
 80079e6:	4602      	mov	r2, r0
 80079e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079ec:	e6d1      	b.n	8007792 <_dtoa_r+0x32>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7de      	b.n	80079b0 <_dtoa_r+0x250>
 80079f2:	2300      	movs	r3, #0
 80079f4:	9308      	str	r3, [sp, #32]
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	eb0a 0903 	add.w	r9, sl, r3
 80079fc:	f109 0301 	add.w	r3, r9, #1
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	bfb8      	it	lt
 8007a06:	2301      	movlt	r3, #1
 8007a08:	e7dd      	b.n	80079c6 <_dtoa_r+0x266>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e7f2      	b.n	80079f4 <_dtoa_r+0x294>
 8007a0e:	2501      	movs	r5, #1
 8007a10:	2300      	movs	r3, #0
 8007a12:	9305      	str	r3, [sp, #20]
 8007a14:	9508      	str	r5, [sp, #32]
 8007a16:	f04f 39ff 	mov.w	r9, #4294967295
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a20:	2312      	movs	r3, #18
 8007a22:	9209      	str	r2, [sp, #36]	; 0x24
 8007a24:	e7cf      	b.n	80079c6 <_dtoa_r+0x266>
 8007a26:	2301      	movs	r3, #1
 8007a28:	9308      	str	r3, [sp, #32]
 8007a2a:	e7f4      	b.n	8007a16 <_dtoa_r+0x2b6>
 8007a2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007a30:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a34:	464b      	mov	r3, r9
 8007a36:	e7c6      	b.n	80079c6 <_dtoa_r+0x266>
 8007a38:	3101      	adds	r1, #1
 8007a3a:	6041      	str	r1, [r0, #4]
 8007a3c:	0052      	lsls	r2, r2, #1
 8007a3e:	e7c6      	b.n	80079ce <_dtoa_r+0x26e>
 8007a40:	636f4361 	.word	0x636f4361
 8007a44:	3fd287a7 	.word	0x3fd287a7
 8007a48:	8b60c8b3 	.word	0x8b60c8b3
 8007a4c:	3fc68a28 	.word	0x3fc68a28
 8007a50:	509f79fb 	.word	0x509f79fb
 8007a54:	3fd34413 	.word	0x3fd34413
 8007a58:	0800a01d 	.word	0x0800a01d
 8007a5c:	0800a034 	.word	0x0800a034
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	0800a019 	.word	0x0800a019
 8007a68:	0800a010 	.word	0x0800a010
 8007a6c:	08009fed 	.word	0x08009fed
 8007a70:	3ff80000 	.word	0x3ff80000
 8007a74:	0800a190 	.word	0x0800a190
 8007a78:	0800a093 	.word	0x0800a093
 8007a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7e:	9a00      	ldr	r2, [sp, #0]
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	9b01      	ldr	r3, [sp, #4]
 8007a84:	2b0e      	cmp	r3, #14
 8007a86:	f200 80ad 	bhi.w	8007be4 <_dtoa_r+0x484>
 8007a8a:	2d00      	cmp	r5, #0
 8007a8c:	f000 80aa 	beq.w	8007be4 <_dtoa_r+0x484>
 8007a90:	f1ba 0f00 	cmp.w	sl, #0
 8007a94:	dd36      	ble.n	8007b04 <_dtoa_r+0x3a4>
 8007a96:	4ac3      	ldr	r2, [pc, #780]	; (8007da4 <_dtoa_r+0x644>)
 8007a98:	f00a 030f 	and.w	r3, sl, #15
 8007a9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007aa0:	ed93 7b00 	vldr	d7, [r3]
 8007aa4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007aa8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007aac:	eeb0 8a47 	vmov.f32	s16, s14
 8007ab0:	eef0 8a67 	vmov.f32	s17, s15
 8007ab4:	d016      	beq.n	8007ae4 <_dtoa_r+0x384>
 8007ab6:	4bbc      	ldr	r3, [pc, #752]	; (8007da8 <_dtoa_r+0x648>)
 8007ab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007abc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ac0:	f7f8 fee4 	bl	800088c <__aeabi_ddiv>
 8007ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac8:	f007 070f 	and.w	r7, r7, #15
 8007acc:	2503      	movs	r5, #3
 8007ace:	4eb6      	ldr	r6, [pc, #728]	; (8007da8 <_dtoa_r+0x648>)
 8007ad0:	b957      	cbnz	r7, 8007ae8 <_dtoa_r+0x388>
 8007ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad6:	ec53 2b18 	vmov	r2, r3, d8
 8007ada:	f7f8 fed7 	bl	800088c <__aeabi_ddiv>
 8007ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae2:	e029      	b.n	8007b38 <_dtoa_r+0x3d8>
 8007ae4:	2502      	movs	r5, #2
 8007ae6:	e7f2      	b.n	8007ace <_dtoa_r+0x36e>
 8007ae8:	07f9      	lsls	r1, r7, #31
 8007aea:	d508      	bpl.n	8007afe <_dtoa_r+0x39e>
 8007aec:	ec51 0b18 	vmov	r0, r1, d8
 8007af0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007af4:	f7f8 fda0 	bl	8000638 <__aeabi_dmul>
 8007af8:	ec41 0b18 	vmov	d8, r0, r1
 8007afc:	3501      	adds	r5, #1
 8007afe:	107f      	asrs	r7, r7, #1
 8007b00:	3608      	adds	r6, #8
 8007b02:	e7e5      	b.n	8007ad0 <_dtoa_r+0x370>
 8007b04:	f000 80a6 	beq.w	8007c54 <_dtoa_r+0x4f4>
 8007b08:	f1ca 0600 	rsb	r6, sl, #0
 8007b0c:	4ba5      	ldr	r3, [pc, #660]	; (8007da4 <_dtoa_r+0x644>)
 8007b0e:	4fa6      	ldr	r7, [pc, #664]	; (8007da8 <_dtoa_r+0x648>)
 8007b10:	f006 020f 	and.w	r2, r6, #15
 8007b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b20:	f7f8 fd8a 	bl	8000638 <__aeabi_dmul>
 8007b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b28:	1136      	asrs	r6, r6, #4
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2502      	movs	r5, #2
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	f040 8085 	bne.w	8007c3e <_dtoa_r+0x4de>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1d2      	bne.n	8007ade <_dtoa_r+0x37e>
 8007b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 808c 	beq.w	8007c58 <_dtoa_r+0x4f8>
 8007b40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b44:	4b99      	ldr	r3, [pc, #612]	; (8007dac <_dtoa_r+0x64c>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f000 8081 	beq.w	8007c58 <_dtoa_r+0x4f8>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d07d      	beq.n	8007c58 <_dtoa_r+0x4f8>
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	dd3c      	ble.n	8007bdc <_dtoa_r+0x47c>
 8007b62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b66:	9307      	str	r3, [sp, #28]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4b91      	ldr	r3, [pc, #580]	; (8007db0 <_dtoa_r+0x650>)
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fd62 	bl	8000638 <__aeabi_dmul>
 8007b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b78:	3501      	adds	r5, #1
 8007b7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b82:	4628      	mov	r0, r5
 8007b84:	f7f8 fcee 	bl	8000564 <__aeabi_i2d>
 8007b88:	4632      	mov	r2, r6
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	f7f8 fd54 	bl	8000638 <__aeabi_dmul>
 8007b90:	4b88      	ldr	r3, [pc, #544]	; (8007db4 <_dtoa_r+0x654>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	f7f8 fb9a 	bl	80002cc <__adddf3>
 8007b98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d15c      	bne.n	8007c62 <_dtoa_r+0x502>
 8007ba8:	4b83      	ldr	r3, [pc, #524]	; (8007db8 <_dtoa_r+0x658>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 fb8a 	bl	80002c8 <__aeabi_dsub>
 8007bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bb8:	4606      	mov	r6, r0
 8007bba:	460f      	mov	r7, r1
 8007bbc:	f7f8 ffcc 	bl	8000b58 <__aeabi_dcmpgt>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f040 8296 	bne.w	80080f2 <_dtoa_r+0x992>
 8007bc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	f7f8 ffa3 	bl	8000b1c <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f040 8288 	bne.w	80080ec <_dtoa_r+0x98c>
 8007bdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007be0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f2c0 8158 	blt.w	8007e9c <_dtoa_r+0x73c>
 8007bec:	f1ba 0f0e 	cmp.w	sl, #14
 8007bf0:	f300 8154 	bgt.w	8007e9c <_dtoa_r+0x73c>
 8007bf4:	4b6b      	ldr	r3, [pc, #428]	; (8007da4 <_dtoa_r+0x644>)
 8007bf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f280 80e3 	bge.w	8007dcc <_dtoa_r+0x66c>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f300 80df 	bgt.w	8007dcc <_dtoa_r+0x66c>
 8007c0e:	f040 826d 	bne.w	80080ec <_dtoa_r+0x98c>
 8007c12:	4b69      	ldr	r3, [pc, #420]	; (8007db8 <_dtoa_r+0x658>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 fd0d 	bl	8000638 <__aeabi_dmul>
 8007c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c22:	f7f8 ff8f 	bl	8000b44 <__aeabi_dcmpge>
 8007c26:	9e01      	ldr	r6, [sp, #4]
 8007c28:	4637      	mov	r7, r6
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f040 8243 	bne.w	80080b6 <_dtoa_r+0x956>
 8007c30:	9d00      	ldr	r5, [sp, #0]
 8007c32:	2331      	movs	r3, #49	; 0x31
 8007c34:	f805 3b01 	strb.w	r3, [r5], #1
 8007c38:	f10a 0a01 	add.w	sl, sl, #1
 8007c3c:	e23f      	b.n	80080be <_dtoa_r+0x95e>
 8007c3e:	07f2      	lsls	r2, r6, #31
 8007c40:	d505      	bpl.n	8007c4e <_dtoa_r+0x4ee>
 8007c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c46:	f7f8 fcf7 	bl	8000638 <__aeabi_dmul>
 8007c4a:	3501      	adds	r5, #1
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	1076      	asrs	r6, r6, #1
 8007c50:	3708      	adds	r7, #8
 8007c52:	e76c      	b.n	8007b2e <_dtoa_r+0x3ce>
 8007c54:	2502      	movs	r5, #2
 8007c56:	e76f      	b.n	8007b38 <_dtoa_r+0x3d8>
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c60:	e78d      	b.n	8007b7e <_dtoa_r+0x41e>
 8007c62:	9900      	ldr	r1, [sp, #0]
 8007c64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c68:	4b4e      	ldr	r3, [pc, #312]	; (8007da4 <_dtoa_r+0x644>)
 8007c6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c6e:	4401      	add	r1, r0
 8007c70:	9102      	str	r1, [sp, #8]
 8007c72:	9908      	ldr	r1, [sp, #32]
 8007c74:	eeb0 8a47 	vmov.f32	s16, s14
 8007c78:	eef0 8a67 	vmov.f32	s17, s15
 8007c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d045      	beq.n	8007d14 <_dtoa_r+0x5b4>
 8007c88:	494c      	ldr	r1, [pc, #304]	; (8007dbc <_dtoa_r+0x65c>)
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7f8 fdfe 	bl	800088c <__aeabi_ddiv>
 8007c90:	ec53 2b18 	vmov	r2, r3, d8
 8007c94:	f7f8 fb18 	bl	80002c8 <__aeabi_dsub>
 8007c98:	9d00      	ldr	r5, [sp, #0]
 8007c9a:	ec41 0b18 	vmov	d8, r0, r1
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f7f8 ff79 	bl	8000b98 <__aeabi_d2iz>
 8007ca6:	900c      	str	r0, [sp, #48]	; 0x30
 8007ca8:	f7f8 fc5c 	bl	8000564 <__aeabi_i2d>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 fb08 	bl	80002c8 <__aeabi_dsub>
 8007cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cba:	3330      	adds	r3, #48	; 0x30
 8007cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8007cc0:	ec53 2b18 	vmov	r2, r3, d8
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	460f      	mov	r7, r1
 8007cc8:	f7f8 ff28 	bl	8000b1c <__aeabi_dcmplt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d165      	bne.n	8007d9c <_dtoa_r+0x63c>
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	4935      	ldr	r1, [pc, #212]	; (8007dac <_dtoa_r+0x64c>)
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7f8 faf6 	bl	80002c8 <__aeabi_dsub>
 8007cdc:	ec53 2b18 	vmov	r2, r3, d8
 8007ce0:	f7f8 ff1c 	bl	8000b1c <__aeabi_dcmplt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 80b9 	bne.w	8007e5c <_dtoa_r+0x6fc>
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	429d      	cmp	r5, r3
 8007cee:	f43f af75 	beq.w	8007bdc <_dtoa_r+0x47c>
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <_dtoa_r+0x650>)
 8007cf4:	ec51 0b18 	vmov	r0, r1, d8
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f7f8 fc9d 	bl	8000638 <__aeabi_dmul>
 8007cfe:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <_dtoa_r+0x650>)
 8007d00:	ec41 0b18 	vmov	d8, r0, r1
 8007d04:	2200      	movs	r2, #0
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fc95 	bl	8000638 <__aeabi_dmul>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	e7c4      	b.n	8007c9e <_dtoa_r+0x53e>
 8007d14:	ec51 0b17 	vmov	r0, r1, d7
 8007d18:	f7f8 fc8e 	bl	8000638 <__aeabi_dmul>
 8007d1c:	9b02      	ldr	r3, [sp, #8]
 8007d1e:	9d00      	ldr	r5, [sp, #0]
 8007d20:	930c      	str	r3, [sp, #48]	; 0x30
 8007d22:	ec41 0b18 	vmov	d8, r0, r1
 8007d26:	4639      	mov	r1, r7
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7f8 ff35 	bl	8000b98 <__aeabi_d2iz>
 8007d2e:	9011      	str	r0, [sp, #68]	; 0x44
 8007d30:	f7f8 fc18 	bl	8000564 <__aeabi_i2d>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 fac4 	bl	80002c8 <__aeabi_dsub>
 8007d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d42:	3330      	adds	r3, #48	; 0x30
 8007d44:	f805 3b01 	strb.w	r3, [r5], #1
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	429d      	cmp	r5, r3
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	460f      	mov	r7, r1
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	d134      	bne.n	8007dc0 <_dtoa_r+0x660>
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <_dtoa_r+0x65c>)
 8007d58:	ec51 0b18 	vmov	r0, r1, d8
 8007d5c:	f7f8 fab6 	bl	80002cc <__adddf3>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4630      	mov	r0, r6
 8007d66:	4639      	mov	r1, r7
 8007d68:	f7f8 fef6 	bl	8000b58 <__aeabi_dcmpgt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d175      	bne.n	8007e5c <_dtoa_r+0x6fc>
 8007d70:	ec53 2b18 	vmov	r2, r3, d8
 8007d74:	4911      	ldr	r1, [pc, #68]	; (8007dbc <_dtoa_r+0x65c>)
 8007d76:	2000      	movs	r0, #0
 8007d78:	f7f8 faa6 	bl	80002c8 <__aeabi_dsub>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 feca 	bl	8000b1c <__aeabi_dcmplt>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f43f af27 	beq.w	8007bdc <_dtoa_r+0x47c>
 8007d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d90:	1e6b      	subs	r3, r5, #1
 8007d92:	930c      	str	r3, [sp, #48]	; 0x30
 8007d94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	d0f8      	beq.n	8007d8e <_dtoa_r+0x62e>
 8007d9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007da0:	e04a      	b.n	8007e38 <_dtoa_r+0x6d8>
 8007da2:	bf00      	nop
 8007da4:	0800a190 	.word	0x0800a190
 8007da8:	0800a168 	.word	0x0800a168
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	401c0000 	.word	0x401c0000
 8007db8:	40140000 	.word	0x40140000
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	4baf      	ldr	r3, [pc, #700]	; (8008080 <_dtoa_r+0x920>)
 8007dc2:	f7f8 fc39 	bl	8000638 <__aeabi_dmul>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	460f      	mov	r7, r1
 8007dca:	e7ac      	b.n	8007d26 <_dtoa_r+0x5c6>
 8007dcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dd0:	9d00      	ldr	r5, [sp, #0]
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	4639      	mov	r1, r7
 8007dda:	f7f8 fd57 	bl	800088c <__aeabi_ddiv>
 8007dde:	f7f8 fedb 	bl	8000b98 <__aeabi_d2iz>
 8007de2:	9002      	str	r0, [sp, #8]
 8007de4:	f7f8 fbbe 	bl	8000564 <__aeabi_i2d>
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	f7f8 fc24 	bl	8000638 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fa66 	bl	80002c8 <__aeabi_dsub>
 8007dfc:	9e02      	ldr	r6, [sp, #8]
 8007dfe:	9f01      	ldr	r7, [sp, #4]
 8007e00:	3630      	adds	r6, #48	; 0x30
 8007e02:	f805 6b01 	strb.w	r6, [r5], #1
 8007e06:	9e00      	ldr	r6, [sp, #0]
 8007e08:	1bae      	subs	r6, r5, r6
 8007e0a:	42b7      	cmp	r7, r6
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	d137      	bne.n	8007e82 <_dtoa_r+0x722>
 8007e12:	f7f8 fa5b 	bl	80002cc <__adddf3>
 8007e16:	4642      	mov	r2, r8
 8007e18:	464b      	mov	r3, r9
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	f7f8 fe9b 	bl	8000b58 <__aeabi_dcmpgt>
 8007e22:	b9c8      	cbnz	r0, 8007e58 <_dtoa_r+0x6f8>
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 fe6c 	bl	8000b08 <__aeabi_dcmpeq>
 8007e30:	b110      	cbz	r0, 8007e38 <_dtoa_r+0x6d8>
 8007e32:	9b02      	ldr	r3, [sp, #8]
 8007e34:	07d9      	lsls	r1, r3, #31
 8007e36:	d40f      	bmi.n	8007e58 <_dtoa_r+0x6f8>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4659      	mov	r1, fp
 8007e3c:	f000 fcf6 	bl	800882c <_Bfree>
 8007e40:	2300      	movs	r3, #0
 8007e42:	702b      	strb	r3, [r5, #0]
 8007e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e46:	f10a 0001 	add.w	r0, sl, #1
 8007e4a:	6018      	str	r0, [r3, #0]
 8007e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f43f acd8 	beq.w	8007804 <_dtoa_r+0xa4>
 8007e54:	601d      	str	r5, [r3, #0]
 8007e56:	e4d5      	b.n	8007804 <_dtoa_r+0xa4>
 8007e58:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	461d      	mov	r5, r3
 8007e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e64:	2a39      	cmp	r2, #57	; 0x39
 8007e66:	d108      	bne.n	8007e7a <_dtoa_r+0x71a>
 8007e68:	9a00      	ldr	r2, [sp, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d1f7      	bne.n	8007e5e <_dtoa_r+0x6fe>
 8007e6e:	9a07      	ldr	r2, [sp, #28]
 8007e70:	9900      	ldr	r1, [sp, #0]
 8007e72:	3201      	adds	r2, #1
 8007e74:	9207      	str	r2, [sp, #28]
 8007e76:	2230      	movs	r2, #48	; 0x30
 8007e78:	700a      	strb	r2, [r1, #0]
 8007e7a:	781a      	ldrb	r2, [r3, #0]
 8007e7c:	3201      	adds	r2, #1
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	e78c      	b.n	8007d9c <_dtoa_r+0x63c>
 8007e82:	4b7f      	ldr	r3, [pc, #508]	; (8008080 <_dtoa_r+0x920>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	f7f8 fbd7 	bl	8000638 <__aeabi_dmul>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	f7f8 fe39 	bl	8000b08 <__aeabi_dcmpeq>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d09b      	beq.n	8007dd2 <_dtoa_r+0x672>
 8007e9a:	e7cd      	b.n	8007e38 <_dtoa_r+0x6d8>
 8007e9c:	9a08      	ldr	r2, [sp, #32]
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	f000 80c4 	beq.w	800802c <_dtoa_r+0x8cc>
 8007ea4:	9a05      	ldr	r2, [sp, #20]
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	f300 80a8 	bgt.w	8007ffc <_dtoa_r+0x89c>
 8007eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	f000 80a0 	beq.w	8007ff4 <_dtoa_r+0x894>
 8007eb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007eb8:	9e06      	ldr	r6, [sp, #24]
 8007eba:	4645      	mov	r5, r8
 8007ebc:	9a04      	ldr	r2, [sp, #16]
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	441a      	add	r2, r3
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4498      	add	r8, r3
 8007ec6:	9204      	str	r2, [sp, #16]
 8007ec8:	f000 fd6c 	bl	80089a4 <__i2b>
 8007ecc:	4607      	mov	r7, r0
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	dd0b      	ble.n	8007eea <_dtoa_r+0x78a>
 8007ed2:	9b04      	ldr	r3, [sp, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd08      	ble.n	8007eea <_dtoa_r+0x78a>
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	9a04      	ldr	r2, [sp, #16]
 8007edc:	bfa8      	it	ge
 8007ede:	462b      	movge	r3, r5
 8007ee0:	eba8 0803 	sub.w	r8, r8, r3
 8007ee4:	1aed      	subs	r5, r5, r3
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	9b06      	ldr	r3, [sp, #24]
 8007eec:	b1fb      	cbz	r3, 8007f2e <_dtoa_r+0x7ce>
 8007eee:	9b08      	ldr	r3, [sp, #32]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 809f 	beq.w	8008034 <_dtoa_r+0x8d4>
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	dd11      	ble.n	8007f1e <_dtoa_r+0x7be>
 8007efa:	4639      	mov	r1, r7
 8007efc:	4632      	mov	r2, r6
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fe0c 	bl	8008b1c <__pow5mult>
 8007f04:	465a      	mov	r2, fp
 8007f06:	4601      	mov	r1, r0
 8007f08:	4607      	mov	r7, r0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fd60 	bl	80089d0 <__multiply>
 8007f10:	4659      	mov	r1, fp
 8007f12:	9007      	str	r0, [sp, #28]
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fc89 	bl	800882c <_Bfree>
 8007f1a:	9b07      	ldr	r3, [sp, #28]
 8007f1c:	469b      	mov	fp, r3
 8007f1e:	9b06      	ldr	r3, [sp, #24]
 8007f20:	1b9a      	subs	r2, r3, r6
 8007f22:	d004      	beq.n	8007f2e <_dtoa_r+0x7ce>
 8007f24:	4659      	mov	r1, fp
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fdf8 	bl	8008b1c <__pow5mult>
 8007f2c:	4683      	mov	fp, r0
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fd37 	bl	80089a4 <__i2b>
 8007f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	dd7c      	ble.n	8008038 <_dtoa_r+0x8d8>
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4601      	mov	r1, r0
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 fdea 	bl	8008b1c <__pow5mult>
 8007f48:	9b05      	ldr	r3, [sp, #20]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	dd76      	ble.n	800803e <_dtoa_r+0x8de>
 8007f50:	2300      	movs	r3, #0
 8007f52:	9306      	str	r3, [sp, #24]
 8007f54:	6933      	ldr	r3, [r6, #16]
 8007f56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f5a:	6918      	ldr	r0, [r3, #16]
 8007f5c:	f000 fcd2 	bl	8008904 <__hi0bits>
 8007f60:	f1c0 0020 	rsb	r0, r0, #32
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	4418      	add	r0, r3
 8007f68:	f010 001f 	ands.w	r0, r0, #31
 8007f6c:	f000 8086 	beq.w	800807c <_dtoa_r+0x91c>
 8007f70:	f1c0 0320 	rsb	r3, r0, #32
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	dd7f      	ble.n	8008078 <_dtoa_r+0x918>
 8007f78:	f1c0 001c 	rsb	r0, r0, #28
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	4403      	add	r3, r0
 8007f80:	4480      	add	r8, r0
 8007f82:	4405      	add	r5, r0
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	f1b8 0f00 	cmp.w	r8, #0
 8007f8a:	dd05      	ble.n	8007f98 <_dtoa_r+0x838>
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	4642      	mov	r2, r8
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fe1d 	bl	8008bd0 <__lshift>
 8007f96:	4683      	mov	fp, r0
 8007f98:	9b04      	ldr	r3, [sp, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dd05      	ble.n	8007faa <_dtoa_r+0x84a>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fe14 	bl	8008bd0 <__lshift>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d069      	beq.n	8008084 <_dtoa_r+0x924>
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4658      	mov	r0, fp
 8007fb4:	f000 fe78 	bl	8008ca8 <__mcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	da63      	bge.n	8008084 <_dtoa_r+0x924>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fc54 	bl	8008870 <__multadd>
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fce:	4683      	mov	fp, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 818f 	beq.w	80082f4 <_dtoa_r+0xb94>
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	2300      	movs	r3, #0
 8007fda:	220a      	movs	r2, #10
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fc47 	bl	8008870 <__multadd>
 8007fe2:	f1b9 0f00 	cmp.w	r9, #0
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f300 808e 	bgt.w	8008108 <_dtoa_r+0x9a8>
 8007fec:	9b05      	ldr	r3, [sp, #20]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	dc50      	bgt.n	8008094 <_dtoa_r+0x934>
 8007ff2:	e089      	b.n	8008108 <_dtoa_r+0x9a8>
 8007ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ffa:	e75d      	b.n	8007eb8 <_dtoa_r+0x758>
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	1e5e      	subs	r6, r3, #1
 8008000:	9b06      	ldr	r3, [sp, #24]
 8008002:	42b3      	cmp	r3, r6
 8008004:	bfbf      	itttt	lt
 8008006:	9b06      	ldrlt	r3, [sp, #24]
 8008008:	9606      	strlt	r6, [sp, #24]
 800800a:	1af2      	sublt	r2, r6, r3
 800800c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800800e:	bfb6      	itet	lt
 8008010:	189b      	addlt	r3, r3, r2
 8008012:	1b9e      	subge	r6, r3, r6
 8008014:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	bfb8      	it	lt
 800801a:	2600      	movlt	r6, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfb5      	itete	lt
 8008020:	eba8 0503 	sublt.w	r5, r8, r3
 8008024:	9b01      	ldrge	r3, [sp, #4]
 8008026:	2300      	movlt	r3, #0
 8008028:	4645      	movge	r5, r8
 800802a:	e747      	b.n	8007ebc <_dtoa_r+0x75c>
 800802c:	9e06      	ldr	r6, [sp, #24]
 800802e:	9f08      	ldr	r7, [sp, #32]
 8008030:	4645      	mov	r5, r8
 8008032:	e74c      	b.n	8007ece <_dtoa_r+0x76e>
 8008034:	9a06      	ldr	r2, [sp, #24]
 8008036:	e775      	b.n	8007f24 <_dtoa_r+0x7c4>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	2b01      	cmp	r3, #1
 800803c:	dc18      	bgt.n	8008070 <_dtoa_r+0x910>
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	b9b3      	cbnz	r3, 8008070 <_dtoa_r+0x910>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008048:	b9a3      	cbnz	r3, 8008074 <_dtoa_r+0x914>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008050:	0d1b      	lsrs	r3, r3, #20
 8008052:	051b      	lsls	r3, r3, #20
 8008054:	b12b      	cbz	r3, 8008062 <_dtoa_r+0x902>
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	f108 0801 	add.w	r8, r8, #1
 8008060:	2301      	movs	r3, #1
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008066:	2b00      	cmp	r3, #0
 8008068:	f47f af74 	bne.w	8007f54 <_dtoa_r+0x7f4>
 800806c:	2001      	movs	r0, #1
 800806e:	e779      	b.n	8007f64 <_dtoa_r+0x804>
 8008070:	2300      	movs	r3, #0
 8008072:	e7f6      	b.n	8008062 <_dtoa_r+0x902>
 8008074:	9b02      	ldr	r3, [sp, #8]
 8008076:	e7f4      	b.n	8008062 <_dtoa_r+0x902>
 8008078:	d085      	beq.n	8007f86 <_dtoa_r+0x826>
 800807a:	4618      	mov	r0, r3
 800807c:	301c      	adds	r0, #28
 800807e:	e77d      	b.n	8007f7c <_dtoa_r+0x81c>
 8008080:	40240000 	.word	0x40240000
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	dc38      	bgt.n	80080fc <_dtoa_r+0x99c>
 800808a:	9b05      	ldr	r3, [sp, #20]
 800808c:	2b02      	cmp	r3, #2
 800808e:	dd35      	ble.n	80080fc <_dtoa_r+0x99c>
 8008090:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008094:	f1b9 0f00 	cmp.w	r9, #0
 8008098:	d10d      	bne.n	80080b6 <_dtoa_r+0x956>
 800809a:	4631      	mov	r1, r6
 800809c:	464b      	mov	r3, r9
 800809e:	2205      	movs	r2, #5
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fbe5 	bl	8008870 <__multadd>
 80080a6:	4601      	mov	r1, r0
 80080a8:	4606      	mov	r6, r0
 80080aa:	4658      	mov	r0, fp
 80080ac:	f000 fdfc 	bl	8008ca8 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f73f adbd 	bgt.w	8007c30 <_dtoa_r+0x4d0>
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	9d00      	ldr	r5, [sp, #0]
 80080ba:	ea6f 0a03 	mvn.w	sl, r3
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	4631      	mov	r1, r6
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fbb1 	bl	800882c <_Bfree>
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	f43f aeb4 	beq.w	8007e38 <_dtoa_r+0x6d8>
 80080d0:	f1b8 0f00 	cmp.w	r8, #0
 80080d4:	d005      	beq.n	80080e2 <_dtoa_r+0x982>
 80080d6:	45b8      	cmp	r8, r7
 80080d8:	d003      	beq.n	80080e2 <_dtoa_r+0x982>
 80080da:	4641      	mov	r1, r8
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 fba5 	bl	800882c <_Bfree>
 80080e2:	4639      	mov	r1, r7
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fba1 	bl	800882c <_Bfree>
 80080ea:	e6a5      	b.n	8007e38 <_dtoa_r+0x6d8>
 80080ec:	2600      	movs	r6, #0
 80080ee:	4637      	mov	r7, r6
 80080f0:	e7e1      	b.n	80080b6 <_dtoa_r+0x956>
 80080f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80080f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080f8:	4637      	mov	r7, r6
 80080fa:	e599      	b.n	8007c30 <_dtoa_r+0x4d0>
 80080fc:	9b08      	ldr	r3, [sp, #32]
 80080fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80fd 	beq.w	8008302 <_dtoa_r+0xba2>
 8008108:	2d00      	cmp	r5, #0
 800810a:	dd05      	ble.n	8008118 <_dtoa_r+0x9b8>
 800810c:	4639      	mov	r1, r7
 800810e:	462a      	mov	r2, r5
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fd5d 	bl	8008bd0 <__lshift>
 8008116:	4607      	mov	r7, r0
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d05c      	beq.n	80081d8 <_dtoa_r+0xa78>
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fb43 	bl	80087ac <_Balloc>
 8008126:	4605      	mov	r5, r0
 8008128:	b928      	cbnz	r0, 8008136 <_dtoa_r+0x9d6>
 800812a:	4b80      	ldr	r3, [pc, #512]	; (800832c <_dtoa_r+0xbcc>)
 800812c:	4602      	mov	r2, r0
 800812e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008132:	f7ff bb2e 	b.w	8007792 <_dtoa_r+0x32>
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	f107 010c 	add.w	r1, r7, #12
 8008140:	300c      	adds	r0, #12
 8008142:	f000 fb25 	bl	8008790 <memcpy>
 8008146:	2201      	movs	r2, #1
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fd40 	bl	8008bd0 <__lshift>
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	9b00      	ldr	r3, [sp, #0]
 8008158:	444b      	add	r3, r9
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	9b02      	ldr	r3, [sp, #8]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	46b8      	mov	r8, r7
 8008164:	9306      	str	r3, [sp, #24]
 8008166:	4607      	mov	r7, r0
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	4631      	mov	r1, r6
 800816c:	3b01      	subs	r3, #1
 800816e:	4658      	mov	r0, fp
 8008170:	9302      	str	r3, [sp, #8]
 8008172:	f7ff fa69 	bl	8007648 <quorem>
 8008176:	4603      	mov	r3, r0
 8008178:	3330      	adds	r3, #48	; 0x30
 800817a:	9004      	str	r0, [sp, #16]
 800817c:	4641      	mov	r1, r8
 800817e:	4658      	mov	r0, fp
 8008180:	9308      	str	r3, [sp, #32]
 8008182:	f000 fd91 	bl	8008ca8 <__mcmp>
 8008186:	463a      	mov	r2, r7
 8008188:	4681      	mov	r9, r0
 800818a:	4631      	mov	r1, r6
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fda7 	bl	8008ce0 <__mdiff>
 8008192:	68c2      	ldr	r2, [r0, #12]
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	4605      	mov	r5, r0
 8008198:	bb02      	cbnz	r2, 80081dc <_dtoa_r+0xa7c>
 800819a:	4601      	mov	r1, r0
 800819c:	4658      	mov	r0, fp
 800819e:	f000 fd83 	bl	8008ca8 <__mcmp>
 80081a2:	9b08      	ldr	r3, [sp, #32]
 80081a4:	4602      	mov	r2, r0
 80081a6:	4629      	mov	r1, r5
 80081a8:	4620      	mov	r0, r4
 80081aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80081ae:	f000 fb3d 	bl	800882c <_Bfree>
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b6:	9d01      	ldr	r5, [sp, #4]
 80081b8:	ea43 0102 	orr.w	r1, r3, r2
 80081bc:	9b06      	ldr	r3, [sp, #24]
 80081be:	430b      	orrs	r3, r1
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	d10d      	bne.n	80081e0 <_dtoa_r+0xa80>
 80081c4:	2b39      	cmp	r3, #57	; 0x39
 80081c6:	d029      	beq.n	800821c <_dtoa_r+0xabc>
 80081c8:	f1b9 0f00 	cmp.w	r9, #0
 80081cc:	dd01      	ble.n	80081d2 <_dtoa_r+0xa72>
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	3331      	adds	r3, #49	; 0x31
 80081d2:	9a02      	ldr	r2, [sp, #8]
 80081d4:	7013      	strb	r3, [r2, #0]
 80081d6:	e774      	b.n	80080c2 <_dtoa_r+0x962>
 80081d8:	4638      	mov	r0, r7
 80081da:	e7b9      	b.n	8008150 <_dtoa_r+0x9f0>
 80081dc:	2201      	movs	r2, #1
 80081de:	e7e2      	b.n	80081a6 <_dtoa_r+0xa46>
 80081e0:	f1b9 0f00 	cmp.w	r9, #0
 80081e4:	db06      	blt.n	80081f4 <_dtoa_r+0xa94>
 80081e6:	9905      	ldr	r1, [sp, #20]
 80081e8:	ea41 0909 	orr.w	r9, r1, r9
 80081ec:	9906      	ldr	r1, [sp, #24]
 80081ee:	ea59 0101 	orrs.w	r1, r9, r1
 80081f2:	d120      	bne.n	8008236 <_dtoa_r+0xad6>
 80081f4:	2a00      	cmp	r2, #0
 80081f6:	ddec      	ble.n	80081d2 <_dtoa_r+0xa72>
 80081f8:	4659      	mov	r1, fp
 80081fa:	2201      	movs	r2, #1
 80081fc:	4620      	mov	r0, r4
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	f000 fce6 	bl	8008bd0 <__lshift>
 8008204:	4631      	mov	r1, r6
 8008206:	4683      	mov	fp, r0
 8008208:	f000 fd4e 	bl	8008ca8 <__mcmp>
 800820c:	2800      	cmp	r0, #0
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	dc02      	bgt.n	8008218 <_dtoa_r+0xab8>
 8008212:	d1de      	bne.n	80081d2 <_dtoa_r+0xa72>
 8008214:	07da      	lsls	r2, r3, #31
 8008216:	d5dc      	bpl.n	80081d2 <_dtoa_r+0xa72>
 8008218:	2b39      	cmp	r3, #57	; 0x39
 800821a:	d1d8      	bne.n	80081ce <_dtoa_r+0xa6e>
 800821c:	9a02      	ldr	r2, [sp, #8]
 800821e:	2339      	movs	r3, #57	; 0x39
 8008220:	7013      	strb	r3, [r2, #0]
 8008222:	462b      	mov	r3, r5
 8008224:	461d      	mov	r5, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800822c:	2a39      	cmp	r2, #57	; 0x39
 800822e:	d050      	beq.n	80082d2 <_dtoa_r+0xb72>
 8008230:	3201      	adds	r2, #1
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	e745      	b.n	80080c2 <_dtoa_r+0x962>
 8008236:	2a00      	cmp	r2, #0
 8008238:	dd03      	ble.n	8008242 <_dtoa_r+0xae2>
 800823a:	2b39      	cmp	r3, #57	; 0x39
 800823c:	d0ee      	beq.n	800821c <_dtoa_r+0xabc>
 800823e:	3301      	adds	r3, #1
 8008240:	e7c7      	b.n	80081d2 <_dtoa_r+0xa72>
 8008242:	9a01      	ldr	r2, [sp, #4]
 8008244:	9907      	ldr	r1, [sp, #28]
 8008246:	f802 3c01 	strb.w	r3, [r2, #-1]
 800824a:	428a      	cmp	r2, r1
 800824c:	d02a      	beq.n	80082a4 <_dtoa_r+0xb44>
 800824e:	4659      	mov	r1, fp
 8008250:	2300      	movs	r3, #0
 8008252:	220a      	movs	r2, #10
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fb0b 	bl	8008870 <__multadd>
 800825a:	45b8      	cmp	r8, r7
 800825c:	4683      	mov	fp, r0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	f04f 020a 	mov.w	r2, #10
 8008266:	4641      	mov	r1, r8
 8008268:	4620      	mov	r0, r4
 800826a:	d107      	bne.n	800827c <_dtoa_r+0xb1c>
 800826c:	f000 fb00 	bl	8008870 <__multadd>
 8008270:	4680      	mov	r8, r0
 8008272:	4607      	mov	r7, r0
 8008274:	9b01      	ldr	r3, [sp, #4]
 8008276:	3301      	adds	r3, #1
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	e775      	b.n	8008168 <_dtoa_r+0xa08>
 800827c:	f000 faf8 	bl	8008870 <__multadd>
 8008280:	4639      	mov	r1, r7
 8008282:	4680      	mov	r8, r0
 8008284:	2300      	movs	r3, #0
 8008286:	220a      	movs	r2, #10
 8008288:	4620      	mov	r0, r4
 800828a:	f000 faf1 	bl	8008870 <__multadd>
 800828e:	4607      	mov	r7, r0
 8008290:	e7f0      	b.n	8008274 <_dtoa_r+0xb14>
 8008292:	f1b9 0f00 	cmp.w	r9, #0
 8008296:	9a00      	ldr	r2, [sp, #0]
 8008298:	bfcc      	ite	gt
 800829a:	464d      	movgt	r5, r9
 800829c:	2501      	movle	r5, #1
 800829e:	4415      	add	r5, r2
 80082a0:	f04f 0800 	mov.w	r8, #0
 80082a4:	4659      	mov	r1, fp
 80082a6:	2201      	movs	r2, #1
 80082a8:	4620      	mov	r0, r4
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	f000 fc90 	bl	8008bd0 <__lshift>
 80082b0:	4631      	mov	r1, r6
 80082b2:	4683      	mov	fp, r0
 80082b4:	f000 fcf8 	bl	8008ca8 <__mcmp>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	dcb2      	bgt.n	8008222 <_dtoa_r+0xac2>
 80082bc:	d102      	bne.n	80082c4 <_dtoa_r+0xb64>
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	07db      	lsls	r3, r3, #31
 80082c2:	d4ae      	bmi.n	8008222 <_dtoa_r+0xac2>
 80082c4:	462b      	mov	r3, r5
 80082c6:	461d      	mov	r5, r3
 80082c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082cc:	2a30      	cmp	r2, #48	; 0x30
 80082ce:	d0fa      	beq.n	80082c6 <_dtoa_r+0xb66>
 80082d0:	e6f7      	b.n	80080c2 <_dtoa_r+0x962>
 80082d2:	9a00      	ldr	r2, [sp, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d1a5      	bne.n	8008224 <_dtoa_r+0xac4>
 80082d8:	f10a 0a01 	add.w	sl, sl, #1
 80082dc:	2331      	movs	r3, #49	; 0x31
 80082de:	e779      	b.n	80081d4 <_dtoa_r+0xa74>
 80082e0:	4b13      	ldr	r3, [pc, #76]	; (8008330 <_dtoa_r+0xbd0>)
 80082e2:	f7ff baaf 	b.w	8007844 <_dtoa_r+0xe4>
 80082e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f47f aa86 	bne.w	80077fa <_dtoa_r+0x9a>
 80082ee:	4b11      	ldr	r3, [pc, #68]	; (8008334 <_dtoa_r+0xbd4>)
 80082f0:	f7ff baa8 	b.w	8007844 <_dtoa_r+0xe4>
 80082f4:	f1b9 0f00 	cmp.w	r9, #0
 80082f8:	dc03      	bgt.n	8008302 <_dtoa_r+0xba2>
 80082fa:	9b05      	ldr	r3, [sp, #20]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	f73f aec9 	bgt.w	8008094 <_dtoa_r+0x934>
 8008302:	9d00      	ldr	r5, [sp, #0]
 8008304:	4631      	mov	r1, r6
 8008306:	4658      	mov	r0, fp
 8008308:	f7ff f99e 	bl	8007648 <quorem>
 800830c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008310:	f805 3b01 	strb.w	r3, [r5], #1
 8008314:	9a00      	ldr	r2, [sp, #0]
 8008316:	1aaa      	subs	r2, r5, r2
 8008318:	4591      	cmp	r9, r2
 800831a:	ddba      	ble.n	8008292 <_dtoa_r+0xb32>
 800831c:	4659      	mov	r1, fp
 800831e:	2300      	movs	r3, #0
 8008320:	220a      	movs	r2, #10
 8008322:	4620      	mov	r0, r4
 8008324:	f000 faa4 	bl	8008870 <__multadd>
 8008328:	4683      	mov	fp, r0
 800832a:	e7eb      	b.n	8008304 <_dtoa_r+0xba4>
 800832c:	0800a093 	.word	0x0800a093
 8008330:	08009fec 	.word	0x08009fec
 8008334:	0800a010 	.word	0x0800a010

08008338 <__sflush_r>:
 8008338:	898a      	ldrh	r2, [r1, #12]
 800833a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833e:	4605      	mov	r5, r0
 8008340:	0710      	lsls	r0, r2, #28
 8008342:	460c      	mov	r4, r1
 8008344:	d458      	bmi.n	80083f8 <__sflush_r+0xc0>
 8008346:	684b      	ldr	r3, [r1, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	dc05      	bgt.n	8008358 <__sflush_r+0x20>
 800834c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	dc02      	bgt.n	8008358 <__sflush_r+0x20>
 8008352:	2000      	movs	r0, #0
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835a:	2e00      	cmp	r6, #0
 800835c:	d0f9      	beq.n	8008352 <__sflush_r+0x1a>
 800835e:	2300      	movs	r3, #0
 8008360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008364:	682f      	ldr	r7, [r5, #0]
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	d032      	beq.n	80083d0 <__sflush_r+0x98>
 800836a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	075a      	lsls	r2, r3, #29
 8008370:	d505      	bpl.n	800837e <__sflush_r+0x46>
 8008372:	6863      	ldr	r3, [r4, #4]
 8008374:	1ac0      	subs	r0, r0, r3
 8008376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008378:	b10b      	cbz	r3, 800837e <__sflush_r+0x46>
 800837a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800837c:	1ac0      	subs	r0, r0, r3
 800837e:	2300      	movs	r3, #0
 8008380:	4602      	mov	r2, r0
 8008382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008384:	6a21      	ldr	r1, [r4, #32]
 8008386:	4628      	mov	r0, r5
 8008388:	47b0      	blx	r6
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	d106      	bne.n	800839e <__sflush_r+0x66>
 8008390:	6829      	ldr	r1, [r5, #0]
 8008392:	291d      	cmp	r1, #29
 8008394:	d82c      	bhi.n	80083f0 <__sflush_r+0xb8>
 8008396:	4a2a      	ldr	r2, [pc, #168]	; (8008440 <__sflush_r+0x108>)
 8008398:	40ca      	lsrs	r2, r1
 800839a:	07d6      	lsls	r6, r2, #31
 800839c:	d528      	bpl.n	80083f0 <__sflush_r+0xb8>
 800839e:	2200      	movs	r2, #0
 80083a0:	6062      	str	r2, [r4, #4]
 80083a2:	04d9      	lsls	r1, r3, #19
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	6022      	str	r2, [r4, #0]
 80083a8:	d504      	bpl.n	80083b4 <__sflush_r+0x7c>
 80083aa:	1c42      	adds	r2, r0, #1
 80083ac:	d101      	bne.n	80083b2 <__sflush_r+0x7a>
 80083ae:	682b      	ldr	r3, [r5, #0]
 80083b0:	b903      	cbnz	r3, 80083b4 <__sflush_r+0x7c>
 80083b2:	6560      	str	r0, [r4, #84]	; 0x54
 80083b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b6:	602f      	str	r7, [r5, #0]
 80083b8:	2900      	cmp	r1, #0
 80083ba:	d0ca      	beq.n	8008352 <__sflush_r+0x1a>
 80083bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c0:	4299      	cmp	r1, r3
 80083c2:	d002      	beq.n	80083ca <__sflush_r+0x92>
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 fd7f 	bl	8008ec8 <_free_r>
 80083ca:	2000      	movs	r0, #0
 80083cc:	6360      	str	r0, [r4, #52]	; 0x34
 80083ce:	e7c1      	b.n	8008354 <__sflush_r+0x1c>
 80083d0:	6a21      	ldr	r1, [r4, #32]
 80083d2:	2301      	movs	r3, #1
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b0      	blx	r6
 80083d8:	1c41      	adds	r1, r0, #1
 80083da:	d1c7      	bne.n	800836c <__sflush_r+0x34>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0c4      	beq.n	800836c <__sflush_r+0x34>
 80083e2:	2b1d      	cmp	r3, #29
 80083e4:	d001      	beq.n	80083ea <__sflush_r+0xb2>
 80083e6:	2b16      	cmp	r3, #22
 80083e8:	d101      	bne.n	80083ee <__sflush_r+0xb6>
 80083ea:	602f      	str	r7, [r5, #0]
 80083ec:	e7b1      	b.n	8008352 <__sflush_r+0x1a>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	e7ad      	b.n	8008354 <__sflush_r+0x1c>
 80083f8:	690f      	ldr	r7, [r1, #16]
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	d0a9      	beq.n	8008352 <__sflush_r+0x1a>
 80083fe:	0793      	lsls	r3, r2, #30
 8008400:	680e      	ldr	r6, [r1, #0]
 8008402:	bf08      	it	eq
 8008404:	694b      	ldreq	r3, [r1, #20]
 8008406:	600f      	str	r7, [r1, #0]
 8008408:	bf18      	it	ne
 800840a:	2300      	movne	r3, #0
 800840c:	eba6 0807 	sub.w	r8, r6, r7
 8008410:	608b      	str	r3, [r1, #8]
 8008412:	f1b8 0f00 	cmp.w	r8, #0
 8008416:	dd9c      	ble.n	8008352 <__sflush_r+0x1a>
 8008418:	6a21      	ldr	r1, [r4, #32]
 800841a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800841c:	4643      	mov	r3, r8
 800841e:	463a      	mov	r2, r7
 8008420:	4628      	mov	r0, r5
 8008422:	47b0      	blx	r6
 8008424:	2800      	cmp	r0, #0
 8008426:	dc06      	bgt.n	8008436 <__sflush_r+0xfe>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e78e      	b.n	8008354 <__sflush_r+0x1c>
 8008436:	4407      	add	r7, r0
 8008438:	eba8 0800 	sub.w	r8, r8, r0
 800843c:	e7e9      	b.n	8008412 <__sflush_r+0xda>
 800843e:	bf00      	nop
 8008440:	20400001 	.word	0x20400001

08008444 <_fflush_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	690b      	ldr	r3, [r1, #16]
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b913      	cbnz	r3, 8008454 <_fflush_r+0x10>
 800844e:	2500      	movs	r5, #0
 8008450:	4628      	mov	r0, r5
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	b118      	cbz	r0, 800845e <_fflush_r+0x1a>
 8008456:	6983      	ldr	r3, [r0, #24]
 8008458:	b90b      	cbnz	r3, 800845e <_fflush_r+0x1a>
 800845a:	f000 f887 	bl	800856c <__sinit>
 800845e:	4b14      	ldr	r3, [pc, #80]	; (80084b0 <_fflush_r+0x6c>)
 8008460:	429c      	cmp	r4, r3
 8008462:	d11b      	bne.n	800849c <_fflush_r+0x58>
 8008464:	686c      	ldr	r4, [r5, #4]
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0ef      	beq.n	800844e <_fflush_r+0xa>
 800846e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008470:	07d0      	lsls	r0, r2, #31
 8008472:	d404      	bmi.n	800847e <_fflush_r+0x3a>
 8008474:	0599      	lsls	r1, r3, #22
 8008476:	d402      	bmi.n	800847e <_fflush_r+0x3a>
 8008478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800847a:	f000 f91a 	bl	80086b2 <__retarget_lock_acquire_recursive>
 800847e:	4628      	mov	r0, r5
 8008480:	4621      	mov	r1, r4
 8008482:	f7ff ff59 	bl	8008338 <__sflush_r>
 8008486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008488:	07da      	lsls	r2, r3, #31
 800848a:	4605      	mov	r5, r0
 800848c:	d4e0      	bmi.n	8008450 <_fflush_r+0xc>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	059b      	lsls	r3, r3, #22
 8008492:	d4dd      	bmi.n	8008450 <_fflush_r+0xc>
 8008494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008496:	f000 f90d 	bl	80086b4 <__retarget_lock_release_recursive>
 800849a:	e7d9      	b.n	8008450 <_fflush_r+0xc>
 800849c:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <_fflush_r+0x70>)
 800849e:	429c      	cmp	r4, r3
 80084a0:	d101      	bne.n	80084a6 <_fflush_r+0x62>
 80084a2:	68ac      	ldr	r4, [r5, #8]
 80084a4:	e7df      	b.n	8008466 <_fflush_r+0x22>
 80084a6:	4b04      	ldr	r3, [pc, #16]	; (80084b8 <_fflush_r+0x74>)
 80084a8:	429c      	cmp	r4, r3
 80084aa:	bf08      	it	eq
 80084ac:	68ec      	ldreq	r4, [r5, #12]
 80084ae:	e7da      	b.n	8008466 <_fflush_r+0x22>
 80084b0:	0800a0c4 	.word	0x0800a0c4
 80084b4:	0800a0e4 	.word	0x0800a0e4
 80084b8:	0800a0a4 	.word	0x0800a0a4

080084bc <std>:
 80084bc:	2300      	movs	r3, #0
 80084be:	b510      	push	{r4, lr}
 80084c0:	4604      	mov	r4, r0
 80084c2:	e9c0 3300 	strd	r3, r3, [r0]
 80084c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ca:	6083      	str	r3, [r0, #8]
 80084cc:	8181      	strh	r1, [r0, #12]
 80084ce:	6643      	str	r3, [r0, #100]	; 0x64
 80084d0:	81c2      	strh	r2, [r0, #14]
 80084d2:	6183      	str	r3, [r0, #24]
 80084d4:	4619      	mov	r1, r3
 80084d6:	2208      	movs	r2, #8
 80084d8:	305c      	adds	r0, #92	; 0x5c
 80084da:	f7fe fb75 	bl	8006bc8 <memset>
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <std+0x38>)
 80084e0:	6263      	str	r3, [r4, #36]	; 0x24
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <std+0x3c>)
 80084e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <std+0x40>)
 80084e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <std+0x44>)
 80084ec:	6224      	str	r4, [r4, #32]
 80084ee:	6323      	str	r3, [r4, #48]	; 0x30
 80084f0:	bd10      	pop	{r4, pc}
 80084f2:	bf00      	nop
 80084f4:	0800903d 	.word	0x0800903d
 80084f8:	0800905f 	.word	0x0800905f
 80084fc:	08009097 	.word	0x08009097
 8008500:	080090bb 	.word	0x080090bb

08008504 <_cleanup_r>:
 8008504:	4901      	ldr	r1, [pc, #4]	; (800850c <_cleanup_r+0x8>)
 8008506:	f000 b8af 	b.w	8008668 <_fwalk_reent>
 800850a:	bf00      	nop
 800850c:	08008445 	.word	0x08008445

08008510 <__sfmoreglue>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	1e4a      	subs	r2, r1, #1
 8008514:	2568      	movs	r5, #104	; 0x68
 8008516:	4355      	muls	r5, r2
 8008518:	460e      	mov	r6, r1
 800851a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800851e:	f000 fd23 	bl	8008f68 <_malloc_r>
 8008522:	4604      	mov	r4, r0
 8008524:	b140      	cbz	r0, 8008538 <__sfmoreglue+0x28>
 8008526:	2100      	movs	r1, #0
 8008528:	e9c0 1600 	strd	r1, r6, [r0]
 800852c:	300c      	adds	r0, #12
 800852e:	60a0      	str	r0, [r4, #8]
 8008530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008534:	f7fe fb48 	bl	8006bc8 <memset>
 8008538:	4620      	mov	r0, r4
 800853a:	bd70      	pop	{r4, r5, r6, pc}

0800853c <__sfp_lock_acquire>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__sfp_lock_acquire+0x8>)
 800853e:	f000 b8b8 	b.w	80086b2 <__retarget_lock_acquire_recursive>
 8008542:	bf00      	nop
 8008544:	2000061c 	.word	0x2000061c

08008548 <__sfp_lock_release>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__sfp_lock_release+0x8>)
 800854a:	f000 b8b3 	b.w	80086b4 <__retarget_lock_release_recursive>
 800854e:	bf00      	nop
 8008550:	2000061c 	.word	0x2000061c

08008554 <__sinit_lock_acquire>:
 8008554:	4801      	ldr	r0, [pc, #4]	; (800855c <__sinit_lock_acquire+0x8>)
 8008556:	f000 b8ac 	b.w	80086b2 <__retarget_lock_acquire_recursive>
 800855a:	bf00      	nop
 800855c:	20000617 	.word	0x20000617

08008560 <__sinit_lock_release>:
 8008560:	4801      	ldr	r0, [pc, #4]	; (8008568 <__sinit_lock_release+0x8>)
 8008562:	f000 b8a7 	b.w	80086b4 <__retarget_lock_release_recursive>
 8008566:	bf00      	nop
 8008568:	20000617 	.word	0x20000617

0800856c <__sinit>:
 800856c:	b510      	push	{r4, lr}
 800856e:	4604      	mov	r4, r0
 8008570:	f7ff fff0 	bl	8008554 <__sinit_lock_acquire>
 8008574:	69a3      	ldr	r3, [r4, #24]
 8008576:	b11b      	cbz	r3, 8008580 <__sinit+0x14>
 8008578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857c:	f7ff bff0 	b.w	8008560 <__sinit_lock_release>
 8008580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008584:	6523      	str	r3, [r4, #80]	; 0x50
 8008586:	4b13      	ldr	r3, [pc, #76]	; (80085d4 <__sinit+0x68>)
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <__sinit+0x6c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	62a2      	str	r2, [r4, #40]	; 0x28
 800858e:	42a3      	cmp	r3, r4
 8008590:	bf04      	itt	eq
 8008592:	2301      	moveq	r3, #1
 8008594:	61a3      	streq	r3, [r4, #24]
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f820 	bl	80085dc <__sfp>
 800859c:	6060      	str	r0, [r4, #4]
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 f81c 	bl	80085dc <__sfp>
 80085a4:	60a0      	str	r0, [r4, #8]
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 f818 	bl	80085dc <__sfp>
 80085ac:	2200      	movs	r2, #0
 80085ae:	60e0      	str	r0, [r4, #12]
 80085b0:	2104      	movs	r1, #4
 80085b2:	6860      	ldr	r0, [r4, #4]
 80085b4:	f7ff ff82 	bl	80084bc <std>
 80085b8:	68a0      	ldr	r0, [r4, #8]
 80085ba:	2201      	movs	r2, #1
 80085bc:	2109      	movs	r1, #9
 80085be:	f7ff ff7d 	bl	80084bc <std>
 80085c2:	68e0      	ldr	r0, [r4, #12]
 80085c4:	2202      	movs	r2, #2
 80085c6:	2112      	movs	r1, #18
 80085c8:	f7ff ff78 	bl	80084bc <std>
 80085cc:	2301      	movs	r3, #1
 80085ce:	61a3      	str	r3, [r4, #24]
 80085d0:	e7d2      	b.n	8008578 <__sinit+0xc>
 80085d2:	bf00      	nop
 80085d4:	08009fd8 	.word	0x08009fd8
 80085d8:	08008505 	.word	0x08008505

080085dc <__sfp>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	4607      	mov	r7, r0
 80085e0:	f7ff ffac 	bl	800853c <__sfp_lock_acquire>
 80085e4:	4b1e      	ldr	r3, [pc, #120]	; (8008660 <__sfp+0x84>)
 80085e6:	681e      	ldr	r6, [r3, #0]
 80085e8:	69b3      	ldr	r3, [r6, #24]
 80085ea:	b913      	cbnz	r3, 80085f2 <__sfp+0x16>
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff ffbd 	bl	800856c <__sinit>
 80085f2:	3648      	adds	r6, #72	; 0x48
 80085f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	d503      	bpl.n	8008604 <__sfp+0x28>
 80085fc:	6833      	ldr	r3, [r6, #0]
 80085fe:	b30b      	cbz	r3, 8008644 <__sfp+0x68>
 8008600:	6836      	ldr	r6, [r6, #0]
 8008602:	e7f7      	b.n	80085f4 <__sfp+0x18>
 8008604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008608:	b9d5      	cbnz	r5, 8008640 <__sfp+0x64>
 800860a:	4b16      	ldr	r3, [pc, #88]	; (8008664 <__sfp+0x88>)
 800860c:	60e3      	str	r3, [r4, #12]
 800860e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008612:	6665      	str	r5, [r4, #100]	; 0x64
 8008614:	f000 f84c 	bl	80086b0 <__retarget_lock_init_recursive>
 8008618:	f7ff ff96 	bl	8008548 <__sfp_lock_release>
 800861c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008624:	6025      	str	r5, [r4, #0]
 8008626:	61a5      	str	r5, [r4, #24]
 8008628:	2208      	movs	r2, #8
 800862a:	4629      	mov	r1, r5
 800862c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008630:	f7fe faca 	bl	8006bc8 <memset>
 8008634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800863c:	4620      	mov	r0, r4
 800863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008640:	3468      	adds	r4, #104	; 0x68
 8008642:	e7d9      	b.n	80085f8 <__sfp+0x1c>
 8008644:	2104      	movs	r1, #4
 8008646:	4638      	mov	r0, r7
 8008648:	f7ff ff62 	bl	8008510 <__sfmoreglue>
 800864c:	4604      	mov	r4, r0
 800864e:	6030      	str	r0, [r6, #0]
 8008650:	2800      	cmp	r0, #0
 8008652:	d1d5      	bne.n	8008600 <__sfp+0x24>
 8008654:	f7ff ff78 	bl	8008548 <__sfp_lock_release>
 8008658:	230c      	movs	r3, #12
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	e7ee      	b.n	800863c <__sfp+0x60>
 800865e:	bf00      	nop
 8008660:	08009fd8 	.word	0x08009fd8
 8008664:	ffff0001 	.word	0xffff0001

08008668 <_fwalk_reent>:
 8008668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800866c:	4606      	mov	r6, r0
 800866e:	4688      	mov	r8, r1
 8008670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008674:	2700      	movs	r7, #0
 8008676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800867a:	f1b9 0901 	subs.w	r9, r9, #1
 800867e:	d505      	bpl.n	800868c <_fwalk_reent+0x24>
 8008680:	6824      	ldr	r4, [r4, #0]
 8008682:	2c00      	cmp	r4, #0
 8008684:	d1f7      	bne.n	8008676 <_fwalk_reent+0xe>
 8008686:	4638      	mov	r0, r7
 8008688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868c:	89ab      	ldrh	r3, [r5, #12]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d907      	bls.n	80086a2 <_fwalk_reent+0x3a>
 8008692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008696:	3301      	adds	r3, #1
 8008698:	d003      	beq.n	80086a2 <_fwalk_reent+0x3a>
 800869a:	4629      	mov	r1, r5
 800869c:	4630      	mov	r0, r6
 800869e:	47c0      	blx	r8
 80086a0:	4307      	orrs	r7, r0
 80086a2:	3568      	adds	r5, #104	; 0x68
 80086a4:	e7e9      	b.n	800867a <_fwalk_reent+0x12>
	...

080086a8 <_localeconv_r>:
 80086a8:	4800      	ldr	r0, [pc, #0]	; (80086ac <_localeconv_r+0x4>)
 80086aa:	4770      	bx	lr
 80086ac:	20000160 	.word	0x20000160

080086b0 <__retarget_lock_init_recursive>:
 80086b0:	4770      	bx	lr

080086b2 <__retarget_lock_acquire_recursive>:
 80086b2:	4770      	bx	lr

080086b4 <__retarget_lock_release_recursive>:
 80086b4:	4770      	bx	lr

080086b6 <__swhatbuf_r>:
 80086b6:	b570      	push	{r4, r5, r6, lr}
 80086b8:	460e      	mov	r6, r1
 80086ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086be:	2900      	cmp	r1, #0
 80086c0:	b096      	sub	sp, #88	; 0x58
 80086c2:	4614      	mov	r4, r2
 80086c4:	461d      	mov	r5, r3
 80086c6:	da07      	bge.n	80086d8 <__swhatbuf_r+0x22>
 80086c8:	2300      	movs	r3, #0
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	89b3      	ldrh	r3, [r6, #12]
 80086ce:	061a      	lsls	r2, r3, #24
 80086d0:	d410      	bmi.n	80086f4 <__swhatbuf_r+0x3e>
 80086d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d6:	e00e      	b.n	80086f6 <__swhatbuf_r+0x40>
 80086d8:	466a      	mov	r2, sp
 80086da:	f000 fd45 	bl	8009168 <_fstat_r>
 80086de:	2800      	cmp	r0, #0
 80086e0:	dbf2      	blt.n	80086c8 <__swhatbuf_r+0x12>
 80086e2:	9a01      	ldr	r2, [sp, #4]
 80086e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086ec:	425a      	negs	r2, r3
 80086ee:	415a      	adcs	r2, r3
 80086f0:	602a      	str	r2, [r5, #0]
 80086f2:	e7ee      	b.n	80086d2 <__swhatbuf_r+0x1c>
 80086f4:	2340      	movs	r3, #64	; 0x40
 80086f6:	2000      	movs	r0, #0
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	b016      	add	sp, #88	; 0x58
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008700 <__smakebuf_r>:
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008704:	079d      	lsls	r5, r3, #30
 8008706:	4606      	mov	r6, r0
 8008708:	460c      	mov	r4, r1
 800870a:	d507      	bpl.n	800871c <__smakebuf_r+0x1c>
 800870c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	2301      	movs	r3, #1
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	b002      	add	sp, #8
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	ab01      	add	r3, sp, #4
 800871e:	466a      	mov	r2, sp
 8008720:	f7ff ffc9 	bl	80086b6 <__swhatbuf_r>
 8008724:	9900      	ldr	r1, [sp, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	4630      	mov	r0, r6
 800872a:	f000 fc1d 	bl	8008f68 <_malloc_r>
 800872e:	b948      	cbnz	r0, 8008744 <__smakebuf_r+0x44>
 8008730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008734:	059a      	lsls	r2, r3, #22
 8008736:	d4ef      	bmi.n	8008718 <__smakebuf_r+0x18>
 8008738:	f023 0303 	bic.w	r3, r3, #3
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e7e3      	b.n	800870c <__smakebuf_r+0xc>
 8008744:	4b0d      	ldr	r3, [pc, #52]	; (800877c <__smakebuf_r+0x7c>)
 8008746:	62b3      	str	r3, [r6, #40]	; 0x28
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	6020      	str	r0, [r4, #0]
 800874c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	6163      	str	r3, [r4, #20]
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	6120      	str	r0, [r4, #16]
 800875a:	b15b      	cbz	r3, 8008774 <__smakebuf_r+0x74>
 800875c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008760:	4630      	mov	r0, r6
 8008762:	f000 fd13 	bl	800918c <_isatty_r>
 8008766:	b128      	cbz	r0, 8008774 <__smakebuf_r+0x74>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	f043 0301 	orr.w	r3, r3, #1
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	89a0      	ldrh	r0, [r4, #12]
 8008776:	4305      	orrs	r5, r0
 8008778:	81a5      	strh	r5, [r4, #12]
 800877a:	e7cd      	b.n	8008718 <__smakebuf_r+0x18>
 800877c:	08008505 	.word	0x08008505

08008780 <malloc>:
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <malloc+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f000 bbef 	b.w	8008f68 <_malloc_r>
 800878a:	bf00      	nop
 800878c:	2000000c 	.word	0x2000000c

08008790 <memcpy>:
 8008790:	440a      	add	r2, r1
 8008792:	4291      	cmp	r1, r2
 8008794:	f100 33ff 	add.w	r3, r0, #4294967295
 8008798:	d100      	bne.n	800879c <memcpy+0xc>
 800879a:	4770      	bx	lr
 800879c:	b510      	push	{r4, lr}
 800879e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a6:	4291      	cmp	r1, r2
 80087a8:	d1f9      	bne.n	800879e <memcpy+0xe>
 80087aa:	bd10      	pop	{r4, pc}

080087ac <_Balloc>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
 80087b4:	b976      	cbnz	r6, 80087d4 <_Balloc+0x28>
 80087b6:	2010      	movs	r0, #16
 80087b8:	f7ff ffe2 	bl	8008780 <malloc>
 80087bc:	4602      	mov	r2, r0
 80087be:	6260      	str	r0, [r4, #36]	; 0x24
 80087c0:	b920      	cbnz	r0, 80087cc <_Balloc+0x20>
 80087c2:	4b18      	ldr	r3, [pc, #96]	; (8008824 <_Balloc+0x78>)
 80087c4:	4818      	ldr	r0, [pc, #96]	; (8008828 <_Balloc+0x7c>)
 80087c6:	2166      	movs	r1, #102	; 0x66
 80087c8:	f000 fc8e 	bl	80090e8 <__assert_func>
 80087cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d0:	6006      	str	r6, [r0, #0]
 80087d2:	60c6      	str	r6, [r0, #12]
 80087d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087d6:	68f3      	ldr	r3, [r6, #12]
 80087d8:	b183      	cbz	r3, 80087fc <_Balloc+0x50>
 80087da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087e2:	b9b8      	cbnz	r0, 8008814 <_Balloc+0x68>
 80087e4:	2101      	movs	r1, #1
 80087e6:	fa01 f605 	lsl.w	r6, r1, r5
 80087ea:	1d72      	adds	r2, r6, #5
 80087ec:	0092      	lsls	r2, r2, #2
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fb5a 	bl	8008ea8 <_calloc_r>
 80087f4:	b160      	cbz	r0, 8008810 <_Balloc+0x64>
 80087f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087fa:	e00e      	b.n	800881a <_Balloc+0x6e>
 80087fc:	2221      	movs	r2, #33	; 0x21
 80087fe:	2104      	movs	r1, #4
 8008800:	4620      	mov	r0, r4
 8008802:	f000 fb51 	bl	8008ea8 <_calloc_r>
 8008806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008808:	60f0      	str	r0, [r6, #12]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e4      	bne.n	80087da <_Balloc+0x2e>
 8008810:	2000      	movs	r0, #0
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	6802      	ldr	r2, [r0, #0]
 8008816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800881a:	2300      	movs	r3, #0
 800881c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008820:	e7f7      	b.n	8008812 <_Balloc+0x66>
 8008822:	bf00      	nop
 8008824:	0800a01d 	.word	0x0800a01d
 8008828:	0800a104 	.word	0x0800a104

0800882c <_Bfree>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008830:	4605      	mov	r5, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b976      	cbnz	r6, 8008854 <_Bfree+0x28>
 8008836:	2010      	movs	r0, #16
 8008838:	f7ff ffa2 	bl	8008780 <malloc>
 800883c:	4602      	mov	r2, r0
 800883e:	6268      	str	r0, [r5, #36]	; 0x24
 8008840:	b920      	cbnz	r0, 800884c <_Bfree+0x20>
 8008842:	4b09      	ldr	r3, [pc, #36]	; (8008868 <_Bfree+0x3c>)
 8008844:	4809      	ldr	r0, [pc, #36]	; (800886c <_Bfree+0x40>)
 8008846:	218a      	movs	r1, #138	; 0x8a
 8008848:	f000 fc4e 	bl	80090e8 <__assert_func>
 800884c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008850:	6006      	str	r6, [r0, #0]
 8008852:	60c6      	str	r6, [r0, #12]
 8008854:	b13c      	cbz	r4, 8008866 <_Bfree+0x3a>
 8008856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008858:	6862      	ldr	r2, [r4, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008860:	6021      	str	r1, [r4, #0]
 8008862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	0800a01d 	.word	0x0800a01d
 800886c:	0800a104 	.word	0x0800a104

08008870 <__multadd>:
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	690e      	ldr	r6, [r1, #16]
 8008876:	4607      	mov	r7, r0
 8008878:	4698      	mov	r8, r3
 800887a:	460c      	mov	r4, r1
 800887c:	f101 0014 	add.w	r0, r1, #20
 8008880:	2300      	movs	r3, #0
 8008882:	6805      	ldr	r5, [r0, #0]
 8008884:	b2a9      	uxth	r1, r5
 8008886:	fb02 8101 	mla	r1, r2, r1, r8
 800888a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800888e:	0c2d      	lsrs	r5, r5, #16
 8008890:	fb02 c505 	mla	r5, r2, r5, ip
 8008894:	b289      	uxth	r1, r1
 8008896:	3301      	adds	r3, #1
 8008898:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800889c:	429e      	cmp	r6, r3
 800889e:	f840 1b04 	str.w	r1, [r0], #4
 80088a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80088a6:	dcec      	bgt.n	8008882 <__multadd+0x12>
 80088a8:	f1b8 0f00 	cmp.w	r8, #0
 80088ac:	d022      	beq.n	80088f4 <__multadd+0x84>
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	42b3      	cmp	r3, r6
 80088b2:	dc19      	bgt.n	80088e8 <__multadd+0x78>
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4638      	mov	r0, r7
 80088b8:	3101      	adds	r1, #1
 80088ba:	f7ff ff77 	bl	80087ac <_Balloc>
 80088be:	4605      	mov	r5, r0
 80088c0:	b928      	cbnz	r0, 80088ce <__multadd+0x5e>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <__multadd+0x8c>)
 80088c6:	480e      	ldr	r0, [pc, #56]	; (8008900 <__multadd+0x90>)
 80088c8:	21b5      	movs	r1, #181	; 0xb5
 80088ca:	f000 fc0d 	bl	80090e8 <__assert_func>
 80088ce:	6922      	ldr	r2, [r4, #16]
 80088d0:	3202      	adds	r2, #2
 80088d2:	f104 010c 	add.w	r1, r4, #12
 80088d6:	0092      	lsls	r2, r2, #2
 80088d8:	300c      	adds	r0, #12
 80088da:	f7ff ff59 	bl	8008790 <memcpy>
 80088de:	4621      	mov	r1, r4
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ffa3 	bl	800882c <_Bfree>
 80088e6:	462c      	mov	r4, r5
 80088e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80088ec:	3601      	adds	r6, #1
 80088ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80088f2:	6126      	str	r6, [r4, #16]
 80088f4:	4620      	mov	r0, r4
 80088f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fa:	bf00      	nop
 80088fc:	0800a093 	.word	0x0800a093
 8008900:	0800a104 	.word	0x0800a104

08008904 <__hi0bits>:
 8008904:	0c03      	lsrs	r3, r0, #16
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	b9d3      	cbnz	r3, 8008940 <__hi0bits+0x3c>
 800890a:	0400      	lsls	r0, r0, #16
 800890c:	2310      	movs	r3, #16
 800890e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008912:	bf04      	itt	eq
 8008914:	0200      	lsleq	r0, r0, #8
 8008916:	3308      	addeq	r3, #8
 8008918:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800891c:	bf04      	itt	eq
 800891e:	0100      	lsleq	r0, r0, #4
 8008920:	3304      	addeq	r3, #4
 8008922:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008926:	bf04      	itt	eq
 8008928:	0080      	lsleq	r0, r0, #2
 800892a:	3302      	addeq	r3, #2
 800892c:	2800      	cmp	r0, #0
 800892e:	db05      	blt.n	800893c <__hi0bits+0x38>
 8008930:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008934:	f103 0301 	add.w	r3, r3, #1
 8008938:	bf08      	it	eq
 800893a:	2320      	moveq	r3, #32
 800893c:	4618      	mov	r0, r3
 800893e:	4770      	bx	lr
 8008940:	2300      	movs	r3, #0
 8008942:	e7e4      	b.n	800890e <__hi0bits+0xa>

08008944 <__lo0bits>:
 8008944:	6803      	ldr	r3, [r0, #0]
 8008946:	f013 0207 	ands.w	r2, r3, #7
 800894a:	4601      	mov	r1, r0
 800894c:	d00b      	beq.n	8008966 <__lo0bits+0x22>
 800894e:	07da      	lsls	r2, r3, #31
 8008950:	d424      	bmi.n	800899c <__lo0bits+0x58>
 8008952:	0798      	lsls	r0, r3, #30
 8008954:	bf49      	itett	mi
 8008956:	085b      	lsrmi	r3, r3, #1
 8008958:	089b      	lsrpl	r3, r3, #2
 800895a:	2001      	movmi	r0, #1
 800895c:	600b      	strmi	r3, [r1, #0]
 800895e:	bf5c      	itt	pl
 8008960:	600b      	strpl	r3, [r1, #0]
 8008962:	2002      	movpl	r0, #2
 8008964:	4770      	bx	lr
 8008966:	b298      	uxth	r0, r3
 8008968:	b9b0      	cbnz	r0, 8008998 <__lo0bits+0x54>
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	2010      	movs	r0, #16
 800896e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008972:	bf04      	itt	eq
 8008974:	0a1b      	lsreq	r3, r3, #8
 8008976:	3008      	addeq	r0, #8
 8008978:	071a      	lsls	r2, r3, #28
 800897a:	bf04      	itt	eq
 800897c:	091b      	lsreq	r3, r3, #4
 800897e:	3004      	addeq	r0, #4
 8008980:	079a      	lsls	r2, r3, #30
 8008982:	bf04      	itt	eq
 8008984:	089b      	lsreq	r3, r3, #2
 8008986:	3002      	addeq	r0, #2
 8008988:	07da      	lsls	r2, r3, #31
 800898a:	d403      	bmi.n	8008994 <__lo0bits+0x50>
 800898c:	085b      	lsrs	r3, r3, #1
 800898e:	f100 0001 	add.w	r0, r0, #1
 8008992:	d005      	beq.n	80089a0 <__lo0bits+0x5c>
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	4770      	bx	lr
 8008998:	4610      	mov	r0, r2
 800899a:	e7e8      	b.n	800896e <__lo0bits+0x2a>
 800899c:	2000      	movs	r0, #0
 800899e:	4770      	bx	lr
 80089a0:	2020      	movs	r0, #32
 80089a2:	4770      	bx	lr

080089a4 <__i2b>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	2101      	movs	r1, #1
 80089aa:	f7ff feff 	bl	80087ac <_Balloc>
 80089ae:	4602      	mov	r2, r0
 80089b0:	b928      	cbnz	r0, 80089be <__i2b+0x1a>
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <__i2b+0x24>)
 80089b4:	4805      	ldr	r0, [pc, #20]	; (80089cc <__i2b+0x28>)
 80089b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089ba:	f000 fb95 	bl	80090e8 <__assert_func>
 80089be:	2301      	movs	r3, #1
 80089c0:	6144      	str	r4, [r0, #20]
 80089c2:	6103      	str	r3, [r0, #16]
 80089c4:	bd10      	pop	{r4, pc}
 80089c6:	bf00      	nop
 80089c8:	0800a093 	.word	0x0800a093
 80089cc:	0800a104 	.word	0x0800a104

080089d0 <__multiply>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	4614      	mov	r4, r2
 80089d6:	690a      	ldr	r2, [r1, #16]
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	429a      	cmp	r2, r3
 80089dc:	bfb8      	it	lt
 80089de:	460b      	movlt	r3, r1
 80089e0:	460d      	mov	r5, r1
 80089e2:	bfbc      	itt	lt
 80089e4:	4625      	movlt	r5, r4
 80089e6:	461c      	movlt	r4, r3
 80089e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80089ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089f0:	68ab      	ldr	r3, [r5, #8]
 80089f2:	6869      	ldr	r1, [r5, #4]
 80089f4:	eb0a 0709 	add.w	r7, sl, r9
 80089f8:	42bb      	cmp	r3, r7
 80089fa:	b085      	sub	sp, #20
 80089fc:	bfb8      	it	lt
 80089fe:	3101      	addlt	r1, #1
 8008a00:	f7ff fed4 	bl	80087ac <_Balloc>
 8008a04:	b930      	cbnz	r0, 8008a14 <__multiply+0x44>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b42      	ldr	r3, [pc, #264]	; (8008b14 <__multiply+0x144>)
 8008a0a:	4843      	ldr	r0, [pc, #268]	; (8008b18 <__multiply+0x148>)
 8008a0c:	f240 115d 	movw	r1, #349	; 0x15d
 8008a10:	f000 fb6a 	bl	80090e8 <__assert_func>
 8008a14:	f100 0614 	add.w	r6, r0, #20
 8008a18:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008a1c:	4633      	mov	r3, r6
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4543      	cmp	r3, r8
 8008a22:	d31e      	bcc.n	8008a62 <__multiply+0x92>
 8008a24:	f105 0c14 	add.w	ip, r5, #20
 8008a28:	f104 0314 	add.w	r3, r4, #20
 8008a2c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008a30:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008a34:	9202      	str	r2, [sp, #8]
 8008a36:	ebac 0205 	sub.w	r2, ip, r5
 8008a3a:	3a15      	subs	r2, #21
 8008a3c:	f022 0203 	bic.w	r2, r2, #3
 8008a40:	3204      	adds	r2, #4
 8008a42:	f105 0115 	add.w	r1, r5, #21
 8008a46:	458c      	cmp	ip, r1
 8008a48:	bf38      	it	cc
 8008a4a:	2204      	movcc	r2, #4
 8008a4c:	9201      	str	r2, [sp, #4]
 8008a4e:	9a02      	ldr	r2, [sp, #8]
 8008a50:	9303      	str	r3, [sp, #12]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d808      	bhi.n	8008a68 <__multiply+0x98>
 8008a56:	2f00      	cmp	r7, #0
 8008a58:	dc55      	bgt.n	8008b06 <__multiply+0x136>
 8008a5a:	6107      	str	r7, [r0, #16]
 8008a5c:	b005      	add	sp, #20
 8008a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a62:	f843 2b04 	str.w	r2, [r3], #4
 8008a66:	e7db      	b.n	8008a20 <__multiply+0x50>
 8008a68:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a6c:	f1ba 0f00 	cmp.w	sl, #0
 8008a70:	d020      	beq.n	8008ab4 <__multiply+0xe4>
 8008a72:	f105 0e14 	add.w	lr, r5, #20
 8008a76:	46b1      	mov	r9, r6
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a7e:	f8d9 b000 	ldr.w	fp, [r9]
 8008a82:	b2a1      	uxth	r1, r4
 8008a84:	fa1f fb8b 	uxth.w	fp, fp
 8008a88:	fb0a b101 	mla	r1, sl, r1, fp
 8008a8c:	4411      	add	r1, r2
 8008a8e:	f8d9 2000 	ldr.w	r2, [r9]
 8008a92:	0c24      	lsrs	r4, r4, #16
 8008a94:	0c12      	lsrs	r2, r2, #16
 8008a96:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a9a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a9e:	b289      	uxth	r1, r1
 8008aa0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008aa4:	45f4      	cmp	ip, lr
 8008aa6:	f849 1b04 	str.w	r1, [r9], #4
 8008aaa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008aae:	d8e4      	bhi.n	8008a7a <__multiply+0xaa>
 8008ab0:	9901      	ldr	r1, [sp, #4]
 8008ab2:	5072      	str	r2, [r6, r1]
 8008ab4:	9a03      	ldr	r2, [sp, #12]
 8008ab6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008aba:	3304      	adds	r3, #4
 8008abc:	f1b9 0f00 	cmp.w	r9, #0
 8008ac0:	d01f      	beq.n	8008b02 <__multiply+0x132>
 8008ac2:	6834      	ldr	r4, [r6, #0]
 8008ac4:	f105 0114 	add.w	r1, r5, #20
 8008ac8:	46b6      	mov	lr, r6
 8008aca:	f04f 0a00 	mov.w	sl, #0
 8008ace:	880a      	ldrh	r2, [r1, #0]
 8008ad0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008ad4:	fb09 b202 	mla	r2, r9, r2, fp
 8008ad8:	4492      	add	sl, r2
 8008ada:	b2a4      	uxth	r4, r4
 8008adc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ae0:	f84e 4b04 	str.w	r4, [lr], #4
 8008ae4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ae8:	f8be 2000 	ldrh.w	r2, [lr]
 8008aec:	0c24      	lsrs	r4, r4, #16
 8008aee:	fb09 2404 	mla	r4, r9, r4, r2
 8008af2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008af6:	458c      	cmp	ip, r1
 8008af8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008afc:	d8e7      	bhi.n	8008ace <__multiply+0xfe>
 8008afe:	9a01      	ldr	r2, [sp, #4]
 8008b00:	50b4      	str	r4, [r6, r2]
 8008b02:	3604      	adds	r6, #4
 8008b04:	e7a3      	b.n	8008a4e <__multiply+0x7e>
 8008b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1a5      	bne.n	8008a5a <__multiply+0x8a>
 8008b0e:	3f01      	subs	r7, #1
 8008b10:	e7a1      	b.n	8008a56 <__multiply+0x86>
 8008b12:	bf00      	nop
 8008b14:	0800a093 	.word	0x0800a093
 8008b18:	0800a104 	.word	0x0800a104

08008b1c <__pow5mult>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	4615      	mov	r5, r2
 8008b22:	f012 0203 	ands.w	r2, r2, #3
 8008b26:	4606      	mov	r6, r0
 8008b28:	460f      	mov	r7, r1
 8008b2a:	d007      	beq.n	8008b3c <__pow5mult+0x20>
 8008b2c:	4c25      	ldr	r4, [pc, #148]	; (8008bc4 <__pow5mult+0xa8>)
 8008b2e:	3a01      	subs	r2, #1
 8008b30:	2300      	movs	r3, #0
 8008b32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b36:	f7ff fe9b 	bl	8008870 <__multadd>
 8008b3a:	4607      	mov	r7, r0
 8008b3c:	10ad      	asrs	r5, r5, #2
 8008b3e:	d03d      	beq.n	8008bbc <__pow5mult+0xa0>
 8008b40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b42:	b97c      	cbnz	r4, 8008b64 <__pow5mult+0x48>
 8008b44:	2010      	movs	r0, #16
 8008b46:	f7ff fe1b 	bl	8008780 <malloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	6270      	str	r0, [r6, #36]	; 0x24
 8008b4e:	b928      	cbnz	r0, 8008b5c <__pow5mult+0x40>
 8008b50:	4b1d      	ldr	r3, [pc, #116]	; (8008bc8 <__pow5mult+0xac>)
 8008b52:	481e      	ldr	r0, [pc, #120]	; (8008bcc <__pow5mult+0xb0>)
 8008b54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b58:	f000 fac6 	bl	80090e8 <__assert_func>
 8008b5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b60:	6004      	str	r4, [r0, #0]
 8008b62:	60c4      	str	r4, [r0, #12]
 8008b64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b6c:	b94c      	cbnz	r4, 8008b82 <__pow5mult+0x66>
 8008b6e:	f240 2171 	movw	r1, #625	; 0x271
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff ff16 	bl	80089a4 <__i2b>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b7e:	4604      	mov	r4, r0
 8008b80:	6003      	str	r3, [r0, #0]
 8008b82:	f04f 0900 	mov.w	r9, #0
 8008b86:	07eb      	lsls	r3, r5, #31
 8008b88:	d50a      	bpl.n	8008ba0 <__pow5mult+0x84>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff ff1e 	bl	80089d0 <__multiply>
 8008b94:	4639      	mov	r1, r7
 8008b96:	4680      	mov	r8, r0
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f7ff fe47 	bl	800882c <_Bfree>
 8008b9e:	4647      	mov	r7, r8
 8008ba0:	106d      	asrs	r5, r5, #1
 8008ba2:	d00b      	beq.n	8008bbc <__pow5mult+0xa0>
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	b938      	cbnz	r0, 8008bb8 <__pow5mult+0x9c>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	4621      	mov	r1, r4
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ff0f 	bl	80089d0 <__multiply>
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	f8c0 9000 	str.w	r9, [r0]
 8008bb8:	4604      	mov	r4, r0
 8008bba:	e7e4      	b.n	8008b86 <__pow5mult+0x6a>
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0800a258 	.word	0x0800a258
 8008bc8:	0800a01d 	.word	0x0800a01d
 8008bcc:	0800a104 	.word	0x0800a104

08008bd0 <__lshift>:
 8008bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	6849      	ldr	r1, [r1, #4]
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bde:	68a3      	ldr	r3, [r4, #8]
 8008be0:	4607      	mov	r7, r0
 8008be2:	4691      	mov	r9, r2
 8008be4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008be8:	f108 0601 	add.w	r6, r8, #1
 8008bec:	42b3      	cmp	r3, r6
 8008bee:	db0b      	blt.n	8008c08 <__lshift+0x38>
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f7ff fddb 	bl	80087ac <_Balloc>
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	b948      	cbnz	r0, 8008c0e <__lshift+0x3e>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	4b28      	ldr	r3, [pc, #160]	; (8008ca0 <__lshift+0xd0>)
 8008bfe:	4829      	ldr	r0, [pc, #164]	; (8008ca4 <__lshift+0xd4>)
 8008c00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c04:	f000 fa70 	bl	80090e8 <__assert_func>
 8008c08:	3101      	adds	r1, #1
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	e7ee      	b.n	8008bec <__lshift+0x1c>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f100 0114 	add.w	r1, r0, #20
 8008c14:	f100 0210 	add.w	r2, r0, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	4553      	cmp	r3, sl
 8008c1c:	db33      	blt.n	8008c86 <__lshift+0xb6>
 8008c1e:	6920      	ldr	r0, [r4, #16]
 8008c20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c24:	f104 0314 	add.w	r3, r4, #20
 8008c28:	f019 091f 	ands.w	r9, r9, #31
 8008c2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c34:	d02b      	beq.n	8008c8e <__lshift+0xbe>
 8008c36:	f1c9 0e20 	rsb	lr, r9, #32
 8008c3a:	468a      	mov	sl, r1
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	fa00 f009 	lsl.w	r0, r0, r9
 8008c44:	4302      	orrs	r2, r0
 8008c46:	f84a 2b04 	str.w	r2, [sl], #4
 8008c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4e:	459c      	cmp	ip, r3
 8008c50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c54:	d8f3      	bhi.n	8008c3e <__lshift+0x6e>
 8008c56:	ebac 0304 	sub.w	r3, ip, r4
 8008c5a:	3b15      	subs	r3, #21
 8008c5c:	f023 0303 	bic.w	r3, r3, #3
 8008c60:	3304      	adds	r3, #4
 8008c62:	f104 0015 	add.w	r0, r4, #21
 8008c66:	4584      	cmp	ip, r0
 8008c68:	bf38      	it	cc
 8008c6a:	2304      	movcc	r3, #4
 8008c6c:	50ca      	str	r2, [r1, r3]
 8008c6e:	b10a      	cbz	r2, 8008c74 <__lshift+0xa4>
 8008c70:	f108 0602 	add.w	r6, r8, #2
 8008c74:	3e01      	subs	r6, #1
 8008c76:	4638      	mov	r0, r7
 8008c78:	612e      	str	r6, [r5, #16]
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	f7ff fdd6 	bl	800882c <_Bfree>
 8008c80:	4628      	mov	r0, r5
 8008c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	e7c5      	b.n	8008c1a <__lshift+0x4a>
 8008c8e:	3904      	subs	r1, #4
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c98:	459c      	cmp	ip, r3
 8008c9a:	d8f9      	bhi.n	8008c90 <__lshift+0xc0>
 8008c9c:	e7ea      	b.n	8008c74 <__lshift+0xa4>
 8008c9e:	bf00      	nop
 8008ca0:	0800a093 	.word	0x0800a093
 8008ca4:	0800a104 	.word	0x0800a104

08008ca8 <__mcmp>:
 8008ca8:	b530      	push	{r4, r5, lr}
 8008caa:	6902      	ldr	r2, [r0, #16]
 8008cac:	690c      	ldr	r4, [r1, #16]
 8008cae:	1b12      	subs	r2, r2, r4
 8008cb0:	d10e      	bne.n	8008cd0 <__mcmp+0x28>
 8008cb2:	f100 0314 	add.w	r3, r0, #20
 8008cb6:	3114      	adds	r1, #20
 8008cb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cc8:	42a5      	cmp	r5, r4
 8008cca:	d003      	beq.n	8008cd4 <__mcmp+0x2c>
 8008ccc:	d305      	bcc.n	8008cda <__mcmp+0x32>
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	bd30      	pop	{r4, r5, pc}
 8008cd4:	4283      	cmp	r3, r0
 8008cd6:	d3f3      	bcc.n	8008cc0 <__mcmp+0x18>
 8008cd8:	e7fa      	b.n	8008cd0 <__mcmp+0x28>
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	e7f7      	b.n	8008cd0 <__mcmp+0x28>

08008ce0 <__mdiff>:
 8008ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4620      	mov	r0, r4
 8008cec:	4617      	mov	r7, r2
 8008cee:	f7ff ffdb 	bl	8008ca8 <__mcmp>
 8008cf2:	1e05      	subs	r5, r0, #0
 8008cf4:	d110      	bne.n	8008d18 <__mdiff+0x38>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7ff fd57 	bl	80087ac <_Balloc>
 8008cfe:	b930      	cbnz	r0, 8008d0e <__mdiff+0x2e>
 8008d00:	4b39      	ldr	r3, [pc, #228]	; (8008de8 <__mdiff+0x108>)
 8008d02:	4602      	mov	r2, r0
 8008d04:	f240 2132 	movw	r1, #562	; 0x232
 8008d08:	4838      	ldr	r0, [pc, #224]	; (8008dec <__mdiff+0x10c>)
 8008d0a:	f000 f9ed 	bl	80090e8 <__assert_func>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d18:	bfa4      	itt	ge
 8008d1a:	463b      	movge	r3, r7
 8008d1c:	4627      	movge	r7, r4
 8008d1e:	4630      	mov	r0, r6
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	bfa6      	itte	ge
 8008d24:	461c      	movge	r4, r3
 8008d26:	2500      	movge	r5, #0
 8008d28:	2501      	movlt	r5, #1
 8008d2a:	f7ff fd3f 	bl	80087ac <_Balloc>
 8008d2e:	b920      	cbnz	r0, 8008d3a <__mdiff+0x5a>
 8008d30:	4b2d      	ldr	r3, [pc, #180]	; (8008de8 <__mdiff+0x108>)
 8008d32:	4602      	mov	r2, r0
 8008d34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d38:	e7e6      	b.n	8008d08 <__mdiff+0x28>
 8008d3a:	693e      	ldr	r6, [r7, #16]
 8008d3c:	60c5      	str	r5, [r0, #12]
 8008d3e:	6925      	ldr	r5, [r4, #16]
 8008d40:	f107 0114 	add.w	r1, r7, #20
 8008d44:	f104 0914 	add.w	r9, r4, #20
 8008d48:	f100 0e14 	add.w	lr, r0, #20
 8008d4c:	f107 0210 	add.w	r2, r7, #16
 8008d50:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008d54:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008d58:	46f2      	mov	sl, lr
 8008d5a:	2700      	movs	r7, #0
 8008d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d64:	fa1f f883 	uxth.w	r8, r3
 8008d68:	fa17 f78b 	uxtah	r7, r7, fp
 8008d6c:	0c1b      	lsrs	r3, r3, #16
 8008d6e:	eba7 0808 	sub.w	r8, r7, r8
 8008d72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d7a:	fa1f f888 	uxth.w	r8, r8
 8008d7e:	141f      	asrs	r7, r3, #16
 8008d80:	454d      	cmp	r5, r9
 8008d82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d86:	f84a 3b04 	str.w	r3, [sl], #4
 8008d8a:	d8e7      	bhi.n	8008d5c <__mdiff+0x7c>
 8008d8c:	1b2b      	subs	r3, r5, r4
 8008d8e:	3b15      	subs	r3, #21
 8008d90:	f023 0303 	bic.w	r3, r3, #3
 8008d94:	3304      	adds	r3, #4
 8008d96:	3415      	adds	r4, #21
 8008d98:	42a5      	cmp	r5, r4
 8008d9a:	bf38      	it	cc
 8008d9c:	2304      	movcc	r3, #4
 8008d9e:	4419      	add	r1, r3
 8008da0:	4473      	add	r3, lr
 8008da2:	469e      	mov	lr, r3
 8008da4:	460d      	mov	r5, r1
 8008da6:	4565      	cmp	r5, ip
 8008da8:	d30e      	bcc.n	8008dc8 <__mdiff+0xe8>
 8008daa:	f10c 0203 	add.w	r2, ip, #3
 8008dae:	1a52      	subs	r2, r2, r1
 8008db0:	f022 0203 	bic.w	r2, r2, #3
 8008db4:	3903      	subs	r1, #3
 8008db6:	458c      	cmp	ip, r1
 8008db8:	bf38      	it	cc
 8008dba:	2200      	movcc	r2, #0
 8008dbc:	441a      	add	r2, r3
 8008dbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dc2:	b17b      	cbz	r3, 8008de4 <__mdiff+0x104>
 8008dc4:	6106      	str	r6, [r0, #16]
 8008dc6:	e7a5      	b.n	8008d14 <__mdiff+0x34>
 8008dc8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008dcc:	fa17 f488 	uxtah	r4, r7, r8
 8008dd0:	1422      	asrs	r2, r4, #16
 8008dd2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008dd6:	b2a4      	uxth	r4, r4
 8008dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008ddc:	f84e 4b04 	str.w	r4, [lr], #4
 8008de0:	1417      	asrs	r7, r2, #16
 8008de2:	e7e0      	b.n	8008da6 <__mdiff+0xc6>
 8008de4:	3e01      	subs	r6, #1
 8008de6:	e7ea      	b.n	8008dbe <__mdiff+0xde>
 8008de8:	0800a093 	.word	0x0800a093
 8008dec:	0800a104 	.word	0x0800a104

08008df0 <__d2b>:
 8008df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008df4:	4689      	mov	r9, r1
 8008df6:	2101      	movs	r1, #1
 8008df8:	ec57 6b10 	vmov	r6, r7, d0
 8008dfc:	4690      	mov	r8, r2
 8008dfe:	f7ff fcd5 	bl	80087ac <_Balloc>
 8008e02:	4604      	mov	r4, r0
 8008e04:	b930      	cbnz	r0, 8008e14 <__d2b+0x24>
 8008e06:	4602      	mov	r2, r0
 8008e08:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <__d2b+0xb0>)
 8008e0a:	4826      	ldr	r0, [pc, #152]	; (8008ea4 <__d2b+0xb4>)
 8008e0c:	f240 310a 	movw	r1, #778	; 0x30a
 8008e10:	f000 f96a 	bl	80090e8 <__assert_func>
 8008e14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e1c:	bb35      	cbnz	r5, 8008e6c <__d2b+0x7c>
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	d028      	beq.n	8008e76 <__d2b+0x86>
 8008e24:	4668      	mov	r0, sp
 8008e26:	9600      	str	r6, [sp, #0]
 8008e28:	f7ff fd8c 	bl	8008944 <__lo0bits>
 8008e2c:	9900      	ldr	r1, [sp, #0]
 8008e2e:	b300      	cbz	r0, 8008e72 <__d2b+0x82>
 8008e30:	9a01      	ldr	r2, [sp, #4]
 8008e32:	f1c0 0320 	rsb	r3, r0, #32
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	40c2      	lsrs	r2, r0
 8008e3e:	6163      	str	r3, [r4, #20]
 8008e40:	9201      	str	r2, [sp, #4]
 8008e42:	9b01      	ldr	r3, [sp, #4]
 8008e44:	61a3      	str	r3, [r4, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bf14      	ite	ne
 8008e4a:	2202      	movne	r2, #2
 8008e4c:	2201      	moveq	r2, #1
 8008e4e:	6122      	str	r2, [r4, #16]
 8008e50:	b1d5      	cbz	r5, 8008e88 <__d2b+0x98>
 8008e52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e56:	4405      	add	r5, r0
 8008e58:	f8c9 5000 	str.w	r5, [r9]
 8008e5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e60:	f8c8 0000 	str.w	r0, [r8]
 8008e64:	4620      	mov	r0, r4
 8008e66:	b003      	add	sp, #12
 8008e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e70:	e7d5      	b.n	8008e1e <__d2b+0x2e>
 8008e72:	6161      	str	r1, [r4, #20]
 8008e74:	e7e5      	b.n	8008e42 <__d2b+0x52>
 8008e76:	a801      	add	r0, sp, #4
 8008e78:	f7ff fd64 	bl	8008944 <__lo0bits>
 8008e7c:	9b01      	ldr	r3, [sp, #4]
 8008e7e:	6163      	str	r3, [r4, #20]
 8008e80:	2201      	movs	r2, #1
 8008e82:	6122      	str	r2, [r4, #16]
 8008e84:	3020      	adds	r0, #32
 8008e86:	e7e3      	b.n	8008e50 <__d2b+0x60>
 8008e88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e90:	f8c9 0000 	str.w	r0, [r9]
 8008e94:	6918      	ldr	r0, [r3, #16]
 8008e96:	f7ff fd35 	bl	8008904 <__hi0bits>
 8008e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e9e:	e7df      	b.n	8008e60 <__d2b+0x70>
 8008ea0:	0800a093 	.word	0x0800a093
 8008ea4:	0800a104 	.word	0x0800a104

08008ea8 <_calloc_r>:
 8008ea8:	b513      	push	{r0, r1, r4, lr}
 8008eaa:	434a      	muls	r2, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	9201      	str	r2, [sp, #4]
 8008eb0:	f000 f85a 	bl	8008f68 <_malloc_r>
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	b118      	cbz	r0, 8008ec0 <_calloc_r+0x18>
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f7fd fe84 	bl	8006bc8 <memset>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	b002      	add	sp, #8
 8008ec4:	bd10      	pop	{r4, pc}
	...

08008ec8 <_free_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	2900      	cmp	r1, #0
 8008ecc:	d048      	beq.n	8008f60 <_free_r+0x98>
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eda:	bfb8      	it	lt
 8008edc:	18e4      	addlt	r4, r4, r3
 8008ede:	f000 f989 	bl	80091f4 <__malloc_lock>
 8008ee2:	4a20      	ldr	r2, [pc, #128]	; (8008f64 <_free_r+0x9c>)
 8008ee4:	9801      	ldr	r0, [sp, #4]
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	4615      	mov	r5, r2
 8008eea:	b933      	cbnz	r3, 8008efa <_free_r+0x32>
 8008eec:	6063      	str	r3, [r4, #4]
 8008eee:	6014      	str	r4, [r2, #0]
 8008ef0:	b003      	add	sp, #12
 8008ef2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef6:	f000 b983 	b.w	8009200 <__malloc_unlock>
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	d90b      	bls.n	8008f16 <_free_r+0x4e>
 8008efe:	6821      	ldr	r1, [r4, #0]
 8008f00:	1862      	adds	r2, r4, r1
 8008f02:	4293      	cmp	r3, r2
 8008f04:	bf04      	itt	eq
 8008f06:	681a      	ldreq	r2, [r3, #0]
 8008f08:	685b      	ldreq	r3, [r3, #4]
 8008f0a:	6063      	str	r3, [r4, #4]
 8008f0c:	bf04      	itt	eq
 8008f0e:	1852      	addeq	r2, r2, r1
 8008f10:	6022      	streq	r2, [r4, #0]
 8008f12:	602c      	str	r4, [r5, #0]
 8008f14:	e7ec      	b.n	8008ef0 <_free_r+0x28>
 8008f16:	461a      	mov	r2, r3
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	b10b      	cbz	r3, 8008f20 <_free_r+0x58>
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d9fa      	bls.n	8008f16 <_free_r+0x4e>
 8008f20:	6811      	ldr	r1, [r2, #0]
 8008f22:	1855      	adds	r5, r2, r1
 8008f24:	42a5      	cmp	r5, r4
 8008f26:	d10b      	bne.n	8008f40 <_free_r+0x78>
 8008f28:	6824      	ldr	r4, [r4, #0]
 8008f2a:	4421      	add	r1, r4
 8008f2c:	1854      	adds	r4, r2, r1
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	6011      	str	r1, [r2, #0]
 8008f32:	d1dd      	bne.n	8008ef0 <_free_r+0x28>
 8008f34:	681c      	ldr	r4, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	6053      	str	r3, [r2, #4]
 8008f3a:	4421      	add	r1, r4
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	e7d7      	b.n	8008ef0 <_free_r+0x28>
 8008f40:	d902      	bls.n	8008f48 <_free_r+0x80>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	e7d3      	b.n	8008ef0 <_free_r+0x28>
 8008f48:	6825      	ldr	r5, [r4, #0]
 8008f4a:	1961      	adds	r1, r4, r5
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	bf04      	itt	eq
 8008f50:	6819      	ldreq	r1, [r3, #0]
 8008f52:	685b      	ldreq	r3, [r3, #4]
 8008f54:	6063      	str	r3, [r4, #4]
 8008f56:	bf04      	itt	eq
 8008f58:	1949      	addeq	r1, r1, r5
 8008f5a:	6021      	streq	r1, [r4, #0]
 8008f5c:	6054      	str	r4, [r2, #4]
 8008f5e:	e7c7      	b.n	8008ef0 <_free_r+0x28>
 8008f60:	b003      	add	sp, #12
 8008f62:	bd30      	pop	{r4, r5, pc}
 8008f64:	20000200 	.word	0x20000200

08008f68 <_malloc_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	1ccd      	adds	r5, r1, #3
 8008f6c:	f025 0503 	bic.w	r5, r5, #3
 8008f70:	3508      	adds	r5, #8
 8008f72:	2d0c      	cmp	r5, #12
 8008f74:	bf38      	it	cc
 8008f76:	250c      	movcc	r5, #12
 8008f78:	2d00      	cmp	r5, #0
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	db01      	blt.n	8008f82 <_malloc_r+0x1a>
 8008f7e:	42a9      	cmp	r1, r5
 8008f80:	d903      	bls.n	8008f8a <_malloc_r+0x22>
 8008f82:	230c      	movs	r3, #12
 8008f84:	6033      	str	r3, [r6, #0]
 8008f86:	2000      	movs	r0, #0
 8008f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8a:	f000 f933 	bl	80091f4 <__malloc_lock>
 8008f8e:	4921      	ldr	r1, [pc, #132]	; (8009014 <_malloc_r+0xac>)
 8008f90:	680a      	ldr	r2, [r1, #0]
 8008f92:	4614      	mov	r4, r2
 8008f94:	b99c      	cbnz	r4, 8008fbe <_malloc_r+0x56>
 8008f96:	4f20      	ldr	r7, [pc, #128]	; (8009018 <_malloc_r+0xb0>)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	b923      	cbnz	r3, 8008fa6 <_malloc_r+0x3e>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f000 f83c 	bl	800901c <_sbrk_r>
 8008fa4:	6038      	str	r0, [r7, #0]
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f837 	bl	800901c <_sbrk_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	d123      	bne.n	8008ffa <_malloc_r+0x92>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f000 f922 	bl	8009200 <__malloc_unlock>
 8008fbc:	e7e3      	b.n	8008f86 <_malloc_r+0x1e>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	1b5b      	subs	r3, r3, r5
 8008fc2:	d417      	bmi.n	8008ff4 <_malloc_r+0x8c>
 8008fc4:	2b0b      	cmp	r3, #11
 8008fc6:	d903      	bls.n	8008fd0 <_malloc_r+0x68>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	441c      	add	r4, r3
 8008fcc:	6025      	str	r5, [r4, #0]
 8008fce:	e004      	b.n	8008fda <_malloc_r+0x72>
 8008fd0:	6863      	ldr	r3, [r4, #4]
 8008fd2:	42a2      	cmp	r2, r4
 8008fd4:	bf0c      	ite	eq
 8008fd6:	600b      	streq	r3, [r1, #0]
 8008fd8:	6053      	strne	r3, [r2, #4]
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f000 f910 	bl	8009200 <__malloc_unlock>
 8008fe0:	f104 000b 	add.w	r0, r4, #11
 8008fe4:	1d23      	adds	r3, r4, #4
 8008fe6:	f020 0007 	bic.w	r0, r0, #7
 8008fea:	1ac2      	subs	r2, r0, r3
 8008fec:	d0cc      	beq.n	8008f88 <_malloc_r+0x20>
 8008fee:	1a1b      	subs	r3, r3, r0
 8008ff0:	50a3      	str	r3, [r4, r2]
 8008ff2:	e7c9      	b.n	8008f88 <_malloc_r+0x20>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	6864      	ldr	r4, [r4, #4]
 8008ff8:	e7cc      	b.n	8008f94 <_malloc_r+0x2c>
 8008ffa:	1cc4      	adds	r4, r0, #3
 8008ffc:	f024 0403 	bic.w	r4, r4, #3
 8009000:	42a0      	cmp	r0, r4
 8009002:	d0e3      	beq.n	8008fcc <_malloc_r+0x64>
 8009004:	1a21      	subs	r1, r4, r0
 8009006:	4630      	mov	r0, r6
 8009008:	f000 f808 	bl	800901c <_sbrk_r>
 800900c:	3001      	adds	r0, #1
 800900e:	d1dd      	bne.n	8008fcc <_malloc_r+0x64>
 8009010:	e7cf      	b.n	8008fb2 <_malloc_r+0x4a>
 8009012:	bf00      	nop
 8009014:	20000200 	.word	0x20000200
 8009018:	20000204 	.word	0x20000204

0800901c <_sbrk_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_sbrk_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f9 fd70 	bl	8002b0c <_sbrk>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_sbrk_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_sbrk_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20000620 	.word	0x20000620

0800903c <__sread>:
 800903c:	b510      	push	{r4, lr}
 800903e:	460c      	mov	r4, r1
 8009040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009044:	f000 fa3c 	bl	80094c0 <_read_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	bfab      	itete	ge
 800904c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800904e:	89a3      	ldrhlt	r3, [r4, #12]
 8009050:	181b      	addge	r3, r3, r0
 8009052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009056:	bfac      	ite	ge
 8009058:	6563      	strge	r3, [r4, #84]	; 0x54
 800905a:	81a3      	strhlt	r3, [r4, #12]
 800905c:	bd10      	pop	{r4, pc}

0800905e <__swrite>:
 800905e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009062:	461f      	mov	r7, r3
 8009064:	898b      	ldrh	r3, [r1, #12]
 8009066:	05db      	lsls	r3, r3, #23
 8009068:	4605      	mov	r5, r0
 800906a:	460c      	mov	r4, r1
 800906c:	4616      	mov	r6, r2
 800906e:	d505      	bpl.n	800907c <__swrite+0x1e>
 8009070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009074:	2302      	movs	r3, #2
 8009076:	2200      	movs	r2, #0
 8009078:	f000 f898 	bl	80091ac <_lseek_r>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009086:	81a3      	strh	r3, [r4, #12]
 8009088:	4632      	mov	r2, r6
 800908a:	463b      	mov	r3, r7
 800908c:	4628      	mov	r0, r5
 800908e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009092:	f000 b817 	b.w	80090c4 <_write_r>

08009096 <__sseek>:
 8009096:	b510      	push	{r4, lr}
 8009098:	460c      	mov	r4, r1
 800909a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909e:	f000 f885 	bl	80091ac <_lseek_r>
 80090a2:	1c43      	adds	r3, r0, #1
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	bf15      	itete	ne
 80090a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80090aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090b2:	81a3      	strheq	r3, [r4, #12]
 80090b4:	bf18      	it	ne
 80090b6:	81a3      	strhne	r3, [r4, #12]
 80090b8:	bd10      	pop	{r4, pc}

080090ba <__sclose>:
 80090ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090be:	f000 b831 	b.w	8009124 <_close_r>
	...

080090c4 <_write_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	; (80090e4 <_write_r+0x20>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f9 fcc9 	bl	8002a6a <_write>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_write_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_write_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	20000620 	.word	0x20000620

080090e8 <__assert_func>:
 80090e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ea:	4614      	mov	r4, r2
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <__assert_func+0x2c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4605      	mov	r5, r0
 80090f4:	68d8      	ldr	r0, [r3, #12]
 80090f6:	b14c      	cbz	r4, 800910c <__assert_func+0x24>
 80090f8:	4b07      	ldr	r3, [pc, #28]	; (8009118 <__assert_func+0x30>)
 80090fa:	9100      	str	r1, [sp, #0]
 80090fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009100:	4906      	ldr	r1, [pc, #24]	; (800911c <__assert_func+0x34>)
 8009102:	462b      	mov	r3, r5
 8009104:	f000 f81e 	bl	8009144 <fiprintf>
 8009108:	f000 faba 	bl	8009680 <abort>
 800910c:	4b04      	ldr	r3, [pc, #16]	; (8009120 <__assert_func+0x38>)
 800910e:	461c      	mov	r4, r3
 8009110:	e7f3      	b.n	80090fa <__assert_func+0x12>
 8009112:	bf00      	nop
 8009114:	2000000c 	.word	0x2000000c
 8009118:	0800a264 	.word	0x0800a264
 800911c:	0800a271 	.word	0x0800a271
 8009120:	0800a29f 	.word	0x0800a29f

08009124 <_close_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	; (8009140 <_close_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f9 fcb7 	bl	8002aa2 <_close>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_close_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_close_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20000620 	.word	0x20000620

08009144 <fiprintf>:
 8009144:	b40e      	push	{r1, r2, r3}
 8009146:	b503      	push	{r0, r1, lr}
 8009148:	4601      	mov	r1, r0
 800914a:	ab03      	add	r3, sp, #12
 800914c:	4805      	ldr	r0, [pc, #20]	; (8009164 <fiprintf+0x20>)
 800914e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009152:	6800      	ldr	r0, [r0, #0]
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	f000 f883 	bl	8009260 <_vfiprintf_r>
 800915a:	b002      	add	sp, #8
 800915c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009160:	b003      	add	sp, #12
 8009162:	4770      	bx	lr
 8009164:	2000000c 	.word	0x2000000c

08009168 <_fstat_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d07      	ldr	r5, [pc, #28]	; (8009188 <_fstat_r+0x20>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	4611      	mov	r1, r2
 8009174:	602b      	str	r3, [r5, #0]
 8009176:	f7f9 fca0 	bl	8002aba <_fstat>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d102      	bne.n	8009184 <_fstat_r+0x1c>
 800917e:	682b      	ldr	r3, [r5, #0]
 8009180:	b103      	cbz	r3, 8009184 <_fstat_r+0x1c>
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	bd38      	pop	{r3, r4, r5, pc}
 8009186:	bf00      	nop
 8009188:	20000620 	.word	0x20000620

0800918c <_isatty_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	; (80091a8 <_isatty_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f9 fc9f 	bl	8002ada <_isatty>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_isatty_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_isatty_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000620 	.word	0x20000620

080091ac <_lseek_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d07      	ldr	r5, [pc, #28]	; (80091cc <_lseek_r+0x20>)
 80091b0:	4604      	mov	r4, r0
 80091b2:	4608      	mov	r0, r1
 80091b4:	4611      	mov	r1, r2
 80091b6:	2200      	movs	r2, #0
 80091b8:	602a      	str	r2, [r5, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	f7f9 fc98 	bl	8002af0 <_lseek>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	d102      	bne.n	80091ca <_lseek_r+0x1e>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	b103      	cbz	r3, 80091ca <_lseek_r+0x1e>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	20000620 	.word	0x20000620

080091d0 <__ascii_mbtowc>:
 80091d0:	b082      	sub	sp, #8
 80091d2:	b901      	cbnz	r1, 80091d6 <__ascii_mbtowc+0x6>
 80091d4:	a901      	add	r1, sp, #4
 80091d6:	b142      	cbz	r2, 80091ea <__ascii_mbtowc+0x1a>
 80091d8:	b14b      	cbz	r3, 80091ee <__ascii_mbtowc+0x1e>
 80091da:	7813      	ldrb	r3, [r2, #0]
 80091dc:	600b      	str	r3, [r1, #0]
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	1e10      	subs	r0, r2, #0
 80091e2:	bf18      	it	ne
 80091e4:	2001      	movne	r0, #1
 80091e6:	b002      	add	sp, #8
 80091e8:	4770      	bx	lr
 80091ea:	4610      	mov	r0, r2
 80091ec:	e7fb      	b.n	80091e6 <__ascii_mbtowc+0x16>
 80091ee:	f06f 0001 	mvn.w	r0, #1
 80091f2:	e7f8      	b.n	80091e6 <__ascii_mbtowc+0x16>

080091f4 <__malloc_lock>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__malloc_lock+0x8>)
 80091f6:	f7ff ba5c 	b.w	80086b2 <__retarget_lock_acquire_recursive>
 80091fa:	bf00      	nop
 80091fc:	20000618 	.word	0x20000618

08009200 <__malloc_unlock>:
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <__malloc_unlock+0x8>)
 8009202:	f7ff ba57 	b.w	80086b4 <__retarget_lock_release_recursive>
 8009206:	bf00      	nop
 8009208:	20000618 	.word	0x20000618

0800920c <__sfputc_r>:
 800920c:	6893      	ldr	r3, [r2, #8]
 800920e:	3b01      	subs	r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	b410      	push	{r4}
 8009214:	6093      	str	r3, [r2, #8]
 8009216:	da08      	bge.n	800922a <__sfputc_r+0x1e>
 8009218:	6994      	ldr	r4, [r2, #24]
 800921a:	42a3      	cmp	r3, r4
 800921c:	db01      	blt.n	8009222 <__sfputc_r+0x16>
 800921e:	290a      	cmp	r1, #10
 8009220:	d103      	bne.n	800922a <__sfputc_r+0x1e>
 8009222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009226:	f000 b95d 	b.w	80094e4 <__swbuf_r>
 800922a:	6813      	ldr	r3, [r2, #0]
 800922c:	1c58      	adds	r0, r3, #1
 800922e:	6010      	str	r0, [r2, #0]
 8009230:	7019      	strb	r1, [r3, #0]
 8009232:	4608      	mov	r0, r1
 8009234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009238:	4770      	bx	lr

0800923a <__sfputs_r>:
 800923a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923c:	4606      	mov	r6, r0
 800923e:	460f      	mov	r7, r1
 8009240:	4614      	mov	r4, r2
 8009242:	18d5      	adds	r5, r2, r3
 8009244:	42ac      	cmp	r4, r5
 8009246:	d101      	bne.n	800924c <__sfputs_r+0x12>
 8009248:	2000      	movs	r0, #0
 800924a:	e007      	b.n	800925c <__sfputs_r+0x22>
 800924c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009250:	463a      	mov	r2, r7
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ffda 	bl	800920c <__sfputc_r>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d1f3      	bne.n	8009244 <__sfputs_r+0xa>
 800925c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009260 <_vfiprintf_r>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	460d      	mov	r5, r1
 8009266:	b09d      	sub	sp, #116	; 0x74
 8009268:	4614      	mov	r4, r2
 800926a:	4698      	mov	r8, r3
 800926c:	4606      	mov	r6, r0
 800926e:	b118      	cbz	r0, 8009278 <_vfiprintf_r+0x18>
 8009270:	6983      	ldr	r3, [r0, #24]
 8009272:	b90b      	cbnz	r3, 8009278 <_vfiprintf_r+0x18>
 8009274:	f7ff f97a 	bl	800856c <__sinit>
 8009278:	4b89      	ldr	r3, [pc, #548]	; (80094a0 <_vfiprintf_r+0x240>)
 800927a:	429d      	cmp	r5, r3
 800927c:	d11b      	bne.n	80092b6 <_vfiprintf_r+0x56>
 800927e:	6875      	ldr	r5, [r6, #4]
 8009280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009282:	07d9      	lsls	r1, r3, #31
 8009284:	d405      	bmi.n	8009292 <_vfiprintf_r+0x32>
 8009286:	89ab      	ldrh	r3, [r5, #12]
 8009288:	059a      	lsls	r2, r3, #22
 800928a:	d402      	bmi.n	8009292 <_vfiprintf_r+0x32>
 800928c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800928e:	f7ff fa10 	bl	80086b2 <__retarget_lock_acquire_recursive>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	071b      	lsls	r3, r3, #28
 8009296:	d501      	bpl.n	800929c <_vfiprintf_r+0x3c>
 8009298:	692b      	ldr	r3, [r5, #16]
 800929a:	b9eb      	cbnz	r3, 80092d8 <_vfiprintf_r+0x78>
 800929c:	4629      	mov	r1, r5
 800929e:	4630      	mov	r0, r6
 80092a0:	f000 f980 	bl	80095a4 <__swsetup_r>
 80092a4:	b1c0      	cbz	r0, 80092d8 <_vfiprintf_r+0x78>
 80092a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092a8:	07dc      	lsls	r4, r3, #31
 80092aa:	d50e      	bpl.n	80092ca <_vfiprintf_r+0x6a>
 80092ac:	f04f 30ff 	mov.w	r0, #4294967295
 80092b0:	b01d      	add	sp, #116	; 0x74
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b6:	4b7b      	ldr	r3, [pc, #492]	; (80094a4 <_vfiprintf_r+0x244>)
 80092b8:	429d      	cmp	r5, r3
 80092ba:	d101      	bne.n	80092c0 <_vfiprintf_r+0x60>
 80092bc:	68b5      	ldr	r5, [r6, #8]
 80092be:	e7df      	b.n	8009280 <_vfiprintf_r+0x20>
 80092c0:	4b79      	ldr	r3, [pc, #484]	; (80094a8 <_vfiprintf_r+0x248>)
 80092c2:	429d      	cmp	r5, r3
 80092c4:	bf08      	it	eq
 80092c6:	68f5      	ldreq	r5, [r6, #12]
 80092c8:	e7da      	b.n	8009280 <_vfiprintf_r+0x20>
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	0598      	lsls	r0, r3, #22
 80092ce:	d4ed      	bmi.n	80092ac <_vfiprintf_r+0x4c>
 80092d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d2:	f7ff f9ef 	bl	80086b4 <__retarget_lock_release_recursive>
 80092d6:	e7e9      	b.n	80092ac <_vfiprintf_r+0x4c>
 80092d8:	2300      	movs	r3, #0
 80092da:	9309      	str	r3, [sp, #36]	; 0x24
 80092dc:	2320      	movs	r3, #32
 80092de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e6:	2330      	movs	r3, #48	; 0x30
 80092e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094ac <_vfiprintf_r+0x24c>
 80092ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092f0:	f04f 0901 	mov.w	r9, #1
 80092f4:	4623      	mov	r3, r4
 80092f6:	469a      	mov	sl, r3
 80092f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092fc:	b10a      	cbz	r2, 8009302 <_vfiprintf_r+0xa2>
 80092fe:	2a25      	cmp	r2, #37	; 0x25
 8009300:	d1f9      	bne.n	80092f6 <_vfiprintf_r+0x96>
 8009302:	ebba 0b04 	subs.w	fp, sl, r4
 8009306:	d00b      	beq.n	8009320 <_vfiprintf_r+0xc0>
 8009308:	465b      	mov	r3, fp
 800930a:	4622      	mov	r2, r4
 800930c:	4629      	mov	r1, r5
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ff93 	bl	800923a <__sfputs_r>
 8009314:	3001      	adds	r0, #1
 8009316:	f000 80aa 	beq.w	800946e <_vfiprintf_r+0x20e>
 800931a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800931c:	445a      	add	r2, fp
 800931e:	9209      	str	r2, [sp, #36]	; 0x24
 8009320:	f89a 3000 	ldrb.w	r3, [sl]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 80a2 	beq.w	800946e <_vfiprintf_r+0x20e>
 800932a:	2300      	movs	r3, #0
 800932c:	f04f 32ff 	mov.w	r2, #4294967295
 8009330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009334:	f10a 0a01 	add.w	sl, sl, #1
 8009338:	9304      	str	r3, [sp, #16]
 800933a:	9307      	str	r3, [sp, #28]
 800933c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009340:	931a      	str	r3, [sp, #104]	; 0x68
 8009342:	4654      	mov	r4, sl
 8009344:	2205      	movs	r2, #5
 8009346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934a:	4858      	ldr	r0, [pc, #352]	; (80094ac <_vfiprintf_r+0x24c>)
 800934c:	f7f6 ff68 	bl	8000220 <memchr>
 8009350:	9a04      	ldr	r2, [sp, #16]
 8009352:	b9d8      	cbnz	r0, 800938c <_vfiprintf_r+0x12c>
 8009354:	06d1      	lsls	r1, r2, #27
 8009356:	bf44      	itt	mi
 8009358:	2320      	movmi	r3, #32
 800935a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800935e:	0713      	lsls	r3, r2, #28
 8009360:	bf44      	itt	mi
 8009362:	232b      	movmi	r3, #43	; 0x2b
 8009364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009368:	f89a 3000 	ldrb.w	r3, [sl]
 800936c:	2b2a      	cmp	r3, #42	; 0x2a
 800936e:	d015      	beq.n	800939c <_vfiprintf_r+0x13c>
 8009370:	9a07      	ldr	r2, [sp, #28]
 8009372:	4654      	mov	r4, sl
 8009374:	2000      	movs	r0, #0
 8009376:	f04f 0c0a 	mov.w	ip, #10
 800937a:	4621      	mov	r1, r4
 800937c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009380:	3b30      	subs	r3, #48	; 0x30
 8009382:	2b09      	cmp	r3, #9
 8009384:	d94e      	bls.n	8009424 <_vfiprintf_r+0x1c4>
 8009386:	b1b0      	cbz	r0, 80093b6 <_vfiprintf_r+0x156>
 8009388:	9207      	str	r2, [sp, #28]
 800938a:	e014      	b.n	80093b6 <_vfiprintf_r+0x156>
 800938c:	eba0 0308 	sub.w	r3, r0, r8
 8009390:	fa09 f303 	lsl.w	r3, r9, r3
 8009394:	4313      	orrs	r3, r2
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	46a2      	mov	sl, r4
 800939a:	e7d2      	b.n	8009342 <_vfiprintf_r+0xe2>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	1d19      	adds	r1, r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	9103      	str	r1, [sp, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfbb      	ittet	lt
 80093a8:	425b      	neglt	r3, r3
 80093aa:	f042 0202 	orrlt.w	r2, r2, #2
 80093ae:	9307      	strge	r3, [sp, #28]
 80093b0:	9307      	strlt	r3, [sp, #28]
 80093b2:	bfb8      	it	lt
 80093b4:	9204      	strlt	r2, [sp, #16]
 80093b6:	7823      	ldrb	r3, [r4, #0]
 80093b8:	2b2e      	cmp	r3, #46	; 0x2e
 80093ba:	d10c      	bne.n	80093d6 <_vfiprintf_r+0x176>
 80093bc:	7863      	ldrb	r3, [r4, #1]
 80093be:	2b2a      	cmp	r3, #42	; 0x2a
 80093c0:	d135      	bne.n	800942e <_vfiprintf_r+0x1ce>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	1d1a      	adds	r2, r3, #4
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	9203      	str	r2, [sp, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	bfb8      	it	lt
 80093ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80093d2:	3402      	adds	r4, #2
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094bc <_vfiprintf_r+0x25c>
 80093da:	7821      	ldrb	r1, [r4, #0]
 80093dc:	2203      	movs	r2, #3
 80093de:	4650      	mov	r0, sl
 80093e0:	f7f6 ff1e 	bl	8000220 <memchr>
 80093e4:	b140      	cbz	r0, 80093f8 <_vfiprintf_r+0x198>
 80093e6:	2340      	movs	r3, #64	; 0x40
 80093e8:	eba0 000a 	sub.w	r0, r0, sl
 80093ec:	fa03 f000 	lsl.w	r0, r3, r0
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	4303      	orrs	r3, r0
 80093f4:	3401      	adds	r4, #1
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fc:	482c      	ldr	r0, [pc, #176]	; (80094b0 <_vfiprintf_r+0x250>)
 80093fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009402:	2206      	movs	r2, #6
 8009404:	f7f6 ff0c 	bl	8000220 <memchr>
 8009408:	2800      	cmp	r0, #0
 800940a:	d03f      	beq.n	800948c <_vfiprintf_r+0x22c>
 800940c:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <_vfiprintf_r+0x254>)
 800940e:	bb1b      	cbnz	r3, 8009458 <_vfiprintf_r+0x1f8>
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	3307      	adds	r3, #7
 8009414:	f023 0307 	bic.w	r3, r3, #7
 8009418:	3308      	adds	r3, #8
 800941a:	9303      	str	r3, [sp, #12]
 800941c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941e:	443b      	add	r3, r7
 8009420:	9309      	str	r3, [sp, #36]	; 0x24
 8009422:	e767      	b.n	80092f4 <_vfiprintf_r+0x94>
 8009424:	fb0c 3202 	mla	r2, ip, r2, r3
 8009428:	460c      	mov	r4, r1
 800942a:	2001      	movs	r0, #1
 800942c:	e7a5      	b.n	800937a <_vfiprintf_r+0x11a>
 800942e:	2300      	movs	r3, #0
 8009430:	3401      	adds	r4, #1
 8009432:	9305      	str	r3, [sp, #20]
 8009434:	4619      	mov	r1, r3
 8009436:	f04f 0c0a 	mov.w	ip, #10
 800943a:	4620      	mov	r0, r4
 800943c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009440:	3a30      	subs	r2, #48	; 0x30
 8009442:	2a09      	cmp	r2, #9
 8009444:	d903      	bls.n	800944e <_vfiprintf_r+0x1ee>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0c5      	beq.n	80093d6 <_vfiprintf_r+0x176>
 800944a:	9105      	str	r1, [sp, #20]
 800944c:	e7c3      	b.n	80093d6 <_vfiprintf_r+0x176>
 800944e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009452:	4604      	mov	r4, r0
 8009454:	2301      	movs	r3, #1
 8009456:	e7f0      	b.n	800943a <_vfiprintf_r+0x1da>
 8009458:	ab03      	add	r3, sp, #12
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	462a      	mov	r2, r5
 800945e:	4b16      	ldr	r3, [pc, #88]	; (80094b8 <_vfiprintf_r+0x258>)
 8009460:	a904      	add	r1, sp, #16
 8009462:	4630      	mov	r0, r6
 8009464:	f7fd fc58 	bl	8006d18 <_printf_float>
 8009468:	4607      	mov	r7, r0
 800946a:	1c78      	adds	r0, r7, #1
 800946c:	d1d6      	bne.n	800941c <_vfiprintf_r+0x1bc>
 800946e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009470:	07d9      	lsls	r1, r3, #31
 8009472:	d405      	bmi.n	8009480 <_vfiprintf_r+0x220>
 8009474:	89ab      	ldrh	r3, [r5, #12]
 8009476:	059a      	lsls	r2, r3, #22
 8009478:	d402      	bmi.n	8009480 <_vfiprintf_r+0x220>
 800947a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947c:	f7ff f91a 	bl	80086b4 <__retarget_lock_release_recursive>
 8009480:	89ab      	ldrh	r3, [r5, #12]
 8009482:	065b      	lsls	r3, r3, #25
 8009484:	f53f af12 	bmi.w	80092ac <_vfiprintf_r+0x4c>
 8009488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800948a:	e711      	b.n	80092b0 <_vfiprintf_r+0x50>
 800948c:	ab03      	add	r3, sp, #12
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	462a      	mov	r2, r5
 8009492:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <_vfiprintf_r+0x258>)
 8009494:	a904      	add	r1, sp, #16
 8009496:	4630      	mov	r0, r6
 8009498:	f7fd fee2 	bl	8007260 <_printf_i>
 800949c:	e7e4      	b.n	8009468 <_vfiprintf_r+0x208>
 800949e:	bf00      	nop
 80094a0:	0800a0c4 	.word	0x0800a0c4
 80094a4:	0800a0e4 	.word	0x0800a0e4
 80094a8:	0800a0a4 	.word	0x0800a0a4
 80094ac:	0800a2aa 	.word	0x0800a2aa
 80094b0:	0800a2b4 	.word	0x0800a2b4
 80094b4:	08006d19 	.word	0x08006d19
 80094b8:	0800923b 	.word	0x0800923b
 80094bc:	0800a2b0 	.word	0x0800a2b0

080094c0 <_read_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d07      	ldr	r5, [pc, #28]	; (80094e0 <_read_r+0x20>)
 80094c4:	4604      	mov	r4, r0
 80094c6:	4608      	mov	r0, r1
 80094c8:	4611      	mov	r1, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	602a      	str	r2, [r5, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f7f9 faae 	bl	8002a30 <_read>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d102      	bne.n	80094de <_read_r+0x1e>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b103      	cbz	r3, 80094de <_read_r+0x1e>
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	20000620 	.word	0x20000620

080094e4 <__swbuf_r>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	460e      	mov	r6, r1
 80094e8:	4614      	mov	r4, r2
 80094ea:	4605      	mov	r5, r0
 80094ec:	b118      	cbz	r0, 80094f6 <__swbuf_r+0x12>
 80094ee:	6983      	ldr	r3, [r0, #24]
 80094f0:	b90b      	cbnz	r3, 80094f6 <__swbuf_r+0x12>
 80094f2:	f7ff f83b 	bl	800856c <__sinit>
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <__swbuf_r+0x98>)
 80094f8:	429c      	cmp	r4, r3
 80094fa:	d12b      	bne.n	8009554 <__swbuf_r+0x70>
 80094fc:	686c      	ldr	r4, [r5, #4]
 80094fe:	69a3      	ldr	r3, [r4, #24]
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	071a      	lsls	r2, r3, #28
 8009506:	d52f      	bpl.n	8009568 <__swbuf_r+0x84>
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	b36b      	cbz	r3, 8009568 <__swbuf_r+0x84>
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	6820      	ldr	r0, [r4, #0]
 8009510:	1ac0      	subs	r0, r0, r3
 8009512:	6963      	ldr	r3, [r4, #20]
 8009514:	b2f6      	uxtb	r6, r6
 8009516:	4283      	cmp	r3, r0
 8009518:	4637      	mov	r7, r6
 800951a:	dc04      	bgt.n	8009526 <__swbuf_r+0x42>
 800951c:	4621      	mov	r1, r4
 800951e:	4628      	mov	r0, r5
 8009520:	f7fe ff90 	bl	8008444 <_fflush_r>
 8009524:	bb30      	cbnz	r0, 8009574 <__swbuf_r+0x90>
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	3b01      	subs	r3, #1
 800952a:	60a3      	str	r3, [r4, #8]
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	6022      	str	r2, [r4, #0]
 8009532:	701e      	strb	r6, [r3, #0]
 8009534:	6963      	ldr	r3, [r4, #20]
 8009536:	3001      	adds	r0, #1
 8009538:	4283      	cmp	r3, r0
 800953a:	d004      	beq.n	8009546 <__swbuf_r+0x62>
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	07db      	lsls	r3, r3, #31
 8009540:	d506      	bpl.n	8009550 <__swbuf_r+0x6c>
 8009542:	2e0a      	cmp	r6, #10
 8009544:	d104      	bne.n	8009550 <__swbuf_r+0x6c>
 8009546:	4621      	mov	r1, r4
 8009548:	4628      	mov	r0, r5
 800954a:	f7fe ff7b 	bl	8008444 <_fflush_r>
 800954e:	b988      	cbnz	r0, 8009574 <__swbuf_r+0x90>
 8009550:	4638      	mov	r0, r7
 8009552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <__swbuf_r+0x9c>)
 8009556:	429c      	cmp	r4, r3
 8009558:	d101      	bne.n	800955e <__swbuf_r+0x7a>
 800955a:	68ac      	ldr	r4, [r5, #8]
 800955c:	e7cf      	b.n	80094fe <__swbuf_r+0x1a>
 800955e:	4b09      	ldr	r3, [pc, #36]	; (8009584 <__swbuf_r+0xa0>)
 8009560:	429c      	cmp	r4, r3
 8009562:	bf08      	it	eq
 8009564:	68ec      	ldreq	r4, [r5, #12]
 8009566:	e7ca      	b.n	80094fe <__swbuf_r+0x1a>
 8009568:	4621      	mov	r1, r4
 800956a:	4628      	mov	r0, r5
 800956c:	f000 f81a 	bl	80095a4 <__swsetup_r>
 8009570:	2800      	cmp	r0, #0
 8009572:	d0cb      	beq.n	800950c <__swbuf_r+0x28>
 8009574:	f04f 37ff 	mov.w	r7, #4294967295
 8009578:	e7ea      	b.n	8009550 <__swbuf_r+0x6c>
 800957a:	bf00      	nop
 800957c:	0800a0c4 	.word	0x0800a0c4
 8009580:	0800a0e4 	.word	0x0800a0e4
 8009584:	0800a0a4 	.word	0x0800a0a4

08009588 <__ascii_wctomb>:
 8009588:	b149      	cbz	r1, 800959e <__ascii_wctomb+0x16>
 800958a:	2aff      	cmp	r2, #255	; 0xff
 800958c:	bf85      	ittet	hi
 800958e:	238a      	movhi	r3, #138	; 0x8a
 8009590:	6003      	strhi	r3, [r0, #0]
 8009592:	700a      	strbls	r2, [r1, #0]
 8009594:	f04f 30ff 	movhi.w	r0, #4294967295
 8009598:	bf98      	it	ls
 800959a:	2001      	movls	r0, #1
 800959c:	4770      	bx	lr
 800959e:	4608      	mov	r0, r1
 80095a0:	4770      	bx	lr
	...

080095a4 <__swsetup_r>:
 80095a4:	4b32      	ldr	r3, [pc, #200]	; (8009670 <__swsetup_r+0xcc>)
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	4606      	mov	r6, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	b125      	cbz	r5, 80095ba <__swsetup_r+0x16>
 80095b0:	69ab      	ldr	r3, [r5, #24]
 80095b2:	b913      	cbnz	r3, 80095ba <__swsetup_r+0x16>
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7fe ffd9 	bl	800856c <__sinit>
 80095ba:	4b2e      	ldr	r3, [pc, #184]	; (8009674 <__swsetup_r+0xd0>)
 80095bc:	429c      	cmp	r4, r3
 80095be:	d10f      	bne.n	80095e0 <__swsetup_r+0x3c>
 80095c0:	686c      	ldr	r4, [r5, #4]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c8:	0719      	lsls	r1, r3, #28
 80095ca:	d42c      	bmi.n	8009626 <__swsetup_r+0x82>
 80095cc:	06dd      	lsls	r5, r3, #27
 80095ce:	d411      	bmi.n	80095f4 <__swsetup_r+0x50>
 80095d0:	2309      	movs	r3, #9
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	e03e      	b.n	800965e <__swsetup_r+0xba>
 80095e0:	4b25      	ldr	r3, [pc, #148]	; (8009678 <__swsetup_r+0xd4>)
 80095e2:	429c      	cmp	r4, r3
 80095e4:	d101      	bne.n	80095ea <__swsetup_r+0x46>
 80095e6:	68ac      	ldr	r4, [r5, #8]
 80095e8:	e7eb      	b.n	80095c2 <__swsetup_r+0x1e>
 80095ea:	4b24      	ldr	r3, [pc, #144]	; (800967c <__swsetup_r+0xd8>)
 80095ec:	429c      	cmp	r4, r3
 80095ee:	bf08      	it	eq
 80095f0:	68ec      	ldreq	r4, [r5, #12]
 80095f2:	e7e6      	b.n	80095c2 <__swsetup_r+0x1e>
 80095f4:	0758      	lsls	r0, r3, #29
 80095f6:	d512      	bpl.n	800961e <__swsetup_r+0x7a>
 80095f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095fa:	b141      	cbz	r1, 800960e <__swsetup_r+0x6a>
 80095fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009600:	4299      	cmp	r1, r3
 8009602:	d002      	beq.n	800960a <__swsetup_r+0x66>
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff fc5f 	bl	8008ec8 <_free_r>
 800960a:	2300      	movs	r3, #0
 800960c:	6363      	str	r3, [r4, #52]	; 0x34
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	2300      	movs	r3, #0
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f043 0308 	orr.w	r3, r3, #8
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	b94b      	cbnz	r3, 800963e <__swsetup_r+0x9a>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009634:	d003      	beq.n	800963e <__swsetup_r+0x9a>
 8009636:	4621      	mov	r1, r4
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff f861 	bl	8008700 <__smakebuf_r>
 800963e:	89a0      	ldrh	r0, [r4, #12]
 8009640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009644:	f010 0301 	ands.w	r3, r0, #1
 8009648:	d00a      	beq.n	8009660 <__swsetup_r+0xbc>
 800964a:	2300      	movs	r3, #0
 800964c:	60a3      	str	r3, [r4, #8]
 800964e:	6963      	ldr	r3, [r4, #20]
 8009650:	425b      	negs	r3, r3
 8009652:	61a3      	str	r3, [r4, #24]
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	b943      	cbnz	r3, 800966a <__swsetup_r+0xc6>
 8009658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800965c:	d1ba      	bne.n	80095d4 <__swsetup_r+0x30>
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	0781      	lsls	r1, r0, #30
 8009662:	bf58      	it	pl
 8009664:	6963      	ldrpl	r3, [r4, #20]
 8009666:	60a3      	str	r3, [r4, #8]
 8009668:	e7f4      	b.n	8009654 <__swsetup_r+0xb0>
 800966a:	2000      	movs	r0, #0
 800966c:	e7f7      	b.n	800965e <__swsetup_r+0xba>
 800966e:	bf00      	nop
 8009670:	2000000c 	.word	0x2000000c
 8009674:	0800a0c4 	.word	0x0800a0c4
 8009678:	0800a0e4 	.word	0x0800a0e4
 800967c:	0800a0a4 	.word	0x0800a0a4

08009680 <abort>:
 8009680:	b508      	push	{r3, lr}
 8009682:	2006      	movs	r0, #6
 8009684:	f000 f82c 	bl	80096e0 <raise>
 8009688:	2001      	movs	r0, #1
 800968a:	f7f9 f9c7 	bl	8002a1c <_exit>

0800968e <_raise_r>:
 800968e:	291f      	cmp	r1, #31
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4604      	mov	r4, r0
 8009694:	460d      	mov	r5, r1
 8009696:	d904      	bls.n	80096a2 <_raise_r+0x14>
 8009698:	2316      	movs	r3, #22
 800969a:	6003      	str	r3, [r0, #0]
 800969c:	f04f 30ff 	mov.w	r0, #4294967295
 80096a0:	bd38      	pop	{r3, r4, r5, pc}
 80096a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096a4:	b112      	cbz	r2, 80096ac <_raise_r+0x1e>
 80096a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096aa:	b94b      	cbnz	r3, 80096c0 <_raise_r+0x32>
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 f831 	bl	8009714 <_getpid_r>
 80096b2:	462a      	mov	r2, r5
 80096b4:	4601      	mov	r1, r0
 80096b6:	4620      	mov	r0, r4
 80096b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096bc:	f000 b818 	b.w	80096f0 <_kill_r>
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d00a      	beq.n	80096da <_raise_r+0x4c>
 80096c4:	1c59      	adds	r1, r3, #1
 80096c6:	d103      	bne.n	80096d0 <_raise_r+0x42>
 80096c8:	2316      	movs	r3, #22
 80096ca:	6003      	str	r3, [r0, #0]
 80096cc:	2001      	movs	r0, #1
 80096ce:	e7e7      	b.n	80096a0 <_raise_r+0x12>
 80096d0:	2400      	movs	r4, #0
 80096d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096d6:	4628      	mov	r0, r5
 80096d8:	4798      	blx	r3
 80096da:	2000      	movs	r0, #0
 80096dc:	e7e0      	b.n	80096a0 <_raise_r+0x12>
	...

080096e0 <raise>:
 80096e0:	4b02      	ldr	r3, [pc, #8]	; (80096ec <raise+0xc>)
 80096e2:	4601      	mov	r1, r0
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	f7ff bfd2 	b.w	800968e <_raise_r>
 80096ea:	bf00      	nop
 80096ec:	2000000c 	.word	0x2000000c

080096f0 <_kill_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d07      	ldr	r5, [pc, #28]	; (8009710 <_kill_r+0x20>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	f7f9 f97d 	bl	80029fc <_kill>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d102      	bne.n	800970c <_kill_r+0x1c>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b103      	cbz	r3, 800970c <_kill_r+0x1c>
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	bd38      	pop	{r3, r4, r5, pc}
 800970e:	bf00      	nop
 8009710:	20000620 	.word	0x20000620

08009714 <_getpid_r>:
 8009714:	f7f9 b96a 	b.w	80029ec <_getpid>

08009718 <powf>:
 8009718:	b508      	push	{r3, lr}
 800971a:	ed2d 8b04 	vpush	{d8-d9}
 800971e:	eeb0 9a40 	vmov.f32	s18, s0
 8009722:	eef0 8a60 	vmov.f32	s17, s1
 8009726:	f000 f88f 	bl	8009848 <__ieee754_powf>
 800972a:	4b43      	ldr	r3, [pc, #268]	; (8009838 <powf+0x120>)
 800972c:	f993 3000 	ldrsb.w	r3, [r3]
 8009730:	3301      	adds	r3, #1
 8009732:	eeb0 8a40 	vmov.f32	s16, s0
 8009736:	d012      	beq.n	800975e <powf+0x46>
 8009738:	eef4 8a68 	vcmp.f32	s17, s17
 800973c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009740:	d60d      	bvs.n	800975e <powf+0x46>
 8009742:	eeb4 9a49 	vcmp.f32	s18, s18
 8009746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974a:	d70d      	bvc.n	8009768 <powf+0x50>
 800974c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009754:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009758:	bf08      	it	eq
 800975a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800975e:	eeb0 0a48 	vmov.f32	s0, s16
 8009762:	ecbd 8b04 	vpop	{d8-d9}
 8009766:	bd08      	pop	{r3, pc}
 8009768:	eddf 9a34 	vldr	s19, [pc, #208]	; 800983c <powf+0x124>
 800976c:	eeb4 9a69 	vcmp.f32	s18, s19
 8009770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009774:	d116      	bne.n	80097a4 <powf+0x8c>
 8009776:	eef4 8a69 	vcmp.f32	s17, s19
 800977a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977e:	d057      	beq.n	8009830 <powf+0x118>
 8009780:	eeb0 0a68 	vmov.f32	s0, s17
 8009784:	f000 fb2a 	bl	8009ddc <finitef>
 8009788:	2800      	cmp	r0, #0
 800978a:	d0e8      	beq.n	800975e <powf+0x46>
 800978c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8009790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009794:	d5e3      	bpl.n	800975e <powf+0x46>
 8009796:	f7fd f9ed 	bl	8006b74 <__errno>
 800979a:	2321      	movs	r3, #33	; 0x21
 800979c:	6003      	str	r3, [r0, #0]
 800979e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8009840 <powf+0x128>
 80097a2:	e7dc      	b.n	800975e <powf+0x46>
 80097a4:	f000 fb1a 	bl	8009ddc <finitef>
 80097a8:	bb50      	cbnz	r0, 8009800 <powf+0xe8>
 80097aa:	eeb0 0a49 	vmov.f32	s0, s18
 80097ae:	f000 fb15 	bl	8009ddc <finitef>
 80097b2:	b328      	cbz	r0, 8009800 <powf+0xe8>
 80097b4:	eeb0 0a68 	vmov.f32	s0, s17
 80097b8:	f000 fb10 	bl	8009ddc <finitef>
 80097bc:	b300      	cbz	r0, 8009800 <powf+0xe8>
 80097be:	eeb4 8a48 	vcmp.f32	s16, s16
 80097c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c6:	d706      	bvc.n	80097d6 <powf+0xbe>
 80097c8:	f7fd f9d4 	bl	8006b74 <__errno>
 80097cc:	2321      	movs	r3, #33	; 0x21
 80097ce:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80097d2:	6003      	str	r3, [r0, #0]
 80097d4:	e7c3      	b.n	800975e <powf+0x46>
 80097d6:	f7fd f9cd 	bl	8006b74 <__errno>
 80097da:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80097de:	2322      	movs	r3, #34	; 0x22
 80097e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	d508      	bpl.n	80097fa <powf+0xe2>
 80097e8:	eeb0 0a68 	vmov.f32	s0, s17
 80097ec:	f000 fb0a 	bl	8009e04 <rintf>
 80097f0:	eeb4 0a68 	vcmp.f32	s0, s17
 80097f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f8:	d1d1      	bne.n	800979e <powf+0x86>
 80097fa:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8009844 <powf+0x12c>
 80097fe:	e7ae      	b.n	800975e <powf+0x46>
 8009800:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009808:	d1a9      	bne.n	800975e <powf+0x46>
 800980a:	eeb0 0a49 	vmov.f32	s0, s18
 800980e:	f000 fae5 	bl	8009ddc <finitef>
 8009812:	2800      	cmp	r0, #0
 8009814:	d0a3      	beq.n	800975e <powf+0x46>
 8009816:	eeb0 0a68 	vmov.f32	s0, s17
 800981a:	f000 fadf 	bl	8009ddc <finitef>
 800981e:	2800      	cmp	r0, #0
 8009820:	d09d      	beq.n	800975e <powf+0x46>
 8009822:	f7fd f9a7 	bl	8006b74 <__errno>
 8009826:	2322      	movs	r3, #34	; 0x22
 8009828:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800983c <powf+0x124>
 800982c:	6003      	str	r3, [r0, #0]
 800982e:	e796      	b.n	800975e <powf+0x46>
 8009830:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009834:	e793      	b.n	800975e <powf+0x46>
 8009836:	bf00      	nop
 8009838:	200001dc 	.word	0x200001dc
 800983c:	00000000 	.word	0x00000000
 8009840:	ff800000 	.word	0xff800000
 8009844:	7f800000 	.word	0x7f800000

08009848 <__ieee754_powf>:
 8009848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984c:	ee10 5a90 	vmov	r5, s1
 8009850:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8009854:	ed2d 8b02 	vpush	{d8}
 8009858:	eeb0 8a40 	vmov.f32	s16, s0
 800985c:	eef0 8a60 	vmov.f32	s17, s1
 8009860:	f000 8291 	beq.w	8009d86 <__ieee754_powf+0x53e>
 8009864:	ee10 8a10 	vmov	r8, s0
 8009868:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800986c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009870:	dc06      	bgt.n	8009880 <__ieee754_powf+0x38>
 8009872:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8009876:	dd0a      	ble.n	800988e <__ieee754_powf+0x46>
 8009878:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800987c:	f000 8283 	beq.w	8009d86 <__ieee754_powf+0x53e>
 8009880:	ecbd 8b02 	vpop	{d8}
 8009884:	48d8      	ldr	r0, [pc, #864]	; (8009be8 <__ieee754_powf+0x3a0>)
 8009886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800988a:	f000 bab5 	b.w	8009df8 <nanf>
 800988e:	f1b8 0f00 	cmp.w	r8, #0
 8009892:	da1f      	bge.n	80098d4 <__ieee754_powf+0x8c>
 8009894:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8009898:	da2e      	bge.n	80098f8 <__ieee754_powf+0xb0>
 800989a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800989e:	f2c0 827b 	blt.w	8009d98 <__ieee754_powf+0x550>
 80098a2:	15fb      	asrs	r3, r7, #23
 80098a4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80098a8:	fa47 f603 	asr.w	r6, r7, r3
 80098ac:	fa06 f303 	lsl.w	r3, r6, r3
 80098b0:	42bb      	cmp	r3, r7
 80098b2:	f040 8271 	bne.w	8009d98 <__ieee754_powf+0x550>
 80098b6:	f006 0601 	and.w	r6, r6, #1
 80098ba:	f1c6 0602 	rsb	r6, r6, #2
 80098be:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80098c2:	d120      	bne.n	8009906 <__ieee754_powf+0xbe>
 80098c4:	2d00      	cmp	r5, #0
 80098c6:	f280 8264 	bge.w	8009d92 <__ieee754_powf+0x54a>
 80098ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80098ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80098d2:	e00d      	b.n	80098f0 <__ieee754_powf+0xa8>
 80098d4:	2600      	movs	r6, #0
 80098d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80098da:	d1f0      	bne.n	80098be <__ieee754_powf+0x76>
 80098dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80098e0:	f000 8251 	beq.w	8009d86 <__ieee754_powf+0x53e>
 80098e4:	dd0a      	ble.n	80098fc <__ieee754_powf+0xb4>
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	f280 8250 	bge.w	8009d8c <__ieee754_powf+0x544>
 80098ec:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8009bec <__ieee754_powf+0x3a4>
 80098f0:	ecbd 8b02 	vpop	{d8}
 80098f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f8:	2602      	movs	r6, #2
 80098fa:	e7ec      	b.n	80098d6 <__ieee754_powf+0x8e>
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	daf5      	bge.n	80098ec <__ieee754_powf+0xa4>
 8009900:	eeb1 0a68 	vneg.f32	s0, s17
 8009904:	e7f4      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009906:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800990a:	d102      	bne.n	8009912 <__ieee754_powf+0xca>
 800990c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009910:	e7ee      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009912:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8009916:	eeb0 0a48 	vmov.f32	s0, s16
 800991a:	d108      	bne.n	800992e <__ieee754_powf+0xe6>
 800991c:	f1b8 0f00 	cmp.w	r8, #0
 8009920:	db05      	blt.n	800992e <__ieee754_powf+0xe6>
 8009922:	ecbd 8b02 	vpop	{d8}
 8009926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992a:	f000 ba4d 	b.w	8009dc8 <__ieee754_sqrtf>
 800992e:	f000 fa4e 	bl	8009dce <fabsf>
 8009932:	b124      	cbz	r4, 800993e <__ieee754_powf+0xf6>
 8009934:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8009938:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800993c:	d117      	bne.n	800996e <__ieee754_powf+0x126>
 800993e:	2d00      	cmp	r5, #0
 8009940:	bfbc      	itt	lt
 8009942:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009946:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800994a:	f1b8 0f00 	cmp.w	r8, #0
 800994e:	dacf      	bge.n	80098f0 <__ieee754_powf+0xa8>
 8009950:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8009954:	ea54 0306 	orrs.w	r3, r4, r6
 8009958:	d104      	bne.n	8009964 <__ieee754_powf+0x11c>
 800995a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800995e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009962:	e7c5      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009964:	2e01      	cmp	r6, #1
 8009966:	d1c3      	bne.n	80098f0 <__ieee754_powf+0xa8>
 8009968:	eeb1 0a40 	vneg.f32	s0, s0
 800996c:	e7c0      	b.n	80098f0 <__ieee754_powf+0xa8>
 800996e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8009972:	3801      	subs	r0, #1
 8009974:	ea56 0300 	orrs.w	r3, r6, r0
 8009978:	d104      	bne.n	8009984 <__ieee754_powf+0x13c>
 800997a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800997e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009982:	e7b5      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009984:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8009988:	dd6b      	ble.n	8009a62 <__ieee754_powf+0x21a>
 800998a:	4b99      	ldr	r3, [pc, #612]	; (8009bf0 <__ieee754_powf+0x3a8>)
 800998c:	429c      	cmp	r4, r3
 800998e:	dc06      	bgt.n	800999e <__ieee754_powf+0x156>
 8009990:	2d00      	cmp	r5, #0
 8009992:	daab      	bge.n	80098ec <__ieee754_powf+0xa4>
 8009994:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8009bf4 <__ieee754_powf+0x3ac>
 8009998:	ee20 0a00 	vmul.f32	s0, s0, s0
 800999c:	e7a8      	b.n	80098f0 <__ieee754_powf+0xa8>
 800999e:	4b96      	ldr	r3, [pc, #600]	; (8009bf8 <__ieee754_powf+0x3b0>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	dd02      	ble.n	80099aa <__ieee754_powf+0x162>
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	dcf5      	bgt.n	8009994 <__ieee754_powf+0x14c>
 80099a8:	e7a0      	b.n	80098ec <__ieee754_powf+0xa4>
 80099aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80099ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80099b2:	eddf 6a92 	vldr	s13, [pc, #584]	; 8009bfc <__ieee754_powf+0x3b4>
 80099b6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80099ba:	eee0 6a67 	vfms.f32	s13, s0, s15
 80099be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80099c2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80099c6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80099ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ce:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8009c00 <__ieee754_powf+0x3b8>
 80099d2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80099d6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8009c04 <__ieee754_powf+0x3bc>
 80099da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80099de:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8009c08 <__ieee754_powf+0x3c0>
 80099e2:	eef0 6a67 	vmov.f32	s13, s15
 80099e6:	eee0 6a07 	vfma.f32	s13, s0, s14
 80099ea:	ee16 3a90 	vmov	r3, s13
 80099ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80099f2:	f023 030f 	bic.w	r3, r3, #15
 80099f6:	ee00 3a90 	vmov	s1, r3
 80099fa:	eee0 0a47 	vfms.f32	s1, s0, s14
 80099fe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009a02:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8009a06:	f025 050f 	bic.w	r5, r5, #15
 8009a0a:	ee07 5a10 	vmov	s14, r5
 8009a0e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009a12:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009a1e:	3e01      	subs	r6, #1
 8009a20:	ea56 0200 	orrs.w	r2, r6, r0
 8009a24:	ee07 5a10 	vmov	s14, r5
 8009a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a2c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009a30:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009a34:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009a38:	ee17 4a10 	vmov	r4, s14
 8009a3c:	bf08      	it	eq
 8009a3e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009a48:	f340 8184 	ble.w	8009d54 <__ieee754_powf+0x50c>
 8009a4c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009a50:	f340 80fc 	ble.w	8009c4c <__ieee754_powf+0x404>
 8009a54:	eddf 7a67 	vldr	s15, [pc, #412]	; 8009bf4 <__ieee754_powf+0x3ac>
 8009a58:	ee28 0a27 	vmul.f32	s0, s16, s15
 8009a5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a60:	e746      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009a62:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8009a66:	bf01      	itttt	eq
 8009a68:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8009c0c <__ieee754_powf+0x3c4>
 8009a6c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009a70:	f06f 0217 	mvneq.w	r2, #23
 8009a74:	ee17 4a90 	vmoveq	r4, s15
 8009a78:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8009a7c:	bf18      	it	ne
 8009a7e:	2200      	movne	r2, #0
 8009a80:	3b7f      	subs	r3, #127	; 0x7f
 8009a82:	4413      	add	r3, r2
 8009a84:	4a62      	ldr	r2, [pc, #392]	; (8009c10 <__ieee754_powf+0x3c8>)
 8009a86:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009a8a:	4294      	cmp	r4, r2
 8009a8c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8009a90:	dd06      	ble.n	8009aa0 <__ieee754_powf+0x258>
 8009a92:	4a60      	ldr	r2, [pc, #384]	; (8009c14 <__ieee754_powf+0x3cc>)
 8009a94:	4294      	cmp	r4, r2
 8009a96:	f340 80a4 	ble.w	8009be2 <__ieee754_powf+0x39a>
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009aa0:	2400      	movs	r4, #0
 8009aa2:	4a5d      	ldr	r2, [pc, #372]	; (8009c18 <__ieee754_powf+0x3d0>)
 8009aa4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009aa8:	ee07 1a90 	vmov	s15, r1
 8009aac:	ed92 7a00 	vldr	s14, [r2]
 8009ab0:	4a5a      	ldr	r2, [pc, #360]	; (8009c1c <__ieee754_powf+0x3d4>)
 8009ab2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009ab6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009aba:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009abe:	1049      	asrs	r1, r1, #1
 8009ac0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009ac4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009ac8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8009acc:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8009ad0:	ee06 1a10 	vmov	s12, r1
 8009ad4:	ee65 4a26 	vmul.f32	s9, s10, s13
 8009ad8:	ee36 7a47 	vsub.f32	s14, s12, s14
 8009adc:	ee14 7a90 	vmov	r7, s9
 8009ae0:	4017      	ands	r7, r2
 8009ae2:	ee05 7a90 	vmov	s11, r7
 8009ae6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8009aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009aee:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8009c20 <__ieee754_powf+0x3d8>
 8009af2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8009af6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8009afa:	ee25 6a26 	vmul.f32	s12, s10, s13
 8009afe:	eddf 6a49 	vldr	s13, [pc, #292]	; 8009c24 <__ieee754_powf+0x3dc>
 8009b02:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009b06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009c28 <__ieee754_powf+0x3e0>
 8009b0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009b0e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8009bfc <__ieee754_powf+0x3b4>
 8009b12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b16:	eddf 6a45 	vldr	s13, [pc, #276]	; 8009c2c <__ieee754_powf+0x3e4>
 8009b1a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009b1e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009c30 <__ieee754_powf+0x3e8>
 8009b22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b26:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8009b2a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8009b2e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009b32:	eee5 6a07 	vfma.f32	s13, s10, s14
 8009b36:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8009b3a:	eef0 7a45 	vmov.f32	s15, s10
 8009b3e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8009b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b46:	ee17 1a90 	vmov	r1, s15
 8009b4a:	4011      	ands	r1, r2
 8009b4c:	ee07 1a90 	vmov	s15, r1
 8009b50:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8009b54:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8009b58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009b5c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009b60:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009b64:	eeb0 6a47 	vmov.f32	s12, s14
 8009b68:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8009b6c:	ee16 1a10 	vmov	r1, s12
 8009b70:	4011      	ands	r1, r2
 8009b72:	ee06 1a90 	vmov	s13, r1
 8009b76:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8009b7a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009c34 <__ieee754_powf+0x3ec>
 8009b7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009c38 <__ieee754_powf+0x3f0>
 8009b82:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009b86:	ee06 1a10 	vmov	s12, r1
 8009b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b8e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009c3c <__ieee754_powf+0x3f4>
 8009b92:	492b      	ldr	r1, [pc, #172]	; (8009c40 <__ieee754_powf+0x3f8>)
 8009b94:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009b98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b9c:	edd1 7a00 	vldr	s15, [r1]
 8009ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	4b26      	ldr	r3, [pc, #152]	; (8009c44 <__ieee754_powf+0x3fc>)
 8009baa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009bae:	eef0 7a47 	vmov.f32	s15, s14
 8009bb2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009bb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bba:	edd4 0a00 	vldr	s1, [r4]
 8009bbe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc6:	ee17 3a90 	vmov	r3, s15
 8009bca:	4013      	ands	r3, r2
 8009bcc:	ee07 3a90 	vmov	s15, r3
 8009bd0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009bd4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8009bd8:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009bdc:	ee77 7a66 	vsub.f32	s15, s14, s13
 8009be0:	e70f      	b.n	8009a02 <__ieee754_powf+0x1ba>
 8009be2:	2401      	movs	r4, #1
 8009be4:	e75d      	b.n	8009aa2 <__ieee754_powf+0x25a>
 8009be6:	bf00      	nop
 8009be8:	0800a29f 	.word	0x0800a29f
 8009bec:	00000000 	.word	0x00000000
 8009bf0:	3f7ffff7 	.word	0x3f7ffff7
 8009bf4:	7149f2ca 	.word	0x7149f2ca
 8009bf8:	3f800007 	.word	0x3f800007
 8009bfc:	3eaaaaab 	.word	0x3eaaaaab
 8009c00:	3fb8aa3b 	.word	0x3fb8aa3b
 8009c04:	36eca570 	.word	0x36eca570
 8009c08:	3fb8aa00 	.word	0x3fb8aa00
 8009c0c:	4b800000 	.word	0x4b800000
 8009c10:	001cc471 	.word	0x001cc471
 8009c14:	005db3d6 	.word	0x005db3d6
 8009c18:	0800a3bc 	.word	0x0800a3bc
 8009c1c:	fffff000 	.word	0xfffff000
 8009c20:	3e6c3255 	.word	0x3e6c3255
 8009c24:	3e53f142 	.word	0x3e53f142
 8009c28:	3e8ba305 	.word	0x3e8ba305
 8009c2c:	3edb6db7 	.word	0x3edb6db7
 8009c30:	3f19999a 	.word	0x3f19999a
 8009c34:	3f76384f 	.word	0x3f76384f
 8009c38:	3f763800 	.word	0x3f763800
 8009c3c:	369dc3a0 	.word	0x369dc3a0
 8009c40:	0800a3cc 	.word	0x0800a3cc
 8009c44:	0800a3c4 	.word	0x0800a3c4
 8009c48:	3338aa3c 	.word	0x3338aa3c
 8009c4c:	f040 8092 	bne.w	8009d74 <__ieee754_powf+0x52c>
 8009c50:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8009c48 <__ieee754_powf+0x400>
 8009c54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c58:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009c5c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c64:	f73f aef6 	bgt.w	8009a54 <__ieee754_powf+0x20c>
 8009c68:	15db      	asrs	r3, r3, #23
 8009c6a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8009c6e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c72:	4103      	asrs	r3, r0
 8009c74:	4423      	add	r3, r4
 8009c76:	4949      	ldr	r1, [pc, #292]	; (8009d9c <__ieee754_powf+0x554>)
 8009c78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c7c:	3a7f      	subs	r2, #127	; 0x7f
 8009c7e:	4111      	asrs	r1, r2
 8009c80:	ea23 0101 	bic.w	r1, r3, r1
 8009c84:	ee07 1a10 	vmov	s14, r1
 8009c88:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8009c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009c90:	f1c2 0217 	rsb	r2, r2, #23
 8009c94:	4110      	asrs	r0, r2
 8009c96:	2c00      	cmp	r4, #0
 8009c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c9c:	bfb8      	it	lt
 8009c9e:	4240      	neglt	r0, r0
 8009ca0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009ca4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8009da0 <__ieee754_powf+0x558>
 8009ca8:	ee17 3a10 	vmov	r3, s14
 8009cac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009cb0:	f023 030f 	bic.w	r3, r3, #15
 8009cb4:	ee07 3a10 	vmov	s14, r3
 8009cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cbc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009cc0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8009da4 <__ieee754_powf+0x55c>
 8009cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8009ccc:	eddf 6a36 	vldr	s13, [pc, #216]	; 8009da8 <__ieee754_powf+0x560>
 8009cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8009cd4:	eea7 0a26 	vfma.f32	s0, s14, s13
 8009cd8:	eeb0 6a40 	vmov.f32	s12, s0
 8009cdc:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009ce0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009ce4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009ce8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009dac <__ieee754_powf+0x564>
 8009cec:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8009db0 <__ieee754_powf+0x568>
 8009cf0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8009cf4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009db4 <__ieee754_powf+0x56c>
 8009cf8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009cfc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8009db8 <__ieee754_powf+0x570>
 8009d00:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009d04:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8009dbc <__ieee754_powf+0x574>
 8009d08:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009d0c:	eeb0 6a40 	vmov.f32	s12, s0
 8009d10:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009d14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d18:	eeb0 7a46 	vmov.f32	s14, s12
 8009d1c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009d20:	ee20 6a06 	vmul.f32	s12, s0, s12
 8009d24:	eee0 7a27 	vfma.f32	s15, s0, s15
 8009d28:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009d34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009d38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009d3c:	ee10 3a10 	vmov	r3, s0
 8009d40:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009d44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d48:	da1a      	bge.n	8009d80 <__ieee754_powf+0x538>
 8009d4a:	f000 f8b7 	bl	8009ebc <scalbnf>
 8009d4e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009d52:	e5cd      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009d54:	4a1a      	ldr	r2, [pc, #104]	; (8009dc0 <__ieee754_powf+0x578>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	dd02      	ble.n	8009d60 <__ieee754_powf+0x518>
 8009d5a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8009dc4 <__ieee754_powf+0x57c>
 8009d5e:	e67b      	b.n	8009a58 <__ieee754_powf+0x210>
 8009d60:	d108      	bne.n	8009d74 <__ieee754_powf+0x52c>
 8009d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d66:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	f6ff af7b 	blt.w	8009c68 <__ieee754_powf+0x420>
 8009d72:	e7f2      	b.n	8009d5a <__ieee754_powf+0x512>
 8009d74:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009d78:	f73f af76 	bgt.w	8009c68 <__ieee754_powf+0x420>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e78f      	b.n	8009ca0 <__ieee754_powf+0x458>
 8009d80:	ee00 3a10 	vmov	s0, r3
 8009d84:	e7e3      	b.n	8009d4e <__ieee754_powf+0x506>
 8009d86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009d8a:	e5b1      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009d8c:	eeb0 0a68 	vmov.f32	s0, s17
 8009d90:	e5ae      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009d92:	eeb0 0a48 	vmov.f32	s0, s16
 8009d96:	e5ab      	b.n	80098f0 <__ieee754_powf+0xa8>
 8009d98:	2600      	movs	r6, #0
 8009d9a:	e590      	b.n	80098be <__ieee754_powf+0x76>
 8009d9c:	007fffff 	.word	0x007fffff
 8009da0:	3f317218 	.word	0x3f317218
 8009da4:	35bfbe8c 	.word	0x35bfbe8c
 8009da8:	3f317200 	.word	0x3f317200
 8009dac:	3331bb4c 	.word	0x3331bb4c
 8009db0:	b5ddea0e 	.word	0xb5ddea0e
 8009db4:	388ab355 	.word	0x388ab355
 8009db8:	bb360b61 	.word	0xbb360b61
 8009dbc:	3e2aaaab 	.word	0x3e2aaaab
 8009dc0:	43160000 	.word	0x43160000
 8009dc4:	0da24260 	.word	0x0da24260

08009dc8 <__ieee754_sqrtf>:
 8009dc8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009dcc:	4770      	bx	lr

08009dce <fabsf>:
 8009dce:	ee10 3a10 	vmov	r3, s0
 8009dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dd6:	ee00 3a10 	vmov	s0, r3
 8009dda:	4770      	bx	lr

08009ddc <finitef>:
 8009ddc:	b082      	sub	sp, #8
 8009dde:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009de2:	9801      	ldr	r0, [sp, #4]
 8009de4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009de8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009dec:	bfac      	ite	ge
 8009dee:	2000      	movge	r0, #0
 8009df0:	2001      	movlt	r0, #1
 8009df2:	b002      	add	sp, #8
 8009df4:	4770      	bx	lr
	...

08009df8 <nanf>:
 8009df8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e00 <nanf+0x8>
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	7fc00000 	.word	0x7fc00000

08009e04 <rintf>:
 8009e04:	ee10 2a10 	vmov	r2, s0
 8009e08:	b513      	push	{r0, r1, r4, lr}
 8009e0a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009e0e:	397f      	subs	r1, #127	; 0x7f
 8009e10:	2916      	cmp	r1, #22
 8009e12:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009e16:	dc47      	bgt.n	8009ea8 <rintf+0xa4>
 8009e18:	b32b      	cbz	r3, 8009e66 <rintf+0x62>
 8009e1a:	2900      	cmp	r1, #0
 8009e1c:	ee10 3a10 	vmov	r3, s0
 8009e20:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8009e24:	da21      	bge.n	8009e6a <rintf+0x66>
 8009e26:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8009e2a:	425b      	negs	r3, r3
 8009e2c:	4921      	ldr	r1, [pc, #132]	; (8009eb4 <rintf+0xb0>)
 8009e2e:	0a5b      	lsrs	r3, r3, #9
 8009e30:	0d12      	lsrs	r2, r2, #20
 8009e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e36:	0512      	lsls	r2, r2, #20
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	edd1 6a00 	vldr	s13, [r1]
 8009e46:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8009e4a:	ed8d 7a01 	vstr	s14, [sp, #4]
 8009e4e:	eddd 7a01 	vldr	s15, [sp, #4]
 8009e52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e56:	ee17 3a90 	vmov	r3, s15
 8009e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e5e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8009e62:	ee00 3a10 	vmov	s0, r3
 8009e66:	b002      	add	sp, #8
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	4a13      	ldr	r2, [pc, #76]	; (8009eb8 <rintf+0xb4>)
 8009e6c:	410a      	asrs	r2, r1
 8009e6e:	4213      	tst	r3, r2
 8009e70:	d0f9      	beq.n	8009e66 <rintf+0x62>
 8009e72:	0854      	lsrs	r4, r2, #1
 8009e74:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8009e78:	d006      	beq.n	8009e88 <rintf+0x84>
 8009e7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009e7e:	ea23 0304 	bic.w	r3, r3, r4
 8009e82:	fa42 f101 	asr.w	r1, r2, r1
 8009e86:	430b      	orrs	r3, r1
 8009e88:	4a0a      	ldr	r2, [pc, #40]	; (8009eb4 <rintf+0xb0>)
 8009e8a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8009e8e:	ed90 7a00 	vldr	s14, [r0]
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9a:	edcd 7a01 	vstr	s15, [sp, #4]
 8009e9e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009ea2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009ea6:	e7de      	b.n	8009e66 <rintf+0x62>
 8009ea8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009eac:	d3db      	bcc.n	8009e66 <rintf+0x62>
 8009eae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009eb2:	e7d8      	b.n	8009e66 <rintf+0x62>
 8009eb4:	0800a3d4 	.word	0x0800a3d4
 8009eb8:	007fffff 	.word	0x007fffff

08009ebc <scalbnf>:
 8009ebc:	ee10 3a10 	vmov	r3, s0
 8009ec0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009ec4:	d025      	beq.n	8009f12 <scalbnf+0x56>
 8009ec6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009eca:	d302      	bcc.n	8009ed2 <scalbnf+0x16>
 8009ecc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ed0:	4770      	bx	lr
 8009ed2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009ed6:	d122      	bne.n	8009f1e <scalbnf+0x62>
 8009ed8:	4b2a      	ldr	r3, [pc, #168]	; (8009f84 <scalbnf+0xc8>)
 8009eda:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009f88 <scalbnf+0xcc>
 8009ede:	4298      	cmp	r0, r3
 8009ee0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ee4:	db16      	blt.n	8009f14 <scalbnf+0x58>
 8009ee6:	ee10 3a10 	vmov	r3, s0
 8009eea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009eee:	3a19      	subs	r2, #25
 8009ef0:	4402      	add	r2, r0
 8009ef2:	2afe      	cmp	r2, #254	; 0xfe
 8009ef4:	dd15      	ble.n	8009f22 <scalbnf+0x66>
 8009ef6:	ee10 3a10 	vmov	r3, s0
 8009efa:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009f8c <scalbnf+0xd0>
 8009efe:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009f90 <scalbnf+0xd4>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	eeb0 7a67 	vmov.f32	s14, s15
 8009f08:	bfb8      	it	lt
 8009f0a:	eef0 7a66 	vmovlt.f32	s15, s13
 8009f0e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009f12:	4770      	bx	lr
 8009f14:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009f94 <scalbnf+0xd8>
 8009f18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f1c:	4770      	bx	lr
 8009f1e:	0dd2      	lsrs	r2, r2, #23
 8009f20:	e7e6      	b.n	8009ef0 <scalbnf+0x34>
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	dd06      	ble.n	8009f34 <scalbnf+0x78>
 8009f26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f2a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009f2e:	ee00 3a10 	vmov	s0, r3
 8009f32:	4770      	bx	lr
 8009f34:	f112 0f16 	cmn.w	r2, #22
 8009f38:	da1a      	bge.n	8009f70 <scalbnf+0xb4>
 8009f3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	ee10 3a10 	vmov	r3, s0
 8009f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f48:	dd0a      	ble.n	8009f60 <scalbnf+0xa4>
 8009f4a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009f8c <scalbnf+0xd0>
 8009f4e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009f90 <scalbnf+0xd4>
 8009f52:	eef0 7a40 	vmov.f32	s15, s0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	bf18      	it	ne
 8009f5a:	eeb0 0a47 	vmovne.f32	s0, s14
 8009f5e:	e7db      	b.n	8009f18 <scalbnf+0x5c>
 8009f60:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009f94 <scalbnf+0xd8>
 8009f64:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009f98 <scalbnf+0xdc>
 8009f68:	eef0 7a40 	vmov.f32	s15, s0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	e7f3      	b.n	8009f58 <scalbnf+0x9c>
 8009f70:	3219      	adds	r2, #25
 8009f72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f76:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009f7a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009f9c <scalbnf+0xe0>
 8009f7e:	ee07 3a10 	vmov	s14, r3
 8009f82:	e7c4      	b.n	8009f0e <scalbnf+0x52>
 8009f84:	ffff3cb0 	.word	0xffff3cb0
 8009f88:	4c000000 	.word	0x4c000000
 8009f8c:	7149f2ca 	.word	0x7149f2ca
 8009f90:	f149f2ca 	.word	0xf149f2ca
 8009f94:	0da24260 	.word	0x0da24260
 8009f98:	8da24260 	.word	0x8da24260
 8009f9c:	33000000 	.word	0x33000000

08009fa0 <_init>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr

08009fac <_fini>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	bf00      	nop
 8009fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb2:	bc08      	pop	{r3}
 8009fb4:	469e      	mov	lr, r3
 8009fb6:	4770      	bx	lr
