
F446_CenterBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800af50  0800af50  0001af50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2a8  0800b2a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2a8  0800b2a8  0001b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2b0  0800b2b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2b4  0800b2b4  0001b2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001e0  0800b498  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800b498  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9dc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040c7  00000000  00000000  0003cbec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  00040cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  000421e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027136  00000000  00000000  000434e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014d06  00000000  00000000  0006a616  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9261  00000000  00000000  0007f31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015857d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a0  00000000  00000000  001585f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af38 	.word	0x0800af38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800af38 	.word	0x0800af38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <DFPlayer_init>:

#include "DFPlayer_Mini_mp3.h"

uint8_t cmd[8];

void DFPlayer_init(UART_HandleTypeDef *handler){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	huart_DFPlayer = handler;
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <DFPlayer_init+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000208 	.word	0x20000208

08000fa8 <DFPlayer_setvolume>:

void DFPlayer_setvolume(uint8_t volume){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[8];
	cmd[0]= 0x7E;
 8000fb2:	237e      	movs	r3, #126	; 0x7e
 8000fb4:	723b      	strb	r3, [r7, #8]
	cmd[1]= 0xFF;
 8000fb6:	23ff      	movs	r3, #255	; 0xff
 8000fb8:	727b      	strb	r3, [r7, #9]
	cmd[2]=	0x06;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	72bb      	strb	r3, [r7, #10]
	cmd[3]=	0x06;
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	72fb      	strb	r3, [r7, #11]
	cmd[4]=	0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
	cmd[5]=	0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	737b      	strb	r3, [r7, #13]
	cmd[6]=	volume;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	73bb      	strb	r3, [r7, #14]
	cmd[7]=	0xEF;
 8000fce:	23ef      	movs	r3, #239	; 0xef
 8000fd0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart_DFPlayer,(uint8_t*)cmd,8,0xF);
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <DFPlayer_setvolume+0x44>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	f107 0108 	add.w	r1, r7, #8
 8000fda:	230f      	movs	r3, #15
 8000fdc:	2208      	movs	r2, #8
 8000fde:	f006 f87e 	bl	80070de <HAL_UART_Transmit>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000208 	.word	0x20000208

08000ff0 <DFPlayer_playmp3>:
void DFPlayer_playmp3(uint8_t playnumber){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[8];
	cmd[0]= 0x7E;
 8000ffa:	237e      	movs	r3, #126	; 0x7e
 8000ffc:	723b      	strb	r3, [r7, #8]
	cmd[1]= 0xFF;
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	727b      	strb	r3, [r7, #9]
	cmd[2]=	0x06;
 8001002:	2306      	movs	r3, #6
 8001004:	72bb      	strb	r3, [r7, #10]
	cmd[3]=	0x0F;
 8001006:	230f      	movs	r3, #15
 8001008:	72fb      	strb	r3, [r7, #11]
	cmd[4]=	0x00;
 800100a:	2300      	movs	r3, #0
 800100c:	733b      	strb	r3, [r7, #12]
	cmd[5]=	1;
 800100e:	2301      	movs	r3, #1
 8001010:	737b      	strb	r3, [r7, #13]
	cmd[6]=	playnumber;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	73bb      	strb	r3, [r7, #14]
	cmd[7]=	0xEF;
 8001016:	23ef      	movs	r3, #239	; 0xef
 8001018:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart_DFPlayer,(uint8_t*)cmd,8,0xF);
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <DFPlayer_playmp3+0x44>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	f107 0108 	add.w	r1, r7, #8
 8001022:	230f      	movs	r3, #15
 8001024:	2208      	movs	r2, #8
 8001026:	f006 f85a 	bl	80070de <HAL_UART_Transmit>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000208 	.word	0x20000208

08001038 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_CAN1_Init+0x64>)
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <MX_CAN1_Init+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_CAN1_Init+0x64>)
 8001044:	2206      	movs	r2, #6
 8001046:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_CAN1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_CAN1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_CAN1_Init+0x64>)
 8001056:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800105a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_CAN1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_CAN1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_CAN1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_CAN1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_CAN1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_CAN1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_CAN1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_CAN1_Init+0x64>)
 8001088:	f002 fed2 	bl	8003e30 <HAL_CAN_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001092:	f001 fba9 	bl	80027e8 <Error_Handler>
  }

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000214 	.word	0x20000214
 80010a0:	40006400 	.word	0x40006400

080010a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a25      	ldr	r2, [pc, #148]	; (8001158 <HAL_CAN_MspInit+0xb4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d144      	bne.n	8001150 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_CAN_MspInit+0xb8>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <HAL_CAN_MspInit+0xb8>)
 80010d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_CAN_MspInit+0xb8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_CAN_MspInit+0xb8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a1c      	ldr	r2, [pc, #112]	; (800115c <HAL_CAN_MspInit+0xb8>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <HAL_CAN_MspInit+0xb8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001110:	2309      	movs	r3, #9
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <HAL_CAN_MspInit+0xbc>)
 800111c:	f004 faf2 	bl	8005704 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	2013      	movs	r0, #19
 8001126:	f003 fdf0 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800112a:	2013      	movs	r0, #19
 800112c:	f003 fe09 	bl	8004d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2102      	movs	r1, #2
 8001134:	2014      	movs	r0, #20
 8001136:	f003 fde8 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800113a:	2014      	movs	r0, #20
 800113c:	f003 fe01 	bl	8004d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2103      	movs	r1, #3
 8001144:	2015      	movs	r0, #21
 8001146:	f003 fde0 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800114a:	2015      	movs	r0, #21
 800114c:	f003 fdf9 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40006400 	.word	0x40006400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <can_init>:
 */

#include "can_ibis.h"


void can_init(CAN_HandleTypeDef* handler){
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	  CAN_ibis = handler;
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <can_init+0x78>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
	  CAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.FilterBank = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterMode =  CAN_FILTERMODE_IDMASK;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
	  sFilterConfig.FilterIdHigh = 0x000;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIdLow = 0x000;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterMaskIdHigh = 0x000;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterMaskIdLow = 0x000;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterActivation = ENABLE;
 8001192:	2301      	movs	r3, #1
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
	  sFilterConfig.SlaveStartFilterBank = 14;
 8001196:	230e      	movs	r3, #14
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){  Error_Handler();}
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <can_init+0x7c>)
 80011a2:	f002 ff41 	bl	8004028 <HAL_CAN_ConfigFilter>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <can_init+0x4c>
 80011ac:	f001 fb1c 	bl	80027e8 <Error_Handler>
	  if (HAL_CAN_Start(&hcan1) != HAL_OK){ Error_Handler();}
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <can_init+0x7c>)
 80011b2:	f003 f819 	bl	80041e8 <HAL_CAN_Start>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <can_init+0x5c>
 80011bc:	f001 fb14 	bl	80027e8 <Error_Handler>
	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {Error_Handler(); }
 80011c0:	2102      	movs	r1, #2
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <can_init+0x7c>)
 80011c4:	f003 fa76 	bl	80046b4 <HAL_CAN_ActivateNotification>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <can_init+0x6e>
 80011ce:	f001 fb0b 	bl	80027e8 <Error_Handler>
}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	; 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000298 	.word	0x20000298
 80011e0:	20000214 	.word	0x20000214

080011e4 <can_send>:

void can_send(int id, uint8_t senddata[8]){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]

	TxHeader.StdId = id;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a16      	ldr	r2, [pc, #88]	; (800124c <can_send+0x68>)
 80011f2:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <can_send+0x68>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <can_send+0x68>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <can_send+0x68>)
 8001202:	2208      	movs	r2, #8
 8001204:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <can_send+0x68>)
 8001208:	2200      	movs	r2, #0
 800120a:	751a      	strb	r2, [r3, #20]

	/* Request transmission */
	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,senddata, &TxMailbox) != HAL_OK)
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <can_send+0x6c>)
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <can_send+0x68>)
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <can_send+0x70>)
 8001214:	f003 f82c 	bl	8004270 <HAL_CAN_AddTxMessage>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <can_send+0x4a>
	{
		Error_Handler();
 800121e:	f001 fae3 	bl	80027e8 <Error_Handler>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 8001222:	e004      	b.n	800122e <can_send+0x4a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,1);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <can_send+0x74>)
 800122a:	f004 fbfd 	bl	8005a28 <HAL_GPIO_WritePin>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <can_send+0x70>)
 8001230:	f003 f8f9 	bl	8004426 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b03      	cmp	r3, #3
 8001238:	d1f4      	bne.n	8001224 <can_send+0x40>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,0);
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <can_send+0x74>)
 8001240:	f004 fbf2 	bl	8005a28 <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000034c 	.word	0x2000034c
 8001250:	20000308 	.word	0x20000308
 8001254:	20000214 	.word	0x20000214
 8001258:	40020800 	.word	0x40020800

0800125c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_DAC_Init+0x60>)
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <MX_DAC_Init+0x64>)
 800126e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <MX_DAC_Init+0x60>)
 8001272:	f003 fd80 	bl	8004d76 <HAL_DAC_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800127c:	f001 fab4 	bl	80027e8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <MX_DAC_Init+0x60>)
 8001290:	f003 fe4d 	bl	8004f2e <HAL_DAC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800129a:	f001 faa5 	bl	80027e8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	2210      	movs	r2, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_DAC_Init+0x60>)
 80012a6:	f003 fe42 	bl	8004f2e <HAL_DAC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80012b0:	f001 fa9a 	bl	80027e8 <Error_Handler>
  }

}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000398 	.word	0x20000398
 80012c0:	40007400 	.word	0x40007400

080012c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_DAC_MspInit+0x8c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12f      	bne.n	8001346 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_DAC_MspInit+0x90>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_DAC_MspInit+0x90>)
 80012f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_DAC_MspInit+0x90>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_DAC_MspInit+0x90>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_DAC_MspInit+0x90>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_DAC_MspInit+0x90>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800131e:	2330      	movs	r3, #48	; 0x30
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <HAL_DAC_MspInit+0x94>)
 8001332:	f004 f9e7 	bl	8005704 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2104      	movs	r1, #4
 800133a:	2036      	movs	r0, #54	; 0x36
 800133c:	f003 fce5 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001340:	2036      	movs	r0, #54	; 0x36
 8001342:	f003 fcfe 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40007400 	.word	0x40007400
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_DMA_Init+0x4c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <MX_DMA_Init+0x4c>)
 800136c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <MX_DMA_Init+0x4c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 9, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2109      	movs	r1, #9
 8001382:	2010      	movs	r0, #16
 8001384:	f003 fcc1 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001388:	2010      	movs	r0, #16
 800138a:	f003 fcda 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 10, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	210a      	movs	r1, #10
 8001392:	2011      	movs	r0, #17
 8001394:	f003 fcb9 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001398:	2011      	movs	r0, #17
 800139a:	f003 fcd2 	bl	8004d42 <HAL_NVIC_EnableIRQ>

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <MX_GPIO_Init+0xf8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a36      	ldr	r2, [pc, #216]	; (80014a4 <MX_GPIO_Init+0xf8>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <MX_GPIO_Init+0xf8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_GPIO_Init+0xf8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a2f      	ldr	r2, [pc, #188]	; (80014a4 <MX_GPIO_Init+0xf8>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_GPIO_Init+0xf8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_GPIO_Init+0xf8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <MX_GPIO_Init+0xf8>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_GPIO_Init+0xf8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_GPIO_Init+0xf8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <MX_GPIO_Init+0xf8>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_GPIO_Init+0xf8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2103      	movs	r1, #3
 8001436:	481c      	ldr	r0, [pc, #112]	; (80014a8 <MX_GPIO_Init+0xfc>)
 8001438:	f004 faf6 	bl	8005a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001442:	481a      	ldr	r0, [pc, #104]	; (80014ac <MX_GPIO_Init+0x100>)
 8001444:	f004 faf0 	bl	8005a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001448:	2303      	movs	r3, #3
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4812      	ldr	r0, [pc, #72]	; (80014a8 <MX_GPIO_Init+0xfc>)
 8001460:	f004 f950 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_GPIO_Init+0x100>)
 800147e:	f004 f941 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001482:	2340      	movs	r3, #64	; 0x40
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_GPIO_Init+0x104>)
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_GPIO_Init+0xfc>)
 8001496:	f004 f935 	bl	8005704 <HAL_GPIO_Init>

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020400 	.word	0x40020400
 80014b0:	10110000 	.word	0x10110000

080014b4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_IWDG_Init+0x2c>)
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <MX_IWDG_Init+0x30>)
 80014bc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_IWDG_Init+0x2c>)
 80014c0:	2202      	movs	r2, #2
 80014c2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_IWDG_Init+0x2c>)
 80014c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014ca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_IWDG_Init+0x2c>)
 80014ce:	f004 fadf 	bl	8005a90 <HAL_IWDG_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80014d8:	f001 f986 	bl	80027e8 <Error_Handler>
  }

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200003ac 	.word	0x200003ac
 80014e4:	40003000 	.word	0x40003000

080014e8 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80014f2:	1df9      	adds	r1, r7, #7
 80014f4:	2301      	movs	r3, #1
 80014f6:	2201      	movs	r2, #1
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <__io_putchar+0x20>)
 80014fa:	f005 fdf0 	bl	80070de <HAL_UART_Transmit>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000590 	.word	0x20000590

0800150c <map>:
uint8_t Craction_in,Break_in,Flont_Lamp_in,Key_in,EX_in,Winker_L_in,Winker_R_in;
uint8_t state,cnt,connect,EN,EN_rear,EN_front,mode;
float slot,speed,slot_data;
float rol,pit,pit_acc,rol_acc,pit_temp,rol_temp;

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	ed87 0a05 	vstr	s0, [r7, #20]
 8001516:	edc7 0a04 	vstr	s1, [r7, #16]
 800151a:	ed87 1a03 	vstr	s2, [r7, #12]
 800151e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001522:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001526:	ed97 7a05 	vldr	s14, [r7, #20]
 800152a:	edd7 7a04 	vldr	s15, [r7, #16]
 800152e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001532:	edd7 6a01 	vldr	s13, [r7, #4]
 8001536:	edd7 7a02 	vldr	s15, [r7, #8]
 800153a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001542:	ed97 7a03 	vldr	s14, [r7, #12]
 8001546:	edd7 7a04 	vldr	s15, [r7, #16]
 800154a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001552:	edd7 7a02 	vldr	s15, [r7, #8]
 8001556:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b598      	push	{r3, r4, r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f002 fbcc 	bl	8003d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f8e6 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f7ff ff1a 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001578:	f7ff fef0 	bl	800135c <MX_DMA_Init>
  MX_CAN1_Init();
 800157c:	f7ff fd5c 	bl	8001038 <MX_CAN1_Init>
  MX_DAC_Init();
 8001580:	f7ff fe6c 	bl	800125c <MX_DAC_Init>
  MX_SPI2_Init();
 8001584:	f001 ff8c 	bl	80034a0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001588:	f002 f9c2 	bl	8003910 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800158c:	f002 f9ea 	bl	8003964 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001590:	f002 fa12 	bl	80039b8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001594:	f002 f95e 	bl	8003854 <MX_TIM6_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  EN_rear=0;
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <main+0x174>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
  EN_front=0;
 800159e:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <main+0x178>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
  setbuf(stdout, NULL);
 80015a4:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <main+0x17c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f007 f853 	bl	8008658 <setbuf>
  can_init(&hcan1);
 80015b2:	484d      	ldr	r0, [pc, #308]	; (80016e8 <main+0x180>)
 80015b4:	f7ff fdd6 	bl	8001164 <can_init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80015b8:	2100      	movs	r1, #0
 80015ba:	484c      	ldr	r0, [pc, #304]	; (80016ec <main+0x184>)
 80015bc:	f003 fbfd 	bl	8004dba <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80015c0:	2110      	movs	r1, #16
 80015c2:	484a      	ldr	r0, [pc, #296]	; (80016ec <main+0x184>)
 80015c4:	f003 fbf9 	bl	8004dba <HAL_DAC_Start>
  HAL_UART_Init(&huart2);
 80015c8:	4849      	ldr	r0, [pc, #292]	; (80016f0 <main+0x188>)
 80015ca:	f005 fd3b 	bl	8007044 <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_ESP32,Rxbufsize_from_ESP32);
 80015ce:	2205      	movs	r2, #5
 80015d0:	4948      	ldr	r1, [pc, #288]	; (80016f4 <main+0x18c>)
 80015d2:	4847      	ldr	r0, [pc, #284]	; (80016f0 <main+0x188>)
 80015d4:	f005 fe1c 	bl	8007210 <HAL_UART_Receive_DMA>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80015d8:	2300      	movs	r3, #0
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	4843      	ldr	r0, [pc, #268]	; (80016ec <main+0x184>)
 80015e0:	f003 fcf2 	bl	8004fc8 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80015e4:	2300      	movs	r3, #0
 80015e6:	2200      	movs	r2, #0
 80015e8:	2110      	movs	r1, #16
 80015ea:	4840      	ldr	r0, [pc, #256]	; (80016ec <main+0x184>)
 80015ec:	f003 fcec 	bl	8004fc8 <HAL_DAC_SetValue>
  mpu9250_init(&hspi2);
 80015f0:	4841      	ldr	r0, [pc, #260]	; (80016f8 <main+0x190>)
 80015f2:	f001 f95f 	bl	80028b4 <mpu9250_init>

  while(1){
      	if(EN_front==1 && EN_rear==1){break;}
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <main+0x178>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d103      	bne.n	8001606 <main+0x9e>
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <main+0x174>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d008      	beq.n	8001618 <main+0xb0>
      	if(HAL_GetTick()>1000){
 8001606:	f002 fbe5 	bl	8003dd4 <HAL_GetTick>
 800160a:	4603      	mov	r3, r0
 800160c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001610:	d9f1      	bls.n	80015f6 <main+0x8e>
      		Error_Handler();
 8001612:	f001 f8e9 	bl	80027e8 <Error_Handler>
      	if(EN_front==1 && EN_rear==1){break;}
 8001616:	e7ee      	b.n	80015f6 <main+0x8e>
 8001618:	bf00      	nop
      	}
      }

  connect=0;
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <main+0x194>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  DFPlayer_init(&huart3);
 8001620:	4837      	ldr	r0, [pc, #220]	; (8001700 <main+0x198>)
 8001622:	f7ff fcb1 	bl	8000f88 <DFPlayer_init>
  HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f002 fbdf 	bl	8003dec <HAL_Delay>
  DFPlayer_setvolume(0x40);
 800162e:	2040      	movs	r0, #64	; 0x40
 8001630:	f7ff fcba 	bl	8000fa8 <DFPlayer_setvolume>
  HAL_Delay(500);
 8001634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001638:	f002 fbd8 	bl	8003dec <HAL_Delay>
  DFPlayer_playmp3(2);
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff fcd7 	bl	8000ff0 <DFPlayer_playmp3>
  HAL_Delay(3000);
 8001642:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001646:	f002 fbd1 	bl	8003dec <HAL_Delay>

  MX_IWDG_Init();
 800164a:	f7ff ff33 	bl	80014b4 <MX_IWDG_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 800164e:	482d      	ldr	r0, [pc, #180]	; (8001704 <main+0x19c>)
 8001650:	f005 fa73 	bl	8006b3a <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  printf(" slot=%f",slot);
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <main+0x1a0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff95 	bl	8000588 <__aeabi_f2d>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	461a      	mov	r2, r3
 8001664:	4623      	mov	r3, r4
 8001666:	4829      	ldr	r0, [pc, #164]	; (800170c <main+0x1a4>)
 8001668:	f006 ff7a 	bl	8008560 <iprintf>
	  printf(" slot_out=%f",slot_data);
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <main+0x1a8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff89 	bl	8000588 <__aeabi_f2d>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	461a      	mov	r2, r3
 800167c:	4623      	mov	r3, r4
 800167e:	4825      	ldr	r0, [pc, #148]	; (8001714 <main+0x1ac>)
 8001680:	f006 ff6e 	bl	8008560 <iprintf>

	  printf(" state=%d",state);
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <main+0x1b0>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	4824      	ldr	r0, [pc, #144]	; (800171c <main+0x1b4>)
 800168c:	f006 ff68 	bl	8008560 <iprintf>
	  printf(" speed=%f",speed);
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <main+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff77 	bl	8000588 <__aeabi_f2d>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	461a      	mov	r2, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	4820      	ldr	r0, [pc, #128]	; (8001724 <main+0x1bc>)
 80016a4:	f006 ff5c 	bl	8008560 <iprintf>
	  /*printf(" 0=%d",Rxbuf_from_ESP32[0]);
	  printf(" 1=%d",Rxbuf_from_ESP32[1]);
	  printf(" 2=%d",Rxbuf_from_ESP32[2]);
	  printf(" 3=%d",Rxbuf_from_ESP32[3]);
	  printf(" 4=%d",Rxbuf_from_ESP32[4]);*/
	  printf(" 0=%d",data_from_esp32[0]);
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <main+0x1c0>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	481f      	ldr	r0, [pc, #124]	; (800172c <main+0x1c4>)
 80016b0:	f006 ff56 	bl	8008560 <iprintf>
	  printf(" 1=%d",data_from_esp32[1]);
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <main+0x1c0>)
 80016b6:	785b      	ldrb	r3, [r3, #1]
 80016b8:	4619      	mov	r1, r3
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <main+0x1c8>)
 80016bc:	f006 ff50 	bl	8008560 <iprintf>
	  printf(" 2=%d",data_from_esp32[2]);
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <main+0x1c0>)
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	4619      	mov	r1, r3
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <main+0x1cc>)
 80016c8:	f006 ff4a 	bl	8008560 <iprintf>
	 /* printf(" Rol_acc=%7.4f",rol_acc);
	  printf(" Pit_acc=%7.4f",pit_acc);
	  printf(" Rol=%7.4f",rol);
	  printf(" Pit=%7.4f",pit);*/

	  printf("\r\n");
 80016cc:	481a      	ldr	r0, [pc, #104]	; (8001738 <main+0x1d0>)
 80016ce:	f006 ffbb 	bl	8008648 <puts>

	  HAL_IWDG_Refresh(&hiwdg);
 80016d2:	481a      	ldr	r0, [pc, #104]	; (800173c <main+0x1d4>)
 80016d4:	f004 fa15 	bl	8005b02 <HAL_IWDG_Refresh>
	  printf(" slot=%f",slot);
 80016d8:	e7bc      	b.n	8001654 <main+0xec>
 80016da:	bf00      	nop
 80016dc:	200003e5 	.word	0x200003e5
 80016e0:	200003dc 	.word	0x200003dc
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	20000214 	.word	0x20000214
 80016ec:	20000398 	.word	0x20000398
 80016f0:	200005d0 	.word	0x200005d0
 80016f4:	20000270 	.word	0x20000270
 80016f8:	200003f8 	.word	0x200003f8
 80016fc:	200003ba 	.word	0x200003ba
 8001700:	200004f0 	.word	0x200004f0
 8001704:	20000450 	.word	0x20000450
 8001708:	200003f4 	.word	0x200003f4
 800170c:	0800af50 	.word	0x0800af50
 8001710:	200003ec 	.word	0x200003ec
 8001714:	0800af5c 	.word	0x0800af5c
 8001718:	200003d5 	.word	0x200003d5
 800171c:	0800af6c 	.word	0x0800af6c
 8001720:	200003e8 	.word	0x200003e8
 8001724:	0800af78 	.word	0x0800af78
 8001728:	200002e8 	.word	0x200002e8
 800172c:	0800af84 	.word	0x0800af84
 8001730:	0800af8c 	.word	0x0800af8c
 8001734:	0800af94 	.word	0x0800af94
 8001738:	0800af9c 	.word	0x0800af9c
 800173c:	200003ac 	.word	0x200003ac

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	2234      	movs	r2, #52	; 0x34
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f006 faa2 	bl	8007c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 0308 	add.w	r3, r7, #8
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <SystemClock_Config+0xd8>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <SystemClock_Config+0xd8>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <SystemClock_Config+0xd8>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <SystemClock_Config+0xdc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800178c:	4a23      	ldr	r2, [pc, #140]	; (800181c <SystemClock_Config+0xdc>)
 800178e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <SystemClock_Config+0xdc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017a0:	2309      	movs	r3, #9
 80017a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017aa:	2301      	movs	r3, #1
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ae:	2302      	movs	r3, #2
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017b8:	2304      	movs	r3, #4
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 fc7b 	bl	80060cc <HAL_RCC_OscConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80017dc:	f001 f804 	bl	80027e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e0:	230f      	movs	r3, #15
 80017e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80017e4:	2303      	movs	r3, #3
 80017e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	2104      	movs	r1, #4
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 f9aa 	bl	8005b58 <HAL_RCC_ClockConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800180a:	f000 ffed 	bl	80027e8 <Error_Handler>
  }
}
 800180e:	bf00      	nop
 8001810:	3750      	adds	r7, #80	; 0x50
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000

08001820 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001828:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800182a:	4a47      	ldr	r2, [pc, #284]	; (8001948 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800182c:	2100      	movs	r1, #0
 800182e:	4847      	ldr	r0, [pc, #284]	; (800194c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8001830:	f002 fe2e 	bl	8004490 <HAL_CAN_GetRxMessage>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  	{
	    		Error_Handler();
 800183a:	f000 ffd5 	bl	80027e8 <Error_Handler>
	  	}
	switch (RxHeader.StdId){
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001846:	d01a      	beq.n	800187e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8001848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800184c:	d802      	bhi.n	8001854 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8001852:	e06e      	b.n	8001932 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
 8001854:	f240 1201 	movw	r2, #257	; 0x101
 8001858:	4293      	cmp	r3, r2
 800185a:	d055      	beq.n	8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
 800185c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001860:	d05b      	beq.n	800191a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 8001862:	e066      	b.n	8001932 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
	//error
	case 0x000:
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001864:	2300      	movs	r3, #0
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	4839      	ldr	r0, [pc, #228]	; (8001950 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800186c:	f003 fbac 	bl	8004fc8 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001870:	2300      	movs	r3, #0
 8001872:	2200      	movs	r2, #0
 8001874:	2110      	movs	r1, #16
 8001876:	4836      	ldr	r0, [pc, #216]	; (8001950 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8001878:	f003 fba6 	bl	8004fc8 <HAL_DAC_SetValue>
		break;
 800187c:	e059      	b.n	8001932 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>

	//state button
	case 0x100:
		state=RxData[0];
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001884:	701a      	strb	r2, [r3, #0]
		Winker_L_in=  (state & 0b01000000)>>6;
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	119b      	asrs	r3, r3, #6
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001896:	701a      	strb	r2, [r3, #0]
		Winker_R_in=  (state & 0b00100000)>>5;
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	115b      	asrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80018a8:	701a      	strb	r2, [r3, #0]
		Craction_in=  (state & 0b00010000)>>4;
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	111b      	asrs	r3, r3, #4
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80018ba:	701a      	strb	r2, [r3, #0]
		Break_in=     (state & 0b00001000)>>3;
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	10db      	asrs	r3, r3, #3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80018cc:	701a      	strb	r2, [r3, #0]
		Flont_Lamp_in=(state & 0b00000100)>>2;
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	109b      	asrs	r3, r3, #2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 80018de:	701a      	strb	r2, [r3, #0]
		Key_in=       (state & 0b00000010)>>1;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	105b      	asrs	r3, r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 80018f0:	701a      	strb	r2, [r3, #0]
		EX_in=        (state & 0b00000001);
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80018fe:	701a      	strb	r2, [r3, #0]

		EN_front=1;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		break;
 8001906:	e014      	b.n	8001932 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
	//slot
	case 0x101:
		slot=uchar4_to_float(RxData);
 8001908:	480e      	ldr	r0, [pc, #56]	; (8001944 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800190a:	f002 f9b9 	bl	8003c80 <uchar4_to_float>
 800190e:	eef0 7a40 	vmov.f32	s15, s0
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001918:	e00b      	b.n	8001932 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
	//speed
	case 0x102:
		speed=uchar4_to_float(RxData);
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800191c:	f002 f9b0 	bl	8003c80 <uchar4_to_float>
 8001920:	eef0 7a40 	vmov.f32	s15, s0
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8001926:	edc3 7a00 	vstr	s15, [r3]
		EN_rear=1;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
		break;
 8001930:	bf00      	nop

	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001932:	2102      	movs	r1, #2
 8001934:	4813      	ldr	r0, [pc, #76]	; (8001984 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8001936:	f004 f890 	bl	8005a5a <HAL_GPIO_TogglePin>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000324 	.word	0x20000324
 8001948:	20000364 	.word	0x20000364
 800194c:	20000214 	.word	0x20000214
 8001950:	20000398 	.word	0x20000398
 8001954:	200003d5 	.word	0x200003d5
 8001958:	200003f1 	.word	0x200003f1
 800195c:	200003f0 	.word	0x200003f0
 8001960:	200003e6 	.word	0x200003e6
 8001964:	200003bc 	.word	0x200003bc
 8001968:	200003b8 	.word	0x200003b8
 800196c:	200003c4 	.word	0x200003c4
 8001970:	200003b9 	.word	0x200003b9
 8001974:	200003dc 	.word	0x200003dc
 8001978:	200003f4 	.word	0x200003f4
 800197c:	200003e8 	.word	0x200003e8
 8001980:	200003e5 	.word	0x200003e5
 8001984:	40020800 	.word	0x40020800

08001988 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	//mode=data_from_esp32[0];
	mode=4;
 8001990:	4bcb      	ldr	r3, [pc, #812]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001992:	2204      	movs	r2, #4
 8001994:	701a      	strb	r2, [r3, #0]

	if(mode==1){
 8001996:	4bca      	ldr	r3, [pc, #808]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d114      	bne.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x40>
		slot_data=map(slot,0.650,3.265,0.9,3.5);//norm}
 800199e:	4bc9      	ldr	r3, [pc, #804]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	eeb0 2a0c 	vmov.f32	s4, #12	; 0x40600000  3.5
 80019a8:	eddf 1ac7 	vldr	s3, [pc, #796]	; 8001cc8 <HAL_TIM_PeriodElapsedCallback+0x340>
 80019ac:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 8001ccc <HAL_TIM_PeriodElapsedCallback+0x344>
 80019b0:	eddf 0ac7 	vldr	s1, [pc, #796]	; 8001cd0 <HAL_TIM_PeriodElapsedCallback+0x348>
 80019b4:	eeb0 0a67 	vmov.f32	s0, s15
 80019b8:	f7ff fda8 	bl	800150c <map>
 80019bc:	eef0 7a40 	vmov.f32	s15, s0
 80019c0:	4bc4      	ldr	r3, [pc, #784]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80019c2:	edc3 7a00 	vstr	s15, [r3]
 80019c6:	e231      	b.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==2){
 80019c8:	4bbd      	ldr	r3, [pc, #756]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d114      	bne.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x72>
		slot_data=map(slot,0.650,3.265,0.9,2.5);//eco
 80019d0:	4bbc      	ldr	r3, [pc, #752]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	eeb0 2a04 	vmov.f32	s4, #4	; 0x40200000  2.5
 80019da:	eddf 1abb 	vldr	s3, [pc, #748]	; 8001cc8 <HAL_TIM_PeriodElapsedCallback+0x340>
 80019de:	ed9f 1abb 	vldr	s2, [pc, #748]	; 8001ccc <HAL_TIM_PeriodElapsedCallback+0x344>
 80019e2:	eddf 0abb 	vldr	s1, [pc, #748]	; 8001cd0 <HAL_TIM_PeriodElapsedCallback+0x348>
 80019e6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ea:	f7ff fd8f 	bl	800150c <map>
 80019ee:	eef0 7a40 	vmov.f32	s15, s0
 80019f2:	4bb8      	ldr	r3, [pc, #736]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80019f4:	edc3 7a00 	vstr	s15, [r3]
 80019f8:	e218      	b.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==3){
 80019fa:	4bb1      	ldr	r3, [pc, #708]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d156      	bne.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x128>
		slot_data=powf(slot,3)*0.3713+powf(slot,2)*(-1.8438)+slot*(3.1176)-0.4461;//snow
 8001a02:	4bb0      	ldr	r3, [pc, #704]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	f008 fd8c 	bl	800a52c <powf>
 8001a14:	ee10 3a10 	vmov	r3, s0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fdb5 	bl	8000588 <__aeabi_f2d>
 8001a1e:	a38e      	add	r3, pc, #568	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fe08 	bl	8000638 <__aeabi_dmul>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4625      	mov	r5, r4
 8001a2e:	461c      	mov	r4, r3
 8001a30:	4ba4      	ldr	r3, [pc, #656]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3e:	f008 fd75 	bl	800a52c <powf>
 8001a42:	ee10 3a10 	vmov	r3, s0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd9e 	bl	8000588 <__aeabi_f2d>
 8001a4c:	a384      	add	r3, pc, #528	; (adr r3, 8001c60 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7fe fdf1 	bl	8000638 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7fe fc35 	bl	80002cc <__adddf3>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	4625      	mov	r5, r4
 8001a68:	461c      	mov	r4, r3
 8001a6a:	4b96      	ldr	r3, [pc, #600]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd8a 	bl	8000588 <__aeabi_f2d>
 8001a74:	a37c      	add	r3, pc, #496	; (adr r3, 8001c68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fddd 	bl	8000638 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f7fe fc21 	bl	80002cc <__adddf3>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	a377      	add	r3, pc, #476	; (adr r3, 8001c70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fc16 	bl	80002c8 <__aeabi_dsub>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	f7ff f8a0 	bl	8000be8 <__aeabi_d2f>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e1bd      	b.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==4){
 8001ab0:	4b83      	ldr	r3, [pc, #524]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d173      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x218>
		slot_data=powf(slot,4)*(0.3067)+powf(slot,3)*(-2.4464)+powf(slot,2)*(6.3486)+slot*(-4.8485)+1.9619;//sport
 8001ab8:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac6:	f008 fd31 	bl	800a52c <powf>
 8001aca:	ee10 3a10 	vmov	r3, s0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd5a 	bl	8000588 <__aeabi_f2d>
 8001ad4:	a368      	add	r3, pc, #416	; (adr r3, 8001c78 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fdad 	bl	8000638 <__aeabi_dmul>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4625      	mov	r5, r4
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	f008 fd1a 	bl	800a52c <powf>
 8001af8:	ee10 3a10 	vmov	r3, s0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd43 	bl	8000588 <__aeabi_f2d>
 8001b02:	a35f      	add	r3, pc, #380	; (adr r3, 8001c80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7fe fd96 	bl	8000638 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fbda 	bl	80002cc <__adddf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	460c      	mov	r4, r1
 8001b1c:	4625      	mov	r5, r4
 8001b1e:	461c      	mov	r4, r3
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2e:	f008 fcfd 	bl	800a52c <powf>
 8001b32:	ee10 3a10 	vmov	r3, s0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd26 	bl	8000588 <__aeabi_f2d>
 8001b3c:	a352      	add	r3, pc, #328	; (adr r3, 8001c88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fd79 	bl	8000638 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f7fe fbbd 	bl	80002cc <__adddf3>
 8001b52:	4603      	mov	r3, r0
 8001b54:	460c      	mov	r4, r1
 8001b56:	4625      	mov	r5, r4
 8001b58:	461c      	mov	r4, r3
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd12 	bl	8000588 <__aeabi_f2d>
 8001b64:	a34a      	add	r3, pc, #296	; (adr r3, 8001c90 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fd65 	bl	8000638 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fba9 	bl	80002cc <__adddf3>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460c      	mov	r4, r1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4621      	mov	r1, r4
 8001b82:	a345      	add	r3, pc, #276	; (adr r3, 8001c98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fba0 	bl	80002cc <__adddf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	4618      	mov	r0, r3
 8001b92:	4621      	mov	r1, r4
 8001b94:	f7ff f828 	bl	8000be8 <__aeabi_d2f>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e145      	b.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else if(mode==5){
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	f040 8097 	bne.w	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x350>
		slot_data=powf(slot,3)*0.1732+powf(slot,2)*(-1.6682)+slot*(5.2727)-1.9883;//sport plus
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	f008 fcb8 	bl	800a52c <powf>
 8001bbc:	ee10 3a10 	vmov	r3, s0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fce1 	bl	8000588 <__aeabi_f2d>
 8001bc6:	a336      	add	r3, pc, #216	; (adr r3, 8001ca0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fd34 	bl	8000638 <__aeabi_dmul>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	4625      	mov	r5, r4
 8001bd6:	461c      	mov	r4, r3
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001be2:	eeb0 0a67 	vmov.f32	s0, s15
 8001be6:	f008 fca1 	bl	800a52c <powf>
 8001bea:	ee10 3a10 	vmov	r3, s0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcca 	bl	8000588 <__aeabi_f2d>
 8001bf4:	a32c      	add	r3, pc, #176	; (adr r3, 8001ca8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fd1d 	bl	8000638 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fb61 	bl	80002cc <__adddf3>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	4625      	mov	r5, r4
 8001c10:	461c      	mov	r4, r3
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fcb6 	bl	8000588 <__aeabi_f2d>
 8001c1c:	a324      	add	r3, pc, #144	; (adr r3, 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fd09 	bl	8000638 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb4d 	bl	80002cc <__adddf3>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	4618      	mov	r0, r3
 8001c38:	4621      	mov	r1, r4
 8001c3a:	a31f      	add	r3, pc, #124	; (adr r3, 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fb42 	bl	80002c8 <__aeabi_dsub>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	f7fe ffcc 	bl	8000be8 <__aeabi_d2f>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e0e9      	b.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
 8001c58:	13404ea5 	.word	0x13404ea5
 8001c5c:	3fd7c361 	.word	0x3fd7c361
 8001c60:	6dc5d639 	.word	0x6dc5d639
 8001c64:	bffd8034 	.word	0xbffd8034
 8001c68:	44d013a9 	.word	0x44d013a9
 8001c6c:	4008f0d8 	.word	0x4008f0d8
 8001c70:	03afb7e9 	.word	0x03afb7e9
 8001c74:	3fdc8ce7 	.word	0x3fdc8ce7
 8001c78:	096bb98c 	.word	0x096bb98c
 8001c7c:	3fd3a0f9 	.word	0x3fd3a0f9
 8001c80:	29c779a7 	.word	0x29c779a7
 8001c84:	c003923a 	.word	0xc003923a
 8001c88:	65fd8adb 	.word	0x65fd8adb
 8001c8c:	401964f7 	.word	0x401964f7
 8001c90:	2f1a9fbe 	.word	0x2f1a9fbe
 8001c94:	c01364dd 	.word	0xc01364dd
 8001c98:	41205bc0 	.word	0x41205bc0
 8001c9c:	3fff63f1 	.word	0x3fff63f1
 8001ca0:	e7d566cf 	.word	0xe7d566cf
 8001ca4:	3fc62b6a 	.word	0x3fc62b6a
 8001ca8:	7bb2fec5 	.word	0x7bb2fec5
 8001cac:	bffab0f2 	.word	0xbffab0f2
 8001cb0:	ab367a10 	.word	0xab367a10
 8001cb4:	4015173e 	.word	0x4015173e
 8001cb8:	a92a3055 	.word	0xa92a3055
 8001cbc:	3fffd013 	.word	0x3fffd013
 8001cc0:	200003e4 	.word	0x200003e4
 8001cc4:	200003f4 	.word	0x200003f4
 8001cc8:	3f666666 	.word	0x3f666666
 8001ccc:	4050f5c3 	.word	0x4050f5c3
 8001cd0:	3f266666 	.word	0x3f266666
 8001cd4:	200003ec 	.word	0x200003ec
	}
	else if(mode==10){
 8001cd8:	4baf      	ldr	r3, [pc, #700]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b0a      	cmp	r3, #10
 8001cde:	f040 8091 	bne.w	8001e04 <HAL_TIM_PeriodElapsedCallback+0x47c>
		slot_data=powf(slot,5)*(0.0532)+powf(slot,4)*(-0.839)+powf(slot,3)*(4.9461)+powf(slot,2)*(-13.884)+slot*(18.813)-6.4772;//extreme
 8001ce2:	4bae      	ldr	r3, [pc, #696]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	f008 fc1c 	bl	800a52c <powf>
 8001cf4:	ee10 3a10 	vmov	r3, s0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc45 	bl	8000588 <__aeabi_f2d>
 8001cfe:	a394      	add	r3, pc, #592	; (adr r3, 8001f50 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fc98 	bl	8000638 <__aeabi_dmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4625      	mov	r5, r4
 8001d0e:	461c      	mov	r4, r3
 8001d10:	4ba2      	ldr	r3, [pc, #648]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	f008 fc05 	bl	800a52c <powf>
 8001d22:	ee10 3a10 	vmov	r3, s0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc2e 	bl	8000588 <__aeabi_f2d>
 8001d2c:	a38a      	add	r3, pc, #552	; (adr r3, 8001f58 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fc81 	bl	8000638 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fac5 	bl	80002cc <__adddf3>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	4625      	mov	r5, r4
 8001d48:	461c      	mov	r4, r3
 8001d4a:	4b94      	ldr	r3, [pc, #592]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	f008 fbe8 	bl	800a52c <powf>
 8001d5c:	ee10 3a10 	vmov	r3, s0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fc11 	bl	8000588 <__aeabi_f2d>
 8001d66:	a37e      	add	r3, pc, #504	; (adr r3, 8001f60 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fc64 	bl	8000638 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe faa8 	bl	80002cc <__adddf3>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	4625      	mov	r5, r4
 8001d82:	461c      	mov	r4, r3
 8001d84:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	f008 fbcb 	bl	800a52c <powf>
 8001d96:	ee10 3a10 	vmov	r3, s0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbf4 	bl	8000588 <__aeabi_f2d>
 8001da0:	a371      	add	r3, pc, #452	; (adr r3, 8001f68 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fc47 	bl	8000638 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe fa8b 	bl	80002cc <__adddf3>
 8001db6:	4603      	mov	r3, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	4625      	mov	r5, r4
 8001dbc:	461c      	mov	r4, r3
 8001dbe:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	a369      	add	r3, pc, #420	; (adr r3, 8001f70 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fc33 	bl	8000638 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe fa77 	bl	80002cc <__adddf3>
 8001dde:	4603      	mov	r3, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	4618      	mov	r0, r3
 8001de4:	4621      	mov	r1, r4
 8001de6:	a364      	add	r3, pc, #400	; (adr r3, 8001f78 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fa6c 	bl	80002c8 <__aeabi_dsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	4618      	mov	r0, r3
 8001df6:	4621      	mov	r1, r4
 8001df8:	f7fe fef6 	bl	8000be8 <__aeabi_d2f>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e013      	b.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x4a4>
	}
	else{slot_data=map(slot,0.650,3.265,0.9,2.5);//eco
 8001e04:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	eeb0 2a04 	vmov.f32	s4, #4	; 0x40200000  2.5
 8001e0e:	eddf 1a65 	vldr	s3, [pc, #404]	; 8001fa4 <HAL_TIM_PeriodElapsedCallback+0x61c>
 8001e12:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8001fa8 <HAL_TIM_PeriodElapsedCallback+0x620>
 8001e16:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001fac <HAL_TIM_PeriodElapsedCallback+0x624>
 8001e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1e:	f7ff fb75 	bl	800150c <map>
 8001e22:	eef0 7a40 	vmov.f32	s15, s0
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e28:	edc3 7a00 	vstr	s15, [r3]
	}


	if(slot_data>3.5){slot_data=3.5;}
 8001e2c:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	dd02      	ble.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0x4be>
 8001e40:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e42:	4a5b      	ldr	r2, [pc, #364]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001e44:	601a      	str	r2, [r3, #0]
	if(slot_data<0.9){slot_data=0.9;}
 8001e46:	4b56      	ldr	r3, [pc, #344]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb9c 	bl	8000588 <__aeabi_f2d>
 8001e50:	a34b      	add	r3, pc, #300	; (adr r3, 8001f80 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fe61 	bl	8000b1c <__aeabi_dcmplt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0x4de>
 8001e60:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e62:	4a54      	ldr	r2, [pc, #336]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001e64:	601a      	str	r2, [r3, #0]

	float setvalue1=(4095.0/9.9)*slot_data;
 8001e66:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb8c 	bl	8000588 <__aeabi_f2d>
 8001e70:	a345      	add	r3, pc, #276	; (adr r3, 8001f88 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fbdf 	bl	8000638 <__aeabi_dmul>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	460c      	mov	r4, r1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	4621      	mov	r1, r4
 8001e82:	f7fe feb1 	bl	8000be8 <__aeabi_d2f>
 8001e86:	4603      	mov	r3, r0
 8001e88:	617b      	str	r3, [r7, #20]
	float setvalue2=(4095.0/9.9)*slot_data;
 8001e8a:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb7a 	bl	8000588 <__aeabi_f2d>
 8001e94:	a33c      	add	r3, pc, #240	; (adr r3, 8001f88 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fbcd 	bl	8000638 <__aeabi_dmul>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	f7fe fe9f 	bl	8000be8 <__aeabi_d2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]

	//if(EN==1){
		if(mode==4){//sport
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	f040 818e 	bne.w	80021d4 <HAL_TIM_PeriodElapsedCallback+0x84c>
			if(speed==0.0) {
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d17b      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x638>
				setvalue1=(4095.0/9.9)*slot_data;
 8001ec8:	4b35      	ldr	r3, [pc, #212]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb5b 	bl	8000588 <__aeabi_f2d>
 8001ed2:	a32d      	add	r3, pc, #180	; (adr r3, 8001f88 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fbae 	bl	8000638 <__aeabi_dmul>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f7fe fe80 	bl	8000be8 <__aeabi_d2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.6;
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb49 	bl	8000588 <__aeabi_f2d>
 8001ef6:	a324      	add	r3, pc, #144	; (adr r3, 8001f88 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fb9c 	bl	8000638 <__aeabi_dmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	4618      	mov	r0, r3
 8001f06:	4621      	mov	r1, r4
 8001f08:	a321      	add	r3, pc, #132	; (adr r3, 8001f90 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb93 	bl	8000638 <__aeabi_dmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	4618      	mov	r0, r3
 8001f18:	4621      	mov	r1, r4
 8001f1a:	f7fe fe65 	bl	8000be8 <__aeabi_d2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8001f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2a:	ee17 3a90 	vmov	r3, s15
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	4822      	ldr	r0, [pc, #136]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001f34:	f003 f848 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 8001f38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f40:	ee17 3a90 	vmov	r3, s15
 8001f44:	2200      	movs	r2, #0
 8001f46:	2110      	movs	r1, #16
 8001f48:	481c      	ldr	r0, [pc, #112]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001f4a:	f003 f83d 	bl	8004fc8 <HAL_DAC_SetValue>
 8001f4e:	e35d      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
 8001f50:	c84b5dcc 	.word	0xc84b5dcc
 8001f54:	3fab3d07 	.word	0x3fab3d07
 8001f58:	872b020c 	.word	0x872b020c
 8001f5c:	bfead916 	.word	0xbfead916
 8001f60:	703afb7f 	.word	0x703afb7f
 8001f64:	4013c8ce 	.word	0x4013c8ce
 8001f68:	a5e353f8 	.word	0xa5e353f8
 8001f6c:	c02bc49b 	.word	0xc02bc49b
 8001f70:	c49ba5e3 	.word	0xc49ba5e3
 8001f74:	4032d020 	.word	0x4032d020
 8001f78:	1de69ad4 	.word	0x1de69ad4
 8001f7c:	4019e8a7 	.word	0x4019e8a7
 8001f80:	cccccccd 	.word	0xcccccccd
 8001f84:	3feccccc 	.word	0x3feccccc
 8001f88:	8ba2e8ba 	.word	0x8ba2e8ba
 8001f8c:	4079da2e 	.word	0x4079da2e
 8001f90:	33333333 	.word	0x33333333
 8001f94:	3fe33333 	.word	0x3fe33333
 8001f98:	200003e4 	.word	0x200003e4
 8001f9c:	200003f4 	.word	0x200003f4
 8001fa0:	200003ec 	.word	0x200003ec
 8001fa4:	3f666666 	.word	0x3f666666
 8001fa8:	4050f5c3 	.word	0x4050f5c3
 8001fac:	3f266666 	.word	0x3f266666
 8001fb0:	40600000 	.word	0x40600000
 8001fb4:	3f666666 	.word	0x3f666666
 8001fb8:	200003e8 	.word	0x200003e8
 8001fbc:	20000398 	.word	0x20000398
			}
			else if(speed==0.01) {
 8001fc0:	4bbb      	ldr	r3, [pc, #748]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fadf 	bl	8000588 <__aeabi_f2d>
 8001fca:	a3ab      	add	r3, pc, #684	; (adr r3, 8002278 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d043      	beq.n	8002062 <HAL_TIM_PeriodElapsedCallback+0x6da>
				setvalue1=(4095.0/9.9)*slot_data;
 8001fda:	4bb6      	ldr	r3, [pc, #728]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fad2 	bl	8000588 <__aeabi_f2d>
 8001fe4:	a3a6      	add	r3, pc, #664	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fb25 	bl	8000638 <__aeabi_dmul>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	f7fe fdf7 	bl	8000be8 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.7;
 8001ffe:	4bad      	ldr	r3, [pc, #692]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fac0 	bl	8000588 <__aeabi_f2d>
 8002008:	a39d      	add	r3, pc, #628	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fb13 	bl	8000638 <__aeabi_dmul>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	4618      	mov	r0, r3
 8002018:	4621      	mov	r1, r4
 800201a:	a39b      	add	r3, pc, #620	; (adr r3, 8002288 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fb0a 	bl	8000638 <__aeabi_dmul>
 8002024:	4603      	mov	r3, r0
 8002026:	460c      	mov	r4, r1
 8002028:	4618      	mov	r0, r3
 800202a:	4621      	mov	r1, r4
 800202c:	f7fe fddc 	bl	8000be8 <__aeabi_d2f>
 8002030:	4603      	mov	r3, r0
 8002032:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002034:	edd7 7a05 	vldr	s15, [r7, #20]
 8002038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203c:	ee17 3a90 	vmov	r3, s15
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	489c      	ldr	r0, [pc, #624]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8002046:	f002 ffbf 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800204a:	edd7 7a04 	vldr	s15, [r7, #16]
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	2200      	movs	r2, #0
 8002058:	2110      	movs	r1, #16
 800205a:	4897      	ldr	r0, [pc, #604]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800205c:	f002 ffb4 	bl	8004fc8 <HAL_DAC_SetValue>
 8002060:	e2d4      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
			}
			else if(speed==0.02) {
 8002062:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa8e 	bl	8000588 <__aeabi_f2d>
 800206c:	a388      	add	r3, pc, #544	; (adr r3, 8002290 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fd49 	bl	8000b08 <__aeabi_dcmpeq>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d043      	beq.n	8002104 <HAL_TIM_PeriodElapsedCallback+0x77c>
				setvalue1=(4095.0/9.9)*slot_data;
 800207c:	4b8d      	ldr	r3, [pc, #564]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fa81 	bl	8000588 <__aeabi_f2d>
 8002086:	a37e      	add	r3, pc, #504	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe fad4 	bl	8000638 <__aeabi_dmul>
 8002090:	4603      	mov	r3, r0
 8002092:	460c      	mov	r4, r1
 8002094:	4618      	mov	r0, r3
 8002096:	4621      	mov	r1, r4
 8002098:	f7fe fda6 	bl	8000be8 <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.8;
 80020a0:	4b84      	ldr	r3, [pc, #528]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa6f 	bl	8000588 <__aeabi_f2d>
 80020aa:	a375      	add	r3, pc, #468	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe fac2 	bl	8000638 <__aeabi_dmul>
 80020b4:	4603      	mov	r3, r0
 80020b6:	460c      	mov	r4, r1
 80020b8:	4618      	mov	r0, r3
 80020ba:	4621      	mov	r1, r4
 80020bc:	a376      	add	r3, pc, #472	; (adr r3, 8002298 <HAL_TIM_PeriodElapsedCallback+0x910>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fab9 	bl	8000638 <__aeabi_dmul>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	4618      	mov	r0, r3
 80020cc:	4621      	mov	r1, r4
 80020ce:	f7fe fd8b 	bl	8000be8 <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80020d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020de:	ee17 3a90 	vmov	r3, s15
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	4874      	ldr	r0, [pc, #464]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80020e8:	f002 ff6e 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80020ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f4:	ee17 3a90 	vmov	r3, s15
 80020f8:	2200      	movs	r2, #0
 80020fa:	2110      	movs	r1, #16
 80020fc:	486e      	ldr	r0, [pc, #440]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80020fe:	f002 ff63 	bl	8004fc8 <HAL_DAC_SetValue>
 8002102:	e283      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
			}
			else if(speed==0.03) {
 8002104:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa3d 	bl	8000588 <__aeabi_f2d>
 800210e:	a364      	add	r3, pc, #400	; (adr r3, 80022a0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f7fe fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d043      	beq.n	80021a6 <HAL_TIM_PeriodElapsedCallback+0x81e>
				setvalue1=(4095.0/9.9)*slot_data;
 800211e:	4b65      	ldr	r3, [pc, #404]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa30 	bl	8000588 <__aeabi_f2d>
 8002128:	a355      	add	r3, pc, #340	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fa83 	bl	8000638 <__aeabi_dmul>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	4618      	mov	r0, r3
 8002138:	4621      	mov	r1, r4
 800213a:	f7fe fd55 	bl	8000be8 <__aeabi_d2f>
 800213e:	4603      	mov	r3, r0
 8002140:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.9;
 8002142:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa1e 	bl	8000588 <__aeabi_f2d>
 800214c:	a34c      	add	r3, pc, #304	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fa71 	bl	8000638 <__aeabi_dmul>
 8002156:	4603      	mov	r3, r0
 8002158:	460c      	mov	r4, r1
 800215a:	4618      	mov	r0, r3
 800215c:	4621      	mov	r1, r4
 800215e:	a352      	add	r3, pc, #328	; (adr r3, 80022a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe fa68 	bl	8000638 <__aeabi_dmul>
 8002168:	4603      	mov	r3, r0
 800216a:	460c      	mov	r4, r1
 800216c:	4618      	mov	r0, r3
 800216e:	4621      	mov	r1, r4
 8002170:	f7fe fd3a 	bl	8000be8 <__aeabi_d2f>
 8002174:	4603      	mov	r3, r0
 8002176:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002178:	edd7 7a05 	vldr	s15, [r7, #20]
 800217c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002180:	ee17 3a90 	vmov	r3, s15
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	484b      	ldr	r0, [pc, #300]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800218a:	f002 ff1d 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800218e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002196:	ee17 3a90 	vmov	r3, s15
 800219a:	2200      	movs	r2, #0
 800219c:	2110      	movs	r1, #16
 800219e:	4846      	ldr	r0, [pc, #280]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80021a0:	f002 ff12 	bl	8004fc8 <HAL_DAC_SetValue>
 80021a4:	e232      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
			}
			else {
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80021a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ae:	ee17 3a90 	vmov	r3, s15
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	4840      	ldr	r0, [pc, #256]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80021b8:	f002 ff06 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80021bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c4:	ee17 3a90 	vmov	r3, s15
 80021c8:	2200      	movs	r2, #0
 80021ca:	2110      	movs	r1, #16
 80021cc:	483a      	ldr	r0, [pc, #232]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80021ce:	f002 fefb 	bl	8004fc8 <HAL_DAC_SetValue>
 80021d2:	e21b      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
			}
		}

		else if(mode==5){//sport plus
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x934>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	f040 812a 	bne.w	8002432 <HAL_TIM_PeriodElapsedCallback+0xaaa>
			if(speed==0.0) {
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d168      	bne.n	80022c0 <HAL_TIM_PeriodElapsedCallback+0x938>
				setvalue1=(4095.0/9.9)*slot_data;
 80021ee:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9c8 	bl	8000588 <__aeabi_f2d>
 80021f8:	a321      	add	r3, pc, #132	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f7fe fa1b 	bl	8000638 <__aeabi_dmul>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	4618      	mov	r0, r3
 8002208:	4621      	mov	r1, r4
 800220a:	f7fe fced 	bl	8000be8 <__aeabi_d2f>
 800220e:	4603      	mov	r3, r0
 8002210:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.7;
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f9b6 	bl	8000588 <__aeabi_f2d>
 800221c:	a318      	add	r3, pc, #96	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe fa09 	bl	8000638 <__aeabi_dmul>
 8002226:	4603      	mov	r3, r0
 8002228:	460c      	mov	r4, r1
 800222a:	4618      	mov	r0, r3
 800222c:	4621      	mov	r1, r4
 800222e:	a316      	add	r3, pc, #88	; (adr r3, 8002288 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe fa00 	bl	8000638 <__aeabi_dmul>
 8002238:	4603      	mov	r3, r0
 800223a:	460c      	mov	r4, r1
 800223c:	4618      	mov	r0, r3
 800223e:	4621      	mov	r1, r4
 8002240:	f7fe fcd2 	bl	8000be8 <__aeabi_d2f>
 8002244:	4603      	mov	r3, r0
 8002246:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002248:	edd7 7a05 	vldr	s15, [r7, #20]
 800224c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002250:	ee17 3a90 	vmov	r3, s15
 8002254:	2200      	movs	r2, #0
 8002256:	2100      	movs	r1, #0
 8002258:	4817      	ldr	r0, [pc, #92]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800225a:	f002 feb5 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800225e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	2200      	movs	r2, #0
 800226c:	2110      	movs	r1, #16
 800226e:	4812      	ldr	r0, [pc, #72]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8002270:	f002 feaa 	bl	8004fc8 <HAL_DAC_SetValue>
 8002274:	e1ca      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
 8002276:	bf00      	nop
 8002278:	47ae147b 	.word	0x47ae147b
 800227c:	3f847ae1 	.word	0x3f847ae1
 8002280:	8ba2e8ba 	.word	0x8ba2e8ba
 8002284:	4079da2e 	.word	0x4079da2e
 8002288:	66666666 	.word	0x66666666
 800228c:	3fe66666 	.word	0x3fe66666
 8002290:	47ae147b 	.word	0x47ae147b
 8002294:	3f947ae1 	.word	0x3f947ae1
 8002298:	9999999a 	.word	0x9999999a
 800229c:	3fe99999 	.word	0x3fe99999
 80022a0:	eb851eb8 	.word	0xeb851eb8
 80022a4:	3f9eb851 	.word	0x3f9eb851
 80022a8:	cccccccd 	.word	0xcccccccd
 80022ac:	3feccccc 	.word	0x3feccccc
 80022b0:	200003e8 	.word	0x200003e8
 80022b4:	200003ec 	.word	0x200003ec
 80022b8:	20000398 	.word	0x20000398
 80022bc:	200003e4 	.word	0x200003e4
			}
			else if(speed==0.01) {
 80022c0:	4bc3      	ldr	r3, [pc, #780]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f95f 	bl	8000588 <__aeabi_f2d>
 80022ca:	a3b7      	add	r3, pc, #732	; (adr r3, 80025a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe fc1a 	bl	8000b08 <__aeabi_dcmpeq>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d043      	beq.n	8002362 <HAL_TIM_PeriodElapsedCallback+0x9da>
				setvalue1=(4095.0/9.9)*slot_data;
 80022da:	4bbe      	ldr	r3, [pc, #760]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f952 	bl	8000588 <__aeabi_f2d>
 80022e4:	a3b2      	add	r3, pc, #712	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f9a5 	bl	8000638 <__aeabi_dmul>
 80022ee:	4603      	mov	r3, r0
 80022f0:	460c      	mov	r4, r1
 80022f2:	4618      	mov	r0, r3
 80022f4:	4621      	mov	r1, r4
 80022f6:	f7fe fc77 	bl	8000be8 <__aeabi_d2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.8;
 80022fe:	4bb5      	ldr	r3, [pc, #724]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f940 	bl	8000588 <__aeabi_f2d>
 8002308:	a3a9      	add	r3, pc, #676	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe f993 	bl	8000638 <__aeabi_dmul>
 8002312:	4603      	mov	r3, r0
 8002314:	460c      	mov	r4, r1
 8002316:	4618      	mov	r0, r3
 8002318:	4621      	mov	r1, r4
 800231a:	a3a7      	add	r3, pc, #668	; (adr r3, 80025b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f98a 	bl	8000638 <__aeabi_dmul>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4618      	mov	r0, r3
 800232a:	4621      	mov	r1, r4
 800232c:	f7fe fc5c 	bl	8000be8 <__aeabi_d2f>
 8002330:	4603      	mov	r3, r0
 8002332:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002334:	edd7 7a05 	vldr	s15, [r7, #20]
 8002338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233c:	ee17 3a90 	vmov	r3, s15
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	48a4      	ldr	r0, [pc, #656]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 8002346:	f002 fe3f 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800234a:	edd7 7a04 	vldr	s15, [r7, #16]
 800234e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002352:	ee17 3a90 	vmov	r3, s15
 8002356:	2200      	movs	r2, #0
 8002358:	2110      	movs	r1, #16
 800235a:	489f      	ldr	r0, [pc, #636]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800235c:	f002 fe34 	bl	8004fc8 <HAL_DAC_SetValue>
 8002360:	e154      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
			}
			else if(speed==0.02) {
 8002362:	4b9b      	ldr	r3, [pc, #620]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f90e 	bl	8000588 <__aeabi_f2d>
 800236c:	a394      	add	r3, pc, #592	; (adr r3, 80025c0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d043      	beq.n	8002404 <HAL_TIM_PeriodElapsedCallback+0xa7c>
				setvalue1=(4095.0/9.9)*slot_data;
 800237c:	4b95      	ldr	r3, [pc, #596]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f901 	bl	8000588 <__aeabi_f2d>
 8002386:	a38a      	add	r3, pc, #552	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f954 	bl	8000638 <__aeabi_dmul>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	4618      	mov	r0, r3
 8002396:	4621      	mov	r1, r4
 8002398:	f7fe fc26 	bl	8000be8 <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	617b      	str	r3, [r7, #20]
				setvalue2=(4095.0/9.9)*slot_data*0.9;
 80023a0:	4b8c      	ldr	r3, [pc, #560]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8ef 	bl	8000588 <__aeabi_f2d>
 80023aa:	a381      	add	r3, pc, #516	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f942 	bl	8000638 <__aeabi_dmul>
 80023b4:	4603      	mov	r3, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	4618      	mov	r0, r3
 80023ba:	4621      	mov	r1, r4
 80023bc:	a382      	add	r3, pc, #520	; (adr r3, 80025c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f939 	bl	8000638 <__aeabi_dmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	460c      	mov	r4, r1
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	f7fe fc0b 	bl	8000be8 <__aeabi_d2f>
 80023d2:	4603      	mov	r3, r0
 80023d4:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80023d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	487c      	ldr	r0, [pc, #496]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80023e8:	f002 fdee 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80023ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f4:	ee17 3a90 	vmov	r3, s15
 80023f8:	2200      	movs	r2, #0
 80023fa:	2110      	movs	r1, #16
 80023fc:	4876      	ldr	r0, [pc, #472]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80023fe:	f002 fde3 	bl	8004fc8 <HAL_DAC_SetValue>
 8002402:	e103      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
			}
			else {
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002404:	edd7 7a05 	vldr	s15, [r7, #20]
 8002408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240c:	ee17 3a90 	vmov	r3, s15
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	4870      	ldr	r0, [pc, #448]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 8002416:	f002 fdd7 	bl	8004fc8 <HAL_DAC_SetValue>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800241a:	edd7 7a04 	vldr	s15, [r7, #16]
 800241e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002422:	ee17 3a90 	vmov	r3, s15
 8002426:	2200      	movs	r2, #0
 8002428:	2110      	movs	r1, #16
 800242a:	486b      	ldr	r0, [pc, #428]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800242c:	f002 fdcc 	bl	8004fc8 <HAL_DAC_SetValue>
 8002430:	e0ec      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
			}
		}
		else if(mode==10){//extreme
 8002432:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0xc54>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b0a      	cmp	r3, #10
 8002438:	f040 80d2 	bne.w	80025e0 <HAL_TIM_PeriodElapsedCallback+0xc58>
					if(speed==0.0) {
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d143      	bne.n	80024d4 <HAL_TIM_PeriodElapsedCallback+0xb4c>
						setvalue1=(4095.0/9.9)*slot_data*0.8;
 800244c:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f899 	bl	8000588 <__aeabi_f2d>
 8002456:	a356      	add	r3, pc, #344	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8ec 	bl	8000638 <__aeabi_dmul>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	4618      	mov	r0, r3
 8002466:	4621      	mov	r1, r4
 8002468:	a353      	add	r3, pc, #332	; (adr r3, 80025b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fe f8e3 	bl	8000638 <__aeabi_dmul>
 8002472:	4603      	mov	r3, r0
 8002474:	460c      	mov	r4, r1
 8002476:	4618      	mov	r0, r3
 8002478:	4621      	mov	r1, r4
 800247a:	f7fe fbb5 	bl	8000be8 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	617b      	str	r3, [r7, #20]
						setvalue2=(4095.0/9.9)*slot_data;
 8002482:	4b54      	ldr	r3, [pc, #336]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f87e 	bl	8000588 <__aeabi_f2d>
 800248c:	a348      	add	r3, pc, #288	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fe f8d1 	bl	8000638 <__aeabi_dmul>
 8002496:	4603      	mov	r3, r0
 8002498:	460c      	mov	r4, r1
 800249a:	4618      	mov	r0, r3
 800249c:	4621      	mov	r1, r4
 800249e:	f7fe fba3 	bl	8000be8 <__aeabi_d2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	613b      	str	r3, [r7, #16]
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80024a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80024aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ae:	ee17 3a90 	vmov	r3, s15
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	4848      	ldr	r0, [pc, #288]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80024b8:	f002 fd86 	bl	8004fc8 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80024bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c4:	ee17 3a90 	vmov	r3, s15
 80024c8:	2200      	movs	r2, #0
 80024ca:	2110      	movs	r1, #16
 80024cc:	4842      	ldr	r0, [pc, #264]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80024ce:	f002 fd7b 	bl	8004fc8 <HAL_DAC_SetValue>
 80024d2:	e09b      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
					}
					else if(speed==0.01) {
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f855 	bl	8000588 <__aeabi_f2d>
 80024de:	a332      	add	r3, pc, #200	; (adr r3, 80025a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe fb10 	bl	8000b08 <__aeabi_dcmpeq>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d043      	beq.n	8002576 <HAL_TIM_PeriodElapsedCallback+0xbee>
						setvalue1=(4095.0/9.9)*slot_data*0.9;
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f848 	bl	8000588 <__aeabi_f2d>
 80024f8:	a32d      	add	r3, pc, #180	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe f89b 	bl	8000638 <__aeabi_dmul>
 8002502:	4603      	mov	r3, r0
 8002504:	460c      	mov	r4, r1
 8002506:	4618      	mov	r0, r3
 8002508:	4621      	mov	r1, r4
 800250a:	a32f      	add	r3, pc, #188	; (adr r3, 80025c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f892 	bl	8000638 <__aeabi_dmul>
 8002514:	4603      	mov	r3, r0
 8002516:	460c      	mov	r4, r1
 8002518:	4618      	mov	r0, r3
 800251a:	4621      	mov	r1, r4
 800251c:	f7fe fb64 	bl	8000be8 <__aeabi_d2f>
 8002520:	4603      	mov	r3, r0
 8002522:	617b      	str	r3, [r7, #20]
						setvalue2=(4095.0/9.9)*slot_data;
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f82d 	bl	8000588 <__aeabi_f2d>
 800252e:	a320      	add	r3, pc, #128	; (adr r3, 80025b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f880 	bl	8000638 <__aeabi_dmul>
 8002538:	4603      	mov	r3, r0
 800253a:	460c      	mov	r4, r1
 800253c:	4618      	mov	r0, r3
 800253e:	4621      	mov	r1, r4
 8002540:	f7fe fb52 	bl	8000be8 <__aeabi_d2f>
 8002544:	4603      	mov	r3, r0
 8002546:	613b      	str	r3, [r7, #16]
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002548:	edd7 7a05 	vldr	s15, [r7, #20]
 800254c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002550:	ee17 3a90 	vmov	r3, s15
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	481f      	ldr	r0, [pc, #124]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800255a:	f002 fd35 	bl	8004fc8 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800255e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002566:	ee17 3a90 	vmov	r3, s15
 800256a:	2200      	movs	r2, #0
 800256c:	2110      	movs	r1, #16
 800256e:	481a      	ldr	r0, [pc, #104]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 8002570:	f002 fd2a 	bl	8004fc8 <HAL_DAC_SetValue>
 8002574:	e04a      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
					}
					else {
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 8002576:	edd7 7a05 	vldr	s15, [r7, #20]
 800257a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800257e:	ee17 3a90 	vmov	r3, s15
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 8002588:	f002 fd1e 	bl	8004fc8 <HAL_DAC_SetValue>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 800258c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	2200      	movs	r2, #0
 800259a:	2110      	movs	r1, #16
 800259c:	480e      	ldr	r0, [pc, #56]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800259e:	f002 fd13 	bl	8004fc8 <HAL_DAC_SetValue>
 80025a2:	e033      	b.n	800260c <HAL_TIM_PeriodElapsedCallback+0xc84>
 80025a4:	f3af 8000 	nop.w
 80025a8:	47ae147b 	.word	0x47ae147b
 80025ac:	3f847ae1 	.word	0x3f847ae1
 80025b0:	8ba2e8ba 	.word	0x8ba2e8ba
 80025b4:	4079da2e 	.word	0x4079da2e
 80025b8:	9999999a 	.word	0x9999999a
 80025bc:	3fe99999 	.word	0x3fe99999
 80025c0:	47ae147b 	.word	0x47ae147b
 80025c4:	3f947ae1 	.word	0x3f947ae1
 80025c8:	cccccccd 	.word	0xcccccccd
 80025cc:	3feccccc 	.word	0x3feccccc
 80025d0:	200003e8 	.word	0x200003e8
 80025d4:	200003ec 	.word	0x200003ec
 80025d8:	20000398 	.word	0x20000398
 80025dc:	200003e4 	.word	0x200003e4
					}
				}

		else{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)setvalue1);
 80025e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e8:	ee17 3a90 	vmov	r3, s15
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	4838      	ldr	r0, [pc, #224]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 80025f2:	f002 fce9 	bl	8004fc8 <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)setvalue2);
 80025f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80025fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fe:	ee17 3a90 	vmov	r3, s15
 8002602:	2200      	movs	r2, #0
 8002604:	2110      	movs	r1, #16
 8002606:	4833      	ldr	r0, [pc, #204]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8002608:	f002 fcde 	bl	8004fc8 <HAL_DAC_SetValue>
	//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
	//}

	uint8_t senddata[5];
	senddata[0]=254;
 800260c:	23fe      	movs	r3, #254	; 0xfe
 800260e:	723b      	strb	r3, [r7, #8]
	senddata[1]=state;
 8002610:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	727b      	strb	r3, [r7, #9]
	senddata[2]=0;
 8002616:	2300      	movs	r3, #0
 8002618:	72bb      	strb	r3, [r7, #10]
	senddata[3]=cnt;
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0xd54>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	72fb      	strb	r3, [r7, #11]
	senddata[4]=253;
 8002620:	23fd      	movs	r3, #253	; 0xfd
 8002622:	733b      	strb	r3, [r7, #12]

	HAL_UART_Transmit(&huart2,(uint8_t*)senddata ,5, 0x0f);
 8002624:	f107 0108 	add.w	r1, r7, #8
 8002628:	230f      	movs	r3, #15
 800262a:	2205      	movs	r2, #5
 800262c:	482c      	ldr	r0, [pc, #176]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 800262e:	f004 fd56 	bl	80070de <HAL_UART_Transmit>

	if(cnt>250){
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2bfa      	cmp	r3, #250	; 0xfa
 8002638:	d917      	bls.n	800266a <HAL_TIM_PeriodElapsedCallback+0xce2>
		cnt=0;
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0xd54>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
		if(EN_front==0){
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <HAL_TIM_PeriodElapsedCallback+0xcc6>
			Error_Handler();
 8002648:	f000 f8ce 	bl	80027e8 <Error_Handler>
 800264c:	e002      	b.n	8002654 <HAL_TIM_PeriodElapsedCallback+0xccc>
		}
		else{
			EN_front=0;
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
		}
		if(EN_rear==0){
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_TIM_PeriodElapsedCallback+0xcda>
			Error_Handler();
 800265c:	f000 f8c4 	bl	80027e8 <Error_Handler>
 8002660:	e009      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0xcee>
		}
		else{
			EN_rear=0;
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e005      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0xcee>
		}
	}
	else{
		cnt++;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0xd54>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8002674:	701a      	strb	r2, [r3, #0]
	pit=0.95*(gyro_data[0]*0.002+pit_temp)+0.05*pit_acc;
	rol=0.95*(gyro_data[1]*0.002+rol_temp)+0.05*rol_acc;
	pit_temp=pit;
	rol_temp=rol;*/

	if(data_from_esp32[1]>0){
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <HAL_TIM_PeriodElapsedCallback+0xd28>
		if(connect==0){
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d110      	bne.n	80026a8 <HAL_TIM_PeriodElapsedCallback+0xd20>
			if(data_from_esp32[1]==1){
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002688:	785b      	ldrb	r3, [r3, #1]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d106      	bne.n	800269c <HAL_TIM_PeriodElapsedCallback+0xd14>
				DFPlayer_playmp3(6);
 800268e:	2006      	movs	r0, #6
 8002690:	f7fe fcae 	bl	8000ff0 <DFPlayer_playmp3>
				EN=1;
 8002694:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e005      	b.n	80026a8 <HAL_TIM_PeriodElapsedCallback+0xd20>
			}
			else{
				EN=0;
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
				DFPlayer_playmp3(1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f7fe fca4 	bl	8000ff0 <DFPlayer_playmp3>
			}
		}
		connect=1;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
		connect=0;
		EN=0;
	}


}
 80026ae:	e00c      	b.n	80026ca <HAL_TIM_PeriodElapsedCallback+0xd42>
		if(connect==1){
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_TIM_PeriodElapsedCallback+0xd36>
			DFPlayer_playmp3(3);
 80026b8:	2003      	movs	r0, #3
 80026ba:	f7fe fc99 	bl	8000ff0 <DFPlayer_playmp3>
		connect=0;
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
		EN=0;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bdb0      	pop	{r4, r5, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000398 	.word	0x20000398
 80026d8:	200003d5 	.word	0x200003d5
 80026dc:	200003d4 	.word	0x200003d4
 80026e0:	200005d0 	.word	0x200005d0
 80026e4:	200003dc 	.word	0x200003dc
 80026e8:	200003e5 	.word	0x200003e5
 80026ec:	200002e8 	.word	0x200002e8
 80026f0:	200003ba 	.word	0x200003ba
 80026f4:	200003bb 	.word	0x200003bb

080026f8 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_ESP32[j] != 254 &&  j<sizeof(Rxbuf_from_ESP32)) {
 8002704:	e002      	b.n	800270c <HAL_UART_RxCpltCallback+0x14>
		j++;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	3301      	adds	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_ESP32[j] != 254 &&  j<sizeof(Rxbuf_from_ESP32)) {
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <HAL_UART_RxCpltCallback+0xe0>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	2bfe      	cmp	r3, #254	; 0xfe
 8002714:	d002      	beq.n	800271c <HAL_UART_RxCpltCallback+0x24>
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b04      	cmp	r3, #4
 800271a:	d9f4      	bls.n	8002706 <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_from_ESP32)){
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d912      	bls.n	8002748 <HAL_UART_RxCpltCallback+0x50>
		for(uint8_t k=0;k<(sizeof(data_from_esp32));k++){
 8002722:	2300      	movs	r3, #0
 8002724:	73bb      	strb	r3, [r7, #14]
 8002726:	e006      	b.n	8002736 <HAL_UART_RxCpltCallback+0x3e>
			data_from_esp32[k]=0;
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <HAL_UART_RxCpltCallback+0xe4>)
 800272c:	2100      	movs	r1, #0
 800272e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_from_esp32));k++){
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	3301      	adds	r3, #1
 8002734:	73bb      	strb	r3, [r7, #14]
 8002736:	7bbb      	ldrb	r3, [r7, #14]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d9f5      	bls.n	8002728 <HAL_UART_RxCpltCallback+0x30>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,1);
 800273c:	2201      	movs	r2, #1
 800273e:	2102      	movs	r1, #2
 8002740:	4827      	ldr	r0, [pc, #156]	; (80027e0 <HAL_UART_RxCpltCallback+0xe8>)
 8002742:	f003 f971 	bl	8005a28 <HAL_GPIO_WritePin>
 8002746:	e020      	b.n	800278a <HAL_UART_RxCpltCallback+0x92>
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_from_esp32); k++) {
 8002748:	2300      	movs	r3, #0
 800274a:	737b      	strb	r3, [r7, #13]
 800274c:	e01a      	b.n	8002784 <HAL_UART_RxCpltCallback+0x8c>
			if ((j + k) >= sizeof(data_from_esp32)) {
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	7b7b      	ldrb	r3, [r7, #13]
 8002752:	4413      	add	r3, r2
 8002754:	2b03      	cmp	r3, #3
 8002756:	d909      	bls.n	800276c <HAL_UART_RxCpltCallback+0x74>
				data_from_esp32[k] = Rxbuf_from_ESP32[k - (sizeof(data_from_esp32) - j)];
 8002758:	7b7a      	ldrb	r2, [r7, #13]
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	4413      	add	r3, r2
 800275e:	1f1a      	subs	r2, r3, #4
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	491d      	ldr	r1, [pc, #116]	; (80027d8 <HAL_UART_RxCpltCallback+0xe0>)
 8002764:	5c89      	ldrb	r1, [r1, r2]
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_UART_RxCpltCallback+0xe4>)
 8002768:	54d1      	strb	r1, [r2, r3]
 800276a:	e008      	b.n	800277e <HAL_UART_RxCpltCallback+0x86>
			}
			else {
				data_from_esp32[k] = Rxbuf_from_ESP32[j + k + 1];
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	7b7b      	ldrb	r3, [r7, #13]
 8002770:	4413      	add	r3, r2
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	7b7b      	ldrb	r3, [r7, #13]
 8002776:	4918      	ldr	r1, [pc, #96]	; (80027d8 <HAL_UART_RxCpltCallback+0xe0>)
 8002778:	5c89      	ldrb	r1, [r1, r2]
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <HAL_UART_RxCpltCallback+0xe4>)
 800277c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_esp32); k++) {
 800277e:	7b7b      	ldrb	r3, [r7, #13]
 8002780:	3301      	adds	r3, #1
 8002782:	737b      	strb	r3, [r7, #13]
 8002784:	7b7b      	ldrb	r3, [r7, #13]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d9e1      	bls.n	800274e <HAL_UART_RxCpltCallback+0x56>
			}
		}
	}
	if(data_from_esp32[sizeof(data_from_esp32)-1]==253){
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_UART_RxCpltCallback+0xe4>)
 800278c:	78db      	ldrb	r3, [r3, #3]
 800278e:	2bfd      	cmp	r3, #253	; 0xfd
 8002790:	d10f      	bne.n	80027b2 <HAL_UART_RxCpltCallback+0xba>
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 8002792:	2300      	movs	r3, #0
 8002794:	733b      	strb	r3, [r7, #12]
 8002796:	e008      	b.n	80027aa <HAL_UART_RxCpltCallback+0xb2>
			Rxbuf_from_ESP32_temp[k]=data_from_esp32[k];
 8002798:	7b3a      	ldrb	r2, [r7, #12]
 800279a:	7b3b      	ldrb	r3, [r7, #12]
 800279c:	490f      	ldr	r1, [pc, #60]	; (80027dc <HAL_UART_RxCpltCallback+0xe4>)
 800279e:	5c89      	ldrb	r1, [r1, r2]
 80027a0:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_UART_RxCpltCallback+0xec>)
 80027a2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 80027a4:	7b3b      	ldrb	r3, [r7, #12]
 80027a6:	3301      	adds	r3, #1
 80027a8:	733b      	strb	r3, [r7, #12]
 80027aa:	7b3b      	ldrb	r3, [r7, #12]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d9f3      	bls.n	8002798 <HAL_UART_RxCpltCallback+0xa0>
			data_from_esp32[k]=Rxbuf_from_ESP32_temp[k];
		}
	}


}
 80027b0:	e00e      	b.n	80027d0 <HAL_UART_RxCpltCallback+0xd8>
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 80027b2:	2300      	movs	r3, #0
 80027b4:	72fb      	strb	r3, [r7, #11]
 80027b6:	e008      	b.n	80027ca <HAL_UART_RxCpltCallback+0xd2>
			data_from_esp32[k]=Rxbuf_from_ESP32_temp[k];
 80027b8:	7afa      	ldrb	r2, [r7, #11]
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	4909      	ldr	r1, [pc, #36]	; (80027e4 <HAL_UART_RxCpltCallback+0xec>)
 80027be:	5c89      	ldrb	r1, [r1, r2]
 80027c0:	4a06      	ldr	r2, [pc, #24]	; (80027dc <HAL_UART_RxCpltCallback+0xe4>)
 80027c2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_esp32);k++){
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	3301      	adds	r3, #1
 80027c8:	72fb      	strb	r3, [r7, #11]
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d9f3      	bls.n	80027b8 <HAL_UART_RxCpltCallback+0xc0>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000270 	.word	0x20000270
 80027dc:	200002e8 	.word	0x200002e8
 80027e0:	40020400 	.word	0x40020400
 80027e4:	2000029c 	.word	0x2000029c

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	TxData[0]=0x02;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <Error_Handler+0x3c>)
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
	TxData[1]=0xFF;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <Error_Handler+0x3c>)
 80027f4:	22ff      	movs	r2, #255	; 0xff
 80027f6:	705a      	strb	r2, [r3, #1]
	can_send(0x000,(uint8_t*)TxData);
 80027f8:	490a      	ldr	r1, [pc, #40]	; (8002824 <Error_Handler+0x3c>)
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7fe fcf2 	bl	80011e4 <can_send>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8002800:	2101      	movs	r1, #1
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <Error_Handler+0x40>)
 8002804:	f003 f929 	bl	8005a5a <HAL_GPIO_TogglePin>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002808:	2300      	movs	r3, #0
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <Error_Handler+0x44>)
 8002810:	f002 fbda 	bl	8004fc8 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8002814:	2300      	movs	r3, #0
 8002816:	2200      	movs	r2, #0
 8002818:	2110      	movs	r1, #16
 800281a:	4804      	ldr	r0, [pc, #16]	; (800282c <Error_Handler+0x44>)
 800281c:	f002 fbd4 	bl	8004fc8 <HAL_DAC_SetValue>
  /* USER CODE END Error_Handler_Debug */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200002e0 	.word	0x200002e0
 8002828:	40020800 	.word	0x40020800
 800282c:	20000398 	.word	0x20000398

08002830 <getUs>:
 */
#include "microsectimer.h"



uint32_t getUs(void) {
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8002836:	f003 faa9 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <getUs+0x50>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	0c9b      	lsrs	r3, r3, #18
 8002844:	607b      	str	r3, [r7, #4]
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
 8002846:	f001 fac5 	bl	8003dd4 <HAL_GetTick>
 800284a:	4604      	mov	r4, r0
cycle_cnt = SysTick->VAL;
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <getUs+0x54>)
 800284e:	689d      	ldr	r5, [r3, #8]
} while (ms != HAL_GetTick());
 8002850:	f001 fac0 	bl	8003dd4 <HAL_GetTick>
 8002854:	4603      	mov	r3, r0
 8002856:	429c      	cmp	r4, r3
 8002858:	d1f5      	bne.n	8002846 <getUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 800285a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285e:	fb03 f204 	mul.w	r2, r3, r4
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	1b59      	subs	r1, r3, r5
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	fbb1 f3f3 	udiv	r3, r1, r3
 8002874:	4413      	add	r3, r2
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bdb0      	pop	{r4, r5, r7, pc}
 800287e:	bf00      	nop
 8002880:	431bde83 	.word	0x431bde83
 8002884:	e000e010 	.word	0xe000e010

08002888 <delayUs>:

void delayUs(uint16_t micros) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
uint32_t start = getUs();
 8002892:	f7ff ffcd 	bl	8002830 <getUs>
 8002896:	60f8      	str	r0, [r7, #12]
while (getUs()-start < (uint32_t) micros) {
 8002898:	e000      	b.n	800289c <delayUs+0x14>
	asm("nop");
 800289a:	bf00      	nop
while (getUs()-start < (uint32_t) micros) {
 800289c:	f7ff ffc8 	bl	8002830 <getUs>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad2      	subs	r2, r2, r3
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d3f6      	bcc.n	800289a <delayUs+0x12>
}
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <mpu9250_init>:


#include "mpu9250.h"
#define MPU_InitRegNum 17

int mpu9250_init(SPI_HandleTypeDef *handler){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	mpu9250 = handler;
 80028bc:	4a48      	ldr	r2, [pc, #288]	; (80029e0 <mpu9250_init+0x12c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]

	 mpu9250_calib_acc();
 80028c2:	f000 fa5d 	bl	8002d80 <mpu9250_calib_acc>
	 mpu9250_calib_mag();
 80028c6:	f000 fa99 	bl	8002dfc <mpu9250_calib_mag>

	 mpu9250_calibrate(g_bias, a_bias);
 80028ca:	4946      	ldr	r1, [pc, #280]	; (80029e4 <mpu9250_init+0x130>)
 80028cc:	4846      	ldr	r0, [pc, #280]	; (80029e8 <mpu9250_init+0x134>)
 80028ce:	f000 fb11 	bl	8002ef4 <mpu9250_calibrate>

	   uint8_t i = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	733b      	strb	r3, [r7, #12]
 80028dc:	236b      	movs	r3, #107	; 0x6b
 80028de:	737b      	strb	r3, [r7, #13]
 80028e0:	2301      	movs	r3, #1
 80028e2:	73bb      	strb	r3, [r7, #14]
 80028e4:	236b      	movs	r3, #107	; 0x6b
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	2300      	movs	r3, #0
 80028ea:	743b      	strb	r3, [r7, #16]
 80028ec:	236c      	movs	r3, #108	; 0x6c
 80028ee:	747b      	strb	r3, [r7, #17]
 80028f0:	4b3e      	ldr	r3, [pc, #248]	; (80029ec <mpu9250_init+0x138>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	74bb      	strb	r3, [r7, #18]
 80028f6:	231a      	movs	r3, #26
 80028f8:	74fb      	strb	r3, [r7, #19]
 80028fa:	2318      	movs	r3, #24
 80028fc:	753b      	strb	r3, [r7, #20]
 80028fe:	231b      	movs	r3, #27
 8002900:	757b      	strb	r3, [r7, #21]
 8002902:	2318      	movs	r3, #24
 8002904:	75bb      	strb	r3, [r7, #22]
 8002906:	231c      	movs	r3, #28
 8002908:	75fb      	strb	r3, [r7, #23]
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <mpu9250_init+0x13c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	763b      	strb	r3, [r7, #24]
 8002910:	231d      	movs	r3, #29
 8002912:	767b      	strb	r3, [r7, #25]
 8002914:	2312      	movs	r3, #18
 8002916:	76bb      	strb	r3, [r7, #26]
 8002918:	2337      	movs	r3, #55	; 0x37
 800291a:	76fb      	strb	r3, [r7, #27]
 800291c:	2330      	movs	r3, #48	; 0x30
 800291e:	773b      	strb	r3, [r7, #28]
 8002920:	236a      	movs	r3, #106	; 0x6a
 8002922:	777b      	strb	r3, [r7, #29]
 8002924:	230d      	movs	r3, #13
 8002926:	77bb      	strb	r3, [r7, #30]
 8002928:	2324      	movs	r3, #36	; 0x24
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	230c      	movs	r3, #12
 800292e:	f887 3020 	strb.w	r3, [r7, #32]
 8002932:	2325      	movs	r3, #37	; 0x25
 8002934:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002938:	230b      	movs	r3, #11
 800293a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800293e:	2326      	movs	r3, #38	; 0x26
 8002940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800294a:	2363      	movs	r3, #99	; 0x63
 800294c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002950:	2381      	movs	r3, #129	; 0x81
 8002952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002956:	2327      	movs	r3, #39	; 0x27
 8002958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800295c:	230a      	movs	r3, #10
 800295e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002962:	2326      	movs	r3, #38	; 0x26
 8002964:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002968:	2312      	movs	r3, #18
 800296a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800296e:	2363      	movs	r3, #99	; 0x63
 8002970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002974:	2381      	movs	r3, #129	; 0x81
 8002976:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800297a:	2327      	movs	r3, #39	; 0x27
 800297c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	#endif
	        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte

	    };

	    for(i = 0; i < MPU_InitRegNum; i++) {
 8002980:	2300      	movs	r3, #0
 8002982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002986:	e01b      	b.n	80029c0 <mpu9250_init+0x10c>
	    	mpu9250_WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002992:	4413      	add	r3, r2
 8002994:	f813 2c23 	ldrb.w	r2, [r3, #-35]
 8002998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80029a2:	440b      	add	r3, r1
 80029a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 f822 	bl	80029f4 <mpu9250_WriteReg>
	    	HAL_Delay(1);
 80029b0:	2001      	movs	r0, #1
 80029b2:	f001 fa1b 	bl	8003dec <HAL_Delay>
	    for(i = 0; i < MPU_InitRegNum; i++) {
 80029b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029ba:	3301      	adds	r3, #1
 80029bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80029c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d9df      	bls.n	8002988 <mpu9250_init+0xd4>
	    }

	    mpu9250_set_acc_scale(BITS_FS_16G);
 80029c8:	2018      	movs	r0, #24
 80029ca:	f000 f883 	bl	8002ad4 <mpu9250_set_acc_scale>
	    mpu9250_set_gyro_scale(BITS_FS_2000DPS);
 80029ce:	2018      	movs	r0, #24
 80029d0:	f000 f928 	bl	8002c24 <mpu9250_set_gyro_scale>

	    //mpu9250_calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
	    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3730      	adds	r7, #48	; 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000268 	.word	0x20000268
 80029e4:	2000030c 	.word	0x2000030c
 80029e8:	20000338 	.word	0x20000338
 80029ec:	2000026c 	.word	0x2000026c
 80029f0:	20000264 	.word	0x20000264

080029f4 <mpu9250_WriteReg>:


unsigned int mpu9250_WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	4603      	mov	r3, r0
 80029fc:	460a      	mov	r2, r1
 80029fe:	71fb      	strb	r3, [r7, #7]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71bb      	strb	r3, [r7, #6]
    unsigned int temp_val;

	 uint8_t TxData[1];
	 uint8_t RxData[1];
	 mpu9250_select();
 8002a04:	f000 fd34 	bl	8003470 <mpu9250_select>

	 TxData[0]=WriteAddr;
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	743b      	strb	r3, [r7, #16]
	 HAL_SPI_TransmitReceive(mpu9250, (uint8_t *)TxData, (uint8_t *)RxData,1,0xFF);
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <mpu9250_WriteReg+0x5c>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	f107 020c 	add.w	r2, r7, #12
 8002a14:	f107 0110 	add.w	r1, r7, #16
 8002a18:	23ff      	movs	r3, #255	; 0xff
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f003 fe13 	bl	8006648 <HAL_SPI_TransmitReceive>
	 TxData[0]=WriteData;
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	743b      	strb	r3, [r7, #16]
	 HAL_SPI_TransmitReceive(mpu9250, (uint8_t *)TxData, (uint8_t *)RxData,1,0xFF);
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <mpu9250_WriteReg+0x5c>)
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f107 020c 	add.w	r2, r7, #12
 8002a2e:	f107 0110 	add.w	r1, r7, #16
 8002a32:	23ff      	movs	r3, #255	; 0xff
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	f003 fe06 	bl	8006648 <HAL_SPI_TransmitReceive>

    temp_val=RxData[0];
 8002a3c:	7b3b      	ldrb	r3, [r7, #12]
 8002a3e:	617b      	str	r3, [r7, #20]
    mpu9250_deselect();
 8002a40:	f000 fd22 	bl	8003488 <mpu9250_deselect>

    return temp_val;
 8002a44:	697b      	ldr	r3, [r7, #20]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000268 	.word	0x20000268

08002a54 <mpu9250_ReadRegs>:
unsigned int  mpu9250_ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
    return mpu9250_WriteReg(WriteAddr | READ_FLAG,WriteData);
}
void mpu9250_ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	73fb      	strb	r3, [r7, #15]
    unsigned int  i = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    uint8_t TxData[1];
    uint8_t RxData[1];
    mpu9250_select();
 8002a66:	f000 fd03 	bl	8003470 <mpu9250_select>
    TxData[0]=ReadAddr | READ_FLAG;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	763b      	strb	r3, [r7, #24]
    HAL_SPI_TransmitReceive(mpu9250, (uint8_t *)TxData, (uint8_t *)RxData,1,0xFF);
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <mpu9250_ReadRegs+0x7c>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f107 0214 	add.w	r2, r7, #20
 8002a7c:	f107 0118 	add.w	r1, r7, #24
 8002a80:	23ff      	movs	r3, #255	; 0xff
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	f003 fddf 	bl	8006648 <HAL_SPI_TransmitReceive>
    for(i = 0; i < Bytes; i++){
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e014      	b.n	8002aba <mpu9250_ReadRegs+0x66>
    	 TxData[0]=0x00;
 8002a90:	2300      	movs	r3, #0
 8002a92:	763b      	strb	r3, [r7, #24]
    	 HAL_SPI_TransmitReceive(mpu9250, (uint8_t *)TxData, (uint8_t *)RxData,1,0xFF);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <mpu9250_ReadRegs+0x7c>)
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f107 0214 	add.w	r2, r7, #20
 8002a9c:	f107 0118 	add.w	r1, r7, #24
 8002aa0:	23ff      	movs	r3, #255	; 0xff
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f003 fdcf 	bl	8006648 <HAL_SPI_TransmitReceive>
    	 ReadBuf[i] = RxData[0];
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	7d3a      	ldrb	r2, [r7, #20]
 8002ab2:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < Bytes; i++){
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d3e6      	bcc.n	8002a90 <mpu9250_ReadRegs+0x3c>
    }

    mpu9250_deselect();
 8002ac2:	f000 fce1 	bl	8003488 <mpu9250_deselect>

    //delayMicroseconds(50);
}
 8002ac6:	bf00      	nop
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000268 	.word	0x20000268

08002ad4 <mpu9250_set_acc_scale>:
 */

#define MPU_InitRegNum 17


unsigned int mpu9250_set_acc_scale(int scale){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    unsigned int temp_scale;
    mpu9250_WriteReg(MPUREG_ACCEL_CONFIG, scale);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	201c      	movs	r0, #28
 8002ae4:	f7ff ff86 	bl	80029f4 <mpu9250_WriteReg>

    switch (scale){
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	d848      	bhi.n	8002b80 <mpu9250_set_acc_scale+0xac>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <mpu9250_set_acc_scale+0x20>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b59 	.word	0x08002b59
 8002af8:	08002b81 	.word	0x08002b81
 8002afc:	08002b81 	.word	0x08002b81
 8002b00:	08002b81 	.word	0x08002b81
 8002b04:	08002b81 	.word	0x08002b81
 8002b08:	08002b81 	.word	0x08002b81
 8002b0c:	08002b81 	.word	0x08002b81
 8002b10:	08002b81 	.word	0x08002b81
 8002b14:	08002b63 	.word	0x08002b63
 8002b18:	08002b81 	.word	0x08002b81
 8002b1c:	08002b81 	.word	0x08002b81
 8002b20:	08002b81 	.word	0x08002b81
 8002b24:	08002b81 	.word	0x08002b81
 8002b28:	08002b81 	.word	0x08002b81
 8002b2c:	08002b81 	.word	0x08002b81
 8002b30:	08002b81 	.word	0x08002b81
 8002b34:	08002b6d 	.word	0x08002b6d
 8002b38:	08002b81 	.word	0x08002b81
 8002b3c:	08002b81 	.word	0x08002b81
 8002b40:	08002b81 	.word	0x08002b81
 8002b44:	08002b81 	.word	0x08002b81
 8002b48:	08002b81 	.word	0x08002b81
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002b81 	.word	0x08002b81
 8002b54:	08002b77 	.word	0x08002b77
        case BITS_FS_2G:
            acc_divider=16384;
 8002b58:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <mpu9250_set_acc_scale+0x14c>)
 8002b5a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002b5e:	601a      	str	r2, [r3, #0]
        break;
 8002b60:	e00e      	b.n	8002b80 <mpu9250_set_acc_scale+0xac>
        case BITS_FS_4G:
            acc_divider=8192;
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <mpu9250_set_acc_scale+0x14c>)
 8002b64:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002b68:	601a      	str	r2, [r3, #0]
        break;
 8002b6a:	e009      	b.n	8002b80 <mpu9250_set_acc_scale+0xac>
        case BITS_FS_8G:
            acc_divider=4096;
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <mpu9250_set_acc_scale+0x14c>)
 8002b6e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002b72:	601a      	str	r2, [r3, #0]
        break;
 8002b74:	e004      	b.n	8002b80 <mpu9250_set_acc_scale+0xac>
        case BITS_FS_16G:
            acc_divider=2048;
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <mpu9250_set_acc_scale+0x14c>)
 8002b78:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002b7c:	601a      	str	r2, [r3, #0]
        break;
 8002b7e:	bf00      	nop
    }
    temp_scale = mpu9250_WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
 8002b80:	2100      	movs	r1, #0
 8002b82:	209c      	movs	r0, #156	; 0x9c
 8002b84:	f7ff ff36 	bl	80029f4 <mpu9250_WriteReg>
 8002b88:	60f8      	str	r0, [r7, #12]

    switch (temp_scale){
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b18      	cmp	r3, #24
 8002b8e:	d841      	bhi.n	8002c14 <mpu9250_set_acc_scale+0x140>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <mpu9250_set_acc_scale+0xc4>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bfd 	.word	0x08002bfd
 8002b9c:	08002c15 	.word	0x08002c15
 8002ba0:	08002c15 	.word	0x08002c15
 8002ba4:	08002c15 	.word	0x08002c15
 8002ba8:	08002c15 	.word	0x08002c15
 8002bac:	08002c15 	.word	0x08002c15
 8002bb0:	08002c15 	.word	0x08002c15
 8002bb4:	08002c15 	.word	0x08002c15
 8002bb8:	08002c03 	.word	0x08002c03
 8002bbc:	08002c15 	.word	0x08002c15
 8002bc0:	08002c15 	.word	0x08002c15
 8002bc4:	08002c15 	.word	0x08002c15
 8002bc8:	08002c15 	.word	0x08002c15
 8002bcc:	08002c15 	.word	0x08002c15
 8002bd0:	08002c15 	.word	0x08002c15
 8002bd4:	08002c15 	.word	0x08002c15
 8002bd8:	08002c09 	.word	0x08002c09
 8002bdc:	08002c15 	.word	0x08002c15
 8002be0:	08002c15 	.word	0x08002c15
 8002be4:	08002c15 	.word	0x08002c15
 8002be8:	08002c15 	.word	0x08002c15
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c0f 	.word	0x08002c0f
        case BITS_FS_2G:
            temp_scale=2;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	60fb      	str	r3, [r7, #12]
        break;
 8002c00:	e008      	b.n	8002c14 <mpu9250_set_acc_scale+0x140>
        case BITS_FS_4G:
            temp_scale=4;
 8002c02:	2304      	movs	r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
        break;
 8002c06:	e005      	b.n	8002c14 <mpu9250_set_acc_scale+0x140>
        case BITS_FS_8G:
            temp_scale=8;
 8002c08:	2308      	movs	r3, #8
 8002c0a:	60fb      	str	r3, [r7, #12]
        break;
 8002c0c:	e002      	b.n	8002c14 <mpu9250_set_acc_scale+0x140>
        case BITS_FS_16G:
            temp_scale=16;
 8002c0e:	2310      	movs	r3, #16
 8002c10:	60fb      	str	r3, [r7, #12]
        break;
 8002c12:	bf00      	nop
    }
    return temp_scale;
 8002c14:	68fb      	ldr	r3, [r7, #12]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000390 	.word	0x20000390

08002c24 <mpu9250_set_gyro_scale>:
 * BITS_FS_1000DPS
 * BITS_FS_2000DPS
 * returns the range set (250,500,1000 or 2000)
 */

unsigned int mpu9250_set_gyro_scale(int scale){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    unsigned int temp_scale;
    mpu9250_WriteReg(MPUREG_GYRO_CONFIG, scale);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4619      	mov	r1, r3
 8002c32:	201b      	movs	r0, #27
 8002c34:	f7ff fede 	bl	80029f4 <mpu9250_WriteReg>

    switch (scale){
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b18      	cmp	r3, #24
 8002c3c:	d844      	bhi.n	8002cc8 <mpu9250_set_gyro_scale+0xa4>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <mpu9250_set_gyro_scale+0x20>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002ca9 	.word	0x08002ca9
 8002c48:	08002cc9 	.word	0x08002cc9
 8002c4c:	08002cc9 	.word	0x08002cc9
 8002c50:	08002cc9 	.word	0x08002cc9
 8002c54:	08002cc9 	.word	0x08002cc9
 8002c58:	08002cc9 	.word	0x08002cc9
 8002c5c:	08002cc9 	.word	0x08002cc9
 8002c60:	08002cc9 	.word	0x08002cc9
 8002c64:	08002cb1 	.word	0x08002cb1
 8002c68:	08002cc9 	.word	0x08002cc9
 8002c6c:	08002cc9 	.word	0x08002cc9
 8002c70:	08002cc9 	.word	0x08002cc9
 8002c74:	08002cc9 	.word	0x08002cc9
 8002c78:	08002cc9 	.word	0x08002cc9
 8002c7c:	08002cc9 	.word	0x08002cc9
 8002c80:	08002cc9 	.word	0x08002cc9
 8002c84:	08002cb9 	.word	0x08002cb9
 8002c88:	08002cc9 	.word	0x08002cc9
 8002c8c:	08002cc9 	.word	0x08002cc9
 8002c90:	08002cc9 	.word	0x08002cc9
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08002cc9 	.word	0x08002cc9
 8002c9c:	08002cc9 	.word	0x08002cc9
 8002ca0:	08002cc9 	.word	0x08002cc9
 8002ca4:	08002cc1 	.word	0x08002cc1
        case BITS_FS_250DPS:   gyro_divider = 131;  break;
 8002ca8:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <mpu9250_set_gyro_scale+0x148>)
 8002caa:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <mpu9250_set_gyro_scale+0x14c>)
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e00b      	b.n	8002cc8 <mpu9250_set_gyro_scale+0xa4>
        case BITS_FS_500DPS:   gyro_divider = 65.5; break;
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <mpu9250_set_gyro_scale+0x148>)
 8002cb2:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <mpu9250_set_gyro_scale+0x150>)
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e007      	b.n	8002cc8 <mpu9250_set_gyro_scale+0xa4>
        case BITS_FS_1000DPS:  gyro_divider = 32.8; break;
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <mpu9250_set_gyro_scale+0x148>)
 8002cba:	4a2f      	ldr	r2, [pc, #188]	; (8002d78 <mpu9250_set_gyro_scale+0x154>)
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e003      	b.n	8002cc8 <mpu9250_set_gyro_scale+0xa4>
        case BITS_FS_2000DPS:  gyro_divider = 16.4; break;
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <mpu9250_set_gyro_scale+0x148>)
 8002cc2:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <mpu9250_set_gyro_scale+0x158>)
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	bf00      	nop
    }

    temp_scale = mpu9250_WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	209b      	movs	r0, #155	; 0x9b
 8002ccc:	f7ff fe92 	bl	80029f4 <mpu9250_WriteReg>
 8002cd0:	60f8      	str	r0, [r7, #12]

    switch (temp_scale){
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b18      	cmp	r3, #24
 8002cd6:	d844      	bhi.n	8002d62 <mpu9250_set_gyro_scale+0x13e>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <mpu9250_set_gyro_scale+0xbc>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002d45 	.word	0x08002d45
 8002ce4:	08002d63 	.word	0x08002d63
 8002ce8:	08002d63 	.word	0x08002d63
 8002cec:	08002d63 	.word	0x08002d63
 8002cf0:	08002d63 	.word	0x08002d63
 8002cf4:	08002d63 	.word	0x08002d63
 8002cf8:	08002d63 	.word	0x08002d63
 8002cfc:	08002d63 	.word	0x08002d63
 8002d00:	08002d4b 	.word	0x08002d4b
 8002d04:	08002d63 	.word	0x08002d63
 8002d08:	08002d63 	.word	0x08002d63
 8002d0c:	08002d63 	.word	0x08002d63
 8002d10:	08002d63 	.word	0x08002d63
 8002d14:	08002d63 	.word	0x08002d63
 8002d18:	08002d63 	.word	0x08002d63
 8002d1c:	08002d63 	.word	0x08002d63
 8002d20:	08002d53 	.word	0x08002d53
 8002d24:	08002d63 	.word	0x08002d63
 8002d28:	08002d63 	.word	0x08002d63
 8002d2c:	08002d63 	.word	0x08002d63
 8002d30:	08002d63 	.word	0x08002d63
 8002d34:	08002d63 	.word	0x08002d63
 8002d38:	08002d63 	.word	0x08002d63
 8002d3c:	08002d63 	.word	0x08002d63
 8002d40:	08002d5b 	.word	0x08002d5b
        case BITS_FS_250DPS:   temp_scale = 250;    break;
 8002d44:	23fa      	movs	r3, #250	; 0xfa
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	e00b      	b.n	8002d62 <mpu9250_set_gyro_scale+0x13e>
        case BITS_FS_500DPS:   temp_scale = 500;    break;
 8002d4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e007      	b.n	8002d62 <mpu9250_set_gyro_scale+0x13e>
        case BITS_FS_1000DPS:  temp_scale = 1000;   break;
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e003      	b.n	8002d62 <mpu9250_set_gyro_scale+0x13e>
        case BITS_FS_2000DPS:  temp_scale = 2000;   break;
 8002d5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	bf00      	nop
    }
    return temp_scale;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000320 	.word	0x20000320
 8002d70:	43030000 	.word	0x43030000
 8002d74:	42830000 	.word	0x42830000
 8002d78:	42033333 	.word	0x42033333
 8002d7c:	41833333 	.word	0x41833333

08002d80 <mpu9250_calib_acc>:
 * 2 -> Z axis
 * returns Factory Trim value
 */

void mpu9250_calib_acc()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
    uint8_t response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE
    temp_scale=mpu9250_WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
 8002d86:	2100      	movs	r1, #0
 8002d88:	209c      	movs	r0, #156	; 0x9c
 8002d8a:	f7ff fe33 	bl	80029f4 <mpu9250_WriteReg>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	607b      	str	r3, [r7, #4]
    mpu9250_set_acc_scale(BITS_FS_8G);
 8002d92:	2010      	movs	r0, #16
 8002d94:	f7ff fe9e 	bl	8002ad4 <mpu9250_set_acc_scale>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

    mpu9250_ReadRegs(MPUREG_SELF_TEST_X,response,4);
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	200d      	movs	r0, #13
 8002da0:	f7ff fe58 	bl	8002a54 <mpu9250_ReadRegs>
    calib_data[0] = ((response[0]&11100000)>>3) | ((response[3]&00110000)>>4);
 8002da4:	783b      	ldrb	r3, [r7, #0]
 8002da6:	10da      	asrs	r2, r3, #3
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <mpu9250_calib_acc+0x74>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	1112      	asrs	r2, r2, #4
 8002db0:	f402 6210 	and.w	r2, r2, #2304	; 0x900
 8002db4:	4313      	orrs	r3, r2
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <mpu9250_calib_acc+0x78>)
 8002db8:	6013      	str	r3, [r2, #0]
    calib_data[1] = ((response[1]&11100000)>>3) | ((response[3]&00001100)>>2);
 8002dba:	787b      	ldrb	r3, [r7, #1]
 8002dbc:	10da      	asrs	r2, r3, #3
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <mpu9250_calib_acc+0x74>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	1092      	asrs	r2, r2, #2
 8002dc6:	f002 0290 	and.w	r2, r2, #144	; 0x90
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <mpu9250_calib_acc+0x78>)
 8002dce:	6053      	str	r3, [r2, #4]
    calib_data[2] = ((response[2]&11100000)>>3) | ((response[3]&00000011));
 8002dd0:	78bb      	ldrb	r3, [r7, #2]
 8002dd2:	10da      	asrs	r2, r3, #3
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <mpu9250_calib_acc+0x74>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	f002 0209 	and.w	r2, r2, #9
 8002dde:	4313      	orrs	r3, r2
 8002de0:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <mpu9250_calib_acc+0x78>)
 8002de2:	6093      	str	r3, [r2, #8]

    mpu9250_set_acc_scale(temp_scale);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff fe75 	bl	8002ad4 <mpu9250_set_acc_scale>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00152bec 	.word	0x00152bec
 8002df8:	2000028c 	.word	0x2000028c

08002dfc <mpu9250_calib_mag>:
    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C

    return response;
}

void mpu9250_calib_mag(){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
    uint8_t response[3];
    float data;
    int i;
    // Choose either 14-bit or 16-bit magnetometer resolution
    //uint8_t MFS_14BITS = 0; // 0.6 mG per LSB
    uint8_t MFS_16BITS =1; // 0.15 mG per LSB
 8002e02:	2301      	movs	r3, #1
 8002e04:	72fb      	strb	r3, [r7, #11]
    // 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
    uint8_t M_8HZ = 0x02; // 8 Hz update
 8002e06:	2302      	movs	r3, #2
 8002e08:	72bb      	strb	r3, [r7, #10]
    //uint8_t M_100HZ = 0x06; // 100 Hz continuous magnetometer

    /* get the magnetometer calibration */

    mpu9250_WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG);   // Set the I2C slave    addres of AK8963 and set for read.
 8002e0a:	218c      	movs	r1, #140	; 0x8c
 8002e0c:	2025      	movs	r0, #37	; 0x25
 8002e0e:	f7ff fdf1 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_I2C_SLV0_REG, AK8963_ASAX);                 // I2C slave 0 register address from where to begin data transfer
 8002e12:	2110      	movs	r1, #16
 8002e14:	2026      	movs	r0, #38	; 0x26
 8002e16:	f7ff fded 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_I2C_SLV0_CTRL, 0x83);                       // Read 3 bytes from the magnetometer
 8002e1a:	2183      	movs	r1, #131	; 0x83
 8002e1c:	2027      	movs	r0, #39	; 0x27
 8002e1e:	f7ff fde9 	bl	80029f4 <mpu9250_WriteReg>

    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);   // Enable I2C and set bytes
    HAL_Delay(100);
 8002e22:	2064      	movs	r0, #100	; 0x64
 8002e24:	f000 ffe2 	bl	8003dec <HAL_Delay>
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00); //Read I2C

    mpu9250_WriteReg(AK8963_CNTL1, 0x00);                               // set AK8963 to Power Down
 8002e28:	2100      	movs	r1, #0
 8002e2a:	200a      	movs	r0, #10
 8002e2c:	f7ff fde2 	bl	80029f4 <mpu9250_WriteReg>
    delayUs(50000);                                                 // long wait between AK8963 mode changes
 8002e30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e34:	f7ff fd28 	bl	8002888 <delayUs>
    mpu9250_WriteReg(AK8963_CNTL1, 0x0F);                               // set AK8963 to FUSE ROM access
 8002e38:	210f      	movs	r1, #15
 8002e3a:	200a      	movs	r0, #10
 8002e3c:	f7ff fdda 	bl	80029f4 <mpu9250_WriteReg>
    delayUs(50000);                                                // long wait between AK8963 mode changes
 8002e40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e44:	f7ff fd20 	bl	8002888 <delayUs>

    mpu9250_ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);
 8002e48:	463b      	mov	r3, r7
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	2049      	movs	r0, #73	; 0x49
 8002e50:	f7ff fe00 	bl	8002a54 <mpu9250_ReadRegs>
    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);              // Read I2C
    for(i = 0; i < 3; i++) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e024      	b.n	8002ea4 <mpu9250_calib_mag+0xa8>
        data=response[i];
 8002e5a:	463a      	mov	r2, r7
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6a:	edc7 7a01 	vstr	s15, [r7, #4]
        Magnetometer_ASA[i] = ((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
 8002e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e72:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ee4 <mpu9250_calib_mag+0xe8>
 8002e76:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002e7a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002ee8 <mpu9250_calib_mag+0xec>
 8002e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e8a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002eec <mpu9250_calib_mag+0xf0>
 8002e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <mpu9250_calib_mag+0xf4>)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 3; i++) {
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	ddd7      	ble.n	8002e5a <mpu9250_calib_mag+0x5e>
    }
    mpu9250_WriteReg(AK8963_CNTL1, 0x00); // set AK8963 to Power Down
 8002eaa:	2100      	movs	r1, #0
 8002eac:	200a      	movs	r0, #10
 8002eae:	f7ff fda1 	bl	80029f4 <mpu9250_WriteReg>
    delayUs(50000);
 8002eb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002eb6:	f7ff fce7 	bl	8002888 <delayUs>
    // Configure the magnetometer for continuous read and highest resolution.
    // Set bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL
    // register, and enable continuous mode data acquisition (bits [3:0]),
    // 0010 for 8 Hz and 0110 for 100 Hz sample rates.
    mpu9250_WriteReg(AK8963_CNTL1, MFS_16BITS << 4 | M_8HZ);            // Set magnetometer data resolution and sample ODR
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	b25a      	sxtb	r2, r3
 8002ec0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	200a      	movs	r0, #10
 8002ece:	f7ff fd91 	bl	80029f4 <mpu9250_WriteReg>
    delayUs(50000);
 8002ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ed6:	f7ff fcd7 	bl	8002888 <delayUs>
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	43000000 	.word	0x43000000
 8002ee8:	43800000 	.word	0x43800000
 8002eec:	3e19999a 	.word	0x3e19999a
 8002ef0:	2000032c 	.word	0x2000032c

08002ef4 <mpu9250_calibrate>:
        data = (float)mag_data_raw[i-7];
        mag_data[i-7] = data * Magnetometer_ASA[i-7];
    }
}

void mpu9250_calibrate(float *dest1, float *dest2){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b098      	sub	sp, #96	; 0x60
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8002efe:	2300      	movs	r3, #0
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f02:	2300      	movs	r3, #0
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f06:	2300      	movs	r3, #0
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f0e:	2300      	movs	r3, #0
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34

    // reset device
    mpu9250_WriteReg(MPUREG_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	206b      	movs	r0, #107	; 0x6b
 8002f1a:	f7ff fd6b 	bl	80029f4 <mpu9250_WriteReg>
    HAL_Delay(100);
 8002f1e:	2064      	movs	r0, #100	; 0x64
 8002f20:	f000 ff64 	bl	8003dec <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    mpu9250_WriteReg(MPUREG_PWR_MGMT_1, 0x01);
 8002f24:	2101      	movs	r1, #1
 8002f26:	206b      	movs	r0, #107	; 0x6b
 8002f28:	f7ff fd64 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_PWR_MGMT_2, 0x00);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	206c      	movs	r0, #108	; 0x6c
 8002f30:	f7ff fd60 	bl	80029f4 <mpu9250_WriteReg>
    HAL_Delay(200);
 8002f34:	20c8      	movs	r0, #200	; 0xc8
 8002f36:	f000 ff59 	bl	8003dec <HAL_Delay>

    // Configure device for bias calculation
    mpu9250_WriteReg(MPUREG_INT_ENABLE, 0x00);   // Disable all interrupts
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2038      	movs	r0, #56	; 0x38
 8002f3e:	f7ff fd59 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_FIFO_EN, 0x00);      // Disable FIFO
 8002f42:	2100      	movs	r1, #0
 8002f44:	2023      	movs	r0, #35	; 0x23
 8002f46:	f7ff fd55 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	206b      	movs	r0, #107	; 0x6b
 8002f4e:	f7ff fd51 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_I2C_MST_CTRL, 0x00); // Disable I2C master
 8002f52:	2100      	movs	r1, #0
 8002f54:	2024      	movs	r0, #36	; 0x24
 8002f56:	f7ff fd4d 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	206a      	movs	r0, #106	; 0x6a
 8002f5e:	f7ff fd49 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8002f62:	210c      	movs	r1, #12
 8002f64:	206a      	movs	r0, #106	; 0x6a
 8002f66:	f7ff fd45 	bl	80029f4 <mpu9250_WriteReg>
    HAL_Delay(15);
 8002f6a:	200f      	movs	r0, #15
 8002f6c:	f000 ff3e 	bl	8003dec <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    mpu9250_WriteReg(MPUREG_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8002f70:	2101      	movs	r1, #1
 8002f72:	201a      	movs	r0, #26
 8002f74:	f7ff fd3e 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2019      	movs	r0, #25
 8002f7c:	f7ff fd3a 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8002f80:	2100      	movs	r1, #0
 8002f82:	201b      	movs	r0, #27
 8002f84:	f7ff fd36 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8002f88:	2100      	movs	r1, #0
 8002f8a:	201c      	movs	r0, #28
 8002f8c:	f7ff fd32 	bl	80029f4 <mpu9250_WriteReg>

    uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002f90:	2383      	movs	r3, #131	; 0x83
 8002f92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8002f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f9a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    mpu9250_WriteReg(MPUREG_USER_CTRL, 0x40);   // Enable FIFO
 8002f9e:	2140      	movs	r1, #64	; 0x40
 8002fa0:	206a      	movs	r0, #106	; 0x6a
 8002fa2:	f7ff fd27 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8002fa6:	2178      	movs	r1, #120	; 0x78
 8002fa8:	2023      	movs	r0, #35	; 0x23
 8002faa:	f7ff fd23 	bl	80029f4 <mpu9250_WriteReg>
    HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8002fae:	2028      	movs	r0, #40	; 0x28
 8002fb0:	f000 ff1c 	bl	8003dec <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    mpu9250_WriteReg(MPUREG_FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2023      	movs	r0, #35	; 0x23
 8002fb8:	f7ff fd1c 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_ReadRegs(MPUREG_FIFO_COUNTH, data, 2); // read FIFO sample count
 8002fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	2072      	movs	r0, #114	; 0x72
 8002fc6:	f7ff fd45 	bl	8002a54 <mpu9250_ReadRegs>
    fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8002fca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	b21a      	sxth	r2, r3
 8002fd2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8002fe0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002fe4:	4abf      	ldr	r2, [pc, #764]	; (80032e4 <mpu9250_calibrate+0x3f0>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	08db      	lsrs	r3, r3, #3
 8002fec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    for (ii = 0; ii < packet_count; ii++) {
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ff6:	e071      	b.n	80030dc <mpu9250_calibrate+0x1e8>
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	82bb      	strh	r3, [r7, #20]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	82fb      	strh	r3, [r7, #22]
 8003000:	2300      	movs	r3, #0
 8003002:	833b      	strh	r3, [r7, #24]
 8003004:	2300      	movs	r3, #0
 8003006:	81bb      	strh	r3, [r7, #12]
 8003008:	2300      	movs	r3, #0
 800300a:	81fb      	strh	r3, [r7, #14]
 800300c:	2300      	movs	r3, #0
 800300e:	823b      	strh	r3, [r7, #16]
        mpu9250_ReadRegs(MPUREG_FIFO_R_W, data, 12); // read data for averaging
 8003010:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003014:	220c      	movs	r2, #12
 8003016:	4619      	mov	r1, r3
 8003018:	2074      	movs	r0, #116	; 0x74
 800301a:	f7ff fd1b 	bl	8002a54 <mpu9250_ReadRegs>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 800301e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	b21a      	sxth	r2, r3
 8003026:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800302a:	b21b      	sxth	r3, r3
 800302c:	4313      	orrs	r3, r2
 800302e:	b21b      	sxth	r3, r3
 8003030:	82bb      	strh	r3, [r7, #20]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8003032:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	b21a      	sxth	r2, r3
 800303a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800303e:	b21b      	sxth	r3, r3
 8003040:	4313      	orrs	r3, r2
 8003042:	b21b      	sxth	r3, r3
 8003044:	82fb      	strh	r3, [r7, #22]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8003046:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	b21a      	sxth	r2, r3
 800304e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003052:	b21b      	sxth	r3, r3
 8003054:	4313      	orrs	r3, r2
 8003056:	b21b      	sxth	r3, r3
 8003058:	833b      	strh	r3, [r7, #24]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800305a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	b21a      	sxth	r2, r3
 8003062:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003066:	b21b      	sxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b21b      	sxth	r3, r3
 800306c:	81bb      	strh	r3, [r7, #12]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800306e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	b21a      	sxth	r2, r3
 8003076:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800307a:	b21b      	sxth	r3, r3
 800307c:	4313      	orrs	r3, r2
 800307e:	b21b      	sxth	r3, r3
 8003080:	81fb      	strh	r3, [r7, #14]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8003082:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800308e:	b21b      	sxth	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	b21b      	sxth	r3, r3
 8003094:	823b      	strh	r3, [r7, #16]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800309c:	4413      	add	r3, r2
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
        accel_bias[1] += (int32_t) accel_temp[1];
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030a6:	4413      	add	r3, r2
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30
        accel_bias[2] += (int32_t) accel_temp[2];
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	63bb      	str	r3, [r7, #56]	; 0x38
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 80030be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80030c4:	4413      	add	r3, r2
 80030c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 80030c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
    for (ii = 0; ii < packet_count; ii++) {
 80030d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80030d6:	3301      	adds	r3, #1
 80030d8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80030dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80030e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d387      	bcc.n	8002ff8 <mpu9250_calibrate+0x104>

    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80030e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80030ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 80030f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80030fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 8003100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003102:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003106:	fb92 f3f3 	sdiv	r3, r2, r3
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 800310c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003112:	fb92 f3f3 	sdiv	r3, r2, r3
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 8003118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800311a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800311e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 8003124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003126:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800312a:	fb92 f3f3 	sdiv	r3, r2, r3
 800312e:	643b      	str	r3, [r7, #64]	; 0x40

    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	2b00      	cmp	r3, #0
 8003134:	dd05      	ble.n	8003142 <mpu9250_calibrate+0x24e>
 8003136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003138:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
 8003140:	e004      	b.n	800314c <mpu9250_calibrate+0x258>
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 8003142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003144:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003148:	4413      	add	r3, r2
 800314a:	637b      	str	r3, [r7, #52]	; 0x34

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	425b      	negs	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	da00      	bge.n	8003156 <mpu9250_calibrate+0x262>
 8003154:	3303      	adds	r3, #3
 8003156:	109b      	asrs	r3, r3, #2
 8003158:	121b      	asrs	r3, r3, #8
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8003160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003162:	425b      	negs	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	da00      	bge.n	800316a <mpu9250_calibrate+0x276>
 8003168:	3303      	adds	r3, #3
 800316a:	109b      	asrs	r3, r3, #2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	425b      	negs	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	da00      	bge.n	800317c <mpu9250_calibrate+0x288>
 800317a:	3303      	adds	r3, #3
 800317c:	109b      	asrs	r3, r3, #2
 800317e:	121b      	asrs	r3, r3, #8
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	425b      	negs	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	da00      	bge.n	8003190 <mpu9250_calibrate+0x29c>
 800318e:	3303      	adds	r3, #3
 8003190:	109b      	asrs	r3, r3, #2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	425b      	negs	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	da00      	bge.n	80031a2 <mpu9250_calibrate+0x2ae>
 80031a0:	3303      	adds	r3, #3
 80031a2:	109b      	asrs	r3, r3, #2
 80031a4:	121b      	asrs	r3, r3, #8
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    data[5] = (-gyro_bias[2]/4)       & 0xFF;
 80031ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ae:	425b      	negs	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da00      	bge.n	80031b6 <mpu9250_calibrate+0x2c2>
 80031b4:	3303      	adds	r3, #3
 80031b6:	109b      	asrs	r3, r3, #2
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

    // Push gyro biases to hardware registers
    mpu9250_WriteReg(MPUREG_XG_OFFS_USRH, data[0]);
 80031be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80031c2:	4619      	mov	r1, r3
 80031c4:	2013      	movs	r0, #19
 80031c6:	f7ff fc15 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_XG_OFFS_USRL, data[1]);
 80031ca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80031ce:	4619      	mov	r1, r3
 80031d0:	2014      	movs	r0, #20
 80031d2:	f7ff fc0f 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_YG_OFFS_USRH, data[2]);
 80031d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80031da:	4619      	mov	r1, r3
 80031dc:	2015      	movs	r0, #21
 80031de:	f7ff fc09 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_YG_OFFS_USRL, data[3]);
 80031e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031e6:	4619      	mov	r1, r3
 80031e8:	2016      	movs	r0, #22
 80031ea:	f7ff fc03 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_ZG_OFFS_USRH, data[4]);
 80031ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031f2:	4619      	mov	r1, r3
 80031f4:	2017      	movs	r0, #23
 80031f6:	f7ff fbfd 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_ZG_OFFS_USRL, data[5]);
 80031fa:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80031fe:	4619      	mov	r1, r3
 8003200:	2018      	movs	r0, #24
 8003202:	f7ff fbf7 	bl	80029f4 <mpu9250_WriteReg>

    // Output scaled gyro biases for display in the main program
    dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003210:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800321c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edc3 7a00 	vstr	s15, [r3]
    dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8003226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003230:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003244:	edc3 7a00 	vstr	s15, [r3]
    dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8003248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003252:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3308      	adds	r3, #8
 8003262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003266:	edc3 7a00 	vstr	s15, [r3]
    // factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
    // non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
    // compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
    // the accelerometer biases calculated above must be divided by 8.

    int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	2300      	movs	r3, #0
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
    mpu9250_ReadRegs(MPUREG_XA_OFFSET_H, data, 2); // Read factory accelerometer trim values
 8003276:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800327a:	2202      	movs	r2, #2
 800327c:	4619      	mov	r1, r3
 800327e:	2077      	movs	r0, #119	; 0x77
 8003280:	f7ff fbe8 	bl	8002a54 <mpu9250_ReadRegs>
    accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003284:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800328e:	4313      	orrs	r3, r2
 8003290:	623b      	str	r3, [r7, #32]
    mpu9250_ReadRegs(MPUREG_YA_OFFSET_H, data, 2);
 8003292:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003296:	2202      	movs	r2, #2
 8003298:	4619      	mov	r1, r3
 800329a:	207a      	movs	r0, #122	; 0x7a
 800329c:	f7ff fbda 	bl	8002a54 <mpu9250_ReadRegs>
    accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80032a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032aa:	4313      	orrs	r3, r2
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
    mpu9250_ReadRegs(MPUREG_ZA_OFFSET_H, data, 2);
 80032ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032b2:	2202      	movs	r2, #2
 80032b4:	4619      	mov	r1, r3
 80032b6:	207d      	movs	r0, #125	; 0x7d
 80032b8:	f7ff fbcc 	bl	8002a54 <mpu9250_ReadRegs>
    accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80032bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032c6:	4313      	orrs	r3, r2
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28

    uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80032ca:	2301      	movs	r3, #1
 80032cc:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80032ce:	2300      	movs	r3, #0
 80032d0:	773b      	strb	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	777b      	strb	r3, [r7, #29]
 80032d6:	2300      	movs	r3, #0
 80032d8:	77bb      	strb	r3, [r7, #30]

    for(ii = 0; ii < 3; ii++) {
 80032da:	2300      	movs	r3, #0
 80032dc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80032e0:	e01c      	b.n	800331c <mpu9250_calibrate+0x428>
 80032e2:	bf00      	nop
 80032e4:	aaaaaaab 	.word	0xaaaaaaab
      if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80032e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032f2:	4413      	add	r3, r2
 80032f4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80032f8:	461a      	mov	r2, r3
 80032fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <mpu9250_calibrate+0x41e>
 8003302:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003306:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800330a:	4413      	add	r3, r2
 800330c:	2201      	movs	r2, #1
 800330e:	f803 2c44 	strb.w	r2, [r3, #-68]
    for(ii = 0; ii < 3; ii++) {
 8003312:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003316:	3301      	adds	r3, #1
 8003318:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800331c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003320:	2b02      	cmp	r3, #2
 8003322:	d9e1      	bls.n	80032e8 <mpu9250_calibrate+0x3f4>
    }

    // Construct total accelerometer bias, including calculated average accelerometer bias from above
    accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	da00      	bge.n	800332e <mpu9250_calibrate+0x43a>
 800332c:	3307      	adds	r3, #7
 800332e:	10db      	asrs	r3, r3, #3
 8003330:	425b      	negs	r3, r3
 8003332:	4413      	add	r3, r2
 8003334:	623b      	str	r3, [r7, #32]
    accel_bias_reg[1] -= (accel_bias[1]/8);
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	2b00      	cmp	r3, #0
 800333c:	da00      	bge.n	8003340 <mpu9250_calibrate+0x44c>
 800333e:	3307      	adds	r3, #7
 8003340:	10db      	asrs	r3, r3, #3
 8003342:	425b      	negs	r3, r3
 8003344:	4413      	add	r3, r2
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias_reg[2] -= (accel_bias[2]/8);
 8003348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800334a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334c:	2b00      	cmp	r3, #0
 800334e:	da00      	bge.n	8003352 <mpu9250_calibrate+0x45e>
 8003350:	3307      	adds	r3, #7
 8003352:	10db      	asrs	r3, r3, #3
 8003354:	425b      	negs	r3, r3
 8003356:	4413      	add	r3, r2
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28

    data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	121b      	asrs	r3, r3, #8
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    data[1] = (accel_bias_reg[0])      & 0xFF;
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800336c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003370:	7f3b      	ldrb	r3, [r7, #28]
 8003372:	4313      	orrs	r3, r2
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	121b      	asrs	r3, r3, #8
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    data[3] = (accel_bias_reg[1])      & 0xFF;
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800338c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003390:	7f7b      	ldrb	r3, [r7, #29]
 8003392:	4313      	orrs	r3, r2
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	121b      	asrs	r3, r3, #8
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    data[5] = (accel_bias_reg[2])      & 0xFF;
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80033ac:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80033b0:	7fbb      	ldrb	r3, [r7, #30]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
    mpu9250_WriteReg(MPUREG_XA_OFFSET_H, data[0]);
 80033ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80033be:	4619      	mov	r1, r3
 80033c0:	2077      	movs	r0, #119	; 0x77
 80033c2:	f7ff fb17 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_XA_OFFSET_L, data[1]);
 80033c6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80033ca:	4619      	mov	r1, r3
 80033cc:	2078      	movs	r0, #120	; 0x78
 80033ce:	f7ff fb11 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_YA_OFFSET_H, data[2]);
 80033d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80033d6:	4619      	mov	r1, r3
 80033d8:	207a      	movs	r0, #122	; 0x7a
 80033da:	f7ff fb0b 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_YA_OFFSET_L, data[3]);
 80033de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033e2:	4619      	mov	r1, r3
 80033e4:	207b      	movs	r0, #123	; 0x7b
 80033e6:	f7ff fb05 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_ZA_OFFSET_H, data[4]);
 80033ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80033ee:	4619      	mov	r1, r3
 80033f0:	207d      	movs	r0, #125	; 0x7d
 80033f2:	f7ff faff 	bl	80029f4 <mpu9250_WriteReg>
    mpu9250_WriteReg(MPUREG_ZA_OFFSET_L, data[5]);
 80033f6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80033fa:	4619      	mov	r1, r3
 80033fc:	207e      	movs	r0, #126	; 0x7e
 80033fe:	f7ff faf9 	bl	80029f4 <mpu9250_WriteReg>

// Output scaled accelerometer biases for display in the main program
    dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800340c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	edc3 7a00 	vstr	s15, [r3]
    dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800342c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	3304      	adds	r3, #4
 800343c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003440:	edc3 7a00 	vstr	s15, [r3]
    dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800344e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003462:	edc3 7a00 	vstr	s15, [r3]
}
 8003466:	bf00      	nop
 8003468:	3760      	adds	r7, #96	; 0x60
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop

08003470 <mpu9250_select>:

void mpu9250_select() {
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
    //Set CS low to start transmission (interrupts conversion)
#ifdef CORE_TEENSY
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,0);
#else
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,0);
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800347a:	4802      	ldr	r0, [pc, #8]	; (8003484 <mpu9250_select+0x14>)
 800347c:	f002 fad4 	bl	8005a28 <HAL_GPIO_WritePin>
#endif
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40020400 	.word	0x40020400

08003488 <mpu9250_deselect>:

void mpu9250_deselect() {
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
    //Set CS high to stop transmission (restarts conversion)
#ifdef CORE_TEENSY
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,1);
#else
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,1);
 800348c:	2201      	movs	r2, #1
 800348e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003492:	4802      	ldr	r0, [pc, #8]	; (800349c <mpu9250_deselect+0x14>)
 8003494:	f002 fac8 	bl	8005a28 <HAL_GPIO_WritePin>
#endif
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40020400 	.word	0x40020400

080034a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80034a4:	4b17      	ldr	r3, [pc, #92]	; (8003504 <MX_SPI2_Init+0x64>)
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <MX_SPI2_Init+0x68>)
 80034a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034aa:	4b16      	ldr	r3, [pc, #88]	; (8003504 <MX_SPI2_Init+0x64>)
 80034ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <MX_SPI2_Init+0x64>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <MX_SPI2_Init+0x64>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <MX_SPI2_Init+0x64>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_SPI2_Init+0x64>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <MX_SPI2_Init+0x64>)
 80034cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <MX_SPI2_Init+0x64>)
 80034d4:	2228      	movs	r2, #40	; 0x28
 80034d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <MX_SPI2_Init+0x64>)
 80034da:	2200      	movs	r2, #0
 80034dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <MX_SPI2_Init+0x64>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <MX_SPI2_Init+0x64>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_SPI2_Init+0x64>)
 80034ec:	220a      	movs	r2, #10
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <MX_SPI2_Init+0x64>)
 80034f2:	f003 f845 	bl	8006580 <HAL_SPI_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80034fc:	f7ff f974 	bl	80027e8 <Error_Handler>
  }

}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200003f8 	.word	0x200003f8
 8003508:	40003800 	.word	0x40003800

0800350c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_SPI_MspInit+0x84>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d12c      	bne.n	8003588 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_SPI_MspInit+0x88>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_SPI_MspInit+0x88>)
 8003538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_SPI_MspInit+0x88>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_SPI_MspInit+0x88>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <HAL_SPI_MspInit+0x88>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	6313      	str	r3, [r2, #48]	; 0x30
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_SPI_MspInit+0x88>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003566:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800356a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003574:	2303      	movs	r3, #3
 8003576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003578:	2305      	movs	r3, #5
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	4619      	mov	r1, r3
 8003582:	4805      	ldr	r0, [pc, #20]	; (8003598 <HAL_SPI_MspInit+0x8c>)
 8003584:	f002 f8be 	bl	8005704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003588:	bf00      	nop
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40003800 	.word	0x40003800
 8003594:	40023800 	.word	0x40023800
 8003598:	40020400 	.word	0x40020400

0800359c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_MspInit+0x58>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <HAL_MspInit+0x58>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_MspInit+0x58>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_MspInit+0x58>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <HAL_MspInit+0x58>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_MspInit+0x58>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2105      	movs	r1, #5
 80035de:	2001      	movs	r0, #1
 80035e0:	f001 fb93 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80035e4:	2001      	movs	r0, #1
 80035e6:	f001 fbac 	bl	8004d42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800

080035f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800360a:	e7fe      	b.n	800360a <HardFault_Handler+0x4>

0800360c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <MemManage_Handler+0x4>

08003612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003616:	e7fe      	b.n	8003616 <BusFault_Handler+0x4>

08003618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800361c:	e7fe      	b.n	800361c <UsageFault_Handler+0x4>

0800361e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800364c:	f000 fbae 	bl	8003dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}

08003654 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003658:	f002 fa64 	bl	8005b24 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}

08003660 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <DMA1_Stream5_IRQHandler+0x10>)
 8003666:	f001 fde5 	bl	8005234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000490 	.word	0x20000490

08003674 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <DMA1_Stream6_IRQHandler+0x10>)
 800367a:	f001 fddb 	bl	8005234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000530 	.word	0x20000530

08003688 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <CAN1_TX_IRQHandler+0x10>)
 800368e:	f001 f837 	bl	8004700 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000214 	.word	0x20000214

0800369c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <CAN1_RX0_IRQHandler+0x10>)
 80036a2:	f001 f82d 	bl	8004700 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000214 	.word	0x20000214

080036b0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80036b4:	4802      	ldr	r0, [pc, #8]	; (80036c0 <CAN1_RX1_IRQHandler+0x10>)
 80036b6:	f001 f823 	bl	8004700 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000214 	.word	0x20000214

080036c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80036c8:	4803      	ldr	r0, [pc, #12]	; (80036d8 <TIM6_DAC_IRQHandler+0x14>)
 80036ca:	f001 fbdc 	bl	8004e86 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80036ce:	4803      	ldr	r0, [pc, #12]	; (80036dc <TIM6_DAC_IRQHandler+0x18>)
 80036d0:	f003 fa57 	bl	8006b82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000398 	.word	0x20000398
 80036dc:	20000450 	.word	0x20000450

080036e0 <_read>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e00a      	b.n	8003708 <_read+0x28>
 80036f2:	f3af 8000 	nop.w
 80036f6:	4601      	mov	r1, r0
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	60ba      	str	r2, [r7, #8]
 80036fe:	b2ca      	uxtb	r2, r1
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	dbf0      	blt.n	80036f2 <_read+0x12>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_write>:
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e009      	b.n	8003740 <_write+0x26>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	60ba      	str	r2, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fed7 	bl	80014e8 <__io_putchar>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	dbf1      	blt.n	800372c <_write+0x12>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_close>:
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_fstat>:
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	2300      	movs	r3, #0
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <_isatty>:
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	2301      	movs	r3, #1
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_lseek>:
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	2300      	movs	r3, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <_sbrk>:
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <_sbrk+0x5c>)
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <_sbrk+0x60>)
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <_sbrk+0x22>
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <_sbrk+0x64>)
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <_sbrk+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d207      	bcs.n	80037fc <_sbrk+0x40>
 80037ec:	f004 fa2a 	bl	8007c44 <__errno>
 80037f0:	4602      	mov	r2, r0
 80037f2:	230c      	movs	r3, #12
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	e009      	b.n	8003810 <_sbrk+0x54>
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <_sbrk+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	4a05      	ldr	r2, [pc, #20]	; (8003820 <_sbrk+0x64>)
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20020000 	.word	0x20020000
 800381c:	00000400 	.word	0x00000400
 8003820:	200001fc 	.word	0x200001fc
 8003824:	20000618 	.word	0x20000618

08003828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <SystemInit+0x28>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	4a07      	ldr	r2, [pc, #28]	; (8003850 <SystemInit+0x28>)
 8003834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <SystemInit+0x28>)
 800383e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003842:	609a      	str	r2, [r3, #8]
#endif
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385a:	463b      	mov	r3, r7
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <MX_TIM6_Init+0x64>)
 8003864:	4a15      	ldr	r2, [pc, #84]	; (80038bc <MX_TIM6_Init+0x68>)
 8003866:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <MX_TIM6_Init+0x64>)
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <MX_TIM6_Init+0x64>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <MX_TIM6_Init+0x64>)
 8003876:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800387a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <MX_TIM6_Init+0x64>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003882:	480d      	ldr	r0, [pc, #52]	; (80038b8 <MX_TIM6_Init+0x64>)
 8003884:	f003 f92e 	bl	8006ae4 <HAL_TIM_Base_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800388e:	f7fe ffab 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800389a:	463b      	mov	r3, r7
 800389c:	4619      	mov	r1, r3
 800389e:	4806      	ldr	r0, [pc, #24]	; (80038b8 <MX_TIM6_Init+0x64>)
 80038a0:	f003 fb40 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80038aa:	f7fe ff9d 	bl	80027e8 <Error_Handler>
  }

}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000450 	.word	0x20000450
 80038bc:	40001000 	.word	0x40001000

080038c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_TIM_Base_MspInit+0x48>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d115      	bne.n	80038fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_TIM_Base_MspInit+0x4c>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a0c      	ldr	r2, [pc, #48]	; (800390c <HAL_TIM_Base_MspInit+0x4c>)
 80038dc:	f043 0310 	orr.w	r3, r3, #16
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_TIM_Base_MspInit+0x4c>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2104      	movs	r1, #4
 80038f2:	2036      	movs	r0, #54	; 0x36
 80038f4:	f001 fa09 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038f8:	2036      	movs	r0, #54	; 0x36
 80038fa:	f001 fa22 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40001000 	.word	0x40001000
 800390c:	40023800 	.word	0x40023800

08003910 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <MX_USART1_UART_Init+0x4c>)
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <MX_USART1_UART_Init+0x50>)
 8003918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <MX_USART1_UART_Init+0x4c>)
 800391c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <MX_USART1_UART_Init+0x4c>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <MX_USART1_UART_Init+0x4c>)
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <MX_USART1_UART_Init+0x4c>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <MX_USART1_UART_Init+0x4c>)
 8003936:	220c      	movs	r2, #12
 8003938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <MX_USART1_UART_Init+0x4c>)
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <MX_USART1_UART_Init+0x4c>)
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003946:	4805      	ldr	r0, [pc, #20]	; (800395c <MX_USART1_UART_Init+0x4c>)
 8003948:	f003 fb7c 	bl	8007044 <HAL_UART_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003952:	f7fe ff49 	bl	80027e8 <Error_Handler>
  }

}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000590 	.word	0x20000590
 8003960:	40011000 	.word	0x40011000

08003964 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <MX_USART2_UART_Init+0x50>)
 800396c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 8003970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 800398a:	220c      	movs	r2, #12
 800398c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800399a:	4805      	ldr	r0, [pc, #20]	; (80039b0 <MX_USART2_UART_Init+0x4c>)
 800399c:	f003 fb52 	bl	8007044 <HAL_UART_Init>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039a6:	f7fe ff1f 	bl	80027e8 <Error_Handler>
  }

}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200005d0 	.word	0x200005d0
 80039b4:	40004400 	.word	0x40004400

080039b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <MX_USART3_UART_Init+0x50>)
 80039c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039de:	220c      	movs	r2, #12
 80039e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039ee:	4805      	ldr	r0, [pc, #20]	; (8003a04 <MX_USART3_UART_Init+0x4c>)
 80039f0:	f003 fb28 	bl	8007044 <HAL_UART_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80039fa:	f7fe fef5 	bl	80027e8 <Error_Handler>
  }

}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200004f0 	.word	0x200004f0
 8003a08:	40004800 	.word	0x40004800

08003a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	; 0x38
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a8a      	ldr	r2, [pc, #552]	; (8003c54 <HAL_UART_MspInit+0x248>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d12d      	bne.n	8003a8a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	4b89      	ldr	r3, [pc, #548]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	4a88      	ldr	r2, [pc, #544]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003a38:	f043 0310 	orr.w	r3, r3, #16
 8003a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3e:	4b86      	ldr	r3, [pc, #536]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	4b82      	ldr	r3, [pc, #520]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a81      	ldr	r2, [pc, #516]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a78:	2307      	movs	r3, #7
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a80:	4619      	mov	r1, r3
 8003a82:	4876      	ldr	r0, [pc, #472]	; (8003c5c <HAL_UART_MspInit+0x250>)
 8003a84:	f001 fe3e 	bl	8005704 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a88:	e0e0      	b.n	8003c4c <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a74      	ldr	r2, [pc, #464]	; (8003c60 <HAL_UART_MspInit+0x254>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	f040 808b 	bne.w	8003bac <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	4a6e      	ldr	r2, [pc, #440]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa6:	4b6c      	ldr	r3, [pc, #432]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	4b68      	ldr	r3, [pc, #416]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	4a67      	ldr	r2, [pc, #412]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac2:	4b65      	ldr	r3, [pc, #404]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ace:	230c      	movs	r3, #12
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ada:	2303      	movs	r3, #3
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ade:	2307      	movs	r3, #7
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	485c      	ldr	r0, [pc, #368]	; (8003c5c <HAL_UART_MspInit+0x250>)
 8003aea:	f001 fe0b 	bl	8005704 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003aee:	4b5d      	ldr	r3, [pc, #372]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003af0:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <HAL_UART_MspInit+0x25c>)
 8003af2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003af4:	4b5b      	ldr	r3, [pc, #364]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003afa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003afc:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b02:	4b58      	ldr	r3, [pc, #352]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b08:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b10:	4b54      	ldr	r3, [pc, #336]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b16:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003b1c:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b22:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b24:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b30:	484c      	ldr	r0, [pc, #304]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b32:	f001 fa79 	bl	8005028 <HAL_DMA_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8003b3c:	f7fe fe54 	bl	80027e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a48      	ldr	r2, [pc, #288]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34
 8003b46:	4a47      	ldr	r2, [pc, #284]	; (8003c64 <HAL_UART_MspInit+0x258>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003b4c:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b4e:	4a48      	ldr	r2, [pc, #288]	; (8003c70 <HAL_UART_MspInit+0x264>)
 8003b50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003b52:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b58:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b60:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b6e:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b74:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8003b7a:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b80:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b82:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b88:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b8e:	4837      	ldr	r0, [pc, #220]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003b90:	f001 fa4a 	bl	8005028 <HAL_DMA_Init>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_UART_MspInit+0x192>
      Error_Handler();
 8003b9a:	f7fe fe25 	bl	80027e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba4:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_UART_MspInit+0x260>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003baa:	e04f      	b.n	8003c4c <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART3)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a30      	ldr	r2, [pc, #192]	; (8003c74 <HAL_UART_MspInit+0x268>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d14a      	bne.n	8003c4c <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <HAL_UART_MspInit+0x24c>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c16:	2303      	movs	r3, #3
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c1a:	2307      	movs	r3, #7
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c22:	4619      	mov	r1, r3
 8003c24:	4814      	ldr	r0, [pc, #80]	; (8003c78 <HAL_UART_MspInit+0x26c>)
 8003c26:	f001 fd6d 	bl	8005704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c3c:	2307      	movs	r3, #7
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c44:	4619      	mov	r1, r3
 8003c46:	480d      	ldr	r0, [pc, #52]	; (8003c7c <HAL_UART_MspInit+0x270>)
 8003c48:	f001 fd5c 	bl	8005704 <HAL_GPIO_Init>
}
 8003c4c:	bf00      	nop
 8003c4e:	3738      	adds	r7, #56	; 0x38
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40011000 	.word	0x40011000
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40004400 	.word	0x40004400
 8003c64:	20000490 	.word	0x20000490
 8003c68:	40026088 	.word	0x40026088
 8003c6c:	20000530 	.word	0x20000530
 8003c70:	400260a0 	.word	0x400260a0
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40020800 	.word	0x40020800
 8003c7c:	40020400 	.word	0x40020400

08003c80 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	785b      	ldrb	r3, [r3, #1]
 8003c92:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	789b      	ldrb	r3, [r3, #2]
 8003c98:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	78db      	ldrb	r3, [r3, #3]
 8003c9e:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	ee07 3a90 	vmov	s15, r3
}
 8003ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <Reset_Handler>:
 8003cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cec <LoopFillZerobss+0x14>
 8003cb8:	2100      	movs	r1, #0
 8003cba:	e003      	b.n	8003cc4 <LoopCopyDataInit>

08003cbc <CopyDataInit>:
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <LoopFillZerobss+0x18>)
 8003cbe:	585b      	ldr	r3, [r3, r1]
 8003cc0:	5043      	str	r3, [r0, r1]
 8003cc2:	3104      	adds	r1, #4

08003cc4 <LoopCopyDataInit>:
 8003cc4:	480b      	ldr	r0, [pc, #44]	; (8003cf4 <LoopFillZerobss+0x1c>)
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <LoopFillZerobss+0x20>)
 8003cc8:	1842      	adds	r2, r0, r1
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3f6      	bcc.n	8003cbc <CopyDataInit>
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <LoopFillZerobss+0x24>)
 8003cd0:	e002      	b.n	8003cd8 <LoopFillZerobss>

08003cd2 <FillZerobss>:
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f842 3b04 	str.w	r3, [r2], #4

08003cd8 <LoopFillZerobss>:
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <LoopFillZerobss+0x28>)
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3f9      	bcc.n	8003cd2 <FillZerobss>
 8003cde:	f7ff fda3 	bl	8003828 <SystemInit>
 8003ce2:	f003 ffb5 	bl	8007c50 <__libc_init_array>
 8003ce6:	f7fd fc3f 	bl	8001568 <main>
 8003cea:	4770      	bx	lr
 8003cec:	20020000 	.word	0x20020000
 8003cf0:	0800b2b8 	.word	0x0800b2b8
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	200001e0 	.word	0x200001e0
 8003cfc:	200001e0 	.word	0x200001e0
 8003d00:	20000618 	.word	0x20000618

08003d04 <ADC_IRQHandler>:
 8003d04:	e7fe      	b.n	8003d04 <ADC_IRQHandler>
	...

08003d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_Init+0x40>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <HAL_Init+0x40>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_Init+0x40>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_Init+0x40>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d30:	2003      	movs	r0, #3
 8003d32:	f000 ffdf 	bl	8004cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f000 f808 	bl	8003d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d3c:	f7ff fc2e 	bl	800359c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00

08003d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_InitTick+0x54>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_InitTick+0x58>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fff7 	bl	8004d5e <HAL_SYSTICK_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00e      	b.n	8003d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d80a      	bhi.n	8003d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d80:	2200      	movs	r2, #0
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	f000 ffbf 	bl	8004d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d8c:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <HAL_InitTick+0x5c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000000 	.word	0x20000000
 8003da4:	20000008 	.word	0x20000008
 8003da8:	20000004 	.word	0x20000004

08003dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_IncTick+0x20>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_IncTick+0x24>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_IncTick+0x24>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000008 	.word	0x20000008
 8003dd0:	20000610 	.word	0x20000610

08003dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_GetTick+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000610 	.word	0x20000610

08003dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff ffee 	bl	8003dd4 <HAL_GetTick>
 8003df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d005      	beq.n	8003e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_Delay+0x40>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e12:	bf00      	nop
 8003e14:	f7ff ffde 	bl	8003dd4 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d8f7      	bhi.n	8003e14 <HAL_Delay+0x28>
  {
  }
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000008 	.word	0x20000008

08003e30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0ed      	b.n	800401e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd f928 	bl	80010a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0202 	bic.w	r2, r2, #2
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e64:	f7ff ffb6 	bl	8003dd4 <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e6a:	e012      	b.n	8003e92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e6c:	f7ff ffb2 	bl	8003dd4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b0a      	cmp	r3, #10
 8003e78:	d90b      	bls.n	8003e92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0c5      	b.n	800401e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e5      	bne.n	8003e6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb0:	f7ff ff90 	bl	8003dd4 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003eb6:	e012      	b.n	8003ede <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb8:	f7ff ff8c 	bl	8003dd4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b0a      	cmp	r3, #10
 8003ec4:	d90b      	bls.n	8003ede <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e09f      	b.n	800401e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0e5      	beq.n	8003eb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	7e1b      	ldrb	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7e5b      	ldrb	r3, [r3, #25]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d108      	bne.n	8003f30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7e9b      	ldrb	r3, [r3, #26]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d108      	bne.n	8003f5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0220 	orr.w	r2, r2, #32
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e007      	b.n	8003f6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0220 	bic.w	r2, r2, #32
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7edb      	ldrb	r3, [r3, #27]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0210 	bic.w	r2, r2, #16
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e007      	b.n	8003f94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0210 	orr.w	r2, r2, #16
 8003f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7f1b      	ldrb	r3, [r3, #28]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d108      	bne.n	8003fae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0208 	orr.w	r2, r2, #8
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e007      	b.n	8003fbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0208 	bic.w	r2, r2, #8
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7f5b      	ldrb	r3, [r3, #29]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0204 	orr.w	r2, r2, #4
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e007      	b.n	8003fe8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0204 	bic.w	r2, r2, #4
 8003fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	ea42 0103 	orr.w	r1, r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	1e5a      	subs	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d003      	beq.n	800404e <HAL_CAN_ConfigFilter+0x26>
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b02      	cmp	r3, #2
 800404a:	f040 80be 	bne.w	80041ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004050:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004068:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	431a      	orrs	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43db      	mvns	r3, r3
 80040a0:	401a      	ands	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d123      	bne.n	80040f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3248      	adds	r2, #72	; 0x48
 80040d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ee:	6979      	ldr	r1, [r7, #20]
 80040f0:	3348      	adds	r3, #72	; 0x48
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	440b      	add	r3, r1
 80040f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d122      	bne.n	8004146 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	431a      	orrs	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004120:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3248      	adds	r2, #72	; 0x48
 8004126:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800413a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	3348      	adds	r3, #72	; 0x48
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	43db      	mvns	r3, r3
 8004158:	401a      	ands	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004160:	e007      	b.n	8004172 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	431a      	orrs	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	401a      	ands	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800418c:	e007      	b.n	800419e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	431a      	orrs	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041bc:	f023 0201 	bic.w	r2, r3, #1
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e006      	b.n	80041d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40006400 	.word	0x40006400

080041e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d12e      	bne.n	800425a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004214:	f7ff fdde 	bl	8003dd4 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800421a:	e012      	b.n	8004242 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800421c:	f7ff fdda 	bl	8003dd4 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b0a      	cmp	r3, #10
 8004228:	d90b      	bls.n	8004242 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e012      	b.n	8004268 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e006      	b.n	8004268 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004284:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800428e:	7ffb      	ldrb	r3, [r7, #31]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d003      	beq.n	800429c <HAL_CAN_AddTxMessage+0x2c>
 8004294:	7ffb      	ldrb	r3, [r7, #31]
 8004296:	2b02      	cmp	r3, #2
 8004298:	f040 80b8 	bne.w	800440c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a0 	beq.w	80043fc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	0e1b      	lsrs	r3, r3, #24
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d907      	bls.n	80042dc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e09e      	b.n	800441a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042dc:	2201      	movs	r2, #1
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	409a      	lsls	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10d      	bne.n	800430a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	6809      	ldr	r1, [r1, #0]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	3318      	adds	r3, #24
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	440b      	add	r3, r1
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	e00f      	b.n	800432a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004314:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800431e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3318      	adds	r3, #24
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	440b      	add	r3, r1
 8004328:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	3318      	adds	r3, #24
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	440b      	add	r3, r1
 800433a:	3304      	adds	r3, #4
 800433c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	7d1b      	ldrb	r3, [r3, #20]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d111      	bne.n	800436a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	3318      	adds	r3, #24
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	4413      	add	r3, r2
 8004352:	3304      	adds	r3, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	6811      	ldr	r1, [r2, #0]
 800435a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3318      	adds	r3, #24
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	440b      	add	r3, r1
 8004366:	3304      	adds	r3, #4
 8004368:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3307      	adds	r3, #7
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	061a      	lsls	r2, r3, #24
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3306      	adds	r3, #6
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3305      	adds	r3, #5
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	4313      	orrs	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	3204      	adds	r2, #4
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	4610      	mov	r0, r2
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	6811      	ldr	r1, [r2, #0]
 8004392:	ea43 0200 	orr.w	r2, r3, r0
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	440b      	add	r3, r1
 800439c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80043a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3303      	adds	r3, #3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	061a      	lsls	r2, r3, #24
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3302      	adds	r3, #2
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	4313      	orrs	r3, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	4610      	mov	r0, r2
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	6811      	ldr	r1, [r2, #0]
 80043c8:	ea43 0200 	orr.w	r2, r3, r0
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	440b      	add	r3, r1
 80043d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3318      	adds	r3, #24
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4413      	add	r3, r2
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	6811      	ldr	r1, [r2, #0]
 80043ea:	f043 0201 	orr.w	r2, r3, #1
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	3318      	adds	r3, #24
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	440b      	add	r3, r1
 80043f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e00e      	b.n	800441a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e006      	b.n	800441a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004438:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800443a:	7afb      	ldrb	r3, [r7, #11]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d002      	beq.n	8004446 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004440:	7afb      	ldrb	r3, [r7, #11]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d11d      	bne.n	8004482 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d003      	beq.n	80044b4 <HAL_CAN_GetRxMessage+0x24>
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f040 80f3 	bne.w	800469a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10e      	bne.n	80044d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0e7      	b.n	80046a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0d8      	b.n	80046a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	331b      	adds	r3, #27
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0204 	and.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10c      	bne.n	800452e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	331b      	adds	r3, #27
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	4413      	add	r3, r2
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0d5b      	lsrs	r3, r3, #21
 8004524:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e00b      	b.n	8004546 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	331b      	adds	r3, #27
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	331b      	adds	r3, #27
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0202 	and.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	331b      	adds	r3, #27
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	331b      	adds	r3, #27
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	4413      	add	r3, r2
 8004580:	3304      	adds	r3, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b2da      	uxtb	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	331b      	adds	r3, #27
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	0a1a      	lsrs	r2, r3, #8
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	4413      	add	r3, r2
 80045de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	0c1a      	lsrs	r2, r3, #16
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	3302      	adds	r3, #2
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0e1a      	lsrs	r2, r3, #24
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	3303      	adds	r3, #3
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	4413      	add	r3, r2
 800462a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	0a1a      	lsrs	r2, r3, #8
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	3305      	adds	r3, #5
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	4413      	add	r3, r2
 8004644:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0c1a      	lsrs	r2, r3, #16
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3306      	adds	r3, #6
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	4413      	add	r3, r2
 800465e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0e1a      	lsrs	r2, r3, #24
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	3307      	adds	r3, #7
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	e007      	b.n	8004696 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0220 	orr.w	r2, r2, #32
 8004694:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e006      	b.n	80046a8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d002      	beq.n	80046d2 <HAL_CAN_ActivateNotification+0x1e>
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d109      	bne.n	80046e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6959      	ldr	r1, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e006      	b.n	80046f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	; 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d07c      	beq.n	8004840 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d023      	beq.n	8004798 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f97d 	bl	8004a62 <HAL_CAN_TxMailbox0CompleteCallback>
 8004768:	e016      	b.n	8004798 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
 800477c:	e00c      	b.n	8004798 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	e002      	b.n	8004798 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f983 	bl	8004a9e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d024      	beq.n	80047ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f95d 	bl	8004a76 <HAL_CAN_TxMailbox1CompleteCallback>
 80047bc:	e016      	b.n	80047ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	e00c      	b.n	80047ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	e002      	b.n	80047ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f963 	bl	8004ab2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f93d 	bl	8004a8a <HAL_CAN_TxMailbox2CompleteCallback>
 8004810:	e016      	b.n	8004840 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
 8004824:	e00c      	b.n	8004840 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
 8004838:	e002      	b.n	8004840 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f943 	bl	8004ac6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800485a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d006      	beq.n	8004886 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f92a 	bl	8004ada <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc ffbe 	bl	8001820 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2210      	movs	r2, #16
 80048c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2208      	movs	r2, #8
 80048e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f90c 	bl	8004b02 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8f3 	bl	8004aee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d006      	beq.n	800492a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2210      	movs	r2, #16
 8004922:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8f6 	bl	8004b16 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2208      	movs	r2, #8
 8004944:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8ef 	bl	8004b2a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d075      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d06c      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f043 0302 	orr.w	r3, r3, #2
 8004996:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d03d      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d038      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049ce:	2b30      	cmp	r3, #48	; 0x30
 80049d0:	d017      	beq.n	8004a02 <HAL_CAN_IRQHandler+0x302>
 80049d2:	2b30      	cmp	r3, #48	; 0x30
 80049d4:	d804      	bhi.n	80049e0 <HAL_CAN_IRQHandler+0x2e0>
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d009      	beq.n	80049ee <HAL_CAN_IRQHandler+0x2ee>
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d00c      	beq.n	80049f8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049de:	e024      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d018      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x316>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d01b      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x320>
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d00f      	beq.n	8004a0c <HAL_CAN_IRQHandler+0x30c>
            break;
 80049ec:	e01d      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	f043 0308 	orr.w	r3, r3, #8
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049f6:	e018      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f043 0310 	orr.w	r3, r3, #16
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a00:	e013      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a0a:	e00e      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a14:	e009      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a1e:	e004      	b.n	8004a2a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a28:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a38:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f872 	bl	8004b3e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	3728      	adds	r7, #40	; 0x28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b70:	4013      	ands	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b86:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	60d3      	str	r3, [r2, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0307 	and.w	r3, r3, #7
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	db0b      	blt.n	8004be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	4907      	ldr	r1, [pc, #28]	; (8004bf0 <__NVIC_EnableIRQ+0x38>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2001      	movs	r0, #1
 8004bda:	fa00 f202 	lsl.w	r2, r0, r2
 8004bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e100 	.word	0xe000e100

08004bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	db0a      	blt.n	8004c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	490c      	ldr	r1, [pc, #48]	; (8004c40 <__NVIC_SetPriority+0x4c>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c1c:	e00a      	b.n	8004c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <__NVIC_SetPriority+0x50>)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	0112      	lsls	r2, r2, #4
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	440b      	add	r3, r1
 8004c32:	761a      	strb	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000e100 	.word	0xe000e100
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f1c3 0307 	rsb	r3, r3, #7
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	bf28      	it	cs
 8004c66:	2304      	movcs	r3, #4
 8004c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d902      	bls.n	8004c78 <NVIC_EncodePriority+0x30>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3b03      	subs	r3, #3
 8004c76:	e000      	b.n	8004c7a <NVIC_EncodePriority+0x32>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43da      	mvns	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c90:	f04f 31ff 	mov.w	r1, #4294967295
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	43d9      	mvns	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	4313      	orrs	r3, r2
         );
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3724      	adds	r7, #36	; 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc0:	d301      	bcc.n	8004cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00f      	b.n	8004ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <SysTick_Config+0x40>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cce:	210f      	movs	r1, #15
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	f7ff ff8e 	bl	8004bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <SysTick_Config+0x40>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <SysTick_Config+0x40>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010

08004cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff29 	bl	8004b54 <__NVIC_SetPriorityGrouping>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4603      	mov	r3, r0
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1c:	f7ff ff3e 	bl	8004b9c <__NVIC_GetPriorityGrouping>
 8004d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7ff ff8e 	bl	8004c48 <NVIC_EncodePriority>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff5d 	bl	8004bf4 <__NVIC_SetPriority>
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff31 	bl	8004bb8 <__NVIC_EnableIRQ>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ffa2 	bl	8004cb0 <SysTick_Config>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e014      	b.n	8004db2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	791b      	ldrb	r3, [r3, #4]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fc fa93 	bl	80012c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	795b      	ldrb	r3, [r3, #5]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_DAC_Start+0x1e>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e050      	b.n	8004e7a <HAL_DAC_Start+0xc0>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	409a      	lsls	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11a      	bne.n	8004e34 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e14:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d127      	bne.n	8004e6c <HAL_DAC_Start+0xb2>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b38      	cmp	r3, #56	; 0x38
 8004e20:	d124      	bne.n	8004e6c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	e01b      	b.n	8004e6c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004e4a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e52:	d10b      	bne.n	8004e6c <HAL_DAC_Start+0xb2>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004e5a:	d107      	bne.n	8004e6c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0202 	orr.w	r2, r2, #2
 8004e6a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9c:	d118      	bne.n	8004ed0 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eb8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f825 	bl	8004f1a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ede:	d118      	bne.n	8004f12 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f043 0202 	orr.w	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004efa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f880 	bl	8005012 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	795b      	ldrb	r3, [r3, #5]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_DAC_ConfigChannel+0x20>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e036      	b.n	8004fbc <HAL_DAC_ConfigChannel+0x8e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2202      	movs	r2, #2
 8004f58:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004f62:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4013      	ands	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	22c0      	movs	r2, #192	; 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	400a      	ands	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	3308      	adds	r3, #8
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e004      	b.n	8004ffc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	461a      	mov	r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005034:	f7fe fece 	bl	8003dd4 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e099      	b.n	8005178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005064:	e00f      	b.n	8005086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005066:	f7fe feb5 	bl	8003dd4 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b05      	cmp	r3, #5
 8005072:	d908      	bls.n	8005086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2203      	movs	r2, #3
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e078      	b.n	8005178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e8      	bne.n	8005066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4b38      	ldr	r3, [pc, #224]	; (8005180 <HAL_DMA_Init+0x158>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d107      	bne.n	80050f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	4313      	orrs	r3, r2
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0307 	bic.w	r3, r3, #7
 8005106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b04      	cmp	r3, #4
 8005118:	d117      	bne.n	800514a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00e      	beq.n	800514a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa6f 	bl	8005610 <DMA_CheckFifoParam>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2240      	movs	r2, #64	; 0x40
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005146:	2301      	movs	r3, #1
 8005148:	e016      	b.n	8005178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa26 	bl	80055a4 <DMA_CalcBaseAndBitshift>
 8005158:	4603      	mov	r3, r0
 800515a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005160:	223f      	movs	r2, #63	; 0x3f
 8005162:	409a      	lsls	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	f010803f 	.word	0xf010803f

08005184 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_DMA_Start_IT+0x26>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e040      	b.n	800522c <HAL_DMA_Start_IT+0xa8>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d12f      	bne.n	800521e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f9b8 	bl	8005548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	223f      	movs	r2, #63	; 0x3f
 80051de:	409a      	lsls	r2, r3
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0216 	orr.w	r2, r2, #22
 80051f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e005      	b.n	800522a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005226:	2302      	movs	r3, #2
 8005228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800522a:	7dfb      	ldrb	r3, [r7, #23]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005240:	4b92      	ldr	r3, [pc, #584]	; (800548c <HAL_DMA_IRQHandler+0x258>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a92      	ldr	r2, [pc, #584]	; (8005490 <HAL_DMA_IRQHandler+0x25c>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	0a9b      	lsrs	r3, r3, #10
 800524c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525e:	2208      	movs	r2, #8
 8005260:	409a      	lsls	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d013      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0204 	bic.w	r2, r2, #4
 8005286:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528c:	2208      	movs	r2, #8
 800528e:	409a      	lsls	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	f043 0201 	orr.w	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a4:	2201      	movs	r2, #1
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d012      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c2:	2201      	movs	r2, #1
 80052c4:	409a      	lsls	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f043 0202 	orr.w	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052da:	2204      	movs	r2, #4
 80052dc:	409a      	lsls	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d012      	beq.n	800530c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f8:	2204      	movs	r2, #4
 80052fa:	409a      	lsls	r2, r3
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f043 0204 	orr.w	r2, r3, #4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	2210      	movs	r2, #16
 8005312:	409a      	lsls	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d043      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d03c      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532e:	2210      	movs	r2, #16
 8005330:	409a      	lsls	r2, r3
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d018      	beq.n	8005376 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d108      	bne.n	8005364 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d024      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
 8005362:	e01f      	b.n	80053a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
 8005374:	e016      	b.n	80053a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d107      	bne.n	8005394 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0208 	bic.w	r2, r2, #8
 8005392:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a8:	2220      	movs	r2, #32
 80053aa:	409a      	lsls	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 808e 	beq.w	80054d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8086 	beq.w	80054d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ca:	2220      	movs	r2, #32
 80053cc:	409a      	lsls	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d136      	bne.n	800544c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0216 	bic.w	r2, r2, #22
 80053ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <HAL_DMA_IRQHandler+0x1da>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0208 	bic.w	r2, r2, #8
 800541c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	223f      	movs	r2, #63	; 0x3f
 8005424:	409a      	lsls	r2, r3
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543e:	2b00      	cmp	r3, #0
 8005440:	d07d      	beq.n	800553e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	4798      	blx	r3
        }
        return;
 800544a:	e078      	b.n	800553e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01c      	beq.n	8005494 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d108      	bne.n	800547a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	2b00      	cmp	r3, #0
 800546e:	d030      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
 8005478:	e02b      	b.n	80054d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d027      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
 800548a:	e022      	b.n	80054d2 <HAL_DMA_IRQHandler+0x29e>
 800548c:	20000000 	.word	0x20000000
 8005490:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0210 	bic.w	r2, r2, #16
 80054b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d032      	beq.n	8005540 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d022      	beq.n	800552c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2205      	movs	r2, #5
 80054ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3301      	adds	r3, #1
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	429a      	cmp	r2, r3
 8005508:	d307      	bcc.n	800551a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f2      	bne.n	80054fe <HAL_DMA_IRQHandler+0x2ca>
 8005518:	e000      	b.n	800551c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800551a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
 800553c:	e000      	b.n	8005540 <HAL_DMA_IRQHandler+0x30c>
        return;
 800553e:	bf00      	nop
    }
  }
}
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop

08005548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d108      	bne.n	8005588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005586:	e007      	b.n	8005598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3b10      	subs	r3, #16
 80055b4:	4a14      	ldr	r2, [pc, #80]	; (8005608 <DMA_CalcBaseAndBitshift+0x64>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055be:	4a13      	ldr	r2, [pc, #76]	; (800560c <DMA_CalcBaseAndBitshift+0x68>)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d909      	bls.n	80055e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055da:	f023 0303 	bic.w	r3, r3, #3
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	659a      	str	r2, [r3, #88]	; 0x58
 80055e4:	e007      	b.n	80055f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	aaaaaaab 	.word	0xaaaaaaab
 800560c:	0800afb8 	.word	0x0800afb8

08005610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11f      	bne.n	800566a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d855      	bhi.n	80056dc <DMA_CheckFifoParam+0xcc>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <DMA_CheckFifoParam+0x28>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	08005649 	.word	0x08005649
 800563c:	0800565b 	.word	0x0800565b
 8005640:	08005649 	.word	0x08005649
 8005644:	080056dd 	.word	0x080056dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d045      	beq.n	80056e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005658:	e042      	b.n	80056e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005662:	d13f      	bne.n	80056e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005668:	e03c      	b.n	80056e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005672:	d121      	bne.n	80056b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d836      	bhi.n	80056e8 <DMA_CheckFifoParam+0xd8>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <DMA_CheckFifoParam+0x70>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	08005691 	.word	0x08005691
 8005684:	08005697 	.word	0x08005697
 8005688:	08005691 	.word	0x08005691
 800568c:	080056a9 	.word	0x080056a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	e02f      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d024      	beq.n	80056ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a6:	e021      	b.n	80056ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b0:	d11e      	bne.n	80056f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056b6:	e01b      	b.n	80056f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d902      	bls.n	80056c4 <DMA_CheckFifoParam+0xb4>
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d003      	beq.n	80056ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056c2:	e018      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e015      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00e      	beq.n	80056f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e00b      	b.n	80056f4 <DMA_CheckFifoParam+0xe4>
      break;
 80056dc:	bf00      	nop
 80056de:	e00a      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      break;
 80056e0:	bf00      	nop
 80056e2:	e008      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      break;
 80056e4:	bf00      	nop
 80056e6:	e006      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      break;
 80056e8:	bf00      	nop
 80056ea:	e004      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      break;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
      break;
 80056f4:	bf00      	nop
    }
  } 
  
  return status; 
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e165      	b.n	80059ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005720:	2201      	movs	r2, #1
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	429a      	cmp	r2, r3
 800573a:	f040 8154 	bne.w	80059e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d00b      	beq.n	800575e <HAL_GPIO_Init+0x5a>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d007      	beq.n	800575e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005752:	2b11      	cmp	r3, #17
 8005754:	d003      	beq.n	800575e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b12      	cmp	r3, #18
 800575c:	d130      	bne.n	80057c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	2203      	movs	r2, #3
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005794:	2201      	movs	r2, #1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4013      	ands	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 0201 	and.w	r2, r3, #1
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	2203      	movs	r2, #3
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0xfc>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b12      	cmp	r3, #18
 80057fe:	d123      	bne.n	8005848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	08da      	lsrs	r2, r3, #3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3208      	adds	r2, #8
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	220f      	movs	r2, #15
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	08da      	lsrs	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3208      	adds	r2, #8
 8005842:	69b9      	ldr	r1, [r7, #24]
 8005844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	2203      	movs	r2, #3
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0203 	and.w	r2, r3, #3
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80ae 	beq.w	80059e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <HAL_GPIO_Init+0x2fc>)
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	4a5b      	ldr	r2, [pc, #364]	; (8005a00 <HAL_GPIO_Init+0x2fc>)
 8005894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005898:	6453      	str	r3, [r2, #68]	; 0x44
 800589a:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_GPIO_Init+0x2fc>)
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a6:	4a57      	ldr	r2, [pc, #348]	; (8005a04 <HAL_GPIO_Init+0x300>)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	3302      	adds	r3, #2
 80058ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	220f      	movs	r2, #15
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a4e      	ldr	r2, [pc, #312]	; (8005a08 <HAL_GPIO_Init+0x304>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d025      	beq.n	800591e <HAL_GPIO_Init+0x21a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a4d      	ldr	r2, [pc, #308]	; (8005a0c <HAL_GPIO_Init+0x308>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01f      	beq.n	800591a <HAL_GPIO_Init+0x216>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a4c      	ldr	r2, [pc, #304]	; (8005a10 <HAL_GPIO_Init+0x30c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d019      	beq.n	8005916 <HAL_GPIO_Init+0x212>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a4b      	ldr	r2, [pc, #300]	; (8005a14 <HAL_GPIO_Init+0x310>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_GPIO_Init+0x20e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a4a      	ldr	r2, [pc, #296]	; (8005a18 <HAL_GPIO_Init+0x314>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00d      	beq.n	800590e <HAL_GPIO_Init+0x20a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a49      	ldr	r2, [pc, #292]	; (8005a1c <HAL_GPIO_Init+0x318>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <HAL_GPIO_Init+0x206>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a48      	ldr	r2, [pc, #288]	; (8005a20 <HAL_GPIO_Init+0x31c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_GPIO_Init+0x202>
 8005902:	2306      	movs	r3, #6
 8005904:	e00c      	b.n	8005920 <HAL_GPIO_Init+0x21c>
 8005906:	2307      	movs	r3, #7
 8005908:	e00a      	b.n	8005920 <HAL_GPIO_Init+0x21c>
 800590a:	2305      	movs	r3, #5
 800590c:	e008      	b.n	8005920 <HAL_GPIO_Init+0x21c>
 800590e:	2304      	movs	r3, #4
 8005910:	e006      	b.n	8005920 <HAL_GPIO_Init+0x21c>
 8005912:	2303      	movs	r3, #3
 8005914:	e004      	b.n	8005920 <HAL_GPIO_Init+0x21c>
 8005916:	2302      	movs	r3, #2
 8005918:	e002      	b.n	8005920 <HAL_GPIO_Init+0x21c>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_GPIO_Init+0x21c>
 800591e:	2300      	movs	r3, #0
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f002 0203 	and.w	r2, r2, #3
 8005926:	0092      	lsls	r2, r2, #2
 8005928:	4093      	lsls	r3, r2
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005930:	4934      	ldr	r1, [pc, #208]	; (8005a04 <HAL_GPIO_Init+0x300>)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	089b      	lsrs	r3, r3, #2
 8005936:	3302      	adds	r3, #2
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800593e:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <HAL_GPIO_Init+0x320>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	43db      	mvns	r3, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4013      	ands	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005962:	4a30      	ldr	r2, [pc, #192]	; (8005a24 <HAL_GPIO_Init+0x320>)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005968:	4b2e      	ldr	r3, [pc, #184]	; (8005a24 <HAL_GPIO_Init+0x320>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800598c:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <HAL_GPIO_Init+0x320>)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005992:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <HAL_GPIO_Init+0x320>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059b6:	4a1b      	ldr	r2, [pc, #108]	; (8005a24 <HAL_GPIO_Init+0x320>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059bc:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <HAL_GPIO_Init+0x320>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e0:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <HAL_GPIO_Init+0x320>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	f67f ae96 	bls.w	8005720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059f4:	bf00      	nop
 80059f6:	3724      	adds	r7, #36	; 0x24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40013800 	.word	0x40013800
 8005a08:	40020000 	.word	0x40020000
 8005a0c:	40020400 	.word	0x40020400
 8005a10:	40020800 	.word	0x40020800
 8005a14:	40020c00 	.word	0x40020c00
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40021400 	.word	0x40021400
 8005a20:	40021800 	.word	0x40021800
 8005a24:	40013c00 	.word	0x40013c00

08005a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	807b      	strh	r3, [r7, #2]
 8005a34:	4613      	mov	r3, r2
 8005a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a38:	787b      	ldrb	r3, [r7, #1]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a3e:	887a      	ldrh	r2, [r7, #2]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a44:	e003      	b.n	8005a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a46:	887b      	ldrh	r3, [r7, #2]
 8005a48:	041a      	lsls	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	619a      	str	r2, [r3, #24]
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	401a      	ands	r2, r3
 8005a6e:	887b      	ldrh	r3, [r7, #2]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d104      	bne.n	8005a7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	041a      	lsls	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005a7c:	e002      	b.n	8005a84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	619a      	str	r2, [r3, #24]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e02b      	b.n	8005afa <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f245 5255 	movw	r2, #21845	; 0x5555
 8005ab4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6852      	ldr	r2, [r2, #4]
 8005abe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6892      	ldr	r2, [r2, #8]
 8005ac8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005aca:	f7fe f983 	bl	8003dd4 <HAL_GetTick>
 8005ace:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8005ad0:	e008      	b.n	8005ae4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005ad2:	f7fe f97f 	bl	8003dd4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	d901      	bls.n	8005ae4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e00a      	b.n	8005afa <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f1      	bne.n	8005ad2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005af6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005b34:	f000 f808 	bl	8005b48 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005b3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b3e:	615a      	str	r2, [r3, #20]
  }
}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40013c00 	.word	0x40013c00

08005b48 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0cc      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b6c:	4b68      	ldr	r3, [pc, #416]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d90c      	bls.n	8005b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7a:	4b65      	ldr	r3, [pc, #404]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b82:	4b63      	ldr	r3, [pc, #396]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0b8      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d020      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bac:	4b59      	ldr	r3, [pc, #356]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4a58      	ldr	r2, [pc, #352]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc4:	4b53      	ldr	r3, [pc, #332]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a52      	ldr	r2, [pc, #328]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd0:	4b50      	ldr	r3, [pc, #320]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	494d      	ldr	r1, [pc, #308]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d044      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d107      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf6:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d119      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e07f      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d107      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c16:	4b3f      	ldr	r3, [pc, #252]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e06f      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c26:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e067      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c36:	4b37      	ldr	r3, [pc, #220]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f023 0203 	bic.w	r2, r3, #3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4934      	ldr	r1, [pc, #208]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c48:	f7fe f8c4 	bl	8003dd4 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	e00a      	b.n	8005c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c50:	f7fe f8c0 	bl	8003dd4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e04f      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 020c 	and.w	r2, r3, #12
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d1eb      	bne.n	8005c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d20c      	bcs.n	8005ca0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e032      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4916      	ldr	r1, [pc, #88]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	490e      	ldr	r1, [pc, #56]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cde:	f000 f855 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	5cd3      	ldrb	r3, [r2, r3]
 8005cf2:	fa21 f303 	lsr.w	r3, r1, r3
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe f824 	bl	8003d4c <HAL_InitTick>

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40023c00 	.word	0x40023c00
 8005d14:	40023800 	.word	0x40023800
 8005d18:	0800afa0 	.word	0x0800afa0
 8005d1c:	20000000 	.word	0x20000000
 8005d20:	20000004 	.word	0x20000004

08005d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d28:	4b03      	ldr	r3, [pc, #12]	; (8005d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000000 	.word	0x20000000

08005d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d40:	f7ff fff0 	bl	8005d24 <HAL_RCC_GetHCLKFreq>
 8005d44:	4601      	mov	r1, r0
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	0a9b      	lsrs	r3, r3, #10
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	4a03      	ldr	r2, [pc, #12]	; (8005d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d52:	5cd3      	ldrb	r3, [r2, r3]
 8005d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0800afb0 	.word	0x0800afb0

08005d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d68:	f7ff ffdc 	bl	8005d24 <HAL_RCC_GetHCLKFreq>
 8005d6c:	4601      	mov	r1, r0
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	0b5b      	lsrs	r3, r3, #13
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	4a03      	ldr	r2, [pc, #12]	; (8005d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7a:	5cd3      	ldrb	r3, [r2, r3]
 8005d7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40023800 	.word	0x40023800
 8005d88:	0800afb0 	.word	0x0800afb0

08005d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005da6:	4bc6      	ldr	r3, [pc, #792]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	f200 817e 	bhi.w	80060b0 <HAL_RCC_GetSysClockFreq+0x324>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <HAL_RCC_GetSysClockFreq+0x30>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	080060b1 	.word	0x080060b1
 8005dc4:	080060b1 	.word	0x080060b1
 8005dc8:	080060b1 	.word	0x080060b1
 8005dcc:	08005df7 	.word	0x08005df7
 8005dd0:	080060b1 	.word	0x080060b1
 8005dd4:	080060b1 	.word	0x080060b1
 8005dd8:	080060b1 	.word	0x080060b1
 8005ddc:	08005dfd 	.word	0x08005dfd
 8005de0:	080060b1 	.word	0x080060b1
 8005de4:	080060b1 	.word	0x080060b1
 8005de8:	080060b1 	.word	0x080060b1
 8005dec:	08005f59 	.word	0x08005f59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005df0:	4bb4      	ldr	r3, [pc, #720]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x338>)
 8005df2:	613b      	str	r3, [r7, #16]
       break;
 8005df4:	e15f      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005df6:	4bb4      	ldr	r3, [pc, #720]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005df8:	613b      	str	r3, [r7, #16]
      break;
 8005dfa:	e15c      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dfc:	4bb0      	ldr	r3, [pc, #704]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e04:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e06:	4bae      	ldr	r3, [pc, #696]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04a      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e12:	4bab      	ldr	r3, [pc, #684]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	f04f 0400 	mov.w	r4, #0
 8005e1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	ea03 0501 	and.w	r5, r3, r1
 8005e28:	ea04 0602 	and.w	r6, r4, r2
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4632      	mov	r2, r6
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	f04f 0400 	mov.w	r4, #0
 8005e38:	0154      	lsls	r4, r2, #5
 8005e3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e3e:	014b      	lsls	r3, r1, #5
 8005e40:	4619      	mov	r1, r3
 8005e42:	4622      	mov	r2, r4
 8005e44:	1b49      	subs	r1, r1, r5
 8005e46:	eb62 0206 	sbc.w	r2, r2, r6
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	f04f 0400 	mov.w	r4, #0
 8005e52:	0194      	lsls	r4, r2, #6
 8005e54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e58:	018b      	lsls	r3, r1, #6
 8005e5a:	1a5b      	subs	r3, r3, r1
 8005e5c:	eb64 0402 	sbc.w	r4, r4, r2
 8005e60:	f04f 0100 	mov.w	r1, #0
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	00e2      	lsls	r2, r4, #3
 8005e6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e6e:	00d9      	lsls	r1, r3, #3
 8005e70:	460b      	mov	r3, r1
 8005e72:	4614      	mov	r4, r2
 8005e74:	195b      	adds	r3, r3, r5
 8005e76:	eb44 0406 	adc.w	r4, r4, r6
 8005e7a:	f04f 0100 	mov.w	r1, #0
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	0262      	lsls	r2, r4, #9
 8005e84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005e88:	0259      	lsls	r1, r3, #9
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	4621      	mov	r1, r4
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f04f 0400 	mov.w	r4, #0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	f7fa fef4 	bl	8000c88 <__aeabi_uldivmod>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e049      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ea8:	4b85      	ldr	r3, [pc, #532]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	099b      	lsrs	r3, r3, #6
 8005eae:	f04f 0400 	mov.w	r4, #0
 8005eb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	ea03 0501 	and.w	r5, r3, r1
 8005ebe:	ea04 0602 	and.w	r6, r4, r2
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	f04f 0400 	mov.w	r4, #0
 8005ece:	0154      	lsls	r4, r2, #5
 8005ed0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ed4:	014b      	lsls	r3, r1, #5
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4622      	mov	r2, r4
 8005eda:	1b49      	subs	r1, r1, r5
 8005edc:	eb62 0206 	sbc.w	r2, r2, r6
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	f04f 0400 	mov.w	r4, #0
 8005ee8:	0194      	lsls	r4, r2, #6
 8005eea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005eee:	018b      	lsls	r3, r1, #6
 8005ef0:	1a5b      	subs	r3, r3, r1
 8005ef2:	eb64 0402 	sbc.w	r4, r4, r2
 8005ef6:	f04f 0100 	mov.w	r1, #0
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	00e2      	lsls	r2, r4, #3
 8005f00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f04:	00d9      	lsls	r1, r3, #3
 8005f06:	460b      	mov	r3, r1
 8005f08:	4614      	mov	r4, r2
 8005f0a:	195b      	adds	r3, r3, r5
 8005f0c:	eb44 0406 	adc.w	r4, r4, r6
 8005f10:	f04f 0100 	mov.w	r1, #0
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	02a2      	lsls	r2, r4, #10
 8005f1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f1e:	0299      	lsls	r1, r3, #10
 8005f20:	460b      	mov	r3, r1
 8005f22:	4614      	mov	r4, r2
 8005f24:	4618      	mov	r0, r3
 8005f26:	4621      	mov	r1, r4
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f04f 0400 	mov.w	r4, #0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4623      	mov	r3, r4
 8005f32:	f7fa fea9 	bl	8000c88 <__aeabi_uldivmod>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f3c:	4b60      	ldr	r3, [pc, #384]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	3301      	adds	r3, #1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	613b      	str	r3, [r7, #16]
      break;
 8005f56:	e0ae      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f58:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f60:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f62:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d04a      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6e:	4b54      	ldr	r3, [pc, #336]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	099b      	lsrs	r3, r3, #6
 8005f74:	f04f 0400 	mov.w	r4, #0
 8005f78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	ea03 0501 	and.w	r5, r3, r1
 8005f84:	ea04 0602 	and.w	r6, r4, r2
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	f04f 0400 	mov.w	r4, #0
 8005f94:	0154      	lsls	r4, r2, #5
 8005f96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f9a:	014b      	lsls	r3, r1, #5
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	1b49      	subs	r1, r1, r5
 8005fa2:	eb62 0206 	sbc.w	r2, r2, r6
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	f04f 0400 	mov.w	r4, #0
 8005fae:	0194      	lsls	r4, r2, #6
 8005fb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005fb4:	018b      	lsls	r3, r1, #6
 8005fb6:	1a5b      	subs	r3, r3, r1
 8005fb8:	eb64 0402 	sbc.w	r4, r4, r2
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	00e2      	lsls	r2, r4, #3
 8005fc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fca:	00d9      	lsls	r1, r3, #3
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4614      	mov	r4, r2
 8005fd0:	195b      	adds	r3, r3, r5
 8005fd2:	eb44 0406 	adc.w	r4, r4, r6
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	0262      	lsls	r2, r4, #9
 8005fe0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005fe4:	0259      	lsls	r1, r3, #9
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4614      	mov	r4, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	4621      	mov	r1, r4
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f04f 0400 	mov.w	r4, #0
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	f7fa fe46 	bl	8000c88 <__aeabi_uldivmod>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e049      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006004:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	099b      	lsrs	r3, r3, #6
 800600a:	f04f 0400 	mov.w	r4, #0
 800600e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	ea03 0501 	and.w	r5, r3, r1
 800601a:	ea04 0602 	and.w	r6, r4, r2
 800601e:	4629      	mov	r1, r5
 8006020:	4632      	mov	r2, r6
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	f04f 0400 	mov.w	r4, #0
 800602a:	0154      	lsls	r4, r2, #5
 800602c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006030:	014b      	lsls	r3, r1, #5
 8006032:	4619      	mov	r1, r3
 8006034:	4622      	mov	r2, r4
 8006036:	1b49      	subs	r1, r1, r5
 8006038:	eb62 0206 	sbc.w	r2, r2, r6
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	f04f 0400 	mov.w	r4, #0
 8006044:	0194      	lsls	r4, r2, #6
 8006046:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800604a:	018b      	lsls	r3, r1, #6
 800604c:	1a5b      	subs	r3, r3, r1
 800604e:	eb64 0402 	sbc.w	r4, r4, r2
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	00e2      	lsls	r2, r4, #3
 800605c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006060:	00d9      	lsls	r1, r3, #3
 8006062:	460b      	mov	r3, r1
 8006064:	4614      	mov	r4, r2
 8006066:	195b      	adds	r3, r3, r5
 8006068:	eb44 0406 	adc.w	r4, r4, r6
 800606c:	f04f 0100 	mov.w	r1, #0
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	02a2      	lsls	r2, r4, #10
 8006076:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800607a:	0299      	lsls	r1, r3, #10
 800607c:	460b      	mov	r3, r1
 800607e:	4614      	mov	r4, r2
 8006080:	4618      	mov	r0, r3
 8006082:	4621      	mov	r1, r4
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f04f 0400 	mov.w	r4, #0
 800608a:	461a      	mov	r2, r3
 800608c:	4623      	mov	r3, r4
 800608e:	f7fa fdfb 	bl	8000c88 <__aeabi_uldivmod>
 8006092:	4603      	mov	r3, r0
 8006094:	460c      	mov	r4, r1
 8006096:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	0f1b      	lsrs	r3, r3, #28
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	613b      	str	r3, [r7, #16]
      break;
 80060ae:	e002      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060b0:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80060b2:	613b      	str	r3, [r7, #16]
      break;
 80060b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060b6:	693b      	ldr	r3, [r7, #16]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c0:	40023800 	.word	0x40023800
 80060c4:	00f42400 	.word	0x00f42400
 80060c8:	007a1200 	.word	0x007a1200

080060cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8083 	beq.w	80061ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80060e6:	4b95      	ldr	r3, [pc, #596]	; (800633c <HAL_RCC_OscConfig+0x270>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 030c 	and.w	r3, r3, #12
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d019      	beq.n	8006126 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060f2:	4b92      	ldr	r3, [pc, #584]	; (800633c <HAL_RCC_OscConfig+0x270>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d106      	bne.n	800610c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060fe:	4b8f      	ldr	r3, [pc, #572]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800610a:	d00c      	beq.n	8006126 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610c:	4b8b      	ldr	r3, [pc, #556]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006114:	2b0c      	cmp	r3, #12
 8006116:	d112      	bne.n	800613e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006118:	4b88      	ldr	r3, [pc, #544]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006124:	d10b      	bne.n	800613e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006126:	4b85      	ldr	r3, [pc, #532]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d05b      	beq.n	80061ea <HAL_RCC_OscConfig+0x11e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d157      	bne.n	80061ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e216      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006146:	d106      	bne.n	8006156 <HAL_RCC_OscConfig+0x8a>
 8006148:	4b7c      	ldr	r3, [pc, #496]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a7b      	ldr	r2, [pc, #492]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e01d      	b.n	8006192 <HAL_RCC_OscConfig+0xc6>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800615e:	d10c      	bne.n	800617a <HAL_RCC_OscConfig+0xae>
 8006160:	4b76      	ldr	r3, [pc, #472]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a75      	ldr	r2, [pc, #468]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4b73      	ldr	r3, [pc, #460]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a72      	ldr	r2, [pc, #456]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e00b      	b.n	8006192 <HAL_RCC_OscConfig+0xc6>
 800617a:	4b70      	ldr	r3, [pc, #448]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a6f      	ldr	r2, [pc, #444]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4b6d      	ldr	r3, [pc, #436]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6c      	ldr	r2, [pc, #432]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800618c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006190:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d013      	beq.n	80061c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619a:	f7fd fe1b 	bl	8003dd4 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a2:	f7fd fe17 	bl	8003dd4 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b64      	cmp	r3, #100	; 0x64
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e1db      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b4:	4b61      	ldr	r3, [pc, #388]	; (800633c <HAL_RCC_OscConfig+0x270>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCC_OscConfig+0xd6>
 80061c0:	e014      	b.n	80061ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c2:	f7fd fe07 	bl	8003dd4 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061ca:	f7fd fe03 	bl	8003dd4 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b64      	cmp	r3, #100	; 0x64
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e1c7      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061dc:	4b57      	ldr	r3, [pc, #348]	; (800633c <HAL_RCC_OscConfig+0x270>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f0      	bne.n	80061ca <HAL_RCC_OscConfig+0xfe>
 80061e8:	e000      	b.n	80061ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d06f      	beq.n	80062d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061f8:	4b50      	ldr	r3, [pc, #320]	; (800633c <HAL_RCC_OscConfig+0x270>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 030c 	and.w	r3, r3, #12
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006204:	4b4d      	ldr	r3, [pc, #308]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800620c:	2b08      	cmp	r3, #8
 800620e:	d105      	bne.n	800621c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006210:	4b4a      	ldr	r3, [pc, #296]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800621c:	4b47      	ldr	r3, [pc, #284]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006224:	2b0c      	cmp	r3, #12
 8006226:	d11c      	bne.n	8006262 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006228:	4b44      	ldr	r3, [pc, #272]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d116      	bne.n	8006262 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006234:	4b41      	ldr	r3, [pc, #260]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_RCC_OscConfig+0x180>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d001      	beq.n	800624c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e18f      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624c:	4b3b      	ldr	r3, [pc, #236]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4938      	ldr	r1, [pc, #224]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800625c:	4313      	orrs	r3, r2
 800625e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006260:	e03a      	b.n	80062d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d020      	beq.n	80062ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800626a:	4b35      	ldr	r3, [pc, #212]	; (8006340 <HAL_RCC_OscConfig+0x274>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fd fdb0 	bl	8003dd4 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006278:	f7fd fdac 	bl	8003dd4 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e170      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800628a:	4b2c      	ldr	r3, [pc, #176]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006296:	4b29      	ldr	r3, [pc, #164]	; (800633c <HAL_RCC_OscConfig+0x270>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4925      	ldr	r1, [pc, #148]	; (800633c <HAL_RCC_OscConfig+0x270>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]
 80062aa:	e015      	b.n	80062d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ac:	4b24      	ldr	r3, [pc, #144]	; (8006340 <HAL_RCC_OscConfig+0x274>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b2:	f7fd fd8f 	bl	8003dd4 <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ba:	f7fd fd8b 	bl	8003dd4 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e14f      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <HAL_RCC_OscConfig+0x270>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f0      	bne.n	80062ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d037      	beq.n	8006354 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ec:	4b15      	ldr	r3, [pc, #84]	; (8006344 <HAL_RCC_OscConfig+0x278>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f2:	f7fd fd6f 	bl	8003dd4 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062fa:	f7fd fd6b 	bl	8003dd4 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e12f      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_OscConfig+0x270>)
 800630e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x22e>
 8006318:	e01c      	b.n	8006354 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_RCC_OscConfig+0x278>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006320:	f7fd fd58 	bl	8003dd4 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006326:	e00f      	b.n	8006348 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006328:	f7fd fd54 	bl	8003dd4 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d908      	bls.n	8006348 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e118      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
 800633a:	bf00      	nop
 800633c:	40023800 	.word	0x40023800
 8006340:	42470000 	.word	0x42470000
 8006344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006348:	4b8a      	ldr	r3, [pc, #552]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800634a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e9      	bne.n	8006328 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8097 	beq.w	8006490 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006362:	2300      	movs	r3, #0
 8006364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006366:	4b83      	ldr	r3, [pc, #524]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10f      	bne.n	8006392 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	4b7f      	ldr	r3, [pc, #508]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	4a7e      	ldr	r2, [pc, #504]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006380:	6413      	str	r3, [r2, #64]	; 0x40
 8006382:	4b7c      	ldr	r3, [pc, #496]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006392:	4b79      	ldr	r3, [pc, #484]	; (8006578 <HAL_RCC_OscConfig+0x4ac>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d118      	bne.n	80063d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800639e:	4b76      	ldr	r3, [pc, #472]	; (8006578 <HAL_RCC_OscConfig+0x4ac>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a75      	ldr	r2, [pc, #468]	; (8006578 <HAL_RCC_OscConfig+0x4ac>)
 80063a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063aa:	f7fd fd13 	bl	8003dd4 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063b2:	f7fd fd0f 	bl	8003dd4 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e0d3      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c4:	4b6c      	ldr	r3, [pc, #432]	; (8006578 <HAL_RCC_OscConfig+0x4ac>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f0      	beq.n	80063b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d106      	bne.n	80063e6 <HAL_RCC_OscConfig+0x31a>
 80063d8:	4b66      	ldr	r3, [pc, #408]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	4a65      	ldr	r2, [pc, #404]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	6713      	str	r3, [r2, #112]	; 0x70
 80063e4:	e01c      	b.n	8006420 <HAL_RCC_OscConfig+0x354>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	d10c      	bne.n	8006408 <HAL_RCC_OscConfig+0x33c>
 80063ee:	4b61      	ldr	r3, [pc, #388]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	4a60      	ldr	r2, [pc, #384]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 80063f4:	f043 0304 	orr.w	r3, r3, #4
 80063f8:	6713      	str	r3, [r2, #112]	; 0x70
 80063fa:	4b5e      	ldr	r3, [pc, #376]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	4a5d      	ldr	r2, [pc, #372]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	6713      	str	r3, [r2, #112]	; 0x70
 8006406:	e00b      	b.n	8006420 <HAL_RCC_OscConfig+0x354>
 8006408:	4b5a      	ldr	r3, [pc, #360]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640c:	4a59      	ldr	r2, [pc, #356]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	6713      	str	r3, [r2, #112]	; 0x70
 8006414:	4b57      	ldr	r3, [pc, #348]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006418:	4a56      	ldr	r2, [pc, #344]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800641a:	f023 0304 	bic.w	r3, r3, #4
 800641e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d015      	beq.n	8006454 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006428:	f7fd fcd4 	bl	8003dd4 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642e:	e00a      	b.n	8006446 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006430:	f7fd fcd0 	bl	8003dd4 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f241 3288 	movw	r2, #5000	; 0x1388
 800643e:	4293      	cmp	r3, r2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e092      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006446:	4b4b      	ldr	r3, [pc, #300]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0ee      	beq.n	8006430 <HAL_RCC_OscConfig+0x364>
 8006452:	e014      	b.n	800647e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006454:	f7fd fcbe 	bl	8003dd4 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800645a:	e00a      	b.n	8006472 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800645c:	f7fd fcba 	bl	8003dd4 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	f241 3288 	movw	r2, #5000	; 0x1388
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e07c      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006472:	4b40      	ldr	r3, [pc, #256]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1ee      	bne.n	800645c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d105      	bne.n	8006490 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006484:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	4a3a      	ldr	r2, [pc, #232]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800648a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800648e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d068      	beq.n	800656a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006498:	4b36      	ldr	r3, [pc, #216]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d060      	beq.n	8006566 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d145      	bne.n	8006538 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ac:	4b33      	ldr	r3, [pc, #204]	; (800657c <HAL_RCC_OscConfig+0x4b0>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fd fc8f 	bl	8003dd4 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ba:	f7fd fc8b 	bl	8003dd4 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e04f      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064cc:	4b29      	ldr	r3, [pc, #164]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	019b      	lsls	r3, r3, #6
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	3b01      	subs	r3, #1
 80064f2:	041b      	lsls	r3, r3, #16
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	061b      	lsls	r3, r3, #24
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	071b      	lsls	r3, r3, #28
 8006504:	491b      	ldr	r1, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 8006506:	4313      	orrs	r3, r2
 8006508:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800650a:	4b1c      	ldr	r3, [pc, #112]	; (800657c <HAL_RCC_OscConfig+0x4b0>)
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fd fc60 	bl	8003dd4 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006518:	f7fd fc5c 	bl	8003dd4 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e020      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x44c>
 8006536:	e018      	b.n	800656a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006538:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_RCC_OscConfig+0x4b0>)
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653e:	f7fd fc49 	bl	8003dd4 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006546:	f7fd fc45 	bl	8003dd4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e009      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_OscConfig+0x4a8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_RCC_OscConfig+0x47a>
 8006564:	e001      	b.n	800656a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40023800 	.word	0x40023800
 8006578:	40007000 	.word	0x40007000
 800657c:	42470060 	.word	0x42470060

08006580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e056      	b.n	8006640 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fc ffad 	bl	800350c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	ea42 0103 	orr.w	r1, r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	f003 0104 	and.w	r1, r3, #4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69da      	ldr	r2, [r3, #28]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800662e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08c      	sub	sp, #48	; 0x30
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006656:	2301      	movs	r3, #1
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_SPI_TransmitReceive+0x26>
 800666a:	2302      	movs	r3, #2
 800666c:	e18a      	b.n	8006984 <HAL_SPI_TransmitReceive+0x33c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006676:	f7fd fbad 	bl	8003dd4 <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800668c:	887b      	ldrh	r3, [r7, #2]
 800668e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006694:	2b01      	cmp	r3, #1
 8006696:	d00f      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x70>
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800669e:	d107      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x68>
 80066a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d003      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066b6:	e15b      	b.n	8006970 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x82>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x82>
 80066c4:	887b      	ldrh	r3, [r7, #2]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066d0:	e14e      	b.n	8006970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d003      	beq.n	80066e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2205      	movs	r2, #5
 80066e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	887a      	ldrh	r2, [r7, #2]
 80066f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	887a      	ldrh	r2, [r7, #2]
 80066fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	887a      	ldrh	r2, [r7, #2]
 8006708:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	887a      	ldrh	r2, [r7, #2]
 800670e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d007      	beq.n	800673a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006742:	d178      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_SPI_TransmitReceive+0x10a>
 800674c:	8b7b      	ldrh	r3, [r7, #26]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d166      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	881a      	ldrh	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	1c9a      	adds	r2, r3, #2
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006776:	e053      	b.n	8006820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b02      	cmp	r3, #2
 8006784:	d11b      	bne.n	80067be <HAL_SPI_TransmitReceive+0x176>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d016      	beq.n	80067be <HAL_SPI_TransmitReceive+0x176>
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d113      	bne.n	80067be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	881a      	ldrh	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	1c9a      	adds	r2, r3, #2
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d119      	bne.n	8006800 <HAL_SPI_TransmitReceive+0x1b8>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d014      	beq.n	8006800 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	b292      	uxth	r2, r2
 80067e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	1c9a      	adds	r2, r3, #2
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067fc:	2301      	movs	r3, #1
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006800:	f7fd fae8 	bl	8003dd4 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800680c:	429a      	cmp	r2, r3
 800680e:	d807      	bhi.n	8006820 <HAL_SPI_TransmitReceive+0x1d8>
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d003      	beq.n	8006820 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800681e:	e0a7      	b.n	8006970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1a6      	bne.n	8006778 <HAL_SPI_TransmitReceive+0x130>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1a1      	bne.n	8006778 <HAL_SPI_TransmitReceive+0x130>
 8006834:	e07c      	b.n	8006930 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_SPI_TransmitReceive+0x1fc>
 800683e:	8b7b      	ldrh	r3, [r7, #26]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d16b      	bne.n	800691c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686a:	e057      	b.n	800691c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d11c      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x26c>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d017      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x26c>
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d114      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	7812      	ldrb	r2, [r2, #0]
 8006896:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d119      	bne.n	80068f6 <HAL_SPI_TransmitReceive+0x2ae>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d014      	beq.n	80068f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068f2:	2301      	movs	r3, #1
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068f6:	f7fd fa6d 	bl	8003dd4 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006902:	429a      	cmp	r2, r3
 8006904:	d803      	bhi.n	800690e <HAL_SPI_TransmitReceive+0x2c6>
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d102      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x2cc>
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d103      	bne.n	800691c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800691a:	e029      	b.n	8006970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1a2      	bne.n	800686c <HAL_SPI_TransmitReceive+0x224>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d19d      	bne.n	800686c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f893 	bl	8006a60 <SPI_EndRxTxTransaction>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d006      	beq.n	800694e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800694c:	e010      	b.n	8006970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10b      	bne.n	800696e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	e000      	b.n	8006970 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800696e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006984:	4618      	mov	r0, r3
 8006986:	3730      	adds	r7, #48	; 0x30
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800699c:	e04c      	b.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d048      	beq.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80069a6:	f7fd fa15 	bl	8003dd4 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d902      	bls.n	80069bc <SPI_WaitFlagStateUntilTimeout+0x30>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d13d      	bne.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d4:	d111      	bne.n	80069fa <SPI_WaitFlagStateUntilTimeout+0x6e>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069de:	d004      	beq.n	80069ea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e8:	d107      	bne.n	80069fa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a02:	d10f      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e00f      	b.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4013      	ands	r3, r2
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	bf0c      	ite	eq
 8006a48:	2301      	moveq	r3, #1
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d1a3      	bne.n	800699e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <SPI_EndRxTxTransaction+0x7c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <SPI_EndRxTxTransaction+0x80>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	0d5b      	lsrs	r3, r3, #21
 8006a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a7c:	fb02 f303 	mul.w	r3, r2, r3
 8006a80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a8a:	d112      	bne.n	8006ab2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	2180      	movs	r1, #128	; 0x80
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff ff78 	bl	800698c <SPI_WaitFlagStateUntilTimeout>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	f043 0220 	orr.w	r2, r3, #32
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e00f      	b.n	8006ad2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d0f2      	beq.n	8006ab2 <SPI_EndRxTxTransaction+0x52>
 8006acc:	e000      	b.n	8006ad0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ace:	bf00      	nop
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000000 	.word	0x20000000
 8006ae0:	165e9f81 	.word	0x165e9f81

08006ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e01d      	b.n	8006b32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fc fed8 	bl	80038c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f000 f95e 	bl	8006de4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d007      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d122      	bne.n	8006bde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d11b      	bne.n	8006bde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0202 	mvn.w	r2, #2
 8006bae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f8ee 	bl	8006da6 <HAL_TIM_IC_CaptureCallback>
 8006bca:	e005      	b.n	8006bd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8e0 	bl	8006d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8f1 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d122      	bne.n	8006c32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d11b      	bne.n	8006c32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f06f 0204 	mvn.w	r2, #4
 8006c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f8c4 	bl	8006da6 <HAL_TIM_IC_CaptureCallback>
 8006c1e:	e005      	b.n	8006c2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8b6 	bl	8006d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f8c7 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d122      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d11b      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f06f 0208 	mvn.w	r2, #8
 8006c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f89a 	bl	8006da6 <HAL_TIM_IC_CaptureCallback>
 8006c72:	e005      	b.n	8006c80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f88c 	bl	8006d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f89d 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d122      	bne.n	8006cda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d11b      	bne.n	8006cda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0210 	mvn.w	r2, #16
 8006caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2208      	movs	r2, #8
 8006cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f870 	bl	8006da6 <HAL_TIM_IC_CaptureCallback>
 8006cc6:	e005      	b.n	8006cd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f862 	bl	8006d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f873 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d10e      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f06f 0201 	mvn.w	r2, #1
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fa fe41 	bl	8001988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d10:	2b80      	cmp	r3, #128	; 0x80
 8006d12:	d10e      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d107      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f97f 	bl	8007030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d10e      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d107      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f838 	bl	8006dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d10e      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d107      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f06f 0220 	mvn.w	r2, #32
 8006d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f949 	bl	800701c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a40      	ldr	r2, [pc, #256]	; (8006ef8 <TIM_Base_SetConfig+0x114>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e02:	d00f      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a3d      	ldr	r2, [pc, #244]	; (8006efc <TIM_Base_SetConfig+0x118>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a3c      	ldr	r2, [pc, #240]	; (8006f00 <TIM_Base_SetConfig+0x11c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a3b      	ldr	r2, [pc, #236]	; (8006f04 <TIM_Base_SetConfig+0x120>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_Base_SetConfig+0x40>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a3a      	ldr	r2, [pc, #232]	; (8006f08 <TIM_Base_SetConfig+0x124>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d108      	bne.n	8006e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2f      	ldr	r2, [pc, #188]	; (8006ef8 <TIM_Base_SetConfig+0x114>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d02b      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e44:	d027      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2c      	ldr	r2, [pc, #176]	; (8006efc <TIM_Base_SetConfig+0x118>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d023      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a2b      	ldr	r2, [pc, #172]	; (8006f00 <TIM_Base_SetConfig+0x11c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01f      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a2a      	ldr	r2, [pc, #168]	; (8006f04 <TIM_Base_SetConfig+0x120>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01b      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a29      	ldr	r2, [pc, #164]	; (8006f08 <TIM_Base_SetConfig+0x124>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d017      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a28      	ldr	r2, [pc, #160]	; (8006f0c <TIM_Base_SetConfig+0x128>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a27      	ldr	r2, [pc, #156]	; (8006f10 <TIM_Base_SetConfig+0x12c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00f      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <TIM_Base_SetConfig+0x130>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00b      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <TIM_Base_SetConfig+0x134>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a24      	ldr	r2, [pc, #144]	; (8006f1c <TIM_Base_SetConfig+0x138>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a23      	ldr	r2, [pc, #140]	; (8006f20 <TIM_Base_SetConfig+0x13c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d108      	bne.n	8006ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <TIM_Base_SetConfig+0x114>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_Base_SetConfig+0xf8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <TIM_Base_SetConfig+0x124>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d103      	bne.n	8006ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	615a      	str	r2, [r3, #20]
}
 8006eea:	bf00      	nop
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40010000 	.word	0x40010000
 8006efc:	40000400 	.word	0x40000400
 8006f00:	40000800 	.word	0x40000800
 8006f04:	40000c00 	.word	0x40000c00
 8006f08:	40010400 	.word	0x40010400
 8006f0c:	40014000 	.word	0x40014000
 8006f10:	40014400 	.word	0x40014400
 8006f14:	40014800 	.word	0x40014800
 8006f18:	40001800 	.word	0x40001800
 8006f1c:	40001c00 	.word	0x40001c00
 8006f20:	40002000 	.word	0x40002000

08006f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e05a      	b.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d01d      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1a      	ldr	r2, [pc, #104]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a18      	ldr	r2, [pc, #96]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a17      	ldr	r2, [pc, #92]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800

0800701c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e03f      	b.n	80070d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fc fcce 	bl	8003a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	; 0x24
 8007074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fa5f 	bl	800754c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800709c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b088      	sub	sp, #32
 80070e2:	af02      	add	r7, sp, #8
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	4613      	mov	r3, r2
 80070ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	f040 8083 	bne.w	8007206 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_UART_Transmit+0x2e>
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e07b      	b.n	8007208 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_UART_Transmit+0x40>
 800711a:	2302      	movs	r3, #2
 800711c:	e074      	b.n	8007208 <HAL_UART_Transmit+0x12a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2221      	movs	r2, #33	; 0x21
 8007130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007134:	f7fc fe4e 	bl	8003dd4 <HAL_GetTick>
 8007138:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	88fa      	ldrh	r2, [r7, #6]
 800713e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800714e:	e042      	b.n	80071d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007166:	d122      	bne.n	80071ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2200      	movs	r2, #0
 8007170:	2180      	movs	r1, #128	; 0x80
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 f96c 	bl	8007450 <UART_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e042      	b.n	8007208 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007194:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	3302      	adds	r3, #2
 80071a2:	60bb      	str	r3, [r7, #8]
 80071a4:	e017      	b.n	80071d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60bb      	str	r3, [r7, #8]
 80071ac:	e013      	b.n	80071d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2200      	movs	r2, #0
 80071b6:	2180      	movs	r1, #128	; 0x80
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f949 	bl	8007450 <UART_WaitOnFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e01f      	b.n	8007208 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	60ba      	str	r2, [r7, #8]
 80071ce:	781a      	ldrb	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1b7      	bne.n	8007150 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	2140      	movs	r1, #64	; 0x40
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f930 	bl	8007450 <UART_WaitOnFlagUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e006      	b.n	8007208 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	e000      	b.n	8007208 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007206:	2302      	movs	r3, #2
  }
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b20      	cmp	r3, #32
 8007228:	d166      	bne.n	80072f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_UART_Receive_DMA+0x26>
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e05f      	b.n	80072fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UART_Receive_DMA+0x38>
 8007244:	2302      	movs	r3, #2
 8007246:	e058      	b.n	80072fa <HAL_UART_Receive_DMA+0xea>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2222      	movs	r2, #34	; 0x22
 8007266:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	4a25      	ldr	r2, [pc, #148]	; (8007304 <HAL_UART_Receive_DMA+0xf4>)
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007276:	4a24      	ldr	r2, [pc, #144]	; (8007308 <HAL_UART_Receive_DMA+0xf8>)
 8007278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	4a23      	ldr	r2, [pc, #140]	; (800730c <HAL_UART_Receive_DMA+0xfc>)
 8007280:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007286:	2200      	movs	r2, #0
 8007288:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	f7fd ff6f 	bl	8005184 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0201 	orr.w	r2, r2, #1
 80072e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695a      	ldr	r2, [r3, #20]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e000      	b.n	80072fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80072f8:	2302      	movs	r3, #2
  }
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	08007339 	.word	0x08007339
 8007308:	080073a1 	.word	0x080073a1
 800730c:	080073bd 	.word	0x080073bd

08007310 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11e      	bne.n	8007392 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007368:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695a      	ldr	r2, [r3, #20]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0201 	bic.w	r2, r2, #1
 8007378:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695a      	ldr	r2, [r3, #20]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007388:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7fb f9b0 	bl	80026f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff ffae 	bl	8007310 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d8:	2b80      	cmp	r3, #128	; 0x80
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b21      	cmp	r3, #33	; 0x21
 80073ee:	d108      	bne.n	8007402 <UART_DMAError+0x46>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2200      	movs	r2, #0
 80073fa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073fc:	68b8      	ldr	r0, [r7, #8]
 80073fe:	f000 f871 	bl	80074e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740c:	2b40      	cmp	r3, #64	; 0x40
 800740e:	bf0c      	ite	eq
 8007410:	2301      	moveq	r3, #1
 8007412:	2300      	movne	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b22      	cmp	r3, #34	; 0x22
 8007422:	d108      	bne.n	8007436 <UART_DMAError+0x7a>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007430:	68b8      	ldr	r0, [r7, #8]
 8007432:	f000 f86d 	bl	8007510 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	f043 0210 	orr.w	r2, r3, #16
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007442:	68b8      	ldr	r0, [r7, #8]
 8007444:	f7ff ff6e 	bl	8007324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	4613      	mov	r3, r2
 800745e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007460:	e02c      	b.n	80074bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d028      	beq.n	80074bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <UART_WaitOnFlagUntilTimeout+0x30>
 8007470:	f7fc fcb0 	bl	8003dd4 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	429a      	cmp	r2, r3
 800747e:	d21d      	bcs.n	80074bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800748e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695a      	ldr	r2, [r3, #20]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0201 	bic.w	r2, r2, #1
 800749e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e00f      	b.n	80074dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4013      	ands	r3, r2
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	bf0c      	ite	eq
 80074cc:	2301      	moveq	r3, #1
 80074ce:	2300      	movne	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d0c3      	beq.n	8007462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80074fa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007526:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0201 	bic.w	r2, r2, #1
 8007536:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800758e:	f023 030c 	bic.w	r3, r3, #12
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	68f9      	ldr	r1, [r7, #12]
 8007598:	430b      	orrs	r3, r1
 800759a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ba:	f040 818b 	bne.w	80078d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4ac1      	ldr	r2, [pc, #772]	; (80078c8 <UART_SetConfig+0x37c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d005      	beq.n	80075d4 <UART_SetConfig+0x88>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4abf      	ldr	r2, [pc, #764]	; (80078cc <UART_SetConfig+0x380>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	f040 80bd 	bne.w	800774e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075d4:	f7fe fbc6 	bl	8005d64 <HAL_RCC_GetPCLK2Freq>
 80075d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	461d      	mov	r5, r3
 80075de:	f04f 0600 	mov.w	r6, #0
 80075e2:	46a8      	mov	r8, r5
 80075e4:	46b1      	mov	r9, r6
 80075e6:	eb18 0308 	adds.w	r3, r8, r8
 80075ea:	eb49 0409 	adc.w	r4, r9, r9
 80075ee:	4698      	mov	r8, r3
 80075f0:	46a1      	mov	r9, r4
 80075f2:	eb18 0805 	adds.w	r8, r8, r5
 80075f6:	eb49 0906 	adc.w	r9, r9, r6
 80075fa:	f04f 0100 	mov.w	r1, #0
 80075fe:	f04f 0200 	mov.w	r2, #0
 8007602:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007606:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800760a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800760e:	4688      	mov	r8, r1
 8007610:	4691      	mov	r9, r2
 8007612:	eb18 0005 	adds.w	r0, r8, r5
 8007616:	eb49 0106 	adc.w	r1, r9, r6
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	461d      	mov	r5, r3
 8007620:	f04f 0600 	mov.w	r6, #0
 8007624:	196b      	adds	r3, r5, r5
 8007626:	eb46 0406 	adc.w	r4, r6, r6
 800762a:	461a      	mov	r2, r3
 800762c:	4623      	mov	r3, r4
 800762e:	f7f9 fb2b 	bl	8000c88 <__aeabi_uldivmod>
 8007632:	4603      	mov	r3, r0
 8007634:	460c      	mov	r4, r1
 8007636:	461a      	mov	r2, r3
 8007638:	4ba5      	ldr	r3, [pc, #660]	; (80078d0 <UART_SetConfig+0x384>)
 800763a:	fba3 2302 	umull	r2, r3, r3, r2
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	461d      	mov	r5, r3
 8007648:	f04f 0600 	mov.w	r6, #0
 800764c:	46a9      	mov	r9, r5
 800764e:	46b2      	mov	sl, r6
 8007650:	eb19 0309 	adds.w	r3, r9, r9
 8007654:	eb4a 040a 	adc.w	r4, sl, sl
 8007658:	4699      	mov	r9, r3
 800765a:	46a2      	mov	sl, r4
 800765c:	eb19 0905 	adds.w	r9, r9, r5
 8007660:	eb4a 0a06 	adc.w	sl, sl, r6
 8007664:	f04f 0100 	mov.w	r1, #0
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007670:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007674:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007678:	4689      	mov	r9, r1
 800767a:	4692      	mov	sl, r2
 800767c:	eb19 0005 	adds.w	r0, r9, r5
 8007680:	eb4a 0106 	adc.w	r1, sl, r6
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	461d      	mov	r5, r3
 800768a:	f04f 0600 	mov.w	r6, #0
 800768e:	196b      	adds	r3, r5, r5
 8007690:	eb46 0406 	adc.w	r4, r6, r6
 8007694:	461a      	mov	r2, r3
 8007696:	4623      	mov	r3, r4
 8007698:	f7f9 faf6 	bl	8000c88 <__aeabi_uldivmod>
 800769c:	4603      	mov	r3, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	461a      	mov	r2, r3
 80076a2:	4b8b      	ldr	r3, [pc, #556]	; (80078d0 <UART_SetConfig+0x384>)
 80076a4:	fba3 1302 	umull	r1, r3, r3, r2
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	2164      	movs	r1, #100	; 0x64
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	3332      	adds	r3, #50	; 0x32
 80076b6:	4a86      	ldr	r2, [pc, #536]	; (80078d0 <UART_SetConfig+0x384>)
 80076b8:	fba2 2303 	umull	r2, r3, r2, r3
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076c4:	4498      	add	r8, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	461d      	mov	r5, r3
 80076ca:	f04f 0600 	mov.w	r6, #0
 80076ce:	46a9      	mov	r9, r5
 80076d0:	46b2      	mov	sl, r6
 80076d2:	eb19 0309 	adds.w	r3, r9, r9
 80076d6:	eb4a 040a 	adc.w	r4, sl, sl
 80076da:	4699      	mov	r9, r3
 80076dc:	46a2      	mov	sl, r4
 80076de:	eb19 0905 	adds.w	r9, r9, r5
 80076e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076fa:	4689      	mov	r9, r1
 80076fc:	4692      	mov	sl, r2
 80076fe:	eb19 0005 	adds.w	r0, r9, r5
 8007702:	eb4a 0106 	adc.w	r1, sl, r6
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	461d      	mov	r5, r3
 800770c:	f04f 0600 	mov.w	r6, #0
 8007710:	196b      	adds	r3, r5, r5
 8007712:	eb46 0406 	adc.w	r4, r6, r6
 8007716:	461a      	mov	r2, r3
 8007718:	4623      	mov	r3, r4
 800771a:	f7f9 fab5 	bl	8000c88 <__aeabi_uldivmod>
 800771e:	4603      	mov	r3, r0
 8007720:	460c      	mov	r4, r1
 8007722:	461a      	mov	r2, r3
 8007724:	4b6a      	ldr	r3, [pc, #424]	; (80078d0 <UART_SetConfig+0x384>)
 8007726:	fba3 1302 	umull	r1, r3, r3, r2
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	2164      	movs	r1, #100	; 0x64
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	3332      	adds	r3, #50	; 0x32
 8007738:	4a65      	ldr	r2, [pc, #404]	; (80078d0 <UART_SetConfig+0x384>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	f003 0207 	and.w	r2, r3, #7
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4442      	add	r2, r8
 800774a:	609a      	str	r2, [r3, #8]
 800774c:	e26f      	b.n	8007c2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800774e:	f7fe faf5 	bl	8005d3c <HAL_RCC_GetPCLK1Freq>
 8007752:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	461d      	mov	r5, r3
 8007758:	f04f 0600 	mov.w	r6, #0
 800775c:	46a8      	mov	r8, r5
 800775e:	46b1      	mov	r9, r6
 8007760:	eb18 0308 	adds.w	r3, r8, r8
 8007764:	eb49 0409 	adc.w	r4, r9, r9
 8007768:	4698      	mov	r8, r3
 800776a:	46a1      	mov	r9, r4
 800776c:	eb18 0805 	adds.w	r8, r8, r5
 8007770:	eb49 0906 	adc.w	r9, r9, r6
 8007774:	f04f 0100 	mov.w	r1, #0
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007780:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007784:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007788:	4688      	mov	r8, r1
 800778a:	4691      	mov	r9, r2
 800778c:	eb18 0005 	adds.w	r0, r8, r5
 8007790:	eb49 0106 	adc.w	r1, r9, r6
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	461d      	mov	r5, r3
 800779a:	f04f 0600 	mov.w	r6, #0
 800779e:	196b      	adds	r3, r5, r5
 80077a0:	eb46 0406 	adc.w	r4, r6, r6
 80077a4:	461a      	mov	r2, r3
 80077a6:	4623      	mov	r3, r4
 80077a8:	f7f9 fa6e 	bl	8000c88 <__aeabi_uldivmod>
 80077ac:	4603      	mov	r3, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	461a      	mov	r2, r3
 80077b2:	4b47      	ldr	r3, [pc, #284]	; (80078d0 <UART_SetConfig+0x384>)
 80077b4:	fba3 2302 	umull	r2, r3, r3, r2
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	461d      	mov	r5, r3
 80077c2:	f04f 0600 	mov.w	r6, #0
 80077c6:	46a9      	mov	r9, r5
 80077c8:	46b2      	mov	sl, r6
 80077ca:	eb19 0309 	adds.w	r3, r9, r9
 80077ce:	eb4a 040a 	adc.w	r4, sl, sl
 80077d2:	4699      	mov	r9, r3
 80077d4:	46a2      	mov	sl, r4
 80077d6:	eb19 0905 	adds.w	r9, r9, r5
 80077da:	eb4a 0a06 	adc.w	sl, sl, r6
 80077de:	f04f 0100 	mov.w	r1, #0
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077f2:	4689      	mov	r9, r1
 80077f4:	4692      	mov	sl, r2
 80077f6:	eb19 0005 	adds.w	r0, r9, r5
 80077fa:	eb4a 0106 	adc.w	r1, sl, r6
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	461d      	mov	r5, r3
 8007804:	f04f 0600 	mov.w	r6, #0
 8007808:	196b      	adds	r3, r5, r5
 800780a:	eb46 0406 	adc.w	r4, r6, r6
 800780e:	461a      	mov	r2, r3
 8007810:	4623      	mov	r3, r4
 8007812:	f7f9 fa39 	bl	8000c88 <__aeabi_uldivmod>
 8007816:	4603      	mov	r3, r0
 8007818:	460c      	mov	r4, r1
 800781a:	461a      	mov	r2, r3
 800781c:	4b2c      	ldr	r3, [pc, #176]	; (80078d0 <UART_SetConfig+0x384>)
 800781e:	fba3 1302 	umull	r1, r3, r3, r2
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	2164      	movs	r1, #100	; 0x64
 8007826:	fb01 f303 	mul.w	r3, r1, r3
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	3332      	adds	r3, #50	; 0x32
 8007830:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <UART_SetConfig+0x384>)
 8007832:	fba2 2303 	umull	r2, r3, r2, r3
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800783e:	4498      	add	r8, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	461d      	mov	r5, r3
 8007844:	f04f 0600 	mov.w	r6, #0
 8007848:	46a9      	mov	r9, r5
 800784a:	46b2      	mov	sl, r6
 800784c:	eb19 0309 	adds.w	r3, r9, r9
 8007850:	eb4a 040a 	adc.w	r4, sl, sl
 8007854:	4699      	mov	r9, r3
 8007856:	46a2      	mov	sl, r4
 8007858:	eb19 0905 	adds.w	r9, r9, r5
 800785c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007860:	f04f 0100 	mov.w	r1, #0
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800786c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007870:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007874:	4689      	mov	r9, r1
 8007876:	4692      	mov	sl, r2
 8007878:	eb19 0005 	adds.w	r0, r9, r5
 800787c:	eb4a 0106 	adc.w	r1, sl, r6
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	461d      	mov	r5, r3
 8007886:	f04f 0600 	mov.w	r6, #0
 800788a:	196b      	adds	r3, r5, r5
 800788c:	eb46 0406 	adc.w	r4, r6, r6
 8007890:	461a      	mov	r2, r3
 8007892:	4623      	mov	r3, r4
 8007894:	f7f9 f9f8 	bl	8000c88 <__aeabi_uldivmod>
 8007898:	4603      	mov	r3, r0
 800789a:	460c      	mov	r4, r1
 800789c:	461a      	mov	r2, r3
 800789e:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <UART_SetConfig+0x384>)
 80078a0:	fba3 1302 	umull	r1, r3, r3, r2
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	2164      	movs	r1, #100	; 0x64
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	3332      	adds	r3, #50	; 0x32
 80078b2:	4a07      	ldr	r2, [pc, #28]	; (80078d0 <UART_SetConfig+0x384>)
 80078b4:	fba2 2303 	umull	r2, r3, r2, r3
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	f003 0207 	and.w	r2, r3, #7
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4442      	add	r2, r8
 80078c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80078c6:	e1b2      	b.n	8007c2e <UART_SetConfig+0x6e2>
 80078c8:	40011000 	.word	0x40011000
 80078cc:	40011400 	.word	0x40011400
 80078d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4ad7      	ldr	r2, [pc, #860]	; (8007c38 <UART_SetConfig+0x6ec>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d005      	beq.n	80078ea <UART_SetConfig+0x39e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4ad6      	ldr	r2, [pc, #856]	; (8007c3c <UART_SetConfig+0x6f0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	f040 80d1 	bne.w	8007a8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80078ea:	f7fe fa3b 	bl	8005d64 <HAL_RCC_GetPCLK2Freq>
 80078ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	469a      	mov	sl, r3
 80078f4:	f04f 0b00 	mov.w	fp, #0
 80078f8:	46d0      	mov	r8, sl
 80078fa:	46d9      	mov	r9, fp
 80078fc:	eb18 0308 	adds.w	r3, r8, r8
 8007900:	eb49 0409 	adc.w	r4, r9, r9
 8007904:	4698      	mov	r8, r3
 8007906:	46a1      	mov	r9, r4
 8007908:	eb18 080a 	adds.w	r8, r8, sl
 800790c:	eb49 090b 	adc.w	r9, r9, fp
 8007910:	f04f 0100 	mov.w	r1, #0
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800791c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007920:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007924:	4688      	mov	r8, r1
 8007926:	4691      	mov	r9, r2
 8007928:	eb1a 0508 	adds.w	r5, sl, r8
 800792c:	eb4b 0609 	adc.w	r6, fp, r9
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	4619      	mov	r1, r3
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	f04f 0400 	mov.w	r4, #0
 8007942:	0094      	lsls	r4, r2, #2
 8007944:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007948:	008b      	lsls	r3, r1, #2
 800794a:	461a      	mov	r2, r3
 800794c:	4623      	mov	r3, r4
 800794e:	4628      	mov	r0, r5
 8007950:	4631      	mov	r1, r6
 8007952:	f7f9 f999 	bl	8000c88 <__aeabi_uldivmod>
 8007956:	4603      	mov	r3, r0
 8007958:	460c      	mov	r4, r1
 800795a:	461a      	mov	r2, r3
 800795c:	4bb8      	ldr	r3, [pc, #736]	; (8007c40 <UART_SetConfig+0x6f4>)
 800795e:	fba3 2302 	umull	r2, r3, r3, r2
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	469b      	mov	fp, r3
 800796c:	f04f 0c00 	mov.w	ip, #0
 8007970:	46d9      	mov	r9, fp
 8007972:	46e2      	mov	sl, ip
 8007974:	eb19 0309 	adds.w	r3, r9, r9
 8007978:	eb4a 040a 	adc.w	r4, sl, sl
 800797c:	4699      	mov	r9, r3
 800797e:	46a2      	mov	sl, r4
 8007980:	eb19 090b 	adds.w	r9, r9, fp
 8007984:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007994:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800799c:	4689      	mov	r9, r1
 800799e:	4692      	mov	sl, r2
 80079a0:	eb1b 0509 	adds.w	r5, fp, r9
 80079a4:	eb4c 060a 	adc.w	r6, ip, sl
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	f04f 0400 	mov.w	r4, #0
 80079ba:	0094      	lsls	r4, r2, #2
 80079bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079c0:	008b      	lsls	r3, r1, #2
 80079c2:	461a      	mov	r2, r3
 80079c4:	4623      	mov	r3, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	4631      	mov	r1, r6
 80079ca:	f7f9 f95d 	bl	8000c88 <__aeabi_uldivmod>
 80079ce:	4603      	mov	r3, r0
 80079d0:	460c      	mov	r4, r1
 80079d2:	461a      	mov	r2, r3
 80079d4:	4b9a      	ldr	r3, [pc, #616]	; (8007c40 <UART_SetConfig+0x6f4>)
 80079d6:	fba3 1302 	umull	r1, r3, r3, r2
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	2164      	movs	r1, #100	; 0x64
 80079de:	fb01 f303 	mul.w	r3, r1, r3
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	3332      	adds	r3, #50	; 0x32
 80079e8:	4a95      	ldr	r2, [pc, #596]	; (8007c40 <UART_SetConfig+0x6f4>)
 80079ea:	fba2 2303 	umull	r2, r3, r2, r3
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079f4:	4498      	add	r8, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	469b      	mov	fp, r3
 80079fa:	f04f 0c00 	mov.w	ip, #0
 80079fe:	46d9      	mov	r9, fp
 8007a00:	46e2      	mov	sl, ip
 8007a02:	eb19 0309 	adds.w	r3, r9, r9
 8007a06:	eb4a 040a 	adc.w	r4, sl, sl
 8007a0a:	4699      	mov	r9, r3
 8007a0c:	46a2      	mov	sl, r4
 8007a0e:	eb19 090b 	adds.w	r9, r9, fp
 8007a12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a16:	f04f 0100 	mov.w	r1, #0
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a2a:	4689      	mov	r9, r1
 8007a2c:	4692      	mov	sl, r2
 8007a2e:	eb1b 0509 	adds.w	r5, fp, r9
 8007a32:	eb4c 060a 	adc.w	r6, ip, sl
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	f04f 0400 	mov.w	r4, #0
 8007a48:	0094      	lsls	r4, r2, #2
 8007a4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a4e:	008b      	lsls	r3, r1, #2
 8007a50:	461a      	mov	r2, r3
 8007a52:	4623      	mov	r3, r4
 8007a54:	4628      	mov	r0, r5
 8007a56:	4631      	mov	r1, r6
 8007a58:	f7f9 f916 	bl	8000c88 <__aeabi_uldivmod>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	461a      	mov	r2, r3
 8007a62:	4b77      	ldr	r3, [pc, #476]	; (8007c40 <UART_SetConfig+0x6f4>)
 8007a64:	fba3 1302 	umull	r1, r3, r3, r2
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	2164      	movs	r1, #100	; 0x64
 8007a6c:	fb01 f303 	mul.w	r3, r1, r3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	3332      	adds	r3, #50	; 0x32
 8007a76:	4a72      	ldr	r2, [pc, #456]	; (8007c40 <UART_SetConfig+0x6f4>)
 8007a78:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7c:	095b      	lsrs	r3, r3, #5
 8007a7e:	f003 020f 	and.w	r2, r3, #15
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4442      	add	r2, r8
 8007a88:	609a      	str	r2, [r3, #8]
 8007a8a:	e0d0      	b.n	8007c2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a8c:	f7fe f956 	bl	8005d3c <HAL_RCC_GetPCLK1Freq>
 8007a90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	469a      	mov	sl, r3
 8007a96:	f04f 0b00 	mov.w	fp, #0
 8007a9a:	46d0      	mov	r8, sl
 8007a9c:	46d9      	mov	r9, fp
 8007a9e:	eb18 0308 	adds.w	r3, r8, r8
 8007aa2:	eb49 0409 	adc.w	r4, r9, r9
 8007aa6:	4698      	mov	r8, r3
 8007aa8:	46a1      	mov	r9, r4
 8007aaa:	eb18 080a 	adds.w	r8, r8, sl
 8007aae:	eb49 090b 	adc.w	r9, r9, fp
 8007ab2:	f04f 0100 	mov.w	r1, #0
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007abe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ac2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ac6:	4688      	mov	r8, r1
 8007ac8:	4691      	mov	r9, r2
 8007aca:	eb1a 0508 	adds.w	r5, sl, r8
 8007ace:	eb4b 0609 	adc.w	r6, fp, r9
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	f04f 0400 	mov.w	r4, #0
 8007ae4:	0094      	lsls	r4, r2, #2
 8007ae6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007aea:	008b      	lsls	r3, r1, #2
 8007aec:	461a      	mov	r2, r3
 8007aee:	4623      	mov	r3, r4
 8007af0:	4628      	mov	r0, r5
 8007af2:	4631      	mov	r1, r6
 8007af4:	f7f9 f8c8 	bl	8000c88 <__aeabi_uldivmod>
 8007af8:	4603      	mov	r3, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b50      	ldr	r3, [pc, #320]	; (8007c40 <UART_SetConfig+0x6f4>)
 8007b00:	fba3 2302 	umull	r2, r3, r3, r2
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	469b      	mov	fp, r3
 8007b0e:	f04f 0c00 	mov.w	ip, #0
 8007b12:	46d9      	mov	r9, fp
 8007b14:	46e2      	mov	sl, ip
 8007b16:	eb19 0309 	adds.w	r3, r9, r9
 8007b1a:	eb4a 040a 	adc.w	r4, sl, sl
 8007b1e:	4699      	mov	r9, r3
 8007b20:	46a2      	mov	sl, r4
 8007b22:	eb19 090b 	adds.w	r9, r9, fp
 8007b26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b2a:	f04f 0100 	mov.w	r1, #0
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b3e:	4689      	mov	r9, r1
 8007b40:	4692      	mov	sl, r2
 8007b42:	eb1b 0509 	adds.w	r5, fp, r9
 8007b46:	eb4c 060a 	adc.w	r6, ip, sl
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	0094      	lsls	r4, r2, #2
 8007b5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b62:	008b      	lsls	r3, r1, #2
 8007b64:	461a      	mov	r2, r3
 8007b66:	4623      	mov	r3, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	f7f9 f88c 	bl	8000c88 <__aeabi_uldivmod>
 8007b70:	4603      	mov	r3, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	461a      	mov	r2, r3
 8007b76:	4b32      	ldr	r3, [pc, #200]	; (8007c40 <UART_SetConfig+0x6f4>)
 8007b78:	fba3 1302 	umull	r1, r3, r3, r2
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	2164      	movs	r1, #100	; 0x64
 8007b80:	fb01 f303 	mul.w	r3, r1, r3
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	3332      	adds	r3, #50	; 0x32
 8007b8a:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <UART_SetConfig+0x6f4>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	095b      	lsrs	r3, r3, #5
 8007b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b96:	4498      	add	r8, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	469b      	mov	fp, r3
 8007b9c:	f04f 0c00 	mov.w	ip, #0
 8007ba0:	46d9      	mov	r9, fp
 8007ba2:	46e2      	mov	sl, ip
 8007ba4:	eb19 0309 	adds.w	r3, r9, r9
 8007ba8:	eb4a 040a 	adc.w	r4, sl, sl
 8007bac:	4699      	mov	r9, r3
 8007bae:	46a2      	mov	sl, r4
 8007bb0:	eb19 090b 	adds.w	r9, r9, fp
 8007bb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bb8:	f04f 0100 	mov.w	r1, #0
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bcc:	4689      	mov	r9, r1
 8007bce:	4692      	mov	sl, r2
 8007bd0:	eb1b 0509 	adds.w	r5, fp, r9
 8007bd4:	eb4c 060a 	adc.w	r6, ip, sl
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	f04f 0400 	mov.w	r4, #0
 8007bea:	0094      	lsls	r4, r2, #2
 8007bec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bf0:	008b      	lsls	r3, r1, #2
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4623      	mov	r3, r4
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	f7f9 f845 	bl	8000c88 <__aeabi_uldivmod>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	461a      	mov	r2, r3
 8007c04:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <UART_SetConfig+0x6f4>)
 8007c06:	fba3 1302 	umull	r1, r3, r3, r2
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	2164      	movs	r1, #100	; 0x64
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	3332      	adds	r3, #50	; 0x32
 8007c18:	4a09      	ldr	r2, [pc, #36]	; (8007c40 <UART_SetConfig+0x6f4>)
 8007c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	f003 020f 	and.w	r2, r3, #15
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4442      	add	r2, r8
 8007c2a:	609a      	str	r2, [r3, #8]
}
 8007c2c:	e7ff      	b.n	8007c2e <UART_SetConfig+0x6e2>
 8007c2e:	bf00      	nop
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c38:	40011000 	.word	0x40011000
 8007c3c:	40011400 	.word	0x40011400
 8007c40:	51eb851f 	.word	0x51eb851f

08007c44 <__errno>:
 8007c44:	4b01      	ldr	r3, [pc, #4]	; (8007c4c <__errno+0x8>)
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	2000000c 	.word	0x2000000c

08007c50 <__libc_init_array>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	4e0d      	ldr	r6, [pc, #52]	; (8007c88 <__libc_init_array+0x38>)
 8007c54:	4c0d      	ldr	r4, [pc, #52]	; (8007c8c <__libc_init_array+0x3c>)
 8007c56:	1ba4      	subs	r4, r4, r6
 8007c58:	10a4      	asrs	r4, r4, #2
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	42a5      	cmp	r5, r4
 8007c5e:	d109      	bne.n	8007c74 <__libc_init_array+0x24>
 8007c60:	4e0b      	ldr	r6, [pc, #44]	; (8007c90 <__libc_init_array+0x40>)
 8007c62:	4c0c      	ldr	r4, [pc, #48]	; (8007c94 <__libc_init_array+0x44>)
 8007c64:	f003 f968 	bl	800af38 <_init>
 8007c68:	1ba4      	subs	r4, r4, r6
 8007c6a:	10a4      	asrs	r4, r4, #2
 8007c6c:	2500      	movs	r5, #0
 8007c6e:	42a5      	cmp	r5, r4
 8007c70:	d105      	bne.n	8007c7e <__libc_init_array+0x2e>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c78:	4798      	blx	r3
 8007c7a:	3501      	adds	r5, #1
 8007c7c:	e7ee      	b.n	8007c5c <__libc_init_array+0xc>
 8007c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c82:	4798      	blx	r3
 8007c84:	3501      	adds	r5, #1
 8007c86:	e7f2      	b.n	8007c6e <__libc_init_array+0x1e>
 8007c88:	0800b2b0 	.word	0x0800b2b0
 8007c8c:	0800b2b0 	.word	0x0800b2b0
 8007c90:	0800b2b0 	.word	0x0800b2b0
 8007c94:	0800b2b4 	.word	0x0800b2b4

08007c98 <memset>:
 8007c98:	4402      	add	r2, r0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d100      	bne.n	8007ca2 <memset+0xa>
 8007ca0:	4770      	bx	lr
 8007ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca6:	e7f9      	b.n	8007c9c <memset+0x4>

08007ca8 <__cvt>:
 8007ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	ec55 4b10 	vmov	r4, r5, d0
 8007cb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007cb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	460e      	mov	r6, r1
 8007cba:	4691      	mov	r9, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	bfb8      	it	lt
 8007cc0:	4622      	movlt	r2, r4
 8007cc2:	462b      	mov	r3, r5
 8007cc4:	f027 0720 	bic.w	r7, r7, #32
 8007cc8:	bfbb      	ittet	lt
 8007cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cce:	461d      	movlt	r5, r3
 8007cd0:	2300      	movge	r3, #0
 8007cd2:	232d      	movlt	r3, #45	; 0x2d
 8007cd4:	bfb8      	it	lt
 8007cd6:	4614      	movlt	r4, r2
 8007cd8:	2f46      	cmp	r7, #70	; 0x46
 8007cda:	700b      	strb	r3, [r1, #0]
 8007cdc:	d004      	beq.n	8007ce8 <__cvt+0x40>
 8007cde:	2f45      	cmp	r7, #69	; 0x45
 8007ce0:	d100      	bne.n	8007ce4 <__cvt+0x3c>
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	e000      	b.n	8007cea <__cvt+0x42>
 8007ce8:	2103      	movs	r1, #3
 8007cea:	ab03      	add	r3, sp, #12
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	ab02      	add	r3, sp, #8
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	4653      	mov	r3, sl
 8007cf6:	ec45 4b10 	vmov	d0, r4, r5
 8007cfa:	f000 feb1 	bl	8008a60 <_dtoa_r>
 8007cfe:	2f47      	cmp	r7, #71	; 0x47
 8007d00:	4680      	mov	r8, r0
 8007d02:	d102      	bne.n	8007d0a <__cvt+0x62>
 8007d04:	f019 0f01 	tst.w	r9, #1
 8007d08:	d026      	beq.n	8007d58 <__cvt+0xb0>
 8007d0a:	2f46      	cmp	r7, #70	; 0x46
 8007d0c:	eb08 0906 	add.w	r9, r8, r6
 8007d10:	d111      	bne.n	8007d36 <__cvt+0x8e>
 8007d12:	f898 3000 	ldrb.w	r3, [r8]
 8007d16:	2b30      	cmp	r3, #48	; 0x30
 8007d18:	d10a      	bne.n	8007d30 <__cvt+0x88>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fef1 	bl	8000b08 <__aeabi_dcmpeq>
 8007d26:	b918      	cbnz	r0, 8007d30 <__cvt+0x88>
 8007d28:	f1c6 0601 	rsb	r6, r6, #1
 8007d2c:	f8ca 6000 	str.w	r6, [sl]
 8007d30:	f8da 3000 	ldr.w	r3, [sl]
 8007d34:	4499      	add	r9, r3
 8007d36:	2200      	movs	r2, #0
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 fee3 	bl	8000b08 <__aeabi_dcmpeq>
 8007d42:	b938      	cbnz	r0, 8007d54 <__cvt+0xac>
 8007d44:	2230      	movs	r2, #48	; 0x30
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	454b      	cmp	r3, r9
 8007d4a:	d205      	bcs.n	8007d58 <__cvt+0xb0>
 8007d4c:	1c59      	adds	r1, r3, #1
 8007d4e:	9103      	str	r1, [sp, #12]
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e7f8      	b.n	8007d46 <__cvt+0x9e>
 8007d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d5c:	eba3 0308 	sub.w	r3, r3, r8
 8007d60:	4640      	mov	r0, r8
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	b004      	add	sp, #16
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d6a <__exponent>:
 8007d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	bfba      	itte	lt
 8007d72:	4249      	neglt	r1, r1
 8007d74:	232d      	movlt	r3, #45	; 0x2d
 8007d76:	232b      	movge	r3, #43	; 0x2b
 8007d78:	2909      	cmp	r1, #9
 8007d7a:	f804 2b02 	strb.w	r2, [r4], #2
 8007d7e:	7043      	strb	r3, [r0, #1]
 8007d80:	dd20      	ble.n	8007dc4 <__exponent+0x5a>
 8007d82:	f10d 0307 	add.w	r3, sp, #7
 8007d86:	461f      	mov	r7, r3
 8007d88:	260a      	movs	r6, #10
 8007d8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d8e:	fb06 1115 	mls	r1, r6, r5, r1
 8007d92:	3130      	adds	r1, #48	; 0x30
 8007d94:	2d09      	cmp	r5, #9
 8007d96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d9a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007d9e:	4629      	mov	r1, r5
 8007da0:	dc09      	bgt.n	8007db6 <__exponent+0x4c>
 8007da2:	3130      	adds	r1, #48	; 0x30
 8007da4:	3b02      	subs	r3, #2
 8007da6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007daa:	42bb      	cmp	r3, r7
 8007dac:	4622      	mov	r2, r4
 8007dae:	d304      	bcc.n	8007dba <__exponent+0x50>
 8007db0:	1a10      	subs	r0, r2, r0
 8007db2:	b003      	add	sp, #12
 8007db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db6:	4613      	mov	r3, r2
 8007db8:	e7e7      	b.n	8007d8a <__exponent+0x20>
 8007dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dbe:	f804 2b01 	strb.w	r2, [r4], #1
 8007dc2:	e7f2      	b.n	8007daa <__exponent+0x40>
 8007dc4:	2330      	movs	r3, #48	; 0x30
 8007dc6:	4419      	add	r1, r3
 8007dc8:	7083      	strb	r3, [r0, #2]
 8007dca:	1d02      	adds	r2, r0, #4
 8007dcc:	70c1      	strb	r1, [r0, #3]
 8007dce:	e7ef      	b.n	8007db0 <__exponent+0x46>

08007dd0 <_printf_float>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	b08d      	sub	sp, #52	; 0x34
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	4605      	mov	r5, r0
 8007de2:	f001 fd6f 	bl	80098c4 <_localeconv_r>
 8007de6:	6803      	ldr	r3, [r0, #0]
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7f8 fa10 	bl	8000210 <strlen>
 8007df0:	2300      	movs	r3, #0
 8007df2:	930a      	str	r3, [sp, #40]	; 0x28
 8007df4:	f8d8 3000 	ldr.w	r3, [r8]
 8007df8:	9005      	str	r0, [sp, #20]
 8007dfa:	3307      	adds	r3, #7
 8007dfc:	f023 0307 	bic.w	r3, r3, #7
 8007e00:	f103 0208 	add.w	r2, r3, #8
 8007e04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e08:	f8d4 b000 	ldr.w	fp, [r4]
 8007e0c:	f8c8 2000 	str.w	r2, [r8]
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e20:	9307      	str	r3, [sp, #28]
 8007e22:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	4ba7      	ldr	r3, [pc, #668]	; (80080c8 <_printf_float+0x2f8>)
 8007e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e30:	f7f8 fe9c 	bl	8000b6c <__aeabi_dcmpun>
 8007e34:	bb70      	cbnz	r0, 8007e94 <_printf_float+0xc4>
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3a:	4ba3      	ldr	r3, [pc, #652]	; (80080c8 <_printf_float+0x2f8>)
 8007e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e40:	f7f8 fe76 	bl	8000b30 <__aeabi_dcmple>
 8007e44:	bb30      	cbnz	r0, 8007e94 <_printf_float+0xc4>
 8007e46:	2200      	movs	r2, #0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fe65 	bl	8000b1c <__aeabi_dcmplt>
 8007e52:	b110      	cbz	r0, 8007e5a <_printf_float+0x8a>
 8007e54:	232d      	movs	r3, #45	; 0x2d
 8007e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5a:	4a9c      	ldr	r2, [pc, #624]	; (80080cc <_printf_float+0x2fc>)
 8007e5c:	4b9c      	ldr	r3, [pc, #624]	; (80080d0 <_printf_float+0x300>)
 8007e5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e62:	bf8c      	ite	hi
 8007e64:	4690      	movhi	r8, r2
 8007e66:	4698      	movls	r8, r3
 8007e68:	2303      	movs	r3, #3
 8007e6a:	f02b 0204 	bic.w	r2, fp, #4
 8007e6e:	6123      	str	r3, [r4, #16]
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	9700      	str	r7, [sp, #0]
 8007e78:	4633      	mov	r3, r6
 8007e7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f9e6 	bl	8008250 <_printf_common>
 8007e84:	3001      	adds	r0, #1
 8007e86:	f040 808d 	bne.w	8007fa4 <_printf_float+0x1d4>
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8e:	b00d      	add	sp, #52	; 0x34
 8007e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	4640      	mov	r0, r8
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	f7f8 fe66 	bl	8000b6c <__aeabi_dcmpun>
 8007ea0:	b110      	cbz	r0, 8007ea8 <_printf_float+0xd8>
 8007ea2:	4a8c      	ldr	r2, [pc, #560]	; (80080d4 <_printf_float+0x304>)
 8007ea4:	4b8c      	ldr	r3, [pc, #560]	; (80080d8 <_printf_float+0x308>)
 8007ea6:	e7da      	b.n	8007e5e <_printf_float+0x8e>
 8007ea8:	6861      	ldr	r1, [r4, #4]
 8007eaa:	1c4b      	adds	r3, r1, #1
 8007eac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007eb0:	a80a      	add	r0, sp, #40	; 0x28
 8007eb2:	d13e      	bne.n	8007f32 <_printf_float+0x162>
 8007eb4:	2306      	movs	r3, #6
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ebe:	ab09      	add	r3, sp, #36	; 0x24
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	ec49 8b10 	vmov	d0, r8, r9
 8007ec6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007eca:	6022      	str	r2, [r4, #0]
 8007ecc:	f8cd a004 	str.w	sl, [sp, #4]
 8007ed0:	6861      	ldr	r1, [r4, #4]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff fee8 	bl	8007ca8 <__cvt>
 8007ed8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007edc:	2b47      	cmp	r3, #71	; 0x47
 8007ede:	4680      	mov	r8, r0
 8007ee0:	d109      	bne.n	8007ef6 <_printf_float+0x126>
 8007ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee4:	1cd8      	adds	r0, r3, #3
 8007ee6:	db02      	blt.n	8007eee <_printf_float+0x11e>
 8007ee8:	6862      	ldr	r2, [r4, #4]
 8007eea:	4293      	cmp	r3, r2
 8007eec:	dd47      	ble.n	8007f7e <_printf_float+0x1ae>
 8007eee:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ef2:	fa5f fa8a 	uxtb.w	sl, sl
 8007ef6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007efc:	d824      	bhi.n	8007f48 <_printf_float+0x178>
 8007efe:	3901      	subs	r1, #1
 8007f00:	4652      	mov	r2, sl
 8007f02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f06:	9109      	str	r1, [sp, #36]	; 0x24
 8007f08:	f7ff ff2f 	bl	8007d6a <__exponent>
 8007f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0e:	1813      	adds	r3, r2, r0
 8007f10:	2a01      	cmp	r2, #1
 8007f12:	4681      	mov	r9, r0
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	dc02      	bgt.n	8007f1e <_printf_float+0x14e>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	07d1      	lsls	r1, r2, #31
 8007f1c:	d501      	bpl.n	8007f22 <_printf_float+0x152>
 8007f1e:	3301      	adds	r3, #1
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0a5      	beq.n	8007e76 <_printf_float+0xa6>
 8007f2a:	232d      	movs	r3, #45	; 0x2d
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f30:	e7a1      	b.n	8007e76 <_printf_float+0xa6>
 8007f32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007f36:	f000 8177 	beq.w	8008228 <_printf_float+0x458>
 8007f3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f3e:	d1bb      	bne.n	8007eb8 <_printf_float+0xe8>
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d1b9      	bne.n	8007eb8 <_printf_float+0xe8>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7b6      	b.n	8007eb6 <_printf_float+0xe6>
 8007f48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f4c:	d119      	bne.n	8007f82 <_printf_float+0x1b2>
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	dd0c      	ble.n	8007f6e <_printf_float+0x19e>
 8007f54:	6121      	str	r1, [r4, #16]
 8007f56:	b913      	cbnz	r3, 8007f5e <_printf_float+0x18e>
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	07d2      	lsls	r2, r2, #31
 8007f5c:	d502      	bpl.n	8007f64 <_printf_float+0x194>
 8007f5e:	3301      	adds	r3, #1
 8007f60:	440b      	add	r3, r1
 8007f62:	6123      	str	r3, [r4, #16]
 8007f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f66:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f68:	f04f 0900 	mov.w	r9, #0
 8007f6c:	e7d9      	b.n	8007f22 <_printf_float+0x152>
 8007f6e:	b913      	cbnz	r3, 8007f76 <_printf_float+0x1a6>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	07d0      	lsls	r0, r2, #31
 8007f74:	d501      	bpl.n	8007f7a <_printf_float+0x1aa>
 8007f76:	3302      	adds	r3, #2
 8007f78:	e7f3      	b.n	8007f62 <_printf_float+0x192>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7f1      	b.n	8007f62 <_printf_float+0x192>
 8007f7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f86:	4293      	cmp	r3, r2
 8007f88:	db05      	blt.n	8007f96 <_printf_float+0x1c6>
 8007f8a:	6822      	ldr	r2, [r4, #0]
 8007f8c:	6123      	str	r3, [r4, #16]
 8007f8e:	07d1      	lsls	r1, r2, #31
 8007f90:	d5e8      	bpl.n	8007f64 <_printf_float+0x194>
 8007f92:	3301      	adds	r3, #1
 8007f94:	e7e5      	b.n	8007f62 <_printf_float+0x192>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfd4      	ite	le
 8007f9a:	f1c3 0302 	rsble	r3, r3, #2
 8007f9e:	2301      	movgt	r3, #1
 8007fa0:	4413      	add	r3, r2
 8007fa2:	e7de      	b.n	8007f62 <_printf_float+0x192>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	055a      	lsls	r2, r3, #21
 8007fa8:	d407      	bmi.n	8007fba <_printf_float+0x1ea>
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	4642      	mov	r2, r8
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d12b      	bne.n	8008010 <_printf_float+0x240>
 8007fb8:	e767      	b.n	8007e8a <_printf_float+0xba>
 8007fba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007fbe:	f240 80dc 	bls.w	800817a <_printf_float+0x3aa>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fca:	f7f8 fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d033      	beq.n	800803a <_printf_float+0x26a>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4a41      	ldr	r2, [pc, #260]	; (80080dc <_printf_float+0x30c>)
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	f43f af54 	beq.w	8007e8a <_printf_float+0xba>
 8007fe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	db02      	blt.n	8007ff0 <_printf_float+0x220>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	07d8      	lsls	r0, r3, #31
 8007fee:	d50f      	bpl.n	8008010 <_printf_float+0x240>
 8007ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f af45 	beq.w	8007e8a <_printf_float+0xba>
 8008000:	f04f 0800 	mov.w	r8, #0
 8008004:	f104 091a 	add.w	r9, r4, #26
 8008008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800a:	3b01      	subs	r3, #1
 800800c:	4543      	cmp	r3, r8
 800800e:	dc09      	bgt.n	8008024 <_printf_float+0x254>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	079b      	lsls	r3, r3, #30
 8008014:	f100 8103 	bmi.w	800821e <_printf_float+0x44e>
 8008018:	68e0      	ldr	r0, [r4, #12]
 800801a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801c:	4298      	cmp	r0, r3
 800801e:	bfb8      	it	lt
 8008020:	4618      	movlt	r0, r3
 8008022:	e734      	b.n	8007e8e <_printf_float+0xbe>
 8008024:	2301      	movs	r3, #1
 8008026:	464a      	mov	r2, r9
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	f43f af2b 	beq.w	8007e8a <_printf_float+0xba>
 8008034:	f108 0801 	add.w	r8, r8, #1
 8008038:	e7e6      	b.n	8008008 <_printf_float+0x238>
 800803a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	dc2b      	bgt.n	8008098 <_printf_float+0x2c8>
 8008040:	2301      	movs	r3, #1
 8008042:	4a26      	ldr	r2, [pc, #152]	; (80080dc <_printf_float+0x30c>)
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f af1d 	beq.w	8007e8a <_printf_float+0xba>
 8008050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008052:	b923      	cbnz	r3, 800805e <_printf_float+0x28e>
 8008054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008056:	b913      	cbnz	r3, 800805e <_printf_float+0x28e>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	07d9      	lsls	r1, r3, #31
 800805c:	d5d8      	bpl.n	8008010 <_printf_float+0x240>
 800805e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	47b8      	blx	r7
 8008068:	3001      	adds	r0, #1
 800806a:	f43f af0e 	beq.w	8007e8a <_printf_float+0xba>
 800806e:	f04f 0900 	mov.w	r9, #0
 8008072:	f104 0a1a 	add.w	sl, r4, #26
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	425b      	negs	r3, r3
 800807a:	454b      	cmp	r3, r9
 800807c:	dc01      	bgt.n	8008082 <_printf_float+0x2b2>
 800807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008080:	e794      	b.n	8007fac <_printf_float+0x1dc>
 8008082:	2301      	movs	r3, #1
 8008084:	4652      	mov	r2, sl
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	f43f aefc 	beq.w	8007e8a <_printf_float+0xba>
 8008092:	f109 0901 	add.w	r9, r9, #1
 8008096:	e7ee      	b.n	8008076 <_printf_float+0x2a6>
 8008098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800809a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800809c:	429a      	cmp	r2, r3
 800809e:	bfa8      	it	ge
 80080a0:	461a      	movge	r2, r3
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	4691      	mov	r9, r2
 80080a6:	dd07      	ble.n	80080b8 <_printf_float+0x2e8>
 80080a8:	4613      	mov	r3, r2
 80080aa:	4631      	mov	r1, r6
 80080ac:	4642      	mov	r2, r8
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	f43f aee9 	beq.w	8007e8a <_printf_float+0xba>
 80080b8:	f104 031a 	add.w	r3, r4, #26
 80080bc:	f04f 0b00 	mov.w	fp, #0
 80080c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c4:	9306      	str	r3, [sp, #24]
 80080c6:	e015      	b.n	80080f4 <_printf_float+0x324>
 80080c8:	7fefffff 	.word	0x7fefffff
 80080cc:	0800afc8 	.word	0x0800afc8
 80080d0:	0800afc4 	.word	0x0800afc4
 80080d4:	0800afd0 	.word	0x0800afd0
 80080d8:	0800afcc 	.word	0x0800afcc
 80080dc:	0800afd4 	.word	0x0800afd4
 80080e0:	2301      	movs	r3, #1
 80080e2:	9a06      	ldr	r2, [sp, #24]
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f aecd 	beq.w	8007e8a <_printf_float+0xba>
 80080f0:	f10b 0b01 	add.w	fp, fp, #1
 80080f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080f8:	ebaa 0309 	sub.w	r3, sl, r9
 80080fc:	455b      	cmp	r3, fp
 80080fe:	dcef      	bgt.n	80080e0 <_printf_float+0x310>
 8008100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008104:	429a      	cmp	r2, r3
 8008106:	44d0      	add	r8, sl
 8008108:	db15      	blt.n	8008136 <_printf_float+0x366>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	07da      	lsls	r2, r3, #31
 800810e:	d412      	bmi.n	8008136 <_printf_float+0x366>
 8008110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008114:	eba3 020a 	sub.w	r2, r3, sl
 8008118:	eba3 0a01 	sub.w	sl, r3, r1
 800811c:	4592      	cmp	sl, r2
 800811e:	bfa8      	it	ge
 8008120:	4692      	movge	sl, r2
 8008122:	f1ba 0f00 	cmp.w	sl, #0
 8008126:	dc0e      	bgt.n	8008146 <_printf_float+0x376>
 8008128:	f04f 0800 	mov.w	r8, #0
 800812c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008130:	f104 091a 	add.w	r9, r4, #26
 8008134:	e019      	b.n	800816a <_printf_float+0x39a>
 8008136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	d1e5      	bne.n	8008110 <_printf_float+0x340>
 8008144:	e6a1      	b.n	8007e8a <_printf_float+0xba>
 8008146:	4653      	mov	r3, sl
 8008148:	4642      	mov	r2, r8
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	d1e9      	bne.n	8008128 <_printf_float+0x358>
 8008154:	e699      	b.n	8007e8a <_printf_float+0xba>
 8008156:	2301      	movs	r3, #1
 8008158:	464a      	mov	r2, r9
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	f43f ae92 	beq.w	8007e8a <_printf_float+0xba>
 8008166:	f108 0801 	add.w	r8, r8, #1
 800816a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	eba3 030a 	sub.w	r3, r3, sl
 8008174:	4543      	cmp	r3, r8
 8008176:	dcee      	bgt.n	8008156 <_printf_float+0x386>
 8008178:	e74a      	b.n	8008010 <_printf_float+0x240>
 800817a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817c:	2a01      	cmp	r2, #1
 800817e:	dc01      	bgt.n	8008184 <_printf_float+0x3b4>
 8008180:	07db      	lsls	r3, r3, #31
 8008182:	d53a      	bpl.n	80081fa <_printf_float+0x42a>
 8008184:	2301      	movs	r3, #1
 8008186:	4642      	mov	r2, r8
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f ae7b 	beq.w	8007e8a <_printf_float+0xba>
 8008194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f108 0801 	add.w	r8, r8, #1
 80081a4:	f43f ae71 	beq.w	8007e8a <_printf_float+0xba>
 80081a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081aa:	2200      	movs	r2, #0
 80081ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80081b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081b4:	2300      	movs	r3, #0
 80081b6:	f7f8 fca7 	bl	8000b08 <__aeabi_dcmpeq>
 80081ba:	b9c8      	cbnz	r0, 80081f0 <_printf_float+0x420>
 80081bc:	4653      	mov	r3, sl
 80081be:	4642      	mov	r2, r8
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	d10e      	bne.n	80081e8 <_printf_float+0x418>
 80081ca:	e65e      	b.n	8007e8a <_printf_float+0xba>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f ae57 	beq.w	8007e8a <_printf_float+0xba>
 80081dc:	f108 0801 	add.w	r8, r8, #1
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	3b01      	subs	r3, #1
 80081e4:	4543      	cmp	r3, r8
 80081e6:	dcf1      	bgt.n	80081cc <_printf_float+0x3fc>
 80081e8:	464b      	mov	r3, r9
 80081ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081ee:	e6de      	b.n	8007fae <_printf_float+0x1de>
 80081f0:	f04f 0800 	mov.w	r8, #0
 80081f4:	f104 0a1a 	add.w	sl, r4, #26
 80081f8:	e7f2      	b.n	80081e0 <_printf_float+0x410>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e7df      	b.n	80081be <_printf_float+0x3ee>
 80081fe:	2301      	movs	r3, #1
 8008200:	464a      	mov	r2, r9
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	f43f ae3e 	beq.w	8007e8a <_printf_float+0xba>
 800820e:	f108 0801 	add.w	r8, r8, #1
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	4543      	cmp	r3, r8
 800821a:	dcf0      	bgt.n	80081fe <_printf_float+0x42e>
 800821c:	e6fc      	b.n	8008018 <_printf_float+0x248>
 800821e:	f04f 0800 	mov.w	r8, #0
 8008222:	f104 0919 	add.w	r9, r4, #25
 8008226:	e7f4      	b.n	8008212 <_printf_float+0x442>
 8008228:	2900      	cmp	r1, #0
 800822a:	f43f ae8b 	beq.w	8007f44 <_printf_float+0x174>
 800822e:	2300      	movs	r3, #0
 8008230:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008234:	ab09      	add	r3, sp, #36	; 0x24
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	ec49 8b10 	vmov	d0, r8, r9
 800823c:	6022      	str	r2, [r4, #0]
 800823e:	f8cd a004 	str.w	sl, [sp, #4]
 8008242:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008246:	4628      	mov	r0, r5
 8008248:	f7ff fd2e 	bl	8007ca8 <__cvt>
 800824c:	4680      	mov	r8, r0
 800824e:	e648      	b.n	8007ee2 <_printf_float+0x112>

08008250 <_printf_common>:
 8008250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	4691      	mov	r9, r2
 8008256:	461f      	mov	r7, r3
 8008258:	688a      	ldr	r2, [r1, #8]
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008260:	4293      	cmp	r3, r2
 8008262:	bfb8      	it	lt
 8008264:	4613      	movlt	r3, r2
 8008266:	f8c9 3000 	str.w	r3, [r9]
 800826a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800826e:	4606      	mov	r6, r0
 8008270:	460c      	mov	r4, r1
 8008272:	b112      	cbz	r2, 800827a <_printf_common+0x2a>
 8008274:	3301      	adds	r3, #1
 8008276:	f8c9 3000 	str.w	r3, [r9]
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	0699      	lsls	r1, r3, #26
 800827e:	bf42      	ittt	mi
 8008280:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008284:	3302      	addmi	r3, #2
 8008286:	f8c9 3000 	strmi.w	r3, [r9]
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	f015 0506 	ands.w	r5, r5, #6
 8008290:	d107      	bne.n	80082a2 <_printf_common+0x52>
 8008292:	f104 0a19 	add.w	sl, r4, #25
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	f8d9 2000 	ldr.w	r2, [r9]
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	42ab      	cmp	r3, r5
 80082a0:	dc28      	bgt.n	80082f4 <_printf_common+0xa4>
 80082a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082a6:	6822      	ldr	r2, [r4, #0]
 80082a8:	3300      	adds	r3, #0
 80082aa:	bf18      	it	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	0692      	lsls	r2, r2, #26
 80082b0:	d42d      	bmi.n	800830e <_printf_common+0xbe>
 80082b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	47c0      	blx	r8
 80082bc:	3001      	adds	r0, #1
 80082be:	d020      	beq.n	8008302 <_printf_common+0xb2>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	68e5      	ldr	r5, [r4, #12]
 80082c4:	f8d9 2000 	ldr.w	r2, [r9]
 80082c8:	f003 0306 	and.w	r3, r3, #6
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	bf08      	it	eq
 80082d0:	1aad      	subeq	r5, r5, r2
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	6922      	ldr	r2, [r4, #16]
 80082d6:	bf0c      	ite	eq
 80082d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082dc:	2500      	movne	r5, #0
 80082de:	4293      	cmp	r3, r2
 80082e0:	bfc4      	itt	gt
 80082e2:	1a9b      	subgt	r3, r3, r2
 80082e4:	18ed      	addgt	r5, r5, r3
 80082e6:	f04f 0900 	mov.w	r9, #0
 80082ea:	341a      	adds	r4, #26
 80082ec:	454d      	cmp	r5, r9
 80082ee:	d11a      	bne.n	8008326 <_printf_common+0xd6>
 80082f0:	2000      	movs	r0, #0
 80082f2:	e008      	b.n	8008306 <_printf_common+0xb6>
 80082f4:	2301      	movs	r3, #1
 80082f6:	4652      	mov	r2, sl
 80082f8:	4639      	mov	r1, r7
 80082fa:	4630      	mov	r0, r6
 80082fc:	47c0      	blx	r8
 80082fe:	3001      	adds	r0, #1
 8008300:	d103      	bne.n	800830a <_printf_common+0xba>
 8008302:	f04f 30ff 	mov.w	r0, #4294967295
 8008306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830a:	3501      	adds	r5, #1
 800830c:	e7c3      	b.n	8008296 <_printf_common+0x46>
 800830e:	18e1      	adds	r1, r4, r3
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	2030      	movs	r0, #48	; 0x30
 8008314:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008318:	4422      	add	r2, r4
 800831a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800831e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008322:	3302      	adds	r3, #2
 8008324:	e7c5      	b.n	80082b2 <_printf_common+0x62>
 8008326:	2301      	movs	r3, #1
 8008328:	4622      	mov	r2, r4
 800832a:	4639      	mov	r1, r7
 800832c:	4630      	mov	r0, r6
 800832e:	47c0      	blx	r8
 8008330:	3001      	adds	r0, #1
 8008332:	d0e6      	beq.n	8008302 <_printf_common+0xb2>
 8008334:	f109 0901 	add.w	r9, r9, #1
 8008338:	e7d8      	b.n	80082ec <_printf_common+0x9c>
	...

0800833c <_printf_i>:
 800833c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008340:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008344:	460c      	mov	r4, r1
 8008346:	7e09      	ldrb	r1, [r1, #24]
 8008348:	b085      	sub	sp, #20
 800834a:	296e      	cmp	r1, #110	; 0x6e
 800834c:	4617      	mov	r7, r2
 800834e:	4606      	mov	r6, r0
 8008350:	4698      	mov	r8, r3
 8008352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008354:	f000 80b3 	beq.w	80084be <_printf_i+0x182>
 8008358:	d822      	bhi.n	80083a0 <_printf_i+0x64>
 800835a:	2963      	cmp	r1, #99	; 0x63
 800835c:	d036      	beq.n	80083cc <_printf_i+0x90>
 800835e:	d80a      	bhi.n	8008376 <_printf_i+0x3a>
 8008360:	2900      	cmp	r1, #0
 8008362:	f000 80b9 	beq.w	80084d8 <_printf_i+0x19c>
 8008366:	2958      	cmp	r1, #88	; 0x58
 8008368:	f000 8083 	beq.w	8008472 <_printf_i+0x136>
 800836c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008370:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008374:	e032      	b.n	80083dc <_printf_i+0xa0>
 8008376:	2964      	cmp	r1, #100	; 0x64
 8008378:	d001      	beq.n	800837e <_printf_i+0x42>
 800837a:	2969      	cmp	r1, #105	; 0x69
 800837c:	d1f6      	bne.n	800836c <_printf_i+0x30>
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	6813      	ldr	r3, [r2, #0]
 8008382:	0605      	lsls	r5, r0, #24
 8008384:	f103 0104 	add.w	r1, r3, #4
 8008388:	d52a      	bpl.n	80083e0 <_printf_i+0xa4>
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da03      	bge.n	800839a <_printf_i+0x5e>
 8008392:	222d      	movs	r2, #45	; 0x2d
 8008394:	425b      	negs	r3, r3
 8008396:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800839a:	486f      	ldr	r0, [pc, #444]	; (8008558 <_printf_i+0x21c>)
 800839c:	220a      	movs	r2, #10
 800839e:	e039      	b.n	8008414 <_printf_i+0xd8>
 80083a0:	2973      	cmp	r1, #115	; 0x73
 80083a2:	f000 809d 	beq.w	80084e0 <_printf_i+0x1a4>
 80083a6:	d808      	bhi.n	80083ba <_printf_i+0x7e>
 80083a8:	296f      	cmp	r1, #111	; 0x6f
 80083aa:	d020      	beq.n	80083ee <_printf_i+0xb2>
 80083ac:	2970      	cmp	r1, #112	; 0x70
 80083ae:	d1dd      	bne.n	800836c <_printf_i+0x30>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	f043 0320 	orr.w	r3, r3, #32
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	e003      	b.n	80083c2 <_printf_i+0x86>
 80083ba:	2975      	cmp	r1, #117	; 0x75
 80083bc:	d017      	beq.n	80083ee <_printf_i+0xb2>
 80083be:	2978      	cmp	r1, #120	; 0x78
 80083c0:	d1d4      	bne.n	800836c <_printf_i+0x30>
 80083c2:	2378      	movs	r3, #120	; 0x78
 80083c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083c8:	4864      	ldr	r0, [pc, #400]	; (800855c <_printf_i+0x220>)
 80083ca:	e055      	b.n	8008478 <_printf_i+0x13c>
 80083cc:	6813      	ldr	r3, [r2, #0]
 80083ce:	1d19      	adds	r1, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6011      	str	r1, [r2, #0]
 80083d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083dc:	2301      	movs	r3, #1
 80083de:	e08c      	b.n	80084fa <_printf_i+0x1be>
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6011      	str	r1, [r2, #0]
 80083e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083e8:	bf18      	it	ne
 80083ea:	b21b      	sxthne	r3, r3
 80083ec:	e7cf      	b.n	800838e <_printf_i+0x52>
 80083ee:	6813      	ldr	r3, [r2, #0]
 80083f0:	6825      	ldr	r5, [r4, #0]
 80083f2:	1d18      	adds	r0, r3, #4
 80083f4:	6010      	str	r0, [r2, #0]
 80083f6:	0628      	lsls	r0, r5, #24
 80083f8:	d501      	bpl.n	80083fe <_printf_i+0xc2>
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	e002      	b.n	8008404 <_printf_i+0xc8>
 80083fe:	0668      	lsls	r0, r5, #25
 8008400:	d5fb      	bpl.n	80083fa <_printf_i+0xbe>
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	4854      	ldr	r0, [pc, #336]	; (8008558 <_printf_i+0x21c>)
 8008406:	296f      	cmp	r1, #111	; 0x6f
 8008408:	bf14      	ite	ne
 800840a:	220a      	movne	r2, #10
 800840c:	2208      	moveq	r2, #8
 800840e:	2100      	movs	r1, #0
 8008410:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008414:	6865      	ldr	r5, [r4, #4]
 8008416:	60a5      	str	r5, [r4, #8]
 8008418:	2d00      	cmp	r5, #0
 800841a:	f2c0 8095 	blt.w	8008548 <_printf_i+0x20c>
 800841e:	6821      	ldr	r1, [r4, #0]
 8008420:	f021 0104 	bic.w	r1, r1, #4
 8008424:	6021      	str	r1, [r4, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d13d      	bne.n	80084a6 <_printf_i+0x16a>
 800842a:	2d00      	cmp	r5, #0
 800842c:	f040 808e 	bne.w	800854c <_printf_i+0x210>
 8008430:	4665      	mov	r5, ip
 8008432:	2a08      	cmp	r2, #8
 8008434:	d10b      	bne.n	800844e <_printf_i+0x112>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	07db      	lsls	r3, r3, #31
 800843a:	d508      	bpl.n	800844e <_printf_i+0x112>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	6862      	ldr	r2, [r4, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	bfde      	ittt	le
 8008444:	2330      	movle	r3, #48	; 0x30
 8008446:	f805 3c01 	strble.w	r3, [r5, #-1]
 800844a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800844e:	ebac 0305 	sub.w	r3, ip, r5
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	f8cd 8000 	str.w	r8, [sp]
 8008458:	463b      	mov	r3, r7
 800845a:	aa03      	add	r2, sp, #12
 800845c:	4621      	mov	r1, r4
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff fef6 	bl	8008250 <_printf_common>
 8008464:	3001      	adds	r0, #1
 8008466:	d14d      	bne.n	8008504 <_printf_i+0x1c8>
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	b005      	add	sp, #20
 800846e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008472:	4839      	ldr	r0, [pc, #228]	; (8008558 <_printf_i+0x21c>)
 8008474:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008478:	6813      	ldr	r3, [r2, #0]
 800847a:	6821      	ldr	r1, [r4, #0]
 800847c:	1d1d      	adds	r5, r3, #4
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6015      	str	r5, [r2, #0]
 8008482:	060a      	lsls	r2, r1, #24
 8008484:	d50b      	bpl.n	800849e <_printf_i+0x162>
 8008486:	07ca      	lsls	r2, r1, #31
 8008488:	bf44      	itt	mi
 800848a:	f041 0120 	orrmi.w	r1, r1, #32
 800848e:	6021      	strmi	r1, [r4, #0]
 8008490:	b91b      	cbnz	r3, 800849a <_printf_i+0x15e>
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	f022 0220 	bic.w	r2, r2, #32
 8008498:	6022      	str	r2, [r4, #0]
 800849a:	2210      	movs	r2, #16
 800849c:	e7b7      	b.n	800840e <_printf_i+0xd2>
 800849e:	064d      	lsls	r5, r1, #25
 80084a0:	bf48      	it	mi
 80084a2:	b29b      	uxthmi	r3, r3
 80084a4:	e7ef      	b.n	8008486 <_printf_i+0x14a>
 80084a6:	4665      	mov	r5, ip
 80084a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ac:	fb02 3311 	mls	r3, r2, r1, r3
 80084b0:	5cc3      	ldrb	r3, [r0, r3]
 80084b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80084b6:	460b      	mov	r3, r1
 80084b8:	2900      	cmp	r1, #0
 80084ba:	d1f5      	bne.n	80084a8 <_printf_i+0x16c>
 80084bc:	e7b9      	b.n	8008432 <_printf_i+0xf6>
 80084be:	6813      	ldr	r3, [r2, #0]
 80084c0:	6825      	ldr	r5, [r4, #0]
 80084c2:	6961      	ldr	r1, [r4, #20]
 80084c4:	1d18      	adds	r0, r3, #4
 80084c6:	6010      	str	r0, [r2, #0]
 80084c8:	0628      	lsls	r0, r5, #24
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	d501      	bpl.n	80084d2 <_printf_i+0x196>
 80084ce:	6019      	str	r1, [r3, #0]
 80084d0:	e002      	b.n	80084d8 <_printf_i+0x19c>
 80084d2:	066a      	lsls	r2, r5, #25
 80084d4:	d5fb      	bpl.n	80084ce <_printf_i+0x192>
 80084d6:	8019      	strh	r1, [r3, #0]
 80084d8:	2300      	movs	r3, #0
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	4665      	mov	r5, ip
 80084de:	e7b9      	b.n	8008454 <_printf_i+0x118>
 80084e0:	6813      	ldr	r3, [r2, #0]
 80084e2:	1d19      	adds	r1, r3, #4
 80084e4:	6011      	str	r1, [r2, #0]
 80084e6:	681d      	ldr	r5, [r3, #0]
 80084e8:	6862      	ldr	r2, [r4, #4]
 80084ea:	2100      	movs	r1, #0
 80084ec:	4628      	mov	r0, r5
 80084ee:	f7f7 fe97 	bl	8000220 <memchr>
 80084f2:	b108      	cbz	r0, 80084f8 <_printf_i+0x1bc>
 80084f4:	1b40      	subs	r0, r0, r5
 80084f6:	6060      	str	r0, [r4, #4]
 80084f8:	6863      	ldr	r3, [r4, #4]
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	2300      	movs	r3, #0
 80084fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008502:	e7a7      	b.n	8008454 <_printf_i+0x118>
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	462a      	mov	r2, r5
 8008508:	4639      	mov	r1, r7
 800850a:	4630      	mov	r0, r6
 800850c:	47c0      	blx	r8
 800850e:	3001      	adds	r0, #1
 8008510:	d0aa      	beq.n	8008468 <_printf_i+0x12c>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	079b      	lsls	r3, r3, #30
 8008516:	d413      	bmi.n	8008540 <_printf_i+0x204>
 8008518:	68e0      	ldr	r0, [r4, #12]
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	4298      	cmp	r0, r3
 800851e:	bfb8      	it	lt
 8008520:	4618      	movlt	r0, r3
 8008522:	e7a3      	b.n	800846c <_printf_i+0x130>
 8008524:	2301      	movs	r3, #1
 8008526:	464a      	mov	r2, r9
 8008528:	4639      	mov	r1, r7
 800852a:	4630      	mov	r0, r6
 800852c:	47c0      	blx	r8
 800852e:	3001      	adds	r0, #1
 8008530:	d09a      	beq.n	8008468 <_printf_i+0x12c>
 8008532:	3501      	adds	r5, #1
 8008534:	68e3      	ldr	r3, [r4, #12]
 8008536:	9a03      	ldr	r2, [sp, #12]
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	42ab      	cmp	r3, r5
 800853c:	dcf2      	bgt.n	8008524 <_printf_i+0x1e8>
 800853e:	e7eb      	b.n	8008518 <_printf_i+0x1dc>
 8008540:	2500      	movs	r5, #0
 8008542:	f104 0919 	add.w	r9, r4, #25
 8008546:	e7f5      	b.n	8008534 <_printf_i+0x1f8>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1ac      	bne.n	80084a6 <_printf_i+0x16a>
 800854c:	7803      	ldrb	r3, [r0, #0]
 800854e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008552:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008556:	e76c      	b.n	8008432 <_printf_i+0xf6>
 8008558:	0800afd6 	.word	0x0800afd6
 800855c:	0800afe7 	.word	0x0800afe7

08008560 <iprintf>:
 8008560:	b40f      	push	{r0, r1, r2, r3}
 8008562:	4b0a      	ldr	r3, [pc, #40]	; (800858c <iprintf+0x2c>)
 8008564:	b513      	push	{r0, r1, r4, lr}
 8008566:	681c      	ldr	r4, [r3, #0]
 8008568:	b124      	cbz	r4, 8008574 <iprintf+0x14>
 800856a:	69a3      	ldr	r3, [r4, #24]
 800856c:	b913      	cbnz	r3, 8008574 <iprintf+0x14>
 800856e:	4620      	mov	r0, r4
 8008570:	f001 f91e 	bl	80097b0 <__sinit>
 8008574:	ab05      	add	r3, sp, #20
 8008576:	9a04      	ldr	r2, [sp, #16]
 8008578:	68a1      	ldr	r1, [r4, #8]
 800857a:	9301      	str	r3, [sp, #4]
 800857c:	4620      	mov	r0, r4
 800857e:	f001 fde1 	bl	800a144 <_vfiprintf_r>
 8008582:	b002      	add	sp, #8
 8008584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008588:	b004      	add	sp, #16
 800858a:	4770      	bx	lr
 800858c:	2000000c 	.word	0x2000000c

08008590 <_puts_r>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	460e      	mov	r6, r1
 8008594:	4605      	mov	r5, r0
 8008596:	b118      	cbz	r0, 80085a0 <_puts_r+0x10>
 8008598:	6983      	ldr	r3, [r0, #24]
 800859a:	b90b      	cbnz	r3, 80085a0 <_puts_r+0x10>
 800859c:	f001 f908 	bl	80097b0 <__sinit>
 80085a0:	69ab      	ldr	r3, [r5, #24]
 80085a2:	68ac      	ldr	r4, [r5, #8]
 80085a4:	b913      	cbnz	r3, 80085ac <_puts_r+0x1c>
 80085a6:	4628      	mov	r0, r5
 80085a8:	f001 f902 	bl	80097b0 <__sinit>
 80085ac:	4b23      	ldr	r3, [pc, #140]	; (800863c <_puts_r+0xac>)
 80085ae:	429c      	cmp	r4, r3
 80085b0:	d117      	bne.n	80085e2 <_puts_r+0x52>
 80085b2:	686c      	ldr	r4, [r5, #4]
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	071b      	lsls	r3, r3, #28
 80085b8:	d51d      	bpl.n	80085f6 <_puts_r+0x66>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	b1db      	cbz	r3, 80085f6 <_puts_r+0x66>
 80085be:	3e01      	subs	r6, #1
 80085c0:	68a3      	ldr	r3, [r4, #8]
 80085c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085c6:	3b01      	subs	r3, #1
 80085c8:	60a3      	str	r3, [r4, #8]
 80085ca:	b9e9      	cbnz	r1, 8008608 <_puts_r+0x78>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	da2e      	bge.n	800862e <_puts_r+0x9e>
 80085d0:	4622      	mov	r2, r4
 80085d2:	210a      	movs	r1, #10
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 f8f5 	bl	80087c4 <__swbuf_r>
 80085da:	3001      	adds	r0, #1
 80085dc:	d011      	beq.n	8008602 <_puts_r+0x72>
 80085de:	200a      	movs	r0, #10
 80085e0:	e011      	b.n	8008606 <_puts_r+0x76>
 80085e2:	4b17      	ldr	r3, [pc, #92]	; (8008640 <_puts_r+0xb0>)
 80085e4:	429c      	cmp	r4, r3
 80085e6:	d101      	bne.n	80085ec <_puts_r+0x5c>
 80085e8:	68ac      	ldr	r4, [r5, #8]
 80085ea:	e7e3      	b.n	80085b4 <_puts_r+0x24>
 80085ec:	4b15      	ldr	r3, [pc, #84]	; (8008644 <_puts_r+0xb4>)
 80085ee:	429c      	cmp	r4, r3
 80085f0:	bf08      	it	eq
 80085f2:	68ec      	ldreq	r4, [r5, #12]
 80085f4:	e7de      	b.n	80085b4 <_puts_r+0x24>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	f000 f935 	bl	8008868 <__swsetup_r>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0dd      	beq.n	80085be <_puts_r+0x2e>
 8008602:	f04f 30ff 	mov.w	r0, #4294967295
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	2b00      	cmp	r3, #0
 800860a:	da04      	bge.n	8008616 <_puts_r+0x86>
 800860c:	69a2      	ldr	r2, [r4, #24]
 800860e:	429a      	cmp	r2, r3
 8008610:	dc06      	bgt.n	8008620 <_puts_r+0x90>
 8008612:	290a      	cmp	r1, #10
 8008614:	d004      	beq.n	8008620 <_puts_r+0x90>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	6022      	str	r2, [r4, #0]
 800861c:	7019      	strb	r1, [r3, #0]
 800861e:	e7cf      	b.n	80085c0 <_puts_r+0x30>
 8008620:	4622      	mov	r2, r4
 8008622:	4628      	mov	r0, r5
 8008624:	f000 f8ce 	bl	80087c4 <__swbuf_r>
 8008628:	3001      	adds	r0, #1
 800862a:	d1c9      	bne.n	80085c0 <_puts_r+0x30>
 800862c:	e7e9      	b.n	8008602 <_puts_r+0x72>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	200a      	movs	r0, #10
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	6022      	str	r2, [r4, #0]
 8008636:	7018      	strb	r0, [r3, #0]
 8008638:	e7e5      	b.n	8008606 <_puts_r+0x76>
 800863a:	bf00      	nop
 800863c:	0800b028 	.word	0x0800b028
 8008640:	0800b048 	.word	0x0800b048
 8008644:	0800b008 	.word	0x0800b008

08008648 <puts>:
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <puts+0xc>)
 800864a:	4601      	mov	r1, r0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f7ff bf9f 	b.w	8008590 <_puts_r>
 8008652:	bf00      	nop
 8008654:	2000000c 	.word	0x2000000c

08008658 <setbuf>:
 8008658:	2900      	cmp	r1, #0
 800865a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800865e:	bf0c      	ite	eq
 8008660:	2202      	moveq	r2, #2
 8008662:	2200      	movne	r2, #0
 8008664:	f000 b800 	b.w	8008668 <setvbuf>

08008668 <setvbuf>:
 8008668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800866c:	461d      	mov	r5, r3
 800866e:	4b51      	ldr	r3, [pc, #324]	; (80087b4 <setvbuf+0x14c>)
 8008670:	681e      	ldr	r6, [r3, #0]
 8008672:	4604      	mov	r4, r0
 8008674:	460f      	mov	r7, r1
 8008676:	4690      	mov	r8, r2
 8008678:	b126      	cbz	r6, 8008684 <setvbuf+0x1c>
 800867a:	69b3      	ldr	r3, [r6, #24]
 800867c:	b913      	cbnz	r3, 8008684 <setvbuf+0x1c>
 800867e:	4630      	mov	r0, r6
 8008680:	f001 f896 	bl	80097b0 <__sinit>
 8008684:	4b4c      	ldr	r3, [pc, #304]	; (80087b8 <setvbuf+0x150>)
 8008686:	429c      	cmp	r4, r3
 8008688:	d152      	bne.n	8008730 <setvbuf+0xc8>
 800868a:	6874      	ldr	r4, [r6, #4]
 800868c:	f1b8 0f02 	cmp.w	r8, #2
 8008690:	d006      	beq.n	80086a0 <setvbuf+0x38>
 8008692:	f1b8 0f01 	cmp.w	r8, #1
 8008696:	f200 8089 	bhi.w	80087ac <setvbuf+0x144>
 800869a:	2d00      	cmp	r5, #0
 800869c:	f2c0 8086 	blt.w	80087ac <setvbuf+0x144>
 80086a0:	4621      	mov	r1, r4
 80086a2:	4630      	mov	r0, r6
 80086a4:	f001 f81a 	bl	80096dc <_fflush_r>
 80086a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086aa:	b141      	cbz	r1, 80086be <setvbuf+0x56>
 80086ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086b0:	4299      	cmp	r1, r3
 80086b2:	d002      	beq.n	80086ba <setvbuf+0x52>
 80086b4:	4630      	mov	r0, r6
 80086b6:	f001 fc73 	bl	8009fa0 <_free_r>
 80086ba:	2300      	movs	r3, #0
 80086bc:	6363      	str	r3, [r4, #52]	; 0x34
 80086be:	2300      	movs	r3, #0
 80086c0:	61a3      	str	r3, [r4, #24]
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	061b      	lsls	r3, r3, #24
 80086c8:	d503      	bpl.n	80086d2 <setvbuf+0x6a>
 80086ca:	6921      	ldr	r1, [r4, #16]
 80086cc:	4630      	mov	r0, r6
 80086ce:	f001 fc67 	bl	8009fa0 <_free_r>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80086d8:	f023 0303 	bic.w	r3, r3, #3
 80086dc:	f1b8 0f02 	cmp.w	r8, #2
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	d05d      	beq.n	80087a0 <setvbuf+0x138>
 80086e4:	ab01      	add	r3, sp, #4
 80086e6:	466a      	mov	r2, sp
 80086e8:	4621      	mov	r1, r4
 80086ea:	4630      	mov	r0, r6
 80086ec:	f001 f8f8 	bl	80098e0 <__swhatbuf_r>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	4318      	orrs	r0, r3
 80086f4:	81a0      	strh	r0, [r4, #12]
 80086f6:	bb2d      	cbnz	r5, 8008744 <setvbuf+0xdc>
 80086f8:	9d00      	ldr	r5, [sp, #0]
 80086fa:	4628      	mov	r0, r5
 80086fc:	f001 f954 	bl	80099a8 <malloc>
 8008700:	4607      	mov	r7, r0
 8008702:	2800      	cmp	r0, #0
 8008704:	d14e      	bne.n	80087a4 <setvbuf+0x13c>
 8008706:	f8dd 9000 	ldr.w	r9, [sp]
 800870a:	45a9      	cmp	r9, r5
 800870c:	d13c      	bne.n	8008788 <setvbuf+0x120>
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f043 0302 	orr.w	r3, r3, #2
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	2300      	movs	r3, #0
 800871c:	60a3      	str	r3, [r4, #8]
 800871e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008722:	6023      	str	r3, [r4, #0]
 8008724:	6123      	str	r3, [r4, #16]
 8008726:	2301      	movs	r3, #1
 8008728:	6163      	str	r3, [r4, #20]
 800872a:	b003      	add	sp, #12
 800872c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <setvbuf+0x154>)
 8008732:	429c      	cmp	r4, r3
 8008734:	d101      	bne.n	800873a <setvbuf+0xd2>
 8008736:	68b4      	ldr	r4, [r6, #8]
 8008738:	e7a8      	b.n	800868c <setvbuf+0x24>
 800873a:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <setvbuf+0x158>)
 800873c:	429c      	cmp	r4, r3
 800873e:	bf08      	it	eq
 8008740:	68f4      	ldreq	r4, [r6, #12]
 8008742:	e7a3      	b.n	800868c <setvbuf+0x24>
 8008744:	2f00      	cmp	r7, #0
 8008746:	d0d8      	beq.n	80086fa <setvbuf+0x92>
 8008748:	69b3      	ldr	r3, [r6, #24]
 800874a:	b913      	cbnz	r3, 8008752 <setvbuf+0xea>
 800874c:	4630      	mov	r0, r6
 800874e:	f001 f82f 	bl	80097b0 <__sinit>
 8008752:	f1b8 0f01 	cmp.w	r8, #1
 8008756:	bf08      	it	eq
 8008758:	89a3      	ldrheq	r3, [r4, #12]
 800875a:	6027      	str	r7, [r4, #0]
 800875c:	bf04      	itt	eq
 800875e:	f043 0301 	orreq.w	r3, r3, #1
 8008762:	81a3      	strheq	r3, [r4, #12]
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f013 0008 	ands.w	r0, r3, #8
 800876a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800876e:	d01b      	beq.n	80087a8 <setvbuf+0x140>
 8008770:	f013 0001 	ands.w	r0, r3, #1
 8008774:	bf18      	it	ne
 8008776:	426d      	negne	r5, r5
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	bf1d      	ittte	ne
 800877e:	60a3      	strne	r3, [r4, #8]
 8008780:	61a5      	strne	r5, [r4, #24]
 8008782:	4618      	movne	r0, r3
 8008784:	60a5      	streq	r5, [r4, #8]
 8008786:	e7d0      	b.n	800872a <setvbuf+0xc2>
 8008788:	4648      	mov	r0, r9
 800878a:	f001 f90d 	bl	80099a8 <malloc>
 800878e:	4607      	mov	r7, r0
 8008790:	2800      	cmp	r0, #0
 8008792:	d0bc      	beq.n	800870e <setvbuf+0xa6>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	464d      	mov	r5, r9
 800879e:	e7d3      	b.n	8008748 <setvbuf+0xe0>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e7b6      	b.n	8008712 <setvbuf+0xaa>
 80087a4:	46a9      	mov	r9, r5
 80087a6:	e7f5      	b.n	8008794 <setvbuf+0x12c>
 80087a8:	60a0      	str	r0, [r4, #8]
 80087aa:	e7be      	b.n	800872a <setvbuf+0xc2>
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	e7bb      	b.n	800872a <setvbuf+0xc2>
 80087b2:	bf00      	nop
 80087b4:	2000000c 	.word	0x2000000c
 80087b8:	0800b028 	.word	0x0800b028
 80087bc:	0800b048 	.word	0x0800b048
 80087c0:	0800b008 	.word	0x0800b008

080087c4 <__swbuf_r>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	460e      	mov	r6, r1
 80087c8:	4614      	mov	r4, r2
 80087ca:	4605      	mov	r5, r0
 80087cc:	b118      	cbz	r0, 80087d6 <__swbuf_r+0x12>
 80087ce:	6983      	ldr	r3, [r0, #24]
 80087d0:	b90b      	cbnz	r3, 80087d6 <__swbuf_r+0x12>
 80087d2:	f000 ffed 	bl	80097b0 <__sinit>
 80087d6:	4b21      	ldr	r3, [pc, #132]	; (800885c <__swbuf_r+0x98>)
 80087d8:	429c      	cmp	r4, r3
 80087da:	d12a      	bne.n	8008832 <__swbuf_r+0x6e>
 80087dc:	686c      	ldr	r4, [r5, #4]
 80087de:	69a3      	ldr	r3, [r4, #24]
 80087e0:	60a3      	str	r3, [r4, #8]
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	071a      	lsls	r2, r3, #28
 80087e6:	d52e      	bpl.n	8008846 <__swbuf_r+0x82>
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	b363      	cbz	r3, 8008846 <__swbuf_r+0x82>
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	6820      	ldr	r0, [r4, #0]
 80087f0:	1ac0      	subs	r0, r0, r3
 80087f2:	6963      	ldr	r3, [r4, #20]
 80087f4:	b2f6      	uxtb	r6, r6
 80087f6:	4283      	cmp	r3, r0
 80087f8:	4637      	mov	r7, r6
 80087fa:	dc04      	bgt.n	8008806 <__swbuf_r+0x42>
 80087fc:	4621      	mov	r1, r4
 80087fe:	4628      	mov	r0, r5
 8008800:	f000 ff6c 	bl	80096dc <_fflush_r>
 8008804:	bb28      	cbnz	r0, 8008852 <__swbuf_r+0x8e>
 8008806:	68a3      	ldr	r3, [r4, #8]
 8008808:	3b01      	subs	r3, #1
 800880a:	60a3      	str	r3, [r4, #8]
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	6022      	str	r2, [r4, #0]
 8008812:	701e      	strb	r6, [r3, #0]
 8008814:	6963      	ldr	r3, [r4, #20]
 8008816:	3001      	adds	r0, #1
 8008818:	4283      	cmp	r3, r0
 800881a:	d004      	beq.n	8008826 <__swbuf_r+0x62>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	07db      	lsls	r3, r3, #31
 8008820:	d519      	bpl.n	8008856 <__swbuf_r+0x92>
 8008822:	2e0a      	cmp	r6, #10
 8008824:	d117      	bne.n	8008856 <__swbuf_r+0x92>
 8008826:	4621      	mov	r1, r4
 8008828:	4628      	mov	r0, r5
 800882a:	f000 ff57 	bl	80096dc <_fflush_r>
 800882e:	b190      	cbz	r0, 8008856 <__swbuf_r+0x92>
 8008830:	e00f      	b.n	8008852 <__swbuf_r+0x8e>
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <__swbuf_r+0x9c>)
 8008834:	429c      	cmp	r4, r3
 8008836:	d101      	bne.n	800883c <__swbuf_r+0x78>
 8008838:	68ac      	ldr	r4, [r5, #8]
 800883a:	e7d0      	b.n	80087de <__swbuf_r+0x1a>
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <__swbuf_r+0xa0>)
 800883e:	429c      	cmp	r4, r3
 8008840:	bf08      	it	eq
 8008842:	68ec      	ldreq	r4, [r5, #12]
 8008844:	e7cb      	b.n	80087de <__swbuf_r+0x1a>
 8008846:	4621      	mov	r1, r4
 8008848:	4628      	mov	r0, r5
 800884a:	f000 f80d 	bl	8008868 <__swsetup_r>
 800884e:	2800      	cmp	r0, #0
 8008850:	d0cc      	beq.n	80087ec <__swbuf_r+0x28>
 8008852:	f04f 37ff 	mov.w	r7, #4294967295
 8008856:	4638      	mov	r0, r7
 8008858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800885a:	bf00      	nop
 800885c:	0800b028 	.word	0x0800b028
 8008860:	0800b048 	.word	0x0800b048
 8008864:	0800b008 	.word	0x0800b008

08008868 <__swsetup_r>:
 8008868:	4b32      	ldr	r3, [pc, #200]	; (8008934 <__swsetup_r+0xcc>)
 800886a:	b570      	push	{r4, r5, r6, lr}
 800886c:	681d      	ldr	r5, [r3, #0]
 800886e:	4606      	mov	r6, r0
 8008870:	460c      	mov	r4, r1
 8008872:	b125      	cbz	r5, 800887e <__swsetup_r+0x16>
 8008874:	69ab      	ldr	r3, [r5, #24]
 8008876:	b913      	cbnz	r3, 800887e <__swsetup_r+0x16>
 8008878:	4628      	mov	r0, r5
 800887a:	f000 ff99 	bl	80097b0 <__sinit>
 800887e:	4b2e      	ldr	r3, [pc, #184]	; (8008938 <__swsetup_r+0xd0>)
 8008880:	429c      	cmp	r4, r3
 8008882:	d10f      	bne.n	80088a4 <__swsetup_r+0x3c>
 8008884:	686c      	ldr	r4, [r5, #4]
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	b29a      	uxth	r2, r3
 800888c:	0715      	lsls	r5, r2, #28
 800888e:	d42c      	bmi.n	80088ea <__swsetup_r+0x82>
 8008890:	06d0      	lsls	r0, r2, #27
 8008892:	d411      	bmi.n	80088b8 <__swsetup_r+0x50>
 8008894:	2209      	movs	r2, #9
 8008896:	6032      	str	r2, [r6, #0]
 8008898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	e03e      	b.n	8008922 <__swsetup_r+0xba>
 80088a4:	4b25      	ldr	r3, [pc, #148]	; (800893c <__swsetup_r+0xd4>)
 80088a6:	429c      	cmp	r4, r3
 80088a8:	d101      	bne.n	80088ae <__swsetup_r+0x46>
 80088aa:	68ac      	ldr	r4, [r5, #8]
 80088ac:	e7eb      	b.n	8008886 <__swsetup_r+0x1e>
 80088ae:	4b24      	ldr	r3, [pc, #144]	; (8008940 <__swsetup_r+0xd8>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	bf08      	it	eq
 80088b4:	68ec      	ldreq	r4, [r5, #12]
 80088b6:	e7e6      	b.n	8008886 <__swsetup_r+0x1e>
 80088b8:	0751      	lsls	r1, r2, #29
 80088ba:	d512      	bpl.n	80088e2 <__swsetup_r+0x7a>
 80088bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088be:	b141      	cbz	r1, 80088d2 <__swsetup_r+0x6a>
 80088c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d002      	beq.n	80088ce <__swsetup_r+0x66>
 80088c8:	4630      	mov	r0, r6
 80088ca:	f001 fb69 	bl	8009fa0 <_free_r>
 80088ce:	2300      	movs	r3, #0
 80088d0:	6363      	str	r3, [r4, #52]	; 0x34
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	2300      	movs	r3, #0
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	f043 0308 	orr.w	r3, r3, #8
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	b94b      	cbnz	r3, 8008902 <__swsetup_r+0x9a>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f8:	d003      	beq.n	8008902 <__swsetup_r+0x9a>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4630      	mov	r0, r6
 80088fe:	f001 f813 	bl	8009928 <__smakebuf_r>
 8008902:	89a2      	ldrh	r2, [r4, #12]
 8008904:	f012 0301 	ands.w	r3, r2, #1
 8008908:	d00c      	beq.n	8008924 <__swsetup_r+0xbc>
 800890a:	2300      	movs	r3, #0
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	6963      	ldr	r3, [r4, #20]
 8008910:	425b      	negs	r3, r3
 8008912:	61a3      	str	r3, [r4, #24]
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	b953      	cbnz	r3, 800892e <__swsetup_r+0xc6>
 8008918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008920:	d1ba      	bne.n	8008898 <__swsetup_r+0x30>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	0792      	lsls	r2, r2, #30
 8008926:	bf58      	it	pl
 8008928:	6963      	ldrpl	r3, [r4, #20]
 800892a:	60a3      	str	r3, [r4, #8]
 800892c:	e7f2      	b.n	8008914 <__swsetup_r+0xac>
 800892e:	2000      	movs	r0, #0
 8008930:	e7f7      	b.n	8008922 <__swsetup_r+0xba>
 8008932:	bf00      	nop
 8008934:	2000000c 	.word	0x2000000c
 8008938:	0800b028 	.word	0x0800b028
 800893c:	0800b048 	.word	0x0800b048
 8008940:	0800b008 	.word	0x0800b008

08008944 <quorem>:
 8008944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008948:	6903      	ldr	r3, [r0, #16]
 800894a:	690c      	ldr	r4, [r1, #16]
 800894c:	42a3      	cmp	r3, r4
 800894e:	4680      	mov	r8, r0
 8008950:	f2c0 8082 	blt.w	8008a58 <quorem+0x114>
 8008954:	3c01      	subs	r4, #1
 8008956:	f101 0714 	add.w	r7, r1, #20
 800895a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800895e:	f100 0614 	add.w	r6, r0, #20
 8008962:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008966:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800896a:	eb06 030c 	add.w	r3, r6, ip
 800896e:	3501      	adds	r5, #1
 8008970:	eb07 090c 	add.w	r9, r7, ip
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	fbb0 f5f5 	udiv	r5, r0, r5
 800897a:	b395      	cbz	r5, 80089e2 <quorem+0x9e>
 800897c:	f04f 0a00 	mov.w	sl, #0
 8008980:	4638      	mov	r0, r7
 8008982:	46b6      	mov	lr, r6
 8008984:	46d3      	mov	fp, sl
 8008986:	f850 2b04 	ldr.w	r2, [r0], #4
 800898a:	b293      	uxth	r3, r2
 800898c:	fb05 a303 	mla	r3, r5, r3, sl
 8008990:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008994:	b29b      	uxth	r3, r3
 8008996:	ebab 0303 	sub.w	r3, fp, r3
 800899a:	0c12      	lsrs	r2, r2, #16
 800899c:	f8de b000 	ldr.w	fp, [lr]
 80089a0:	fb05 a202 	mla	r2, r5, r2, sl
 80089a4:	fa13 f38b 	uxtah	r3, r3, fp
 80089a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80089ac:	fa1f fb82 	uxth.w	fp, r2
 80089b0:	f8de 2000 	ldr.w	r2, [lr]
 80089b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80089b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089bc:	b29b      	uxth	r3, r3
 80089be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c2:	4581      	cmp	r9, r0
 80089c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80089c8:	f84e 3b04 	str.w	r3, [lr], #4
 80089cc:	d2db      	bcs.n	8008986 <quorem+0x42>
 80089ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80089d2:	b933      	cbnz	r3, 80089e2 <quorem+0x9e>
 80089d4:	9b01      	ldr	r3, [sp, #4]
 80089d6:	3b04      	subs	r3, #4
 80089d8:	429e      	cmp	r6, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	d330      	bcc.n	8008a40 <quorem+0xfc>
 80089de:	f8c8 4010 	str.w	r4, [r8, #16]
 80089e2:	4640      	mov	r0, r8
 80089e4:	f001 fa08 	bl	8009df8 <__mcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	db25      	blt.n	8008a38 <quorem+0xf4>
 80089ec:	3501      	adds	r5, #1
 80089ee:	4630      	mov	r0, r6
 80089f0:	f04f 0c00 	mov.w	ip, #0
 80089f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80089f8:	f8d0 e000 	ldr.w	lr, [r0]
 80089fc:	b293      	uxth	r3, r2
 80089fe:	ebac 0303 	sub.w	r3, ip, r3
 8008a02:	0c12      	lsrs	r2, r2, #16
 8008a04:	fa13 f38e 	uxtah	r3, r3, lr
 8008a08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a16:	45b9      	cmp	r9, r7
 8008a18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a1c:	f840 3b04 	str.w	r3, [r0], #4
 8008a20:	d2e8      	bcs.n	80089f4 <quorem+0xb0>
 8008a22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008a26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008a2a:	b92a      	cbnz	r2, 8008a38 <quorem+0xf4>
 8008a2c:	3b04      	subs	r3, #4
 8008a2e:	429e      	cmp	r6, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	d30b      	bcc.n	8008a4c <quorem+0x108>
 8008a34:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a38:	4628      	mov	r0, r5
 8008a3a:	b003      	add	sp, #12
 8008a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	3b04      	subs	r3, #4
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	d1ca      	bne.n	80089de <quorem+0x9a>
 8008a48:	3c01      	subs	r4, #1
 8008a4a:	e7c5      	b.n	80089d8 <quorem+0x94>
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	3b04      	subs	r3, #4
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	d1ef      	bne.n	8008a34 <quorem+0xf0>
 8008a54:	3c01      	subs	r4, #1
 8008a56:	e7ea      	b.n	8008a2e <quorem+0xea>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e7ee      	b.n	8008a3a <quorem+0xf6>
 8008a5c:	0000      	movs	r0, r0
	...

08008a60 <_dtoa_r>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	ec57 6b10 	vmov	r6, r7, d0
 8008a68:	b097      	sub	sp, #92	; 0x5c
 8008a6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a6c:	9106      	str	r1, [sp, #24]
 8008a6e:	4604      	mov	r4, r0
 8008a70:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a72:	9312      	str	r3, [sp, #72]	; 0x48
 8008a74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a78:	e9cd 6700 	strd	r6, r7, [sp]
 8008a7c:	b93d      	cbnz	r5, 8008a8e <_dtoa_r+0x2e>
 8008a7e:	2010      	movs	r0, #16
 8008a80:	f000 ff92 	bl	80099a8 <malloc>
 8008a84:	6260      	str	r0, [r4, #36]	; 0x24
 8008a86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a8a:	6005      	str	r5, [r0, #0]
 8008a8c:	60c5      	str	r5, [r0, #12]
 8008a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a90:	6819      	ldr	r1, [r3, #0]
 8008a92:	b151      	cbz	r1, 8008aaa <_dtoa_r+0x4a>
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	604a      	str	r2, [r1, #4]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4093      	lsls	r3, r2
 8008a9c:	608b      	str	r3, [r1, #8]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 ffc9 	bl	8009a36 <_Bfree>
 8008aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	1e3b      	subs	r3, r7, #0
 8008aac:	bfbb      	ittet	lt
 8008aae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ab2:	9301      	strlt	r3, [sp, #4]
 8008ab4:	2300      	movge	r3, #0
 8008ab6:	2201      	movlt	r2, #1
 8008ab8:	bfac      	ite	ge
 8008aba:	f8c8 3000 	strge.w	r3, [r8]
 8008abe:	f8c8 2000 	strlt.w	r2, [r8]
 8008ac2:	4baf      	ldr	r3, [pc, #700]	; (8008d80 <_dtoa_r+0x320>)
 8008ac4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ac8:	ea33 0308 	bics.w	r3, r3, r8
 8008acc:	d114      	bne.n	8008af8 <_dtoa_r+0x98>
 8008ace:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ad0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	b923      	cbnz	r3, 8008ae4 <_dtoa_r+0x84>
 8008ada:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f000 8542 	beq.w	8009568 <_dtoa_r+0xb08>
 8008ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ae6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008d94 <_dtoa_r+0x334>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8544 	beq.w	8009578 <_dtoa_r+0xb18>
 8008af0:	f10b 0303 	add.w	r3, fp, #3
 8008af4:	f000 bd3e 	b.w	8009574 <_dtoa_r+0xb14>
 8008af8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2300      	movs	r3, #0
 8008b00:	4630      	mov	r0, r6
 8008b02:	4639      	mov	r1, r7
 8008b04:	f7f8 f800 	bl	8000b08 <__aeabi_dcmpeq>
 8008b08:	4681      	mov	r9, r0
 8008b0a:	b168      	cbz	r0, 8008b28 <_dtoa_r+0xc8>
 8008b0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b0e:	2301      	movs	r3, #1
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 8524 	beq.w	8009562 <_dtoa_r+0xb02>
 8008b1a:	4b9a      	ldr	r3, [pc, #616]	; (8008d84 <_dtoa_r+0x324>)
 8008b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b1e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	f000 bd28 	b.w	8009578 <_dtoa_r+0xb18>
 8008b28:	aa14      	add	r2, sp, #80	; 0x50
 8008b2a:	a915      	add	r1, sp, #84	; 0x54
 8008b2c:	ec47 6b10 	vmov	d0, r6, r7
 8008b30:	4620      	mov	r0, r4
 8008b32:	f001 f9d8 	bl	8009ee6 <__d2b>
 8008b36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b3a:	9004      	str	r0, [sp, #16]
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	d07c      	beq.n	8008c3a <_dtoa_r+0x1da>
 8008b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008b48:	46b2      	mov	sl, r6
 8008b4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008b56:	2200      	movs	r2, #0
 8008b58:	4b8b      	ldr	r3, [pc, #556]	; (8008d88 <_dtoa_r+0x328>)
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	4659      	mov	r1, fp
 8008b5e:	f7f7 fbb3 	bl	80002c8 <__aeabi_dsub>
 8008b62:	a381      	add	r3, pc, #516	; (adr r3, 8008d68 <_dtoa_r+0x308>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 fd66 	bl	8000638 <__aeabi_dmul>
 8008b6c:	a380      	add	r3, pc, #512	; (adr r3, 8008d70 <_dtoa_r+0x310>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f7f7 fbab 	bl	80002cc <__adddf3>
 8008b76:	4606      	mov	r6, r0
 8008b78:	4628      	mov	r0, r5
 8008b7a:	460f      	mov	r7, r1
 8008b7c:	f7f7 fcf2 	bl	8000564 <__aeabi_i2d>
 8008b80:	a37d      	add	r3, pc, #500	; (adr r3, 8008d78 <_dtoa_r+0x318>)
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f7f7 fd57 	bl	8000638 <__aeabi_dmul>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fb9b 	bl	80002cc <__adddf3>
 8008b96:	4606      	mov	r6, r0
 8008b98:	460f      	mov	r7, r1
 8008b9a:	f7f7 fffd 	bl	8000b98 <__aeabi_d2iz>
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f7f7 ffb8 	bl	8000b1c <__aeabi_dcmplt>
 8008bac:	b148      	cbz	r0, 8008bc2 <_dtoa_r+0x162>
 8008bae:	4650      	mov	r0, sl
 8008bb0:	f7f7 fcd8 	bl	8000564 <__aeabi_i2d>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	f7f7 ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8008bbc:	b908      	cbnz	r0, 8008bc2 <_dtoa_r+0x162>
 8008bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bc2:	f1ba 0f16 	cmp.w	sl, #22
 8008bc6:	d859      	bhi.n	8008c7c <_dtoa_r+0x21c>
 8008bc8:	4970      	ldr	r1, [pc, #448]	; (8008d8c <_dtoa_r+0x32c>)
 8008bca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008bce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd6:	f7f7 ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d050      	beq.n	8008c80 <_dtoa_r+0x220>
 8008bde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008be2:	2300      	movs	r3, #0
 8008be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008be8:	1b5d      	subs	r5, r3, r5
 8008bea:	f1b5 0801 	subs.w	r8, r5, #1
 8008bee:	bf49      	itett	mi
 8008bf0:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bf4:	2300      	movpl	r3, #0
 8008bf6:	9305      	strmi	r3, [sp, #20]
 8008bf8:	f04f 0800 	movmi.w	r8, #0
 8008bfc:	bf58      	it	pl
 8008bfe:	9305      	strpl	r3, [sp, #20]
 8008c00:	f1ba 0f00 	cmp.w	sl, #0
 8008c04:	db3e      	blt.n	8008c84 <_dtoa_r+0x224>
 8008c06:	2300      	movs	r3, #0
 8008c08:	44d0      	add	r8, sl
 8008c0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008c0e:	9307      	str	r3, [sp, #28]
 8008c10:	9b06      	ldr	r3, [sp, #24]
 8008c12:	2b09      	cmp	r3, #9
 8008c14:	f200 8090 	bhi.w	8008d38 <_dtoa_r+0x2d8>
 8008c18:	2b05      	cmp	r3, #5
 8008c1a:	bfc4      	itt	gt
 8008c1c:	3b04      	subgt	r3, #4
 8008c1e:	9306      	strgt	r3, [sp, #24]
 8008c20:	9b06      	ldr	r3, [sp, #24]
 8008c22:	f1a3 0302 	sub.w	r3, r3, #2
 8008c26:	bfcc      	ite	gt
 8008c28:	2500      	movgt	r5, #0
 8008c2a:	2501      	movle	r5, #1
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	f200 808f 	bhi.w	8008d50 <_dtoa_r+0x2f0>
 8008c32:	e8df f003 	tbb	[pc, r3]
 8008c36:	7f7d      	.short	0x7f7d
 8008c38:	7131      	.short	0x7131
 8008c3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008c3e:	441d      	add	r5, r3
 8008c40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008c44:	2820      	cmp	r0, #32
 8008c46:	dd13      	ble.n	8008c70 <_dtoa_r+0x210>
 8008c48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008c4c:	9b00      	ldr	r3, [sp, #0]
 8008c4e:	fa08 f800 	lsl.w	r8, r8, r0
 8008c52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008c56:	fa23 f000 	lsr.w	r0, r3, r0
 8008c5a:	ea48 0000 	orr.w	r0, r8, r0
 8008c5e:	f7f7 fc71 	bl	8000544 <__aeabi_ui2d>
 8008c62:	2301      	movs	r3, #1
 8008c64:	4682      	mov	sl, r0
 8008c66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008c6a:	3d01      	subs	r5, #1
 8008c6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c6e:	e772      	b.n	8008b56 <_dtoa_r+0xf6>
 8008c70:	9b00      	ldr	r3, [sp, #0]
 8008c72:	f1c0 0020 	rsb	r0, r0, #32
 8008c76:	fa03 f000 	lsl.w	r0, r3, r0
 8008c7a:	e7f0      	b.n	8008c5e <_dtoa_r+0x1fe>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e7b1      	b.n	8008be4 <_dtoa_r+0x184>
 8008c80:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c82:	e7b0      	b.n	8008be6 <_dtoa_r+0x186>
 8008c84:	9b05      	ldr	r3, [sp, #20]
 8008c86:	eba3 030a 	sub.w	r3, r3, sl
 8008c8a:	9305      	str	r3, [sp, #20]
 8008c8c:	f1ca 0300 	rsb	r3, sl, #0
 8008c90:	9307      	str	r3, [sp, #28]
 8008c92:	2300      	movs	r3, #0
 8008c94:	930e      	str	r3, [sp, #56]	; 0x38
 8008c96:	e7bb      	b.n	8008c10 <_dtoa_r+0x1b0>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd59      	ble.n	8008d56 <_dtoa_r+0x2f6>
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	4699      	mov	r9, r3
 8008ca6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ca8:	2200      	movs	r2, #0
 8008caa:	6072      	str	r2, [r6, #4]
 8008cac:	2204      	movs	r2, #4
 8008cae:	f102 0014 	add.w	r0, r2, #20
 8008cb2:	4298      	cmp	r0, r3
 8008cb4:	6871      	ldr	r1, [r6, #4]
 8008cb6:	d953      	bls.n	8008d60 <_dtoa_r+0x300>
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fe88 	bl	80099ce <_Balloc>
 8008cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cc0:	6030      	str	r0, [r6, #0]
 8008cc2:	f1b9 0f0e 	cmp.w	r9, #14
 8008cc6:	f8d3 b000 	ldr.w	fp, [r3]
 8008cca:	f200 80e6 	bhi.w	8008e9a <_dtoa_r+0x43a>
 8008cce:	2d00      	cmp	r5, #0
 8008cd0:	f000 80e3 	beq.w	8008e9a <_dtoa_r+0x43a>
 8008cd4:	ed9d 7b00 	vldr	d7, [sp]
 8008cd8:	f1ba 0f00 	cmp.w	sl, #0
 8008cdc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008ce0:	dd74      	ble.n	8008dcc <_dtoa_r+0x36c>
 8008ce2:	4a2a      	ldr	r2, [pc, #168]	; (8008d8c <_dtoa_r+0x32c>)
 8008ce4:	f00a 030f 	and.w	r3, sl, #15
 8008ce8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cec:	ed93 7b00 	vldr	d7, [r3]
 8008cf0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008cf4:	06f0      	lsls	r0, r6, #27
 8008cf6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008cfa:	d565      	bpl.n	8008dc8 <_dtoa_r+0x368>
 8008cfc:	4b24      	ldr	r3, [pc, #144]	; (8008d90 <_dtoa_r+0x330>)
 8008cfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d06:	f7f7 fdc1 	bl	800088c <__aeabi_ddiv>
 8008d0a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d0e:	f006 060f 	and.w	r6, r6, #15
 8008d12:	2503      	movs	r5, #3
 8008d14:	4f1e      	ldr	r7, [pc, #120]	; (8008d90 <_dtoa_r+0x330>)
 8008d16:	e04c      	b.n	8008db2 <_dtoa_r+0x352>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1e:	4453      	add	r3, sl
 8008d20:	f103 0901 	add.w	r9, r3, #1
 8008d24:	9302      	str	r3, [sp, #8]
 8008d26:	464b      	mov	r3, r9
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	bfb8      	it	lt
 8008d2c:	2301      	movlt	r3, #1
 8008d2e:	e7ba      	b.n	8008ca6 <_dtoa_r+0x246>
 8008d30:	2300      	movs	r3, #0
 8008d32:	e7b2      	b.n	8008c9a <_dtoa_r+0x23a>
 8008d34:	2300      	movs	r3, #0
 8008d36:	e7f0      	b.n	8008d1a <_dtoa_r+0x2ba>
 8008d38:	2501      	movs	r5, #1
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9306      	str	r3, [sp, #24]
 8008d3e:	950a      	str	r5, [sp, #40]	; 0x28
 8008d40:	f04f 33ff 	mov.w	r3, #4294967295
 8008d44:	9302      	str	r3, [sp, #8]
 8008d46:	4699      	mov	r9, r3
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2312      	movs	r3, #18
 8008d4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d4e:	e7aa      	b.n	8008ca6 <_dtoa_r+0x246>
 8008d50:	2301      	movs	r3, #1
 8008d52:	930a      	str	r3, [sp, #40]	; 0x28
 8008d54:	e7f4      	b.n	8008d40 <_dtoa_r+0x2e0>
 8008d56:	2301      	movs	r3, #1
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	4699      	mov	r9, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	e7f5      	b.n	8008d4c <_dtoa_r+0x2ec>
 8008d60:	3101      	adds	r1, #1
 8008d62:	6071      	str	r1, [r6, #4]
 8008d64:	0052      	lsls	r2, r2, #1
 8008d66:	e7a2      	b.n	8008cae <_dtoa_r+0x24e>
 8008d68:	636f4361 	.word	0x636f4361
 8008d6c:	3fd287a7 	.word	0x3fd287a7
 8008d70:	8b60c8b3 	.word	0x8b60c8b3
 8008d74:	3fc68a28 	.word	0x3fc68a28
 8008d78:	509f79fb 	.word	0x509f79fb
 8008d7c:	3fd34413 	.word	0x3fd34413
 8008d80:	7ff00000 	.word	0x7ff00000
 8008d84:	0800afd5 	.word	0x0800afd5
 8008d88:	3ff80000 	.word	0x3ff80000
 8008d8c:	0800b090 	.word	0x0800b090
 8008d90:	0800b068 	.word	0x0800b068
 8008d94:	0800b001 	.word	0x0800b001
 8008d98:	07f1      	lsls	r1, r6, #31
 8008d9a:	d508      	bpl.n	8008dae <_dtoa_r+0x34e>
 8008d9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da4:	f7f7 fc48 	bl	8000638 <__aeabi_dmul>
 8008da8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dac:	3501      	adds	r5, #1
 8008dae:	1076      	asrs	r6, r6, #1
 8008db0:	3708      	adds	r7, #8
 8008db2:	2e00      	cmp	r6, #0
 8008db4:	d1f0      	bne.n	8008d98 <_dtoa_r+0x338>
 8008db6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dbe:	f7f7 fd65 	bl	800088c <__aeabi_ddiv>
 8008dc2:	e9cd 0100 	strd	r0, r1, [sp]
 8008dc6:	e01a      	b.n	8008dfe <_dtoa_r+0x39e>
 8008dc8:	2502      	movs	r5, #2
 8008dca:	e7a3      	b.n	8008d14 <_dtoa_r+0x2b4>
 8008dcc:	f000 80a0 	beq.w	8008f10 <_dtoa_r+0x4b0>
 8008dd0:	f1ca 0600 	rsb	r6, sl, #0
 8008dd4:	4b9f      	ldr	r3, [pc, #636]	; (8009054 <_dtoa_r+0x5f4>)
 8008dd6:	4fa0      	ldr	r7, [pc, #640]	; (8009058 <_dtoa_r+0x5f8>)
 8008dd8:	f006 020f 	and.w	r2, r6, #15
 8008ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008de8:	f7f7 fc26 	bl	8000638 <__aeabi_dmul>
 8008dec:	e9cd 0100 	strd	r0, r1, [sp]
 8008df0:	1136      	asrs	r6, r6, #4
 8008df2:	2300      	movs	r3, #0
 8008df4:	2502      	movs	r5, #2
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	d17f      	bne.n	8008efa <_dtoa_r+0x49a>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e1      	bne.n	8008dc2 <_dtoa_r+0x362>
 8008dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8087 	beq.w	8008f14 <_dtoa_r+0x4b4>
 8008e06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4b93      	ldr	r3, [pc, #588]	; (800905c <_dtoa_r+0x5fc>)
 8008e0e:	4630      	mov	r0, r6
 8008e10:	4639      	mov	r1, r7
 8008e12:	f7f7 fe83 	bl	8000b1c <__aeabi_dcmplt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d07c      	beq.n	8008f14 <_dtoa_r+0x4b4>
 8008e1a:	f1b9 0f00 	cmp.w	r9, #0
 8008e1e:	d079      	beq.n	8008f14 <_dtoa_r+0x4b4>
 8008e20:	9b02      	ldr	r3, [sp, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	dd35      	ble.n	8008e92 <_dtoa_r+0x432>
 8008e26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e2a:	9308      	str	r3, [sp, #32]
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	2200      	movs	r2, #0
 8008e30:	4b8b      	ldr	r3, [pc, #556]	; (8009060 <_dtoa_r+0x600>)
 8008e32:	4630      	mov	r0, r6
 8008e34:	f7f7 fc00 	bl	8000638 <__aeabi_dmul>
 8008e38:	e9cd 0100 	strd	r0, r1, [sp]
 8008e3c:	9f02      	ldr	r7, [sp, #8]
 8008e3e:	3501      	adds	r5, #1
 8008e40:	4628      	mov	r0, r5
 8008e42:	f7f7 fb8f 	bl	8000564 <__aeabi_i2d>
 8008e46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e4a:	f7f7 fbf5 	bl	8000638 <__aeabi_dmul>
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4b84      	ldr	r3, [pc, #528]	; (8009064 <_dtoa_r+0x604>)
 8008e52:	f7f7 fa3b 	bl	80002cc <__adddf3>
 8008e56:	4605      	mov	r5, r0
 8008e58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008e5c:	2f00      	cmp	r7, #0
 8008e5e:	d15d      	bne.n	8008f1c <_dtoa_r+0x4bc>
 8008e60:	2200      	movs	r2, #0
 8008e62:	4b81      	ldr	r3, [pc, #516]	; (8009068 <_dtoa_r+0x608>)
 8008e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e68:	f7f7 fa2e 	bl	80002c8 <__aeabi_dsub>
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	4633      	mov	r3, r6
 8008e70:	e9cd 0100 	strd	r0, r1, [sp]
 8008e74:	f7f7 fe70 	bl	8000b58 <__aeabi_dcmpgt>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	f040 8288 	bne.w	800938e <_dtoa_r+0x92e>
 8008e7e:	462a      	mov	r2, r5
 8008e80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e88:	f7f7 fe48 	bl	8000b1c <__aeabi_dcmplt>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	f040 827c 	bne.w	800938a <_dtoa_r+0x92a>
 8008e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e96:	e9cd 2300 	strd	r2, r3, [sp]
 8008e9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f2c0 8150 	blt.w	8009142 <_dtoa_r+0x6e2>
 8008ea2:	f1ba 0f0e 	cmp.w	sl, #14
 8008ea6:	f300 814c 	bgt.w	8009142 <_dtoa_r+0x6e2>
 8008eaa:	4b6a      	ldr	r3, [pc, #424]	; (8009054 <_dtoa_r+0x5f4>)
 8008eac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008eb0:	ed93 7b00 	vldr	d7, [r3]
 8008eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ebc:	f280 80d8 	bge.w	8009070 <_dtoa_r+0x610>
 8008ec0:	f1b9 0f00 	cmp.w	r9, #0
 8008ec4:	f300 80d4 	bgt.w	8009070 <_dtoa_r+0x610>
 8008ec8:	f040 825e 	bne.w	8009388 <_dtoa_r+0x928>
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4b66      	ldr	r3, [pc, #408]	; (8009068 <_dtoa_r+0x608>)
 8008ed0:	ec51 0b17 	vmov	r0, r1, d7
 8008ed4:	f7f7 fbb0 	bl	8000638 <__aeabi_dmul>
 8008ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008edc:	f7f7 fe32 	bl	8000b44 <__aeabi_dcmpge>
 8008ee0:	464f      	mov	r7, r9
 8008ee2:	464e      	mov	r6, r9
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f040 8234 	bne.w	8009352 <_dtoa_r+0x8f2>
 8008eea:	2331      	movs	r3, #49	; 0x31
 8008eec:	f10b 0501 	add.w	r5, fp, #1
 8008ef0:	f88b 3000 	strb.w	r3, [fp]
 8008ef4:	f10a 0a01 	add.w	sl, sl, #1
 8008ef8:	e22f      	b.n	800935a <_dtoa_r+0x8fa>
 8008efa:	07f2      	lsls	r2, r6, #31
 8008efc:	d505      	bpl.n	8008f0a <_dtoa_r+0x4aa>
 8008efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f02:	f7f7 fb99 	bl	8000638 <__aeabi_dmul>
 8008f06:	3501      	adds	r5, #1
 8008f08:	2301      	movs	r3, #1
 8008f0a:	1076      	asrs	r6, r6, #1
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	e772      	b.n	8008df6 <_dtoa_r+0x396>
 8008f10:	2502      	movs	r5, #2
 8008f12:	e774      	b.n	8008dfe <_dtoa_r+0x39e>
 8008f14:	f8cd a020 	str.w	sl, [sp, #32]
 8008f18:	464f      	mov	r7, r9
 8008f1a:	e791      	b.n	8008e40 <_dtoa_r+0x3e0>
 8008f1c:	4b4d      	ldr	r3, [pc, #308]	; (8009054 <_dtoa_r+0x5f4>)
 8008f1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d047      	beq.n	8008fbc <_dtoa_r+0x55c>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	2000      	movs	r0, #0
 8008f32:	494e      	ldr	r1, [pc, #312]	; (800906c <_dtoa_r+0x60c>)
 8008f34:	f7f7 fcaa 	bl	800088c <__aeabi_ddiv>
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4633      	mov	r3, r6
 8008f3c:	f7f7 f9c4 	bl	80002c8 <__aeabi_dsub>
 8008f40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f44:	465d      	mov	r5, fp
 8008f46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f4a:	f7f7 fe25 	bl	8000b98 <__aeabi_d2iz>
 8008f4e:	4606      	mov	r6, r0
 8008f50:	f7f7 fb08 	bl	8000564 <__aeabi_i2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f5c:	f7f7 f9b4 	bl	80002c8 <__aeabi_dsub>
 8008f60:	3630      	adds	r6, #48	; 0x30
 8008f62:	f805 6b01 	strb.w	r6, [r5], #1
 8008f66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f6e:	f7f7 fdd5 	bl	8000b1c <__aeabi_dcmplt>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d163      	bne.n	800903e <_dtoa_r+0x5de>
 8008f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	4937      	ldr	r1, [pc, #220]	; (800905c <_dtoa_r+0x5fc>)
 8008f7e:	f7f7 f9a3 	bl	80002c8 <__aeabi_dsub>
 8008f82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f86:	f7f7 fdc9 	bl	8000b1c <__aeabi_dcmplt>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f040 80b7 	bne.w	80090fe <_dtoa_r+0x69e>
 8008f90:	eba5 030b 	sub.w	r3, r5, fp
 8008f94:	429f      	cmp	r7, r3
 8008f96:	f77f af7c 	ble.w	8008e92 <_dtoa_r+0x432>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4b30      	ldr	r3, [pc, #192]	; (8009060 <_dtoa_r+0x600>)
 8008f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fa2:	f7f7 fb49 	bl	8000638 <__aeabi_dmul>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008fac:	4b2c      	ldr	r3, [pc, #176]	; (8009060 <_dtoa_r+0x600>)
 8008fae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fb2:	f7f7 fb41 	bl	8000638 <__aeabi_dmul>
 8008fb6:	e9cd 0100 	strd	r0, r1, [sp]
 8008fba:	e7c4      	b.n	8008f46 <_dtoa_r+0x4e6>
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	4633      	mov	r3, r6
 8008fc0:	f7f7 fb3a 	bl	8000638 <__aeabi_dmul>
 8008fc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008fc8:	eb0b 0507 	add.w	r5, fp, r7
 8008fcc:	465e      	mov	r6, fp
 8008fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fd2:	f7f7 fde1 	bl	8000b98 <__aeabi_d2iz>
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	f7f7 fac4 	bl	8000564 <__aeabi_i2d>
 8008fdc:	3730      	adds	r7, #48	; 0x30
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe6:	f7f7 f96f 	bl	80002c8 <__aeabi_dsub>
 8008fea:	f806 7b01 	strb.w	r7, [r6], #1
 8008fee:	42ae      	cmp	r6, r5
 8008ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	d126      	bne.n	8009048 <_dtoa_r+0x5e8>
 8008ffa:	4b1c      	ldr	r3, [pc, #112]	; (800906c <_dtoa_r+0x60c>)
 8008ffc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009000:	f7f7 f964 	bl	80002cc <__adddf3>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800900c:	f7f7 fda4 	bl	8000b58 <__aeabi_dcmpgt>
 8009010:	2800      	cmp	r0, #0
 8009012:	d174      	bne.n	80090fe <_dtoa_r+0x69e>
 8009014:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009018:	2000      	movs	r0, #0
 800901a:	4914      	ldr	r1, [pc, #80]	; (800906c <_dtoa_r+0x60c>)
 800901c:	f7f7 f954 	bl	80002c8 <__aeabi_dsub>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009028:	f7f7 fd78 	bl	8000b1c <__aeabi_dcmplt>
 800902c:	2800      	cmp	r0, #0
 800902e:	f43f af30 	beq.w	8008e92 <_dtoa_r+0x432>
 8009032:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009036:	2b30      	cmp	r3, #48	; 0x30
 8009038:	f105 32ff 	add.w	r2, r5, #4294967295
 800903c:	d002      	beq.n	8009044 <_dtoa_r+0x5e4>
 800903e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009042:	e04a      	b.n	80090da <_dtoa_r+0x67a>
 8009044:	4615      	mov	r5, r2
 8009046:	e7f4      	b.n	8009032 <_dtoa_r+0x5d2>
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <_dtoa_r+0x600>)
 800904a:	f7f7 faf5 	bl	8000638 <__aeabi_dmul>
 800904e:	e9cd 0100 	strd	r0, r1, [sp]
 8009052:	e7bc      	b.n	8008fce <_dtoa_r+0x56e>
 8009054:	0800b090 	.word	0x0800b090
 8009058:	0800b068 	.word	0x0800b068
 800905c:	3ff00000 	.word	0x3ff00000
 8009060:	40240000 	.word	0x40240000
 8009064:	401c0000 	.word	0x401c0000
 8009068:	40140000 	.word	0x40140000
 800906c:	3fe00000 	.word	0x3fe00000
 8009070:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009074:	465d      	mov	r5, fp
 8009076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800907a:	4630      	mov	r0, r6
 800907c:	4639      	mov	r1, r7
 800907e:	f7f7 fc05 	bl	800088c <__aeabi_ddiv>
 8009082:	f7f7 fd89 	bl	8000b98 <__aeabi_d2iz>
 8009086:	4680      	mov	r8, r0
 8009088:	f7f7 fa6c 	bl	8000564 <__aeabi_i2d>
 800908c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009090:	f7f7 fad2 	bl	8000638 <__aeabi_dmul>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80090a0:	f7f7 f912 	bl	80002c8 <__aeabi_dsub>
 80090a4:	f805 6b01 	strb.w	r6, [r5], #1
 80090a8:	eba5 060b 	sub.w	r6, r5, fp
 80090ac:	45b1      	cmp	r9, r6
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	d139      	bne.n	8009128 <_dtoa_r+0x6c8>
 80090b4:	f7f7 f90a 	bl	80002cc <__adddf3>
 80090b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090bc:	4606      	mov	r6, r0
 80090be:	460f      	mov	r7, r1
 80090c0:	f7f7 fd4a 	bl	8000b58 <__aeabi_dcmpgt>
 80090c4:	b9c8      	cbnz	r0, 80090fa <_dtoa_r+0x69a>
 80090c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	f7f7 fd1b 	bl	8000b08 <__aeabi_dcmpeq>
 80090d2:	b110      	cbz	r0, 80090da <_dtoa_r+0x67a>
 80090d4:	f018 0f01 	tst.w	r8, #1
 80090d8:	d10f      	bne.n	80090fa <_dtoa_r+0x69a>
 80090da:	9904      	ldr	r1, [sp, #16]
 80090dc:	4620      	mov	r0, r4
 80090de:	f000 fcaa 	bl	8009a36 <_Bfree>
 80090e2:	2300      	movs	r3, #0
 80090e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090e6:	702b      	strb	r3, [r5, #0]
 80090e8:	f10a 0301 	add.w	r3, sl, #1
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 8241 	beq.w	8009578 <_dtoa_r+0xb18>
 80090f6:	601d      	str	r5, [r3, #0]
 80090f8:	e23e      	b.n	8009578 <_dtoa_r+0xb18>
 80090fa:	f8cd a020 	str.w	sl, [sp, #32]
 80090fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009102:	2a39      	cmp	r2, #57	; 0x39
 8009104:	f105 33ff 	add.w	r3, r5, #4294967295
 8009108:	d108      	bne.n	800911c <_dtoa_r+0x6bc>
 800910a:	459b      	cmp	fp, r3
 800910c:	d10a      	bne.n	8009124 <_dtoa_r+0x6c4>
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	3301      	adds	r3, #1
 8009112:	9308      	str	r3, [sp, #32]
 8009114:	2330      	movs	r3, #48	; 0x30
 8009116:	f88b 3000 	strb.w	r3, [fp]
 800911a:	465b      	mov	r3, fp
 800911c:	781a      	ldrb	r2, [r3, #0]
 800911e:	3201      	adds	r2, #1
 8009120:	701a      	strb	r2, [r3, #0]
 8009122:	e78c      	b.n	800903e <_dtoa_r+0x5de>
 8009124:	461d      	mov	r5, r3
 8009126:	e7ea      	b.n	80090fe <_dtoa_r+0x69e>
 8009128:	2200      	movs	r2, #0
 800912a:	4b9b      	ldr	r3, [pc, #620]	; (8009398 <_dtoa_r+0x938>)
 800912c:	f7f7 fa84 	bl	8000638 <__aeabi_dmul>
 8009130:	2200      	movs	r2, #0
 8009132:	2300      	movs	r3, #0
 8009134:	4606      	mov	r6, r0
 8009136:	460f      	mov	r7, r1
 8009138:	f7f7 fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800913c:	2800      	cmp	r0, #0
 800913e:	d09a      	beq.n	8009076 <_dtoa_r+0x616>
 8009140:	e7cb      	b.n	80090da <_dtoa_r+0x67a>
 8009142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009144:	2a00      	cmp	r2, #0
 8009146:	f000 808b 	beq.w	8009260 <_dtoa_r+0x800>
 800914a:	9a06      	ldr	r2, [sp, #24]
 800914c:	2a01      	cmp	r2, #1
 800914e:	dc6e      	bgt.n	800922e <_dtoa_r+0x7ce>
 8009150:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009152:	2a00      	cmp	r2, #0
 8009154:	d067      	beq.n	8009226 <_dtoa_r+0x7c6>
 8009156:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800915a:	9f07      	ldr	r7, [sp, #28]
 800915c:	9d05      	ldr	r5, [sp, #20]
 800915e:	9a05      	ldr	r2, [sp, #20]
 8009160:	2101      	movs	r1, #1
 8009162:	441a      	add	r2, r3
 8009164:	4620      	mov	r0, r4
 8009166:	9205      	str	r2, [sp, #20]
 8009168:	4498      	add	r8, r3
 800916a:	f000 fd04 	bl	8009b76 <__i2b>
 800916e:	4606      	mov	r6, r0
 8009170:	2d00      	cmp	r5, #0
 8009172:	dd0c      	ble.n	800918e <_dtoa_r+0x72e>
 8009174:	f1b8 0f00 	cmp.w	r8, #0
 8009178:	dd09      	ble.n	800918e <_dtoa_r+0x72e>
 800917a:	4545      	cmp	r5, r8
 800917c:	9a05      	ldr	r2, [sp, #20]
 800917e:	462b      	mov	r3, r5
 8009180:	bfa8      	it	ge
 8009182:	4643      	movge	r3, r8
 8009184:	1ad2      	subs	r2, r2, r3
 8009186:	9205      	str	r2, [sp, #20]
 8009188:	1aed      	subs	r5, r5, r3
 800918a:	eba8 0803 	sub.w	r8, r8, r3
 800918e:	9b07      	ldr	r3, [sp, #28]
 8009190:	b1eb      	cbz	r3, 80091ce <_dtoa_r+0x76e>
 8009192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009194:	2b00      	cmp	r3, #0
 8009196:	d067      	beq.n	8009268 <_dtoa_r+0x808>
 8009198:	b18f      	cbz	r7, 80091be <_dtoa_r+0x75e>
 800919a:	4631      	mov	r1, r6
 800919c:	463a      	mov	r2, r7
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 fd88 	bl	8009cb4 <__pow5mult>
 80091a4:	9a04      	ldr	r2, [sp, #16]
 80091a6:	4601      	mov	r1, r0
 80091a8:	4606      	mov	r6, r0
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fcec 	bl	8009b88 <__multiply>
 80091b0:	9904      	ldr	r1, [sp, #16]
 80091b2:	9008      	str	r0, [sp, #32]
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fc3e 	bl	8009a36 <_Bfree>
 80091ba:	9b08      	ldr	r3, [sp, #32]
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	9b07      	ldr	r3, [sp, #28]
 80091c0:	1bda      	subs	r2, r3, r7
 80091c2:	d004      	beq.n	80091ce <_dtoa_r+0x76e>
 80091c4:	9904      	ldr	r1, [sp, #16]
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 fd74 	bl	8009cb4 <__pow5mult>
 80091cc:	9004      	str	r0, [sp, #16]
 80091ce:	2101      	movs	r1, #1
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fcd0 	bl	8009b76 <__i2b>
 80091d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091d8:	4607      	mov	r7, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 81d0 	beq.w	8009580 <_dtoa_r+0xb20>
 80091e0:	461a      	mov	r2, r3
 80091e2:	4601      	mov	r1, r0
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fd65 	bl	8009cb4 <__pow5mult>
 80091ea:	9b06      	ldr	r3, [sp, #24]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	4607      	mov	r7, r0
 80091f0:	dc40      	bgt.n	8009274 <_dtoa_r+0x814>
 80091f2:	9b00      	ldr	r3, [sp, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d139      	bne.n	800926c <_dtoa_r+0x80c>
 80091f8:	9b01      	ldr	r3, [sp, #4]
 80091fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d136      	bne.n	8009270 <_dtoa_r+0x810>
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009208:	0d1b      	lsrs	r3, r3, #20
 800920a:	051b      	lsls	r3, r3, #20
 800920c:	b12b      	cbz	r3, 800921a <_dtoa_r+0x7ba>
 800920e:	9b05      	ldr	r3, [sp, #20]
 8009210:	3301      	adds	r3, #1
 8009212:	9305      	str	r3, [sp, #20]
 8009214:	f108 0801 	add.w	r8, r8, #1
 8009218:	2301      	movs	r3, #1
 800921a:	9307      	str	r3, [sp, #28]
 800921c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800921e:	2b00      	cmp	r3, #0
 8009220:	d12a      	bne.n	8009278 <_dtoa_r+0x818>
 8009222:	2001      	movs	r0, #1
 8009224:	e030      	b.n	8009288 <_dtoa_r+0x828>
 8009226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009228:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800922c:	e795      	b.n	800915a <_dtoa_r+0x6fa>
 800922e:	9b07      	ldr	r3, [sp, #28]
 8009230:	f109 37ff 	add.w	r7, r9, #4294967295
 8009234:	42bb      	cmp	r3, r7
 8009236:	bfbf      	itttt	lt
 8009238:	9b07      	ldrlt	r3, [sp, #28]
 800923a:	9707      	strlt	r7, [sp, #28]
 800923c:	1afa      	sublt	r2, r7, r3
 800923e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009240:	bfbb      	ittet	lt
 8009242:	189b      	addlt	r3, r3, r2
 8009244:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009246:	1bdf      	subge	r7, r3, r7
 8009248:	2700      	movlt	r7, #0
 800924a:	f1b9 0f00 	cmp.w	r9, #0
 800924e:	bfb5      	itete	lt
 8009250:	9b05      	ldrlt	r3, [sp, #20]
 8009252:	9d05      	ldrge	r5, [sp, #20]
 8009254:	eba3 0509 	sublt.w	r5, r3, r9
 8009258:	464b      	movge	r3, r9
 800925a:	bfb8      	it	lt
 800925c:	2300      	movlt	r3, #0
 800925e:	e77e      	b.n	800915e <_dtoa_r+0x6fe>
 8009260:	9f07      	ldr	r7, [sp, #28]
 8009262:	9d05      	ldr	r5, [sp, #20]
 8009264:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009266:	e783      	b.n	8009170 <_dtoa_r+0x710>
 8009268:	9a07      	ldr	r2, [sp, #28]
 800926a:	e7ab      	b.n	80091c4 <_dtoa_r+0x764>
 800926c:	2300      	movs	r3, #0
 800926e:	e7d4      	b.n	800921a <_dtoa_r+0x7ba>
 8009270:	9b00      	ldr	r3, [sp, #0]
 8009272:	e7d2      	b.n	800921a <_dtoa_r+0x7ba>
 8009274:	2300      	movs	r3, #0
 8009276:	9307      	str	r3, [sp, #28]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800927e:	6918      	ldr	r0, [r3, #16]
 8009280:	f000 fc2b 	bl	8009ada <__hi0bits>
 8009284:	f1c0 0020 	rsb	r0, r0, #32
 8009288:	4440      	add	r0, r8
 800928a:	f010 001f 	ands.w	r0, r0, #31
 800928e:	d047      	beq.n	8009320 <_dtoa_r+0x8c0>
 8009290:	f1c0 0320 	rsb	r3, r0, #32
 8009294:	2b04      	cmp	r3, #4
 8009296:	dd3b      	ble.n	8009310 <_dtoa_r+0x8b0>
 8009298:	9b05      	ldr	r3, [sp, #20]
 800929a:	f1c0 001c 	rsb	r0, r0, #28
 800929e:	4403      	add	r3, r0
 80092a0:	9305      	str	r3, [sp, #20]
 80092a2:	4405      	add	r5, r0
 80092a4:	4480      	add	r8, r0
 80092a6:	9b05      	ldr	r3, [sp, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dd05      	ble.n	80092b8 <_dtoa_r+0x858>
 80092ac:	461a      	mov	r2, r3
 80092ae:	9904      	ldr	r1, [sp, #16]
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fd4d 	bl	8009d50 <__lshift>
 80092b6:	9004      	str	r0, [sp, #16]
 80092b8:	f1b8 0f00 	cmp.w	r8, #0
 80092bc:	dd05      	ble.n	80092ca <_dtoa_r+0x86a>
 80092be:	4639      	mov	r1, r7
 80092c0:	4642      	mov	r2, r8
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fd44 	bl	8009d50 <__lshift>
 80092c8:	4607      	mov	r7, r0
 80092ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092cc:	b353      	cbz	r3, 8009324 <_dtoa_r+0x8c4>
 80092ce:	4639      	mov	r1, r7
 80092d0:	9804      	ldr	r0, [sp, #16]
 80092d2:	f000 fd91 	bl	8009df8 <__mcmp>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	da24      	bge.n	8009324 <_dtoa_r+0x8c4>
 80092da:	2300      	movs	r3, #0
 80092dc:	220a      	movs	r2, #10
 80092de:	9904      	ldr	r1, [sp, #16]
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fbbf 	bl	8009a64 <__multadd>
 80092e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e8:	9004      	str	r0, [sp, #16]
 80092ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 814d 	beq.w	800958e <_dtoa_r+0xb2e>
 80092f4:	2300      	movs	r3, #0
 80092f6:	4631      	mov	r1, r6
 80092f8:	220a      	movs	r2, #10
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fbb2 	bl	8009a64 <__multadd>
 8009300:	9b02      	ldr	r3, [sp, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	4606      	mov	r6, r0
 8009306:	dc4f      	bgt.n	80093a8 <_dtoa_r+0x948>
 8009308:	9b06      	ldr	r3, [sp, #24]
 800930a:	2b02      	cmp	r3, #2
 800930c:	dd4c      	ble.n	80093a8 <_dtoa_r+0x948>
 800930e:	e011      	b.n	8009334 <_dtoa_r+0x8d4>
 8009310:	d0c9      	beq.n	80092a6 <_dtoa_r+0x846>
 8009312:	9a05      	ldr	r2, [sp, #20]
 8009314:	331c      	adds	r3, #28
 8009316:	441a      	add	r2, r3
 8009318:	9205      	str	r2, [sp, #20]
 800931a:	441d      	add	r5, r3
 800931c:	4498      	add	r8, r3
 800931e:	e7c2      	b.n	80092a6 <_dtoa_r+0x846>
 8009320:	4603      	mov	r3, r0
 8009322:	e7f6      	b.n	8009312 <_dtoa_r+0x8b2>
 8009324:	f1b9 0f00 	cmp.w	r9, #0
 8009328:	dc38      	bgt.n	800939c <_dtoa_r+0x93c>
 800932a:	9b06      	ldr	r3, [sp, #24]
 800932c:	2b02      	cmp	r3, #2
 800932e:	dd35      	ble.n	800939c <_dtoa_r+0x93c>
 8009330:	f8cd 9008 	str.w	r9, [sp, #8]
 8009334:	9b02      	ldr	r3, [sp, #8]
 8009336:	b963      	cbnz	r3, 8009352 <_dtoa_r+0x8f2>
 8009338:	4639      	mov	r1, r7
 800933a:	2205      	movs	r2, #5
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fb91 	bl	8009a64 <__multadd>
 8009342:	4601      	mov	r1, r0
 8009344:	4607      	mov	r7, r0
 8009346:	9804      	ldr	r0, [sp, #16]
 8009348:	f000 fd56 	bl	8009df8 <__mcmp>
 800934c:	2800      	cmp	r0, #0
 800934e:	f73f adcc 	bgt.w	8008eea <_dtoa_r+0x48a>
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	465d      	mov	r5, fp
 8009356:	ea6f 0a03 	mvn.w	sl, r3
 800935a:	f04f 0900 	mov.w	r9, #0
 800935e:	4639      	mov	r1, r7
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fb68 	bl	8009a36 <_Bfree>
 8009366:	2e00      	cmp	r6, #0
 8009368:	f43f aeb7 	beq.w	80090da <_dtoa_r+0x67a>
 800936c:	f1b9 0f00 	cmp.w	r9, #0
 8009370:	d005      	beq.n	800937e <_dtoa_r+0x91e>
 8009372:	45b1      	cmp	r9, r6
 8009374:	d003      	beq.n	800937e <_dtoa_r+0x91e>
 8009376:	4649      	mov	r1, r9
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fb5c 	bl	8009a36 <_Bfree>
 800937e:	4631      	mov	r1, r6
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fb58 	bl	8009a36 <_Bfree>
 8009386:	e6a8      	b.n	80090da <_dtoa_r+0x67a>
 8009388:	2700      	movs	r7, #0
 800938a:	463e      	mov	r6, r7
 800938c:	e7e1      	b.n	8009352 <_dtoa_r+0x8f2>
 800938e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009392:	463e      	mov	r6, r7
 8009394:	e5a9      	b.n	8008eea <_dtoa_r+0x48a>
 8009396:	bf00      	nop
 8009398:	40240000 	.word	0x40240000
 800939c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939e:	f8cd 9008 	str.w	r9, [sp, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 80fa 	beq.w	800959c <_dtoa_r+0xb3c>
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	dd05      	ble.n	80093b8 <_dtoa_r+0x958>
 80093ac:	4631      	mov	r1, r6
 80093ae:	462a      	mov	r2, r5
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fccd 	bl	8009d50 <__lshift>
 80093b6:	4606      	mov	r6, r0
 80093b8:	9b07      	ldr	r3, [sp, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d04c      	beq.n	8009458 <_dtoa_r+0x9f8>
 80093be:	6871      	ldr	r1, [r6, #4]
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 fb04 	bl	80099ce <_Balloc>
 80093c6:	6932      	ldr	r2, [r6, #16]
 80093c8:	3202      	adds	r2, #2
 80093ca:	4605      	mov	r5, r0
 80093cc:	0092      	lsls	r2, r2, #2
 80093ce:	f106 010c 	add.w	r1, r6, #12
 80093d2:	300c      	adds	r0, #12
 80093d4:	f000 faf0 	bl	80099b8 <memcpy>
 80093d8:	2201      	movs	r2, #1
 80093da:	4629      	mov	r1, r5
 80093dc:	4620      	mov	r0, r4
 80093de:	f000 fcb7 	bl	8009d50 <__lshift>
 80093e2:	9b00      	ldr	r3, [sp, #0]
 80093e4:	f8cd b014 	str.w	fp, [sp, #20]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	46b1      	mov	r9, r6
 80093ee:	9307      	str	r3, [sp, #28]
 80093f0:	4606      	mov	r6, r0
 80093f2:	4639      	mov	r1, r7
 80093f4:	9804      	ldr	r0, [sp, #16]
 80093f6:	f7ff faa5 	bl	8008944 <quorem>
 80093fa:	4649      	mov	r1, r9
 80093fc:	4605      	mov	r5, r0
 80093fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009402:	9804      	ldr	r0, [sp, #16]
 8009404:	f000 fcf8 	bl	8009df8 <__mcmp>
 8009408:	4632      	mov	r2, r6
 800940a:	9000      	str	r0, [sp, #0]
 800940c:	4639      	mov	r1, r7
 800940e:	4620      	mov	r0, r4
 8009410:	f000 fd0c 	bl	8009e2c <__mdiff>
 8009414:	68c3      	ldr	r3, [r0, #12]
 8009416:	4602      	mov	r2, r0
 8009418:	bb03      	cbnz	r3, 800945c <_dtoa_r+0x9fc>
 800941a:	4601      	mov	r1, r0
 800941c:	9008      	str	r0, [sp, #32]
 800941e:	9804      	ldr	r0, [sp, #16]
 8009420:	f000 fcea 	bl	8009df8 <__mcmp>
 8009424:	9a08      	ldr	r2, [sp, #32]
 8009426:	4603      	mov	r3, r0
 8009428:	4611      	mov	r1, r2
 800942a:	4620      	mov	r0, r4
 800942c:	9308      	str	r3, [sp, #32]
 800942e:	f000 fb02 	bl	8009a36 <_Bfree>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	b9a3      	cbnz	r3, 8009460 <_dtoa_r+0xa00>
 8009436:	9a06      	ldr	r2, [sp, #24]
 8009438:	b992      	cbnz	r2, 8009460 <_dtoa_r+0xa00>
 800943a:	9a07      	ldr	r2, [sp, #28]
 800943c:	b982      	cbnz	r2, 8009460 <_dtoa_r+0xa00>
 800943e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009442:	d029      	beq.n	8009498 <_dtoa_r+0xa38>
 8009444:	9b00      	ldr	r3, [sp, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	dd01      	ble.n	800944e <_dtoa_r+0x9ee>
 800944a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800944e:	9b05      	ldr	r3, [sp, #20]
 8009450:	1c5d      	adds	r5, r3, #1
 8009452:	f883 8000 	strb.w	r8, [r3]
 8009456:	e782      	b.n	800935e <_dtoa_r+0x8fe>
 8009458:	4630      	mov	r0, r6
 800945a:	e7c2      	b.n	80093e2 <_dtoa_r+0x982>
 800945c:	2301      	movs	r3, #1
 800945e:	e7e3      	b.n	8009428 <_dtoa_r+0x9c8>
 8009460:	9a00      	ldr	r2, [sp, #0]
 8009462:	2a00      	cmp	r2, #0
 8009464:	db04      	blt.n	8009470 <_dtoa_r+0xa10>
 8009466:	d125      	bne.n	80094b4 <_dtoa_r+0xa54>
 8009468:	9a06      	ldr	r2, [sp, #24]
 800946a:	bb1a      	cbnz	r2, 80094b4 <_dtoa_r+0xa54>
 800946c:	9a07      	ldr	r2, [sp, #28]
 800946e:	bb0a      	cbnz	r2, 80094b4 <_dtoa_r+0xa54>
 8009470:	2b00      	cmp	r3, #0
 8009472:	ddec      	ble.n	800944e <_dtoa_r+0x9ee>
 8009474:	2201      	movs	r2, #1
 8009476:	9904      	ldr	r1, [sp, #16]
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fc69 	bl	8009d50 <__lshift>
 800947e:	4639      	mov	r1, r7
 8009480:	9004      	str	r0, [sp, #16]
 8009482:	f000 fcb9 	bl	8009df8 <__mcmp>
 8009486:	2800      	cmp	r0, #0
 8009488:	dc03      	bgt.n	8009492 <_dtoa_r+0xa32>
 800948a:	d1e0      	bne.n	800944e <_dtoa_r+0x9ee>
 800948c:	f018 0f01 	tst.w	r8, #1
 8009490:	d0dd      	beq.n	800944e <_dtoa_r+0x9ee>
 8009492:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009496:	d1d8      	bne.n	800944a <_dtoa_r+0x9ea>
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	9a05      	ldr	r2, [sp, #20]
 800949c:	1c5d      	adds	r5, r3, #1
 800949e:	2339      	movs	r3, #57	; 0x39
 80094a0:	7013      	strb	r3, [r2, #0]
 80094a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094a6:	2b39      	cmp	r3, #57	; 0x39
 80094a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80094ac:	d04f      	beq.n	800954e <_dtoa_r+0xaee>
 80094ae:	3301      	adds	r3, #1
 80094b0:	7013      	strb	r3, [r2, #0]
 80094b2:	e754      	b.n	800935e <_dtoa_r+0x8fe>
 80094b4:	9a05      	ldr	r2, [sp, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f102 0501 	add.w	r5, r2, #1
 80094bc:	dd06      	ble.n	80094cc <_dtoa_r+0xa6c>
 80094be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094c2:	d0e9      	beq.n	8009498 <_dtoa_r+0xa38>
 80094c4:	f108 0801 	add.w	r8, r8, #1
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	e7c2      	b.n	8009452 <_dtoa_r+0x9f2>
 80094cc:	9a02      	ldr	r2, [sp, #8]
 80094ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80094d2:	eba5 030b 	sub.w	r3, r5, fp
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d021      	beq.n	800951e <_dtoa_r+0xabe>
 80094da:	2300      	movs	r3, #0
 80094dc:	220a      	movs	r2, #10
 80094de:	9904      	ldr	r1, [sp, #16]
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fabf 	bl	8009a64 <__multadd>
 80094e6:	45b1      	cmp	r9, r6
 80094e8:	9004      	str	r0, [sp, #16]
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	f04f 020a 	mov.w	r2, #10
 80094f2:	4649      	mov	r1, r9
 80094f4:	4620      	mov	r0, r4
 80094f6:	d105      	bne.n	8009504 <_dtoa_r+0xaa4>
 80094f8:	f000 fab4 	bl	8009a64 <__multadd>
 80094fc:	4681      	mov	r9, r0
 80094fe:	4606      	mov	r6, r0
 8009500:	9505      	str	r5, [sp, #20]
 8009502:	e776      	b.n	80093f2 <_dtoa_r+0x992>
 8009504:	f000 faae 	bl	8009a64 <__multadd>
 8009508:	4631      	mov	r1, r6
 800950a:	4681      	mov	r9, r0
 800950c:	2300      	movs	r3, #0
 800950e:	220a      	movs	r2, #10
 8009510:	4620      	mov	r0, r4
 8009512:	f000 faa7 	bl	8009a64 <__multadd>
 8009516:	4606      	mov	r6, r0
 8009518:	e7f2      	b.n	8009500 <_dtoa_r+0xaa0>
 800951a:	f04f 0900 	mov.w	r9, #0
 800951e:	2201      	movs	r2, #1
 8009520:	9904      	ldr	r1, [sp, #16]
 8009522:	4620      	mov	r0, r4
 8009524:	f000 fc14 	bl	8009d50 <__lshift>
 8009528:	4639      	mov	r1, r7
 800952a:	9004      	str	r0, [sp, #16]
 800952c:	f000 fc64 	bl	8009df8 <__mcmp>
 8009530:	2800      	cmp	r0, #0
 8009532:	dcb6      	bgt.n	80094a2 <_dtoa_r+0xa42>
 8009534:	d102      	bne.n	800953c <_dtoa_r+0xadc>
 8009536:	f018 0f01 	tst.w	r8, #1
 800953a:	d1b2      	bne.n	80094a2 <_dtoa_r+0xa42>
 800953c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009540:	2b30      	cmp	r3, #48	; 0x30
 8009542:	f105 32ff 	add.w	r2, r5, #4294967295
 8009546:	f47f af0a 	bne.w	800935e <_dtoa_r+0x8fe>
 800954a:	4615      	mov	r5, r2
 800954c:	e7f6      	b.n	800953c <_dtoa_r+0xadc>
 800954e:	4593      	cmp	fp, r2
 8009550:	d105      	bne.n	800955e <_dtoa_r+0xafe>
 8009552:	2331      	movs	r3, #49	; 0x31
 8009554:	f10a 0a01 	add.w	sl, sl, #1
 8009558:	f88b 3000 	strb.w	r3, [fp]
 800955c:	e6ff      	b.n	800935e <_dtoa_r+0x8fe>
 800955e:	4615      	mov	r5, r2
 8009560:	e79f      	b.n	80094a2 <_dtoa_r+0xa42>
 8009562:	f8df b064 	ldr.w	fp, [pc, #100]	; 80095c8 <_dtoa_r+0xb68>
 8009566:	e007      	b.n	8009578 <_dtoa_r+0xb18>
 8009568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800956a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80095cc <_dtoa_r+0xb6c>
 800956e:	b11b      	cbz	r3, 8009578 <_dtoa_r+0xb18>
 8009570:	f10b 0308 	add.w	r3, fp, #8
 8009574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	4658      	mov	r0, fp
 800957a:	b017      	add	sp, #92	; 0x5c
 800957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009580:	9b06      	ldr	r3, [sp, #24]
 8009582:	2b01      	cmp	r3, #1
 8009584:	f77f ae35 	ble.w	80091f2 <_dtoa_r+0x792>
 8009588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800958a:	9307      	str	r3, [sp, #28]
 800958c:	e649      	b.n	8009222 <_dtoa_r+0x7c2>
 800958e:	9b02      	ldr	r3, [sp, #8]
 8009590:	2b00      	cmp	r3, #0
 8009592:	dc03      	bgt.n	800959c <_dtoa_r+0xb3c>
 8009594:	9b06      	ldr	r3, [sp, #24]
 8009596:	2b02      	cmp	r3, #2
 8009598:	f73f aecc 	bgt.w	8009334 <_dtoa_r+0x8d4>
 800959c:	465d      	mov	r5, fp
 800959e:	4639      	mov	r1, r7
 80095a0:	9804      	ldr	r0, [sp, #16]
 80095a2:	f7ff f9cf 	bl	8008944 <quorem>
 80095a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80095aa:	f805 8b01 	strb.w	r8, [r5], #1
 80095ae:	9a02      	ldr	r2, [sp, #8]
 80095b0:	eba5 030b 	sub.w	r3, r5, fp
 80095b4:	429a      	cmp	r2, r3
 80095b6:	ddb0      	ble.n	800951a <_dtoa_r+0xaba>
 80095b8:	2300      	movs	r3, #0
 80095ba:	220a      	movs	r2, #10
 80095bc:	9904      	ldr	r1, [sp, #16]
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fa50 	bl	8009a64 <__multadd>
 80095c4:	9004      	str	r0, [sp, #16]
 80095c6:	e7ea      	b.n	800959e <_dtoa_r+0xb3e>
 80095c8:	0800afd4 	.word	0x0800afd4
 80095cc:	0800aff8 	.word	0x0800aff8

080095d0 <__sflush_r>:
 80095d0:	898a      	ldrh	r2, [r1, #12]
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	4605      	mov	r5, r0
 80095d8:	0710      	lsls	r0, r2, #28
 80095da:	460c      	mov	r4, r1
 80095dc:	d458      	bmi.n	8009690 <__sflush_r+0xc0>
 80095de:	684b      	ldr	r3, [r1, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	dc05      	bgt.n	80095f0 <__sflush_r+0x20>
 80095e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dc02      	bgt.n	80095f0 <__sflush_r+0x20>
 80095ea:	2000      	movs	r0, #0
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095f2:	2e00      	cmp	r6, #0
 80095f4:	d0f9      	beq.n	80095ea <__sflush_r+0x1a>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095fc:	682f      	ldr	r7, [r5, #0]
 80095fe:	6a21      	ldr	r1, [r4, #32]
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	d032      	beq.n	800966a <__sflush_r+0x9a>
 8009604:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	075a      	lsls	r2, r3, #29
 800960a:	d505      	bpl.n	8009618 <__sflush_r+0x48>
 800960c:	6863      	ldr	r3, [r4, #4]
 800960e:	1ac0      	subs	r0, r0, r3
 8009610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009612:	b10b      	cbz	r3, 8009618 <__sflush_r+0x48>
 8009614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009616:	1ac0      	subs	r0, r0, r3
 8009618:	2300      	movs	r3, #0
 800961a:	4602      	mov	r2, r0
 800961c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800961e:	6a21      	ldr	r1, [r4, #32]
 8009620:	4628      	mov	r0, r5
 8009622:	47b0      	blx	r6
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	d106      	bne.n	8009638 <__sflush_r+0x68>
 800962a:	6829      	ldr	r1, [r5, #0]
 800962c:	291d      	cmp	r1, #29
 800962e:	d848      	bhi.n	80096c2 <__sflush_r+0xf2>
 8009630:	4a29      	ldr	r2, [pc, #164]	; (80096d8 <__sflush_r+0x108>)
 8009632:	40ca      	lsrs	r2, r1
 8009634:	07d6      	lsls	r6, r2, #31
 8009636:	d544      	bpl.n	80096c2 <__sflush_r+0xf2>
 8009638:	2200      	movs	r2, #0
 800963a:	6062      	str	r2, [r4, #4]
 800963c:	04d9      	lsls	r1, r3, #19
 800963e:	6922      	ldr	r2, [r4, #16]
 8009640:	6022      	str	r2, [r4, #0]
 8009642:	d504      	bpl.n	800964e <__sflush_r+0x7e>
 8009644:	1c42      	adds	r2, r0, #1
 8009646:	d101      	bne.n	800964c <__sflush_r+0x7c>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b903      	cbnz	r3, 800964e <__sflush_r+0x7e>
 800964c:	6560      	str	r0, [r4, #84]	; 0x54
 800964e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009650:	602f      	str	r7, [r5, #0]
 8009652:	2900      	cmp	r1, #0
 8009654:	d0c9      	beq.n	80095ea <__sflush_r+0x1a>
 8009656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800965a:	4299      	cmp	r1, r3
 800965c:	d002      	beq.n	8009664 <__sflush_r+0x94>
 800965e:	4628      	mov	r0, r5
 8009660:	f000 fc9e 	bl	8009fa0 <_free_r>
 8009664:	2000      	movs	r0, #0
 8009666:	6360      	str	r0, [r4, #52]	; 0x34
 8009668:	e7c0      	b.n	80095ec <__sflush_r+0x1c>
 800966a:	2301      	movs	r3, #1
 800966c:	4628      	mov	r0, r5
 800966e:	47b0      	blx	r6
 8009670:	1c41      	adds	r1, r0, #1
 8009672:	d1c8      	bne.n	8009606 <__sflush_r+0x36>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c5      	beq.n	8009606 <__sflush_r+0x36>
 800967a:	2b1d      	cmp	r3, #29
 800967c:	d001      	beq.n	8009682 <__sflush_r+0xb2>
 800967e:	2b16      	cmp	r3, #22
 8009680:	d101      	bne.n	8009686 <__sflush_r+0xb6>
 8009682:	602f      	str	r7, [r5, #0]
 8009684:	e7b1      	b.n	80095ea <__sflush_r+0x1a>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	e7ad      	b.n	80095ec <__sflush_r+0x1c>
 8009690:	690f      	ldr	r7, [r1, #16]
 8009692:	2f00      	cmp	r7, #0
 8009694:	d0a9      	beq.n	80095ea <__sflush_r+0x1a>
 8009696:	0793      	lsls	r3, r2, #30
 8009698:	680e      	ldr	r6, [r1, #0]
 800969a:	bf08      	it	eq
 800969c:	694b      	ldreq	r3, [r1, #20]
 800969e:	600f      	str	r7, [r1, #0]
 80096a0:	bf18      	it	ne
 80096a2:	2300      	movne	r3, #0
 80096a4:	eba6 0807 	sub.w	r8, r6, r7
 80096a8:	608b      	str	r3, [r1, #8]
 80096aa:	f1b8 0f00 	cmp.w	r8, #0
 80096ae:	dd9c      	ble.n	80095ea <__sflush_r+0x1a>
 80096b0:	4643      	mov	r3, r8
 80096b2:	463a      	mov	r2, r7
 80096b4:	6a21      	ldr	r1, [r4, #32]
 80096b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096b8:	4628      	mov	r0, r5
 80096ba:	47b0      	blx	r6
 80096bc:	2800      	cmp	r0, #0
 80096be:	dc06      	bgt.n	80096ce <__sflush_r+0xfe>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	e78e      	b.n	80095ec <__sflush_r+0x1c>
 80096ce:	4407      	add	r7, r0
 80096d0:	eba8 0800 	sub.w	r8, r8, r0
 80096d4:	e7e9      	b.n	80096aa <__sflush_r+0xda>
 80096d6:	bf00      	nop
 80096d8:	20400001 	.word	0x20400001

080096dc <_fflush_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	690b      	ldr	r3, [r1, #16]
 80096e0:	4605      	mov	r5, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	b1db      	cbz	r3, 800971e <_fflush_r+0x42>
 80096e6:	b118      	cbz	r0, 80096f0 <_fflush_r+0x14>
 80096e8:	6983      	ldr	r3, [r0, #24]
 80096ea:	b90b      	cbnz	r3, 80096f0 <_fflush_r+0x14>
 80096ec:	f000 f860 	bl	80097b0 <__sinit>
 80096f0:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <_fflush_r+0x48>)
 80096f2:	429c      	cmp	r4, r3
 80096f4:	d109      	bne.n	800970a <_fflush_r+0x2e>
 80096f6:	686c      	ldr	r4, [r5, #4]
 80096f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fc:	b17b      	cbz	r3, 800971e <_fflush_r+0x42>
 80096fe:	4621      	mov	r1, r4
 8009700:	4628      	mov	r0, r5
 8009702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009706:	f7ff bf63 	b.w	80095d0 <__sflush_r>
 800970a:	4b07      	ldr	r3, [pc, #28]	; (8009728 <_fflush_r+0x4c>)
 800970c:	429c      	cmp	r4, r3
 800970e:	d101      	bne.n	8009714 <_fflush_r+0x38>
 8009710:	68ac      	ldr	r4, [r5, #8]
 8009712:	e7f1      	b.n	80096f8 <_fflush_r+0x1c>
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <_fflush_r+0x50>)
 8009716:	429c      	cmp	r4, r3
 8009718:	bf08      	it	eq
 800971a:	68ec      	ldreq	r4, [r5, #12]
 800971c:	e7ec      	b.n	80096f8 <_fflush_r+0x1c>
 800971e:	2000      	movs	r0, #0
 8009720:	bd38      	pop	{r3, r4, r5, pc}
 8009722:	bf00      	nop
 8009724:	0800b028 	.word	0x0800b028
 8009728:	0800b048 	.word	0x0800b048
 800972c:	0800b008 	.word	0x0800b008

08009730 <std>:
 8009730:	2300      	movs	r3, #0
 8009732:	b510      	push	{r4, lr}
 8009734:	4604      	mov	r4, r0
 8009736:	e9c0 3300 	strd	r3, r3, [r0]
 800973a:	6083      	str	r3, [r0, #8]
 800973c:	8181      	strh	r1, [r0, #12]
 800973e:	6643      	str	r3, [r0, #100]	; 0x64
 8009740:	81c2      	strh	r2, [r0, #14]
 8009742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009746:	6183      	str	r3, [r0, #24]
 8009748:	4619      	mov	r1, r3
 800974a:	2208      	movs	r2, #8
 800974c:	305c      	adds	r0, #92	; 0x5c
 800974e:	f7fe faa3 	bl	8007c98 <memset>
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <std+0x38>)
 8009754:	6263      	str	r3, [r4, #36]	; 0x24
 8009756:	4b05      	ldr	r3, [pc, #20]	; (800976c <std+0x3c>)
 8009758:	62a3      	str	r3, [r4, #40]	; 0x28
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <std+0x40>)
 800975c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <std+0x44>)
 8009760:	6224      	str	r4, [r4, #32]
 8009762:	6323      	str	r3, [r4, #48]	; 0x30
 8009764:	bd10      	pop	{r4, pc}
 8009766:	bf00      	nop
 8009768:	0800a391 	.word	0x0800a391
 800976c:	0800a3b3 	.word	0x0800a3b3
 8009770:	0800a3eb 	.word	0x0800a3eb
 8009774:	0800a40f 	.word	0x0800a40f

08009778 <_cleanup_r>:
 8009778:	4901      	ldr	r1, [pc, #4]	; (8009780 <_cleanup_r+0x8>)
 800977a:	f000 b885 	b.w	8009888 <_fwalk_reent>
 800977e:	bf00      	nop
 8009780:	080096dd 	.word	0x080096dd

08009784 <__sfmoreglue>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	1e4a      	subs	r2, r1, #1
 8009788:	2568      	movs	r5, #104	; 0x68
 800978a:	4355      	muls	r5, r2
 800978c:	460e      	mov	r6, r1
 800978e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009792:	f000 fc53 	bl	800a03c <_malloc_r>
 8009796:	4604      	mov	r4, r0
 8009798:	b140      	cbz	r0, 80097ac <__sfmoreglue+0x28>
 800979a:	2100      	movs	r1, #0
 800979c:	e9c0 1600 	strd	r1, r6, [r0]
 80097a0:	300c      	adds	r0, #12
 80097a2:	60a0      	str	r0, [r4, #8]
 80097a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097a8:	f7fe fa76 	bl	8007c98 <memset>
 80097ac:	4620      	mov	r0, r4
 80097ae:	bd70      	pop	{r4, r5, r6, pc}

080097b0 <__sinit>:
 80097b0:	6983      	ldr	r3, [r0, #24]
 80097b2:	b510      	push	{r4, lr}
 80097b4:	4604      	mov	r4, r0
 80097b6:	bb33      	cbnz	r3, 8009806 <__sinit+0x56>
 80097b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80097bc:	6503      	str	r3, [r0, #80]	; 0x50
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <__sinit+0x58>)
 80097c0:	4a12      	ldr	r2, [pc, #72]	; (800980c <__sinit+0x5c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6282      	str	r2, [r0, #40]	; 0x28
 80097c6:	4298      	cmp	r0, r3
 80097c8:	bf04      	itt	eq
 80097ca:	2301      	moveq	r3, #1
 80097cc:	6183      	streq	r3, [r0, #24]
 80097ce:	f000 f81f 	bl	8009810 <__sfp>
 80097d2:	6060      	str	r0, [r4, #4]
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 f81b 	bl	8009810 <__sfp>
 80097da:	60a0      	str	r0, [r4, #8]
 80097dc:	4620      	mov	r0, r4
 80097de:	f000 f817 	bl	8009810 <__sfp>
 80097e2:	2200      	movs	r2, #0
 80097e4:	60e0      	str	r0, [r4, #12]
 80097e6:	2104      	movs	r1, #4
 80097e8:	6860      	ldr	r0, [r4, #4]
 80097ea:	f7ff ffa1 	bl	8009730 <std>
 80097ee:	2201      	movs	r2, #1
 80097f0:	2109      	movs	r1, #9
 80097f2:	68a0      	ldr	r0, [r4, #8]
 80097f4:	f7ff ff9c 	bl	8009730 <std>
 80097f8:	2202      	movs	r2, #2
 80097fa:	2112      	movs	r1, #18
 80097fc:	68e0      	ldr	r0, [r4, #12]
 80097fe:	f7ff ff97 	bl	8009730 <std>
 8009802:	2301      	movs	r3, #1
 8009804:	61a3      	str	r3, [r4, #24]
 8009806:	bd10      	pop	{r4, pc}
 8009808:	0800afc0 	.word	0x0800afc0
 800980c:	08009779 	.word	0x08009779

08009810 <__sfp>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	4b1b      	ldr	r3, [pc, #108]	; (8009880 <__sfp+0x70>)
 8009814:	681e      	ldr	r6, [r3, #0]
 8009816:	69b3      	ldr	r3, [r6, #24]
 8009818:	4607      	mov	r7, r0
 800981a:	b913      	cbnz	r3, 8009822 <__sfp+0x12>
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff ffc7 	bl	80097b0 <__sinit>
 8009822:	3648      	adds	r6, #72	; 0x48
 8009824:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009828:	3b01      	subs	r3, #1
 800982a:	d503      	bpl.n	8009834 <__sfp+0x24>
 800982c:	6833      	ldr	r3, [r6, #0]
 800982e:	b133      	cbz	r3, 800983e <__sfp+0x2e>
 8009830:	6836      	ldr	r6, [r6, #0]
 8009832:	e7f7      	b.n	8009824 <__sfp+0x14>
 8009834:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009838:	b16d      	cbz	r5, 8009856 <__sfp+0x46>
 800983a:	3468      	adds	r4, #104	; 0x68
 800983c:	e7f4      	b.n	8009828 <__sfp+0x18>
 800983e:	2104      	movs	r1, #4
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff ff9f 	bl	8009784 <__sfmoreglue>
 8009846:	6030      	str	r0, [r6, #0]
 8009848:	2800      	cmp	r0, #0
 800984a:	d1f1      	bne.n	8009830 <__sfp+0x20>
 800984c:	230c      	movs	r3, #12
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	4604      	mov	r4, r0
 8009852:	4620      	mov	r0, r4
 8009854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009856:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <__sfp+0x74>)
 8009858:	6665      	str	r5, [r4, #100]	; 0x64
 800985a:	e9c4 5500 	strd	r5, r5, [r4]
 800985e:	60a5      	str	r5, [r4, #8]
 8009860:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009864:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009868:	2208      	movs	r2, #8
 800986a:	4629      	mov	r1, r5
 800986c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009870:	f7fe fa12 	bl	8007c98 <memset>
 8009874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800987c:	e7e9      	b.n	8009852 <__sfp+0x42>
 800987e:	bf00      	nop
 8009880:	0800afc0 	.word	0x0800afc0
 8009884:	ffff0001 	.word	0xffff0001

08009888 <_fwalk_reent>:
 8009888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800988c:	4680      	mov	r8, r0
 800988e:	4689      	mov	r9, r1
 8009890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009894:	2600      	movs	r6, #0
 8009896:	b914      	cbnz	r4, 800989e <_fwalk_reent+0x16>
 8009898:	4630      	mov	r0, r6
 800989a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80098a2:	3f01      	subs	r7, #1
 80098a4:	d501      	bpl.n	80098aa <_fwalk_reent+0x22>
 80098a6:	6824      	ldr	r4, [r4, #0]
 80098a8:	e7f5      	b.n	8009896 <_fwalk_reent+0xe>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d907      	bls.n	80098c0 <_fwalk_reent+0x38>
 80098b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098b4:	3301      	adds	r3, #1
 80098b6:	d003      	beq.n	80098c0 <_fwalk_reent+0x38>
 80098b8:	4629      	mov	r1, r5
 80098ba:	4640      	mov	r0, r8
 80098bc:	47c8      	blx	r9
 80098be:	4306      	orrs	r6, r0
 80098c0:	3568      	adds	r5, #104	; 0x68
 80098c2:	e7ee      	b.n	80098a2 <_fwalk_reent+0x1a>

080098c4 <_localeconv_r>:
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <_localeconv_r+0x14>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6a18      	ldr	r0, [r3, #32]
 80098ca:	4b04      	ldr	r3, [pc, #16]	; (80098dc <_localeconv_r+0x18>)
 80098cc:	2800      	cmp	r0, #0
 80098ce:	bf08      	it	eq
 80098d0:	4618      	moveq	r0, r3
 80098d2:	30f0      	adds	r0, #240	; 0xf0
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	2000000c 	.word	0x2000000c
 80098dc:	20000070 	.word	0x20000070

080098e0 <__swhatbuf_r>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	460e      	mov	r6, r1
 80098e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	b096      	sub	sp, #88	; 0x58
 80098ec:	4614      	mov	r4, r2
 80098ee:	461d      	mov	r5, r3
 80098f0:	da07      	bge.n	8009902 <__swhatbuf_r+0x22>
 80098f2:	2300      	movs	r3, #0
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	89b3      	ldrh	r3, [r6, #12]
 80098f8:	061a      	lsls	r2, r3, #24
 80098fa:	d410      	bmi.n	800991e <__swhatbuf_r+0x3e>
 80098fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009900:	e00e      	b.n	8009920 <__swhatbuf_r+0x40>
 8009902:	466a      	mov	r2, sp
 8009904:	f000 fdaa 	bl	800a45c <_fstat_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	dbf2      	blt.n	80098f2 <__swhatbuf_r+0x12>
 800990c:	9a01      	ldr	r2, [sp, #4]
 800990e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009912:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009916:	425a      	negs	r2, r3
 8009918:	415a      	adcs	r2, r3
 800991a:	602a      	str	r2, [r5, #0]
 800991c:	e7ee      	b.n	80098fc <__swhatbuf_r+0x1c>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	2000      	movs	r0, #0
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	b016      	add	sp, #88	; 0x58
 8009926:	bd70      	pop	{r4, r5, r6, pc}

08009928 <__smakebuf_r>:
 8009928:	898b      	ldrh	r3, [r1, #12]
 800992a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800992c:	079d      	lsls	r5, r3, #30
 800992e:	4606      	mov	r6, r0
 8009930:	460c      	mov	r4, r1
 8009932:	d507      	bpl.n	8009944 <__smakebuf_r+0x1c>
 8009934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	2301      	movs	r3, #1
 800993e:	6163      	str	r3, [r4, #20]
 8009940:	b002      	add	sp, #8
 8009942:	bd70      	pop	{r4, r5, r6, pc}
 8009944:	ab01      	add	r3, sp, #4
 8009946:	466a      	mov	r2, sp
 8009948:	f7ff ffca 	bl	80098e0 <__swhatbuf_r>
 800994c:	9900      	ldr	r1, [sp, #0]
 800994e:	4605      	mov	r5, r0
 8009950:	4630      	mov	r0, r6
 8009952:	f000 fb73 	bl	800a03c <_malloc_r>
 8009956:	b948      	cbnz	r0, 800996c <__smakebuf_r+0x44>
 8009958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995c:	059a      	lsls	r2, r3, #22
 800995e:	d4ef      	bmi.n	8009940 <__smakebuf_r+0x18>
 8009960:	f023 0303 	bic.w	r3, r3, #3
 8009964:	f043 0302 	orr.w	r3, r3, #2
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	e7e3      	b.n	8009934 <__smakebuf_r+0xc>
 800996c:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <__smakebuf_r+0x7c>)
 800996e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	6020      	str	r0, [r4, #0]
 8009974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	9b00      	ldr	r3, [sp, #0]
 800997c:	6163      	str	r3, [r4, #20]
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	6120      	str	r0, [r4, #16]
 8009982:	b15b      	cbz	r3, 800999c <__smakebuf_r+0x74>
 8009984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009988:	4630      	mov	r0, r6
 800998a:	f000 fd79 	bl	800a480 <_isatty_r>
 800998e:	b128      	cbz	r0, 800999c <__smakebuf_r+0x74>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f023 0303 	bic.w	r3, r3, #3
 8009996:	f043 0301 	orr.w	r3, r3, #1
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	431d      	orrs	r5, r3
 80099a0:	81a5      	strh	r5, [r4, #12]
 80099a2:	e7cd      	b.n	8009940 <__smakebuf_r+0x18>
 80099a4:	08009779 	.word	0x08009779

080099a8 <malloc>:
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <malloc+0xc>)
 80099aa:	4601      	mov	r1, r0
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	f000 bb45 	b.w	800a03c <_malloc_r>
 80099b2:	bf00      	nop
 80099b4:	2000000c 	.word	0x2000000c

080099b8 <memcpy>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	1e43      	subs	r3, r0, #1
 80099bc:	440a      	add	r2, r1
 80099be:	4291      	cmp	r1, r2
 80099c0:	d100      	bne.n	80099c4 <memcpy+0xc>
 80099c2:	bd10      	pop	{r4, pc}
 80099c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099cc:	e7f7      	b.n	80099be <memcpy+0x6>

080099ce <_Balloc>:
 80099ce:	b570      	push	{r4, r5, r6, lr}
 80099d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099d2:	4604      	mov	r4, r0
 80099d4:	460e      	mov	r6, r1
 80099d6:	b93d      	cbnz	r5, 80099e8 <_Balloc+0x1a>
 80099d8:	2010      	movs	r0, #16
 80099da:	f7ff ffe5 	bl	80099a8 <malloc>
 80099de:	6260      	str	r0, [r4, #36]	; 0x24
 80099e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099e4:	6005      	str	r5, [r0, #0]
 80099e6:	60c5      	str	r5, [r0, #12]
 80099e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80099ea:	68eb      	ldr	r3, [r5, #12]
 80099ec:	b183      	cbz	r3, 8009a10 <_Balloc+0x42>
 80099ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80099f6:	b9b8      	cbnz	r0, 8009a28 <_Balloc+0x5a>
 80099f8:	2101      	movs	r1, #1
 80099fa:	fa01 f506 	lsl.w	r5, r1, r6
 80099fe:	1d6a      	adds	r2, r5, #5
 8009a00:	0092      	lsls	r2, r2, #2
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 fabe 	bl	8009f84 <_calloc_r>
 8009a08:	b160      	cbz	r0, 8009a24 <_Balloc+0x56>
 8009a0a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009a0e:	e00e      	b.n	8009a2e <_Balloc+0x60>
 8009a10:	2221      	movs	r2, #33	; 0x21
 8009a12:	2104      	movs	r1, #4
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 fab5 	bl	8009f84 <_calloc_r>
 8009a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a1c:	60e8      	str	r0, [r5, #12]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e4      	bne.n	80099ee <_Balloc+0x20>
 8009a24:	2000      	movs	r0, #0
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	6802      	ldr	r2, [r0, #0]
 8009a2a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a34:	e7f7      	b.n	8009a26 <_Balloc+0x58>

08009a36 <_Bfree>:
 8009a36:	b570      	push	{r4, r5, r6, lr}
 8009a38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	b93c      	cbnz	r4, 8009a50 <_Bfree+0x1a>
 8009a40:	2010      	movs	r0, #16
 8009a42:	f7ff ffb1 	bl	80099a8 <malloc>
 8009a46:	6270      	str	r0, [r6, #36]	; 0x24
 8009a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a4c:	6004      	str	r4, [r0, #0]
 8009a4e:	60c4      	str	r4, [r0, #12]
 8009a50:	b13d      	cbz	r5, 8009a62 <_Bfree+0x2c>
 8009a52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a54:	686a      	ldr	r2, [r5, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a5c:	6029      	str	r1, [r5, #0]
 8009a5e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a62:	bd70      	pop	{r4, r5, r6, pc}

08009a64 <__multadd>:
 8009a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a68:	690d      	ldr	r5, [r1, #16]
 8009a6a:	461f      	mov	r7, r3
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	f101 0c14 	add.w	ip, r1, #20
 8009a74:	2300      	movs	r3, #0
 8009a76:	f8dc 0000 	ldr.w	r0, [ip]
 8009a7a:	b281      	uxth	r1, r0
 8009a7c:	fb02 7101 	mla	r1, r2, r1, r7
 8009a80:	0c0f      	lsrs	r7, r1, #16
 8009a82:	0c00      	lsrs	r0, r0, #16
 8009a84:	fb02 7000 	mla	r0, r2, r0, r7
 8009a88:	b289      	uxth	r1, r1
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009a90:	429d      	cmp	r5, r3
 8009a92:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009a96:	f84c 1b04 	str.w	r1, [ip], #4
 8009a9a:	dcec      	bgt.n	8009a76 <__multadd+0x12>
 8009a9c:	b1d7      	cbz	r7, 8009ad4 <__multadd+0x70>
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	42ab      	cmp	r3, r5
 8009aa2:	dc12      	bgt.n	8009aca <__multadd+0x66>
 8009aa4:	6861      	ldr	r1, [r4, #4]
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	3101      	adds	r1, #1
 8009aaa:	f7ff ff90 	bl	80099ce <_Balloc>
 8009aae:	6922      	ldr	r2, [r4, #16]
 8009ab0:	3202      	adds	r2, #2
 8009ab2:	f104 010c 	add.w	r1, r4, #12
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	0092      	lsls	r2, r2, #2
 8009aba:	300c      	adds	r0, #12
 8009abc:	f7ff ff7c 	bl	80099b8 <memcpy>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ffb7 	bl	8009a36 <_Bfree>
 8009ac8:	4644      	mov	r4, r8
 8009aca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ace:	3501      	adds	r5, #1
 8009ad0:	615f      	str	r7, [r3, #20]
 8009ad2:	6125      	str	r5, [r4, #16]
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ada <__hi0bits>:
 8009ada:	0c02      	lsrs	r2, r0, #16
 8009adc:	0412      	lsls	r2, r2, #16
 8009ade:	4603      	mov	r3, r0
 8009ae0:	b9b2      	cbnz	r2, 8009b10 <__hi0bits+0x36>
 8009ae2:	0403      	lsls	r3, r0, #16
 8009ae4:	2010      	movs	r0, #16
 8009ae6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009aea:	bf04      	itt	eq
 8009aec:	021b      	lsleq	r3, r3, #8
 8009aee:	3008      	addeq	r0, #8
 8009af0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009af4:	bf04      	itt	eq
 8009af6:	011b      	lsleq	r3, r3, #4
 8009af8:	3004      	addeq	r0, #4
 8009afa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009afe:	bf04      	itt	eq
 8009b00:	009b      	lsleq	r3, r3, #2
 8009b02:	3002      	addeq	r0, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	db06      	blt.n	8009b16 <__hi0bits+0x3c>
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	d503      	bpl.n	8009b14 <__hi0bits+0x3a>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	4770      	bx	lr
 8009b10:	2000      	movs	r0, #0
 8009b12:	e7e8      	b.n	8009ae6 <__hi0bits+0xc>
 8009b14:	2020      	movs	r0, #32
 8009b16:	4770      	bx	lr

08009b18 <__lo0bits>:
 8009b18:	6803      	ldr	r3, [r0, #0]
 8009b1a:	f013 0207 	ands.w	r2, r3, #7
 8009b1e:	4601      	mov	r1, r0
 8009b20:	d00b      	beq.n	8009b3a <__lo0bits+0x22>
 8009b22:	07da      	lsls	r2, r3, #31
 8009b24:	d423      	bmi.n	8009b6e <__lo0bits+0x56>
 8009b26:	0798      	lsls	r0, r3, #30
 8009b28:	bf49      	itett	mi
 8009b2a:	085b      	lsrmi	r3, r3, #1
 8009b2c:	089b      	lsrpl	r3, r3, #2
 8009b2e:	2001      	movmi	r0, #1
 8009b30:	600b      	strmi	r3, [r1, #0]
 8009b32:	bf5c      	itt	pl
 8009b34:	600b      	strpl	r3, [r1, #0]
 8009b36:	2002      	movpl	r0, #2
 8009b38:	4770      	bx	lr
 8009b3a:	b298      	uxth	r0, r3
 8009b3c:	b9a8      	cbnz	r0, 8009b6a <__lo0bits+0x52>
 8009b3e:	0c1b      	lsrs	r3, r3, #16
 8009b40:	2010      	movs	r0, #16
 8009b42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b46:	bf04      	itt	eq
 8009b48:	0a1b      	lsreq	r3, r3, #8
 8009b4a:	3008      	addeq	r0, #8
 8009b4c:	071a      	lsls	r2, r3, #28
 8009b4e:	bf04      	itt	eq
 8009b50:	091b      	lsreq	r3, r3, #4
 8009b52:	3004      	addeq	r0, #4
 8009b54:	079a      	lsls	r2, r3, #30
 8009b56:	bf04      	itt	eq
 8009b58:	089b      	lsreq	r3, r3, #2
 8009b5a:	3002      	addeq	r0, #2
 8009b5c:	07da      	lsls	r2, r3, #31
 8009b5e:	d402      	bmi.n	8009b66 <__lo0bits+0x4e>
 8009b60:	085b      	lsrs	r3, r3, #1
 8009b62:	d006      	beq.n	8009b72 <__lo0bits+0x5a>
 8009b64:	3001      	adds	r0, #1
 8009b66:	600b      	str	r3, [r1, #0]
 8009b68:	4770      	bx	lr
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	e7e9      	b.n	8009b42 <__lo0bits+0x2a>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	4770      	bx	lr
 8009b72:	2020      	movs	r0, #32
 8009b74:	4770      	bx	lr

08009b76 <__i2b>:
 8009b76:	b510      	push	{r4, lr}
 8009b78:	460c      	mov	r4, r1
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	f7ff ff27 	bl	80099ce <_Balloc>
 8009b80:	2201      	movs	r2, #1
 8009b82:	6144      	str	r4, [r0, #20]
 8009b84:	6102      	str	r2, [r0, #16]
 8009b86:	bd10      	pop	{r4, pc}

08009b88 <__multiply>:
 8009b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	690a      	ldr	r2, [r1, #16]
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	bfb8      	it	lt
 8009b96:	460b      	movlt	r3, r1
 8009b98:	4688      	mov	r8, r1
 8009b9a:	bfbc      	itt	lt
 8009b9c:	46a0      	movlt	r8, r4
 8009b9e:	461c      	movlt	r4, r3
 8009ba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ba4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ba8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bb0:	eb07 0609 	add.w	r6, r7, r9
 8009bb4:	42b3      	cmp	r3, r6
 8009bb6:	bfb8      	it	lt
 8009bb8:	3101      	addlt	r1, #1
 8009bba:	f7ff ff08 	bl	80099ce <_Balloc>
 8009bbe:	f100 0514 	add.w	r5, r0, #20
 8009bc2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4573      	cmp	r3, lr
 8009bcc:	d316      	bcc.n	8009bfc <__multiply+0x74>
 8009bce:	f104 0214 	add.w	r2, r4, #20
 8009bd2:	f108 0114 	add.w	r1, r8, #20
 8009bd6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009bda:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	9201      	str	r2, [sp, #4]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d80c      	bhi.n	8009c02 <__multiply+0x7a>
 8009be8:	2e00      	cmp	r6, #0
 8009bea:	dd03      	ble.n	8009bf4 <__multiply+0x6c>
 8009bec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d05d      	beq.n	8009cb0 <__multiply+0x128>
 8009bf4:	6106      	str	r6, [r0, #16]
 8009bf6:	b003      	add	sp, #12
 8009bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	f843 2b04 	str.w	r2, [r3], #4
 8009c00:	e7e3      	b.n	8009bca <__multiply+0x42>
 8009c02:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c06:	f1bb 0f00 	cmp.w	fp, #0
 8009c0a:	d023      	beq.n	8009c54 <__multiply+0xcc>
 8009c0c:	4689      	mov	r9, r1
 8009c0e:	46ac      	mov	ip, r5
 8009c10:	f04f 0800 	mov.w	r8, #0
 8009c14:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c18:	f8dc a000 	ldr.w	sl, [ip]
 8009c1c:	b2a3      	uxth	r3, r4
 8009c1e:	fa1f fa8a 	uxth.w	sl, sl
 8009c22:	fb0b a303 	mla	r3, fp, r3, sl
 8009c26:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c2a:	f8dc 4000 	ldr.w	r4, [ip]
 8009c2e:	4443      	add	r3, r8
 8009c30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c34:	fb0b 840a 	mla	r4, fp, sl, r8
 8009c38:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c3c:	46e2      	mov	sl, ip
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c44:	454f      	cmp	r7, r9
 8009c46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c4a:	f84a 3b04 	str.w	r3, [sl], #4
 8009c4e:	d82b      	bhi.n	8009ca8 <__multiply+0x120>
 8009c50:	f8cc 8004 	str.w	r8, [ip, #4]
 8009c54:	9b01      	ldr	r3, [sp, #4]
 8009c56:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009c5a:	3204      	adds	r2, #4
 8009c5c:	f1ba 0f00 	cmp.w	sl, #0
 8009c60:	d020      	beq.n	8009ca4 <__multiply+0x11c>
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	4689      	mov	r9, r1
 8009c66:	46a8      	mov	r8, r5
 8009c68:	f04f 0b00 	mov.w	fp, #0
 8009c6c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009c70:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009c74:	fb0a 440c 	mla	r4, sl, ip, r4
 8009c78:	445c      	add	r4, fp
 8009c7a:	46c4      	mov	ip, r8
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c82:	f84c 3b04 	str.w	r3, [ip], #4
 8009c86:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c8a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009c8e:	0c1b      	lsrs	r3, r3, #16
 8009c90:	fb0a b303 	mla	r3, sl, r3, fp
 8009c94:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009c98:	454f      	cmp	r7, r9
 8009c9a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009c9e:	d805      	bhi.n	8009cac <__multiply+0x124>
 8009ca0:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ca4:	3504      	adds	r5, #4
 8009ca6:	e79b      	b.n	8009be0 <__multiply+0x58>
 8009ca8:	46d4      	mov	ip, sl
 8009caa:	e7b3      	b.n	8009c14 <__multiply+0x8c>
 8009cac:	46e0      	mov	r8, ip
 8009cae:	e7dd      	b.n	8009c6c <__multiply+0xe4>
 8009cb0:	3e01      	subs	r6, #1
 8009cb2:	e799      	b.n	8009be8 <__multiply+0x60>

08009cb4 <__pow5mult>:
 8009cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb8:	4615      	mov	r5, r2
 8009cba:	f012 0203 	ands.w	r2, r2, #3
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	460f      	mov	r7, r1
 8009cc2:	d007      	beq.n	8009cd4 <__pow5mult+0x20>
 8009cc4:	3a01      	subs	r2, #1
 8009cc6:	4c21      	ldr	r4, [pc, #132]	; (8009d4c <__pow5mult+0x98>)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cce:	f7ff fec9 	bl	8009a64 <__multadd>
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	10ad      	asrs	r5, r5, #2
 8009cd6:	d035      	beq.n	8009d44 <__pow5mult+0x90>
 8009cd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cda:	b93c      	cbnz	r4, 8009cec <__pow5mult+0x38>
 8009cdc:	2010      	movs	r0, #16
 8009cde:	f7ff fe63 	bl	80099a8 <malloc>
 8009ce2:	6270      	str	r0, [r6, #36]	; 0x24
 8009ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ce8:	6004      	str	r4, [r0, #0]
 8009cea:	60c4      	str	r4, [r0, #12]
 8009cec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cf4:	b94c      	cbnz	r4, 8009d0a <__pow5mult+0x56>
 8009cf6:	f240 2171 	movw	r1, #625	; 0x271
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7ff ff3b 	bl	8009b76 <__i2b>
 8009d00:	2300      	movs	r3, #0
 8009d02:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d06:	4604      	mov	r4, r0
 8009d08:	6003      	str	r3, [r0, #0]
 8009d0a:	f04f 0800 	mov.w	r8, #0
 8009d0e:	07eb      	lsls	r3, r5, #31
 8009d10:	d50a      	bpl.n	8009d28 <__pow5mult+0x74>
 8009d12:	4639      	mov	r1, r7
 8009d14:	4622      	mov	r2, r4
 8009d16:	4630      	mov	r0, r6
 8009d18:	f7ff ff36 	bl	8009b88 <__multiply>
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	4681      	mov	r9, r0
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff fe88 	bl	8009a36 <_Bfree>
 8009d26:	464f      	mov	r7, r9
 8009d28:	106d      	asrs	r5, r5, #1
 8009d2a:	d00b      	beq.n	8009d44 <__pow5mult+0x90>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	b938      	cbnz	r0, 8009d40 <__pow5mult+0x8c>
 8009d30:	4622      	mov	r2, r4
 8009d32:	4621      	mov	r1, r4
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff ff27 	bl	8009b88 <__multiply>
 8009d3a:	6020      	str	r0, [r4, #0]
 8009d3c:	f8c0 8000 	str.w	r8, [r0]
 8009d40:	4604      	mov	r4, r0
 8009d42:	e7e4      	b.n	8009d0e <__pow5mult+0x5a>
 8009d44:	4638      	mov	r0, r7
 8009d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4a:	bf00      	nop
 8009d4c:	0800b158 	.word	0x0800b158

08009d50 <__lshift>:
 8009d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	460c      	mov	r4, r1
 8009d56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	6849      	ldr	r1, [r1, #4]
 8009d5e:	eb0a 0903 	add.w	r9, sl, r3
 8009d62:	68a3      	ldr	r3, [r4, #8]
 8009d64:	4607      	mov	r7, r0
 8009d66:	4616      	mov	r6, r2
 8009d68:	f109 0501 	add.w	r5, r9, #1
 8009d6c:	42ab      	cmp	r3, r5
 8009d6e:	db32      	blt.n	8009dd6 <__lshift+0x86>
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7ff fe2c 	bl	80099ce <_Balloc>
 8009d76:	2300      	movs	r3, #0
 8009d78:	4680      	mov	r8, r0
 8009d7a:	f100 0114 	add.w	r1, r0, #20
 8009d7e:	461a      	mov	r2, r3
 8009d80:	4553      	cmp	r3, sl
 8009d82:	db2b      	blt.n	8009ddc <__lshift+0x8c>
 8009d84:	6920      	ldr	r0, [r4, #16]
 8009d86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d8a:	f104 0314 	add.w	r3, r4, #20
 8009d8e:	f016 021f 	ands.w	r2, r6, #31
 8009d92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d9a:	d025      	beq.n	8009de8 <__lshift+0x98>
 8009d9c:	f1c2 0e20 	rsb	lr, r2, #32
 8009da0:	2000      	movs	r0, #0
 8009da2:	681e      	ldr	r6, [r3, #0]
 8009da4:	468a      	mov	sl, r1
 8009da6:	4096      	lsls	r6, r2
 8009da8:	4330      	orrs	r0, r6
 8009daa:	f84a 0b04 	str.w	r0, [sl], #4
 8009dae:	f853 0b04 	ldr.w	r0, [r3], #4
 8009db2:	459c      	cmp	ip, r3
 8009db4:	fa20 f00e 	lsr.w	r0, r0, lr
 8009db8:	d814      	bhi.n	8009de4 <__lshift+0x94>
 8009dba:	6048      	str	r0, [r1, #4]
 8009dbc:	b108      	cbz	r0, 8009dc2 <__lshift+0x72>
 8009dbe:	f109 0502 	add.w	r5, r9, #2
 8009dc2:	3d01      	subs	r5, #1
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f8c8 5010 	str.w	r5, [r8, #16]
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f7ff fe33 	bl	8009a36 <_Bfree>
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd6:	3101      	adds	r1, #1
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	e7c7      	b.n	8009d6c <__lshift+0x1c>
 8009ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009de0:	3301      	adds	r3, #1
 8009de2:	e7cd      	b.n	8009d80 <__lshift+0x30>
 8009de4:	4651      	mov	r1, sl
 8009de6:	e7dc      	b.n	8009da2 <__lshift+0x52>
 8009de8:	3904      	subs	r1, #4
 8009dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dee:	f841 2f04 	str.w	r2, [r1, #4]!
 8009df2:	459c      	cmp	ip, r3
 8009df4:	d8f9      	bhi.n	8009dea <__lshift+0x9a>
 8009df6:	e7e4      	b.n	8009dc2 <__lshift+0x72>

08009df8 <__mcmp>:
 8009df8:	6903      	ldr	r3, [r0, #16]
 8009dfa:	690a      	ldr	r2, [r1, #16]
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	b530      	push	{r4, r5, lr}
 8009e00:	d10c      	bne.n	8009e1c <__mcmp+0x24>
 8009e02:	0092      	lsls	r2, r2, #2
 8009e04:	3014      	adds	r0, #20
 8009e06:	3114      	adds	r1, #20
 8009e08:	1884      	adds	r4, r0, r2
 8009e0a:	4411      	add	r1, r2
 8009e0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e14:	4295      	cmp	r5, r2
 8009e16:	d003      	beq.n	8009e20 <__mcmp+0x28>
 8009e18:	d305      	bcc.n	8009e26 <__mcmp+0x2e>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	bd30      	pop	{r4, r5, pc}
 8009e20:	42a0      	cmp	r0, r4
 8009e22:	d3f3      	bcc.n	8009e0c <__mcmp+0x14>
 8009e24:	e7fa      	b.n	8009e1c <__mcmp+0x24>
 8009e26:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2a:	e7f7      	b.n	8009e1c <__mcmp+0x24>

08009e2c <__mdiff>:
 8009e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e30:	460d      	mov	r5, r1
 8009e32:	4607      	mov	r7, r0
 8009e34:	4611      	mov	r1, r2
 8009e36:	4628      	mov	r0, r5
 8009e38:	4614      	mov	r4, r2
 8009e3a:	f7ff ffdd 	bl	8009df8 <__mcmp>
 8009e3e:	1e06      	subs	r6, r0, #0
 8009e40:	d108      	bne.n	8009e54 <__mdiff+0x28>
 8009e42:	4631      	mov	r1, r6
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7ff fdc2 	bl	80099ce <_Balloc>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	bfa4      	itt	ge
 8009e56:	4623      	movge	r3, r4
 8009e58:	462c      	movge	r4, r5
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	6861      	ldr	r1, [r4, #4]
 8009e5e:	bfa6      	itte	ge
 8009e60:	461d      	movge	r5, r3
 8009e62:	2600      	movge	r6, #0
 8009e64:	2601      	movlt	r6, #1
 8009e66:	f7ff fdb2 	bl	80099ce <_Balloc>
 8009e6a:	692b      	ldr	r3, [r5, #16]
 8009e6c:	60c6      	str	r6, [r0, #12]
 8009e6e:	6926      	ldr	r6, [r4, #16]
 8009e70:	f105 0914 	add.w	r9, r5, #20
 8009e74:	f104 0214 	add.w	r2, r4, #20
 8009e78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009e7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009e80:	f100 0514 	add.w	r5, r0, #20
 8009e84:	f04f 0e00 	mov.w	lr, #0
 8009e88:	f852 ab04 	ldr.w	sl, [r2], #4
 8009e8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009e90:	fa1e f18a 	uxtah	r1, lr, sl
 8009e94:	b2a3      	uxth	r3, r4
 8009e96:	1ac9      	subs	r1, r1, r3
 8009e98:	0c23      	lsrs	r3, r4, #16
 8009e9a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009e9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ea2:	b289      	uxth	r1, r1
 8009ea4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ea8:	45c8      	cmp	r8, r9
 8009eaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009eae:	4694      	mov	ip, r2
 8009eb0:	f845 3b04 	str.w	r3, [r5], #4
 8009eb4:	d8e8      	bhi.n	8009e88 <__mdiff+0x5c>
 8009eb6:	45bc      	cmp	ip, r7
 8009eb8:	d304      	bcc.n	8009ec4 <__mdiff+0x98>
 8009eba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009ebe:	b183      	cbz	r3, 8009ee2 <__mdiff+0xb6>
 8009ec0:	6106      	str	r6, [r0, #16]
 8009ec2:	e7c5      	b.n	8009e50 <__mdiff+0x24>
 8009ec4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ec8:	fa1e f381 	uxtah	r3, lr, r1
 8009ecc:	141a      	asrs	r2, r3, #16
 8009ece:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ed8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009edc:	f845 3b04 	str.w	r3, [r5], #4
 8009ee0:	e7e9      	b.n	8009eb6 <__mdiff+0x8a>
 8009ee2:	3e01      	subs	r6, #1
 8009ee4:	e7e9      	b.n	8009eba <__mdiff+0x8e>

08009ee6 <__d2b>:
 8009ee6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eea:	460e      	mov	r6, r1
 8009eec:	2101      	movs	r1, #1
 8009eee:	ec59 8b10 	vmov	r8, r9, d0
 8009ef2:	4615      	mov	r5, r2
 8009ef4:	f7ff fd6b 	bl	80099ce <_Balloc>
 8009ef8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009efc:	4607      	mov	r7, r0
 8009efe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f02:	bb34      	cbnz	r4, 8009f52 <__d2b+0x6c>
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	f1b8 0300 	subs.w	r3, r8, #0
 8009f0a:	d027      	beq.n	8009f5c <__d2b+0x76>
 8009f0c:	a802      	add	r0, sp, #8
 8009f0e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009f12:	f7ff fe01 	bl	8009b18 <__lo0bits>
 8009f16:	9900      	ldr	r1, [sp, #0]
 8009f18:	b1f0      	cbz	r0, 8009f58 <__d2b+0x72>
 8009f1a:	9a01      	ldr	r2, [sp, #4]
 8009f1c:	f1c0 0320 	rsb	r3, r0, #32
 8009f20:	fa02 f303 	lsl.w	r3, r2, r3
 8009f24:	430b      	orrs	r3, r1
 8009f26:	40c2      	lsrs	r2, r0
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	9201      	str	r2, [sp, #4]
 8009f2c:	9b01      	ldr	r3, [sp, #4]
 8009f2e:	61bb      	str	r3, [r7, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bf14      	ite	ne
 8009f34:	2102      	movne	r1, #2
 8009f36:	2101      	moveq	r1, #1
 8009f38:	6139      	str	r1, [r7, #16]
 8009f3a:	b1c4      	cbz	r4, 8009f6e <__d2b+0x88>
 8009f3c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f40:	4404      	add	r4, r0
 8009f42:	6034      	str	r4, [r6, #0]
 8009f44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f48:	6028      	str	r0, [r5, #0]
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	b003      	add	sp, #12
 8009f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f56:	e7d5      	b.n	8009f04 <__d2b+0x1e>
 8009f58:	6179      	str	r1, [r7, #20]
 8009f5a:	e7e7      	b.n	8009f2c <__d2b+0x46>
 8009f5c:	a801      	add	r0, sp, #4
 8009f5e:	f7ff fddb 	bl	8009b18 <__lo0bits>
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	2101      	movs	r1, #1
 8009f68:	6139      	str	r1, [r7, #16]
 8009f6a:	3020      	adds	r0, #32
 8009f6c:	e7e5      	b.n	8009f3a <__d2b+0x54>
 8009f6e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f76:	6030      	str	r0, [r6, #0]
 8009f78:	6918      	ldr	r0, [r3, #16]
 8009f7a:	f7ff fdae 	bl	8009ada <__hi0bits>
 8009f7e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f82:	e7e1      	b.n	8009f48 <__d2b+0x62>

08009f84 <_calloc_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	fb02 f401 	mul.w	r4, r2, r1
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f000 f856 	bl	800a03c <_malloc_r>
 8009f90:	4605      	mov	r5, r0
 8009f92:	b118      	cbz	r0, 8009f9c <_calloc_r+0x18>
 8009f94:	4622      	mov	r2, r4
 8009f96:	2100      	movs	r1, #0
 8009f98:	f7fd fe7e 	bl	8007c98 <memset>
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}

08009fa0 <_free_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	2900      	cmp	r1, #0
 8009fa6:	d045      	beq.n	800a034 <_free_r+0x94>
 8009fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fac:	1f0c      	subs	r4, r1, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfb8      	it	lt
 8009fb2:	18e4      	addlt	r4, r4, r3
 8009fb4:	f000 fa98 	bl	800a4e8 <__malloc_lock>
 8009fb8:	4a1f      	ldr	r2, [pc, #124]	; (800a038 <_free_r+0x98>)
 8009fba:	6813      	ldr	r3, [r2, #0]
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	b933      	cbnz	r3, 8009fce <_free_r+0x2e>
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	6014      	str	r4, [r2, #0]
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fca:	f000 ba8e 	b.w	800a4ea <__malloc_unlock>
 8009fce:	42a3      	cmp	r3, r4
 8009fd0:	d90c      	bls.n	8009fec <_free_r+0x4c>
 8009fd2:	6821      	ldr	r1, [r4, #0]
 8009fd4:	1862      	adds	r2, r4, r1
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	bf04      	itt	eq
 8009fda:	681a      	ldreq	r2, [r3, #0]
 8009fdc:	685b      	ldreq	r3, [r3, #4]
 8009fde:	6063      	str	r3, [r4, #4]
 8009fe0:	bf04      	itt	eq
 8009fe2:	1852      	addeq	r2, r2, r1
 8009fe4:	6022      	streq	r2, [r4, #0]
 8009fe6:	6004      	str	r4, [r0, #0]
 8009fe8:	e7ec      	b.n	8009fc4 <_free_r+0x24>
 8009fea:	4613      	mov	r3, r2
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	b10a      	cbz	r2, 8009ff4 <_free_r+0x54>
 8009ff0:	42a2      	cmp	r2, r4
 8009ff2:	d9fa      	bls.n	8009fea <_free_r+0x4a>
 8009ff4:	6819      	ldr	r1, [r3, #0]
 8009ff6:	1858      	adds	r0, r3, r1
 8009ff8:	42a0      	cmp	r0, r4
 8009ffa:	d10b      	bne.n	800a014 <_free_r+0x74>
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	4401      	add	r1, r0
 800a000:	1858      	adds	r0, r3, r1
 800a002:	4282      	cmp	r2, r0
 800a004:	6019      	str	r1, [r3, #0]
 800a006:	d1dd      	bne.n	8009fc4 <_free_r+0x24>
 800a008:	6810      	ldr	r0, [r2, #0]
 800a00a:	6852      	ldr	r2, [r2, #4]
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	4401      	add	r1, r0
 800a010:	6019      	str	r1, [r3, #0]
 800a012:	e7d7      	b.n	8009fc4 <_free_r+0x24>
 800a014:	d902      	bls.n	800a01c <_free_r+0x7c>
 800a016:	230c      	movs	r3, #12
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	e7d3      	b.n	8009fc4 <_free_r+0x24>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	1821      	adds	r1, r4, r0
 800a020:	428a      	cmp	r2, r1
 800a022:	bf04      	itt	eq
 800a024:	6811      	ldreq	r1, [r2, #0]
 800a026:	6852      	ldreq	r2, [r2, #4]
 800a028:	6062      	str	r2, [r4, #4]
 800a02a:	bf04      	itt	eq
 800a02c:	1809      	addeq	r1, r1, r0
 800a02e:	6021      	streq	r1, [r4, #0]
 800a030:	605c      	str	r4, [r3, #4]
 800a032:	e7c7      	b.n	8009fc4 <_free_r+0x24>
 800a034:	bd38      	pop	{r3, r4, r5, pc}
 800a036:	bf00      	nop
 800a038:	20000200 	.word	0x20000200

0800a03c <_malloc_r>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	1ccd      	adds	r5, r1, #3
 800a040:	f025 0503 	bic.w	r5, r5, #3
 800a044:	3508      	adds	r5, #8
 800a046:	2d0c      	cmp	r5, #12
 800a048:	bf38      	it	cc
 800a04a:	250c      	movcc	r5, #12
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	4606      	mov	r6, r0
 800a050:	db01      	blt.n	800a056 <_malloc_r+0x1a>
 800a052:	42a9      	cmp	r1, r5
 800a054:	d903      	bls.n	800a05e <_malloc_r+0x22>
 800a056:	230c      	movs	r3, #12
 800a058:	6033      	str	r3, [r6, #0]
 800a05a:	2000      	movs	r0, #0
 800a05c:	bd70      	pop	{r4, r5, r6, pc}
 800a05e:	f000 fa43 	bl	800a4e8 <__malloc_lock>
 800a062:	4a21      	ldr	r2, [pc, #132]	; (800a0e8 <_malloc_r+0xac>)
 800a064:	6814      	ldr	r4, [r2, #0]
 800a066:	4621      	mov	r1, r4
 800a068:	b991      	cbnz	r1, 800a090 <_malloc_r+0x54>
 800a06a:	4c20      	ldr	r4, [pc, #128]	; (800a0ec <_malloc_r+0xb0>)
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	b91b      	cbnz	r3, 800a078 <_malloc_r+0x3c>
 800a070:	4630      	mov	r0, r6
 800a072:	f000 f97d 	bl	800a370 <_sbrk_r>
 800a076:	6020      	str	r0, [r4, #0]
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f000 f978 	bl	800a370 <_sbrk_r>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d124      	bne.n	800a0ce <_malloc_r+0x92>
 800a084:	230c      	movs	r3, #12
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 fa2e 	bl	800a4ea <__malloc_unlock>
 800a08e:	e7e4      	b.n	800a05a <_malloc_r+0x1e>
 800a090:	680b      	ldr	r3, [r1, #0]
 800a092:	1b5b      	subs	r3, r3, r5
 800a094:	d418      	bmi.n	800a0c8 <_malloc_r+0x8c>
 800a096:	2b0b      	cmp	r3, #11
 800a098:	d90f      	bls.n	800a0ba <_malloc_r+0x7e>
 800a09a:	600b      	str	r3, [r1, #0]
 800a09c:	50cd      	str	r5, [r1, r3]
 800a09e:	18cc      	adds	r4, r1, r3
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 fa22 	bl	800a4ea <__malloc_unlock>
 800a0a6:	f104 000b 	add.w	r0, r4, #11
 800a0aa:	1d23      	adds	r3, r4, #4
 800a0ac:	f020 0007 	bic.w	r0, r0, #7
 800a0b0:	1ac3      	subs	r3, r0, r3
 800a0b2:	d0d3      	beq.n	800a05c <_malloc_r+0x20>
 800a0b4:	425a      	negs	r2, r3
 800a0b6:	50e2      	str	r2, [r4, r3]
 800a0b8:	e7d0      	b.n	800a05c <_malloc_r+0x20>
 800a0ba:	428c      	cmp	r4, r1
 800a0bc:	684b      	ldr	r3, [r1, #4]
 800a0be:	bf16      	itet	ne
 800a0c0:	6063      	strne	r3, [r4, #4]
 800a0c2:	6013      	streq	r3, [r2, #0]
 800a0c4:	460c      	movne	r4, r1
 800a0c6:	e7eb      	b.n	800a0a0 <_malloc_r+0x64>
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	6849      	ldr	r1, [r1, #4]
 800a0cc:	e7cc      	b.n	800a068 <_malloc_r+0x2c>
 800a0ce:	1cc4      	adds	r4, r0, #3
 800a0d0:	f024 0403 	bic.w	r4, r4, #3
 800a0d4:	42a0      	cmp	r0, r4
 800a0d6:	d005      	beq.n	800a0e4 <_malloc_r+0xa8>
 800a0d8:	1a21      	subs	r1, r4, r0
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 f948 	bl	800a370 <_sbrk_r>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d0cf      	beq.n	800a084 <_malloc_r+0x48>
 800a0e4:	6025      	str	r5, [r4, #0]
 800a0e6:	e7db      	b.n	800a0a0 <_malloc_r+0x64>
 800a0e8:	20000200 	.word	0x20000200
 800a0ec:	20000204 	.word	0x20000204

0800a0f0 <__sfputc_r>:
 800a0f0:	6893      	ldr	r3, [r2, #8]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	b410      	push	{r4}
 800a0f8:	6093      	str	r3, [r2, #8]
 800a0fa:	da08      	bge.n	800a10e <__sfputc_r+0x1e>
 800a0fc:	6994      	ldr	r4, [r2, #24]
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	db01      	blt.n	800a106 <__sfputc_r+0x16>
 800a102:	290a      	cmp	r1, #10
 800a104:	d103      	bne.n	800a10e <__sfputc_r+0x1e>
 800a106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a10a:	f7fe bb5b 	b.w	80087c4 <__swbuf_r>
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	1c58      	adds	r0, r3, #1
 800a112:	6010      	str	r0, [r2, #0]
 800a114:	7019      	strb	r1, [r3, #0]
 800a116:	4608      	mov	r0, r1
 800a118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <__sfputs_r>:
 800a11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a120:	4606      	mov	r6, r0
 800a122:	460f      	mov	r7, r1
 800a124:	4614      	mov	r4, r2
 800a126:	18d5      	adds	r5, r2, r3
 800a128:	42ac      	cmp	r4, r5
 800a12a:	d101      	bne.n	800a130 <__sfputs_r+0x12>
 800a12c:	2000      	movs	r0, #0
 800a12e:	e007      	b.n	800a140 <__sfputs_r+0x22>
 800a130:	463a      	mov	r2, r7
 800a132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ffda 	bl	800a0f0 <__sfputc_r>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d1f3      	bne.n	800a128 <__sfputs_r+0xa>
 800a140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a144 <_vfiprintf_r>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	460c      	mov	r4, r1
 800a14a:	b09d      	sub	sp, #116	; 0x74
 800a14c:	4617      	mov	r7, r2
 800a14e:	461d      	mov	r5, r3
 800a150:	4606      	mov	r6, r0
 800a152:	b118      	cbz	r0, 800a15c <_vfiprintf_r+0x18>
 800a154:	6983      	ldr	r3, [r0, #24]
 800a156:	b90b      	cbnz	r3, 800a15c <_vfiprintf_r+0x18>
 800a158:	f7ff fb2a 	bl	80097b0 <__sinit>
 800a15c:	4b7c      	ldr	r3, [pc, #496]	; (800a350 <_vfiprintf_r+0x20c>)
 800a15e:	429c      	cmp	r4, r3
 800a160:	d158      	bne.n	800a214 <_vfiprintf_r+0xd0>
 800a162:	6874      	ldr	r4, [r6, #4]
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	0718      	lsls	r0, r3, #28
 800a168:	d55e      	bpl.n	800a228 <_vfiprintf_r+0xe4>
 800a16a:	6923      	ldr	r3, [r4, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d05b      	beq.n	800a228 <_vfiprintf_r+0xe4>
 800a170:	2300      	movs	r3, #0
 800a172:	9309      	str	r3, [sp, #36]	; 0x24
 800a174:	2320      	movs	r3, #32
 800a176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a17a:	2330      	movs	r3, #48	; 0x30
 800a17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a180:	9503      	str	r5, [sp, #12]
 800a182:	f04f 0b01 	mov.w	fp, #1
 800a186:	46b8      	mov	r8, r7
 800a188:	4645      	mov	r5, r8
 800a18a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a18e:	b10b      	cbz	r3, 800a194 <_vfiprintf_r+0x50>
 800a190:	2b25      	cmp	r3, #37	; 0x25
 800a192:	d154      	bne.n	800a23e <_vfiprintf_r+0xfa>
 800a194:	ebb8 0a07 	subs.w	sl, r8, r7
 800a198:	d00b      	beq.n	800a1b2 <_vfiprintf_r+0x6e>
 800a19a:	4653      	mov	r3, sl
 800a19c:	463a      	mov	r2, r7
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7ff ffbc 	bl	800a11e <__sfputs_r>
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f000 80c2 	beq.w	800a330 <_vfiprintf_r+0x1ec>
 800a1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ae:	4453      	add	r3, sl
 800a1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b2:	f898 3000 	ldrb.w	r3, [r8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 80ba 	beq.w	800a330 <_vfiprintf_r+0x1ec>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	9307      	str	r3, [sp, #28]
 800a1ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d0:	46a8      	mov	r8, r5
 800a1d2:	2205      	movs	r2, #5
 800a1d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a1d8:	485e      	ldr	r0, [pc, #376]	; (800a354 <_vfiprintf_r+0x210>)
 800a1da:	f7f6 f821 	bl	8000220 <memchr>
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	bb78      	cbnz	r0, 800a242 <_vfiprintf_r+0xfe>
 800a1e2:	06d9      	lsls	r1, r3, #27
 800a1e4:	bf44      	itt	mi
 800a1e6:	2220      	movmi	r2, #32
 800a1e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1ec:	071a      	lsls	r2, r3, #28
 800a1ee:	bf44      	itt	mi
 800a1f0:	222b      	movmi	r2, #43	; 0x2b
 800a1f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1f6:	782a      	ldrb	r2, [r5, #0]
 800a1f8:	2a2a      	cmp	r2, #42	; 0x2a
 800a1fa:	d02a      	beq.n	800a252 <_vfiprintf_r+0x10e>
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	46a8      	mov	r8, r5
 800a200:	2000      	movs	r0, #0
 800a202:	250a      	movs	r5, #10
 800a204:	4641      	mov	r1, r8
 800a206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a20a:	3b30      	subs	r3, #48	; 0x30
 800a20c:	2b09      	cmp	r3, #9
 800a20e:	d969      	bls.n	800a2e4 <_vfiprintf_r+0x1a0>
 800a210:	b360      	cbz	r0, 800a26c <_vfiprintf_r+0x128>
 800a212:	e024      	b.n	800a25e <_vfiprintf_r+0x11a>
 800a214:	4b50      	ldr	r3, [pc, #320]	; (800a358 <_vfiprintf_r+0x214>)
 800a216:	429c      	cmp	r4, r3
 800a218:	d101      	bne.n	800a21e <_vfiprintf_r+0xda>
 800a21a:	68b4      	ldr	r4, [r6, #8]
 800a21c:	e7a2      	b.n	800a164 <_vfiprintf_r+0x20>
 800a21e:	4b4f      	ldr	r3, [pc, #316]	; (800a35c <_vfiprintf_r+0x218>)
 800a220:	429c      	cmp	r4, r3
 800a222:	bf08      	it	eq
 800a224:	68f4      	ldreq	r4, [r6, #12]
 800a226:	e79d      	b.n	800a164 <_vfiprintf_r+0x20>
 800a228:	4621      	mov	r1, r4
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7fe fb1c 	bl	8008868 <__swsetup_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	d09d      	beq.n	800a170 <_vfiprintf_r+0x2c>
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	b01d      	add	sp, #116	; 0x74
 800a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23e:	46a8      	mov	r8, r5
 800a240:	e7a2      	b.n	800a188 <_vfiprintf_r+0x44>
 800a242:	4a44      	ldr	r2, [pc, #272]	; (800a354 <_vfiprintf_r+0x210>)
 800a244:	1a80      	subs	r0, r0, r2
 800a246:	fa0b f000 	lsl.w	r0, fp, r0
 800a24a:	4318      	orrs	r0, r3
 800a24c:	9004      	str	r0, [sp, #16]
 800a24e:	4645      	mov	r5, r8
 800a250:	e7be      	b.n	800a1d0 <_vfiprintf_r+0x8c>
 800a252:	9a03      	ldr	r2, [sp, #12]
 800a254:	1d11      	adds	r1, r2, #4
 800a256:	6812      	ldr	r2, [r2, #0]
 800a258:	9103      	str	r1, [sp, #12]
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	db01      	blt.n	800a262 <_vfiprintf_r+0x11e>
 800a25e:	9207      	str	r2, [sp, #28]
 800a260:	e004      	b.n	800a26c <_vfiprintf_r+0x128>
 800a262:	4252      	negs	r2, r2
 800a264:	f043 0302 	orr.w	r3, r3, #2
 800a268:	9207      	str	r2, [sp, #28]
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	f898 3000 	ldrb.w	r3, [r8]
 800a270:	2b2e      	cmp	r3, #46	; 0x2e
 800a272:	d10e      	bne.n	800a292 <_vfiprintf_r+0x14e>
 800a274:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a278:	2b2a      	cmp	r3, #42	; 0x2a
 800a27a:	d138      	bne.n	800a2ee <_vfiprintf_r+0x1aa>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	1d1a      	adds	r2, r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	9203      	str	r2, [sp, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	bfb8      	it	lt
 800a288:	f04f 33ff 	movlt.w	r3, #4294967295
 800a28c:	f108 0802 	add.w	r8, r8, #2
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	4d33      	ldr	r5, [pc, #204]	; (800a360 <_vfiprintf_r+0x21c>)
 800a294:	f898 1000 	ldrb.w	r1, [r8]
 800a298:	2203      	movs	r2, #3
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7f5 ffc0 	bl	8000220 <memchr>
 800a2a0:	b140      	cbz	r0, 800a2b4 <_vfiprintf_r+0x170>
 800a2a2:	2340      	movs	r3, #64	; 0x40
 800a2a4:	1b40      	subs	r0, r0, r5
 800a2a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	4303      	orrs	r3, r0
 800a2ae:	f108 0801 	add.w	r8, r8, #1
 800a2b2:	9304      	str	r3, [sp, #16]
 800a2b4:	f898 1000 	ldrb.w	r1, [r8]
 800a2b8:	482a      	ldr	r0, [pc, #168]	; (800a364 <_vfiprintf_r+0x220>)
 800a2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2be:	2206      	movs	r2, #6
 800a2c0:	f108 0701 	add.w	r7, r8, #1
 800a2c4:	f7f5 ffac 	bl	8000220 <memchr>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d037      	beq.n	800a33c <_vfiprintf_r+0x1f8>
 800a2cc:	4b26      	ldr	r3, [pc, #152]	; (800a368 <_vfiprintf_r+0x224>)
 800a2ce:	bb1b      	cbnz	r3, 800a318 <_vfiprintf_r+0x1d4>
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	3307      	adds	r3, #7
 800a2d4:	f023 0307 	bic.w	r3, r3, #7
 800a2d8:	3308      	adds	r3, #8
 800a2da:	9303      	str	r3, [sp, #12]
 800a2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2de:	444b      	add	r3, r9
 800a2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e2:	e750      	b.n	800a186 <_vfiprintf_r+0x42>
 800a2e4:	fb05 3202 	mla	r2, r5, r2, r3
 800a2e8:	2001      	movs	r0, #1
 800a2ea:	4688      	mov	r8, r1
 800a2ec:	e78a      	b.n	800a204 <_vfiprintf_r+0xc0>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f108 0801 	add.w	r8, r8, #1
 800a2f4:	9305      	str	r3, [sp, #20]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	250a      	movs	r5, #10
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a300:	3a30      	subs	r2, #48	; 0x30
 800a302:	2a09      	cmp	r2, #9
 800a304:	d903      	bls.n	800a30e <_vfiprintf_r+0x1ca>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0c3      	beq.n	800a292 <_vfiprintf_r+0x14e>
 800a30a:	9105      	str	r1, [sp, #20]
 800a30c:	e7c1      	b.n	800a292 <_vfiprintf_r+0x14e>
 800a30e:	fb05 2101 	mla	r1, r5, r1, r2
 800a312:	2301      	movs	r3, #1
 800a314:	4680      	mov	r8, r0
 800a316:	e7f0      	b.n	800a2fa <_vfiprintf_r+0x1b6>
 800a318:	ab03      	add	r3, sp, #12
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	4622      	mov	r2, r4
 800a31e:	4b13      	ldr	r3, [pc, #76]	; (800a36c <_vfiprintf_r+0x228>)
 800a320:	a904      	add	r1, sp, #16
 800a322:	4630      	mov	r0, r6
 800a324:	f7fd fd54 	bl	8007dd0 <_printf_float>
 800a328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a32c:	4681      	mov	r9, r0
 800a32e:	d1d5      	bne.n	800a2dc <_vfiprintf_r+0x198>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	065b      	lsls	r3, r3, #25
 800a334:	f53f af7e 	bmi.w	800a234 <_vfiprintf_r+0xf0>
 800a338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a33a:	e77d      	b.n	800a238 <_vfiprintf_r+0xf4>
 800a33c:	ab03      	add	r3, sp, #12
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	4622      	mov	r2, r4
 800a342:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <_vfiprintf_r+0x228>)
 800a344:	a904      	add	r1, sp, #16
 800a346:	4630      	mov	r0, r6
 800a348:	f7fd fff8 	bl	800833c <_printf_i>
 800a34c:	e7ec      	b.n	800a328 <_vfiprintf_r+0x1e4>
 800a34e:	bf00      	nop
 800a350:	0800b028 	.word	0x0800b028
 800a354:	0800b164 	.word	0x0800b164
 800a358:	0800b048 	.word	0x0800b048
 800a35c:	0800b008 	.word	0x0800b008
 800a360:	0800b16a 	.word	0x0800b16a
 800a364:	0800b16e 	.word	0x0800b16e
 800a368:	08007dd1 	.word	0x08007dd1
 800a36c:	0800a11f 	.word	0x0800a11f

0800a370 <_sbrk_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4c06      	ldr	r4, [pc, #24]	; (800a38c <_sbrk_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4605      	mov	r5, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	f7f9 fa1e 	bl	80037bc <_sbrk>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_sbrk_r+0x1a>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	b103      	cbz	r3, 800a38a <_sbrk_r+0x1a>
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20000614 	.word	0x20000614

0800a390 <__sread>:
 800a390:	b510      	push	{r4, lr}
 800a392:	460c      	mov	r4, r1
 800a394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a398:	f000 f8a8 	bl	800a4ec <_read_r>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	bfab      	itete	ge
 800a3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3a4:	181b      	addge	r3, r3, r0
 800a3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3aa:	bfac      	ite	ge
 800a3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ae:	81a3      	strhlt	r3, [r4, #12]
 800a3b0:	bd10      	pop	{r4, pc}

0800a3b2 <__swrite>:
 800a3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b6:	461f      	mov	r7, r3
 800a3b8:	898b      	ldrh	r3, [r1, #12]
 800a3ba:	05db      	lsls	r3, r3, #23
 800a3bc:	4605      	mov	r5, r0
 800a3be:	460c      	mov	r4, r1
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	d505      	bpl.n	800a3d0 <__swrite+0x1e>
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	f000 f868 	bl	800a4a0 <_lseek_r>
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	4632      	mov	r2, r6
 800a3de:	463b      	mov	r3, r7
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e6:	f000 b817 	b.w	800a418 <_write_r>

0800a3ea <__sseek>:
 800a3ea:	b510      	push	{r4, lr}
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f2:	f000 f855 	bl	800a4a0 <_lseek_r>
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	bf15      	itete	ne
 800a3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a406:	81a3      	strheq	r3, [r4, #12]
 800a408:	bf18      	it	ne
 800a40a:	81a3      	strhne	r3, [r4, #12]
 800a40c:	bd10      	pop	{r4, pc}

0800a40e <__sclose>:
 800a40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a412:	f000 b813 	b.w	800a43c <_close_r>
	...

0800a418 <_write_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4c07      	ldr	r4, [pc, #28]	; (800a438 <_write_r+0x20>)
 800a41c:	4605      	mov	r5, r0
 800a41e:	4608      	mov	r0, r1
 800a420:	4611      	mov	r1, r2
 800a422:	2200      	movs	r2, #0
 800a424:	6022      	str	r2, [r4, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	f7f9 f977 	bl	800371a <_write>
 800a42c:	1c43      	adds	r3, r0, #1
 800a42e:	d102      	bne.n	800a436 <_write_r+0x1e>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	b103      	cbz	r3, 800a436 <_write_r+0x1e>
 800a434:	602b      	str	r3, [r5, #0]
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	20000614 	.word	0x20000614

0800a43c <_close_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4c06      	ldr	r4, [pc, #24]	; (800a458 <_close_r+0x1c>)
 800a440:	2300      	movs	r3, #0
 800a442:	4605      	mov	r5, r0
 800a444:	4608      	mov	r0, r1
 800a446:	6023      	str	r3, [r4, #0]
 800a448:	f7f9 f983 	bl	8003752 <_close>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_close_r+0x1a>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	b103      	cbz	r3, 800a456 <_close_r+0x1a>
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20000614 	.word	0x20000614

0800a45c <_fstat_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4c07      	ldr	r4, [pc, #28]	; (800a47c <_fstat_r+0x20>)
 800a460:	2300      	movs	r3, #0
 800a462:	4605      	mov	r5, r0
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	f7f9 f97e 	bl	800376a <_fstat>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	d102      	bne.n	800a478 <_fstat_r+0x1c>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	b103      	cbz	r3, 800a478 <_fstat_r+0x1c>
 800a476:	602b      	str	r3, [r5, #0]
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	20000614 	.word	0x20000614

0800a480 <_isatty_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4c06      	ldr	r4, [pc, #24]	; (800a49c <_isatty_r+0x1c>)
 800a484:	2300      	movs	r3, #0
 800a486:	4605      	mov	r5, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	f7f9 f97d 	bl	800378a <_isatty>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_isatty_r+0x1a>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	b103      	cbz	r3, 800a49a <_isatty_r+0x1a>
 800a498:	602b      	str	r3, [r5, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	20000614 	.word	0x20000614

0800a4a0 <_lseek_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4c07      	ldr	r4, [pc, #28]	; (800a4c0 <_lseek_r+0x20>)
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f9 f976 	bl	80037a0 <_lseek>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_lseek_r+0x1e>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_lseek_r+0x1e>
 800a4bc:	602b      	str	r3, [r5, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20000614 	.word	0x20000614

0800a4c4 <__ascii_mbtowc>:
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	b901      	cbnz	r1, 800a4ca <__ascii_mbtowc+0x6>
 800a4c8:	a901      	add	r1, sp, #4
 800a4ca:	b142      	cbz	r2, 800a4de <__ascii_mbtowc+0x1a>
 800a4cc:	b14b      	cbz	r3, 800a4e2 <__ascii_mbtowc+0x1e>
 800a4ce:	7813      	ldrb	r3, [r2, #0]
 800a4d0:	600b      	str	r3, [r1, #0]
 800a4d2:	7812      	ldrb	r2, [r2, #0]
 800a4d4:	1c10      	adds	r0, r2, #0
 800a4d6:	bf18      	it	ne
 800a4d8:	2001      	movne	r0, #1
 800a4da:	b002      	add	sp, #8
 800a4dc:	4770      	bx	lr
 800a4de:	4610      	mov	r0, r2
 800a4e0:	e7fb      	b.n	800a4da <__ascii_mbtowc+0x16>
 800a4e2:	f06f 0001 	mvn.w	r0, #1
 800a4e6:	e7f8      	b.n	800a4da <__ascii_mbtowc+0x16>

0800a4e8 <__malloc_lock>:
 800a4e8:	4770      	bx	lr

0800a4ea <__malloc_unlock>:
 800a4ea:	4770      	bx	lr

0800a4ec <_read_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4c07      	ldr	r4, [pc, #28]	; (800a50c <_read_r+0x20>)
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	4608      	mov	r0, r1
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	6022      	str	r2, [r4, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f7f9 f8f0 	bl	80036e0 <_read>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_read_r+0x1e>
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	b103      	cbz	r3, 800a50a <_read_r+0x1e>
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	20000614 	.word	0x20000614

0800a510 <__ascii_wctomb>:
 800a510:	b149      	cbz	r1, 800a526 <__ascii_wctomb+0x16>
 800a512:	2aff      	cmp	r2, #255	; 0xff
 800a514:	bf85      	ittet	hi
 800a516:	238a      	movhi	r3, #138	; 0x8a
 800a518:	6003      	strhi	r3, [r0, #0]
 800a51a:	700a      	strbls	r2, [r1, #0]
 800a51c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a520:	bf98      	it	ls
 800a522:	2001      	movls	r0, #1
 800a524:	4770      	bx	lr
 800a526:	4608      	mov	r0, r1
 800a528:	4770      	bx	lr
	...

0800a52c <powf>:
 800a52c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a530:	ed2d 8b04 	vpush	{d8-d9}
 800a534:	4ca7      	ldr	r4, [pc, #668]	; (800a7d4 <powf+0x2a8>)
 800a536:	b08a      	sub	sp, #40	; 0x28
 800a538:	eef0 8a40 	vmov.f32	s17, s0
 800a53c:	eeb0 8a60 	vmov.f32	s16, s1
 800a540:	f000 f958 	bl	800a7f4 <__ieee754_powf>
 800a544:	f994 5000 	ldrsb.w	r5, [r4]
 800a548:	1c6b      	adds	r3, r5, #1
 800a54a:	eeb0 9a40 	vmov.f32	s18, s0
 800a54e:	4626      	mov	r6, r4
 800a550:	d05f      	beq.n	800a612 <powf+0xe6>
 800a552:	eeb4 8a48 	vcmp.f32	s16, s16
 800a556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55a:	d65a      	bvs.n	800a612 <powf+0xe6>
 800a55c:	eef4 8a68 	vcmp.f32	s17, s17
 800a560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a564:	d721      	bvc.n	800a5aa <powf+0x7e>
 800a566:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56e:	d150      	bne.n	800a612 <powf+0xe6>
 800a570:	2301      	movs	r3, #1
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	4b98      	ldr	r3, [pc, #608]	; (800a7d8 <powf+0x2ac>)
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	ee18 0a90 	vmov	r0, s17
 800a57c:	2300      	movs	r3, #0
 800a57e:	9308      	str	r3, [sp, #32]
 800a580:	f7f6 f802 	bl	8000588 <__aeabi_f2d>
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	ee18 0a10 	vmov	r0, s16
 800a58c:	f7f5 fffc 	bl	8000588 <__aeabi_f2d>
 800a590:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <powf+0x2b0>)
 800a592:	2200      	movs	r2, #0
 800a594:	2d02      	cmp	r5, #2
 800a596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a59a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a59e:	d032      	beq.n	800a606 <powf+0xda>
 800a5a0:	4668      	mov	r0, sp
 800a5a2:	f000 fbea 	bl	800ad7a <matherr>
 800a5a6:	bb40      	cbnz	r0, 800a5fa <powf+0xce>
 800a5a8:	e065      	b.n	800a676 <powf+0x14a>
 800a5aa:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800a7e0 <powf+0x2b4>
 800a5ae:	eef4 8a69 	vcmp.f32	s17, s19
 800a5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b6:	d163      	bne.n	800a680 <powf+0x154>
 800a5b8:	eeb4 8a69 	vcmp.f32	s16, s19
 800a5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c0:	d12e      	bne.n	800a620 <powf+0xf4>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	4b84      	ldr	r3, [pc, #528]	; (800a7d8 <powf+0x2ac>)
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	ee18 0a90 	vmov	r0, s17
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	9308      	str	r3, [sp, #32]
 800a5d2:	f7f5 ffd9 	bl	8000588 <__aeabi_f2d>
 800a5d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5da:	ee18 0a10 	vmov	r0, s16
 800a5de:	f7f5 ffd3 	bl	8000588 <__aeabi_f2d>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5ee:	2d00      	cmp	r5, #0
 800a5f0:	d0d6      	beq.n	800a5a0 <powf+0x74>
 800a5f2:	4b7a      	ldr	r3, [pc, #488]	; (800a7dc <powf+0x2b0>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5fa:	9b08      	ldr	r3, [sp, #32]
 800a5fc:	b11b      	cbz	r3, 800a606 <powf+0xda>
 800a5fe:	f7fd fb21 	bl	8007c44 <__errno>
 800a602:	9b08      	ldr	r3, [sp, #32]
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a60a:	f7f6 faed 	bl	8000be8 <__aeabi_d2f>
 800a60e:	ee09 0a10 	vmov	s18, r0
 800a612:	eeb0 0a49 	vmov.f32	s0, s18
 800a616:	b00a      	add	sp, #40	; 0x28
 800a618:	ecbd 8b04 	vpop	{d8-d9}
 800a61c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a620:	eeb0 0a48 	vmov.f32	s0, s16
 800a624:	f000 fbb2 	bl	800ad8c <finitef>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d0f2      	beq.n	800a612 <powf+0xe6>
 800a62c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a634:	d5ed      	bpl.n	800a612 <powf+0xe6>
 800a636:	2301      	movs	r3, #1
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	4b67      	ldr	r3, [pc, #412]	; (800a7d8 <powf+0x2ac>)
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	ee18 0a90 	vmov	r0, s17
 800a642:	2300      	movs	r3, #0
 800a644:	9308      	str	r3, [sp, #32]
 800a646:	f7f5 ff9f 	bl	8000588 <__aeabi_f2d>
 800a64a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a64e:	ee18 0a10 	vmov	r0, s16
 800a652:	f7f5 ff99 	bl	8000588 <__aeabi_f2d>
 800a656:	f994 3000 	ldrsb.w	r3, [r4]
 800a65a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a65e:	b923      	cbnz	r3, 800a66a <powf+0x13e>
 800a660:	2200      	movs	r2, #0
 800a662:	2300      	movs	r3, #0
 800a664:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a668:	e79a      	b.n	800a5a0 <powf+0x74>
 800a66a:	495e      	ldr	r1, [pc, #376]	; (800a7e4 <powf+0x2b8>)
 800a66c:	2000      	movs	r0, #0
 800a66e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d194      	bne.n	800a5a0 <powf+0x74>
 800a676:	f7fd fae5 	bl	8007c44 <__errno>
 800a67a:	2321      	movs	r3, #33	; 0x21
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	e7bc      	b.n	800a5fa <powf+0xce>
 800a680:	f000 fb84 	bl	800ad8c <finitef>
 800a684:	4605      	mov	r5, r0
 800a686:	2800      	cmp	r0, #0
 800a688:	d173      	bne.n	800a772 <powf+0x246>
 800a68a:	eeb0 0a68 	vmov.f32	s0, s17
 800a68e:	f000 fb7d 	bl	800ad8c <finitef>
 800a692:	2800      	cmp	r0, #0
 800a694:	d06d      	beq.n	800a772 <powf+0x246>
 800a696:	eeb0 0a48 	vmov.f32	s0, s16
 800a69a:	f000 fb77 	bl	800ad8c <finitef>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d067      	beq.n	800a772 <powf+0x246>
 800a6a2:	ee18 0a90 	vmov	r0, s17
 800a6a6:	f7f5 ff6f 	bl	8000588 <__aeabi_f2d>
 800a6aa:	4680      	mov	r8, r0
 800a6ac:	ee18 0a10 	vmov	r0, s16
 800a6b0:	4689      	mov	r9, r1
 800a6b2:	f7f5 ff69 	bl	8000588 <__aeabi_f2d>
 800a6b6:	eeb4 9a49 	vcmp.f32	s18, s18
 800a6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6be:	f994 4000 	ldrsb.w	r4, [r4]
 800a6c2:	4b45      	ldr	r3, [pc, #276]	; (800a7d8 <powf+0x2ac>)
 800a6c4:	d713      	bvc.n	800a6ee <powf+0x1c2>
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	e9cd 2300 	strd	r2, r3, [sp]
 800a6cc:	9508      	str	r5, [sp, #32]
 800a6ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a6d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6d6:	2c00      	cmp	r4, #0
 800a6d8:	d0c2      	beq.n	800a660 <powf+0x134>
 800a6da:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800a6de:	ee17 0a90 	vmov	r0, s15
 800a6e2:	f7f5 ff51 	bl	8000588 <__aeabi_f2d>
 800a6e6:	2c02      	cmp	r4, #2
 800a6e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6ec:	e7c2      	b.n	800a674 <powf+0x148>
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a6f4:	e9cd 2300 	strd	r2, r3, [sp]
 800a6f8:	9508      	str	r5, [sp, #32]
 800a6fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a6fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a702:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a706:	b9fc      	cbnz	r4, 800a748 <powf+0x21c>
 800a708:	4b37      	ldr	r3, [pc, #220]	; (800a7e8 <powf+0x2bc>)
 800a70a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a70e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a716:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a71a:	d553      	bpl.n	800a7c4 <powf+0x298>
 800a71c:	eeb0 0a48 	vmov.f32	s0, s16
 800a720:	f000 fb44 	bl	800adac <rintf>
 800a724:	eeb4 0a48 	vcmp.f32	s0, s16
 800a728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72c:	d004      	beq.n	800a738 <powf+0x20c>
 800a72e:	4b2f      	ldr	r3, [pc, #188]	; (800a7ec <powf+0x2c0>)
 800a730:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a734:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a738:	f996 3000 	ldrsb.w	r3, [r6]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d141      	bne.n	800a7c4 <powf+0x298>
 800a740:	f7fd fa80 	bl	8007c44 <__errno>
 800a744:	2322      	movs	r3, #34	; 0x22
 800a746:	e799      	b.n	800a67c <powf+0x150>
 800a748:	4b29      	ldr	r3, [pc, #164]	; (800a7f0 <powf+0x2c4>)
 800a74a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a74e:	2200      	movs	r2, #0
 800a750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a754:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a758:	d5ee      	bpl.n	800a738 <powf+0x20c>
 800a75a:	eeb0 0a48 	vmov.f32	s0, s16
 800a75e:	f000 fb25 	bl	800adac <rintf>
 800a762:	eeb4 0a48 	vcmp.f32	s0, s16
 800a766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a76a:	d0e5      	beq.n	800a738 <powf+0x20c>
 800a76c:	2200      	movs	r2, #0
 800a76e:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <powf+0x2b8>)
 800a770:	e7e0      	b.n	800a734 <powf+0x208>
 800a772:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a77a:	f47f af4a 	bne.w	800a612 <powf+0xe6>
 800a77e:	eeb0 0a68 	vmov.f32	s0, s17
 800a782:	f000 fb03 	bl	800ad8c <finitef>
 800a786:	2800      	cmp	r0, #0
 800a788:	f43f af43 	beq.w	800a612 <powf+0xe6>
 800a78c:	eeb0 0a48 	vmov.f32	s0, s16
 800a790:	f000 fafc 	bl	800ad8c <finitef>
 800a794:	2800      	cmp	r0, #0
 800a796:	f43f af3c 	beq.w	800a612 <powf+0xe6>
 800a79a:	2304      	movs	r3, #4
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	4b0e      	ldr	r3, [pc, #56]	; (800a7d8 <powf+0x2ac>)
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	ee18 0a90 	vmov	r0, s17
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9308      	str	r3, [sp, #32]
 800a7aa:	f7f5 feed 	bl	8000588 <__aeabi_f2d>
 800a7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b2:	ee18 0a10 	vmov	r0, s16
 800a7b6:	f7f5 fee7 	bl	8000588 <__aeabi_f2d>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e7b7      	b.n	800a734 <powf+0x208>
 800a7c4:	4668      	mov	r0, sp
 800a7c6:	f000 fad8 	bl	800ad7a <matherr>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f47f af15 	bne.w	800a5fa <powf+0xce>
 800a7d0:	e7b6      	b.n	800a740 <powf+0x214>
 800a7d2:	bf00      	nop
 800a7d4:	200001dc 	.word	0x200001dc
 800a7d8:	0800b280 	.word	0x0800b280
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	00000000 	.word	0x00000000
 800a7e4:	fff00000 	.word	0xfff00000
 800a7e8:	47efffff 	.word	0x47efffff
 800a7ec:	c7efffff 	.word	0xc7efffff
 800a7f0:	7ff00000 	.word	0x7ff00000

0800a7f4 <__ieee754_powf>:
 800a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f8:	ee10 5a90 	vmov	r5, s1
 800a7fc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800a800:	ed2d 8b02 	vpush	{d8}
 800a804:	eeb0 8a40 	vmov.f32	s16, s0
 800a808:	eef0 8a60 	vmov.f32	s17, s1
 800a80c:	f000 8293 	beq.w	800ad36 <__ieee754_powf+0x542>
 800a810:	ee10 8a10 	vmov	r8, s0
 800a814:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800a818:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a81c:	dc06      	bgt.n	800a82c <__ieee754_powf+0x38>
 800a81e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a822:	dd0a      	ble.n	800a83a <__ieee754_powf+0x46>
 800a824:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a828:	f000 8285 	beq.w	800ad36 <__ieee754_powf+0x542>
 800a82c:	ecbd 8b02 	vpop	{d8}
 800a830:	48d9      	ldr	r0, [pc, #868]	; (800ab98 <__ieee754_powf+0x3a4>)
 800a832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a836:	f000 bab3 	b.w	800ada0 <nanf>
 800a83a:	f1b8 0f00 	cmp.w	r8, #0
 800a83e:	da1d      	bge.n	800a87c <__ieee754_powf+0x88>
 800a840:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800a844:	da2c      	bge.n	800a8a0 <__ieee754_powf+0xac>
 800a846:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a84a:	db30      	blt.n	800a8ae <__ieee754_powf+0xba>
 800a84c:	15fb      	asrs	r3, r7, #23
 800a84e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a852:	fa47 f603 	asr.w	r6, r7, r3
 800a856:	fa06 f303 	lsl.w	r3, r6, r3
 800a85a:	42bb      	cmp	r3, r7
 800a85c:	d127      	bne.n	800a8ae <__ieee754_powf+0xba>
 800a85e:	f006 0601 	and.w	r6, r6, #1
 800a862:	f1c6 0602 	rsb	r6, r6, #2
 800a866:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a86a:	d122      	bne.n	800a8b2 <__ieee754_powf+0xbe>
 800a86c:	2d00      	cmp	r5, #0
 800a86e:	f280 8268 	bge.w	800ad42 <__ieee754_powf+0x54e>
 800a872:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a876:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a87a:	e00d      	b.n	800a898 <__ieee754_powf+0xa4>
 800a87c:	2600      	movs	r6, #0
 800a87e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a882:	d1f0      	bne.n	800a866 <__ieee754_powf+0x72>
 800a884:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a888:	f000 8255 	beq.w	800ad36 <__ieee754_powf+0x542>
 800a88c:	dd0a      	ble.n	800a8a4 <__ieee754_powf+0xb0>
 800a88e:	2d00      	cmp	r5, #0
 800a890:	f280 8254 	bge.w	800ad3c <__ieee754_powf+0x548>
 800a894:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ab9c <__ieee754_powf+0x3a8>
 800a898:	ecbd 8b02 	vpop	{d8}
 800a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a0:	2602      	movs	r6, #2
 800a8a2:	e7ec      	b.n	800a87e <__ieee754_powf+0x8a>
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	daf5      	bge.n	800a894 <__ieee754_powf+0xa0>
 800a8a8:	eeb1 0a68 	vneg.f32	s0, s17
 800a8ac:	e7f4      	b.n	800a898 <__ieee754_powf+0xa4>
 800a8ae:	2600      	movs	r6, #0
 800a8b0:	e7d9      	b.n	800a866 <__ieee754_powf+0x72>
 800a8b2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800a8b6:	d102      	bne.n	800a8be <__ieee754_powf+0xca>
 800a8b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a8bc:	e7ec      	b.n	800a898 <__ieee754_powf+0xa4>
 800a8be:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800a8c2:	eeb0 0a48 	vmov.f32	s0, s16
 800a8c6:	d108      	bne.n	800a8da <__ieee754_powf+0xe6>
 800a8c8:	f1b8 0f00 	cmp.w	r8, #0
 800a8cc:	db05      	blt.n	800a8da <__ieee754_powf+0xe6>
 800a8ce:	ecbd 8b02 	vpop	{d8}
 800a8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d6:	f000 ba4d 	b.w	800ad74 <__ieee754_sqrtf>
 800a8da:	f000 fa50 	bl	800ad7e <fabsf>
 800a8de:	b124      	cbz	r4, 800a8ea <__ieee754_powf+0xf6>
 800a8e0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a8e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a8e8:	d117      	bne.n	800a91a <__ieee754_powf+0x126>
 800a8ea:	2d00      	cmp	r5, #0
 800a8ec:	bfbc      	itt	lt
 800a8ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a8f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a8f6:	f1b8 0f00 	cmp.w	r8, #0
 800a8fa:	dacd      	bge.n	800a898 <__ieee754_powf+0xa4>
 800a8fc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800a900:	ea54 0306 	orrs.w	r3, r4, r6
 800a904:	d104      	bne.n	800a910 <__ieee754_powf+0x11c>
 800a906:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a90a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a90e:	e7c3      	b.n	800a898 <__ieee754_powf+0xa4>
 800a910:	2e01      	cmp	r6, #1
 800a912:	d1c1      	bne.n	800a898 <__ieee754_powf+0xa4>
 800a914:	eeb1 0a40 	vneg.f32	s0, s0
 800a918:	e7be      	b.n	800a898 <__ieee754_powf+0xa4>
 800a91a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800a91e:	3801      	subs	r0, #1
 800a920:	ea56 0300 	orrs.w	r3, r6, r0
 800a924:	d104      	bne.n	800a930 <__ieee754_powf+0x13c>
 800a926:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a92a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a92e:	e7b3      	b.n	800a898 <__ieee754_powf+0xa4>
 800a930:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800a934:	dd6d      	ble.n	800aa12 <__ieee754_powf+0x21e>
 800a936:	4b9a      	ldr	r3, [pc, #616]	; (800aba0 <__ieee754_powf+0x3ac>)
 800a938:	429c      	cmp	r4, r3
 800a93a:	dc06      	bgt.n	800a94a <__ieee754_powf+0x156>
 800a93c:	2d00      	cmp	r5, #0
 800a93e:	daa9      	bge.n	800a894 <__ieee754_powf+0xa0>
 800a940:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800aba4 <__ieee754_powf+0x3b0>
 800a944:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a948:	e7a6      	b.n	800a898 <__ieee754_powf+0xa4>
 800a94a:	4b97      	ldr	r3, [pc, #604]	; (800aba8 <__ieee754_powf+0x3b4>)
 800a94c:	429c      	cmp	r4, r3
 800a94e:	dd02      	ble.n	800a956 <__ieee754_powf+0x162>
 800a950:	2d00      	cmp	r5, #0
 800a952:	dcf5      	bgt.n	800a940 <__ieee754_powf+0x14c>
 800a954:	e79e      	b.n	800a894 <__ieee754_powf+0xa0>
 800a956:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a95a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a95e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800abac <__ieee754_powf+0x3b8>
 800a962:	eef1 6a40 	vneg.f32	s13, s0
 800a966:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a96a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a96e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a972:	eee7 7a40 	vfms.f32	s15, s14, s0
 800a976:	ee60 0a00 	vmul.f32	s1, s0, s0
 800a97a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800abb0 <__ieee754_powf+0x3bc>
 800a97e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800a982:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800abb4 <__ieee754_powf+0x3c0>
 800a986:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800a98a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a98e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800abb8 <__ieee754_powf+0x3c4>
 800a992:	eeb0 6a67 	vmov.f32	s12, s15
 800a996:	eea0 6a07 	vfma.f32	s12, s0, s14
 800a99a:	ee16 3a10 	vmov	r3, s12
 800a99e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a9a2:	f023 030f 	bic.w	r3, r3, #15
 800a9a6:	ee00 3a90 	vmov	s1, r3
 800a9aa:	eee6 0a87 	vfma.f32	s1, s13, s14
 800a9ae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a9b2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800a9b6:	f025 050f 	bic.w	r5, r5, #15
 800a9ba:	ee07 5a10 	vmov	s14, r5
 800a9be:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a9c2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a9ce:	3e01      	subs	r6, #1
 800a9d0:	ea56 0200 	orrs.w	r2, r6, r0
 800a9d4:	ee07 5a10 	vmov	s14, r5
 800a9d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a9e0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a9e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a9e8:	ee17 4a10 	vmov	r4, s14
 800a9ec:	bf08      	it	eq
 800a9ee:	eeb0 8a40 	vmoveq.f32	s16, s0
 800a9f2:	2c00      	cmp	r4, #0
 800a9f4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a9f8:	f340 8184 	ble.w	800ad04 <__ieee754_powf+0x510>
 800a9fc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800aa00:	f340 80fc 	ble.w	800abfc <__ieee754_powf+0x408>
 800aa04:	eddf 7a67 	vldr	s15, [pc, #412]	; 800aba4 <__ieee754_powf+0x3b0>
 800aa08:	ee28 0a27 	vmul.f32	s0, s16, s15
 800aa0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aa10:	e742      	b.n	800a898 <__ieee754_powf+0xa4>
 800aa12:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800aa16:	bfbf      	itttt	lt
 800aa18:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800abbc <__ieee754_powf+0x3c8>
 800aa1c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800aa20:	f06f 0217 	mvnlt.w	r2, #23
 800aa24:	ee17 4a90 	vmovlt	r4, s15
 800aa28:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800aa2c:	bfa8      	it	ge
 800aa2e:	2200      	movge	r2, #0
 800aa30:	3b7f      	subs	r3, #127	; 0x7f
 800aa32:	4413      	add	r3, r2
 800aa34:	4a62      	ldr	r2, [pc, #392]	; (800abc0 <__ieee754_powf+0x3cc>)
 800aa36:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800aa3a:	4294      	cmp	r4, r2
 800aa3c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800aa40:	dd06      	ble.n	800aa50 <__ieee754_powf+0x25c>
 800aa42:	4a60      	ldr	r2, [pc, #384]	; (800abc4 <__ieee754_powf+0x3d0>)
 800aa44:	4294      	cmp	r4, r2
 800aa46:	f340 80a5 	ble.w	800ab94 <__ieee754_powf+0x3a0>
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800aa50:	2400      	movs	r4, #0
 800aa52:	4a5d      	ldr	r2, [pc, #372]	; (800abc8 <__ieee754_powf+0x3d4>)
 800aa54:	00a7      	lsls	r7, r4, #2
 800aa56:	443a      	add	r2, r7
 800aa58:	ee07 1a90 	vmov	s15, r1
 800aa5c:	ed92 7a00 	vldr	s14, [r2]
 800aa60:	4a5a      	ldr	r2, [pc, #360]	; (800abcc <__ieee754_powf+0x3d8>)
 800aa62:	ee37 6a27 	vadd.f32	s12, s14, s15
 800aa66:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800aa6a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800aa6e:	1049      	asrs	r1, r1, #1
 800aa70:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800aa74:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800aa78:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800aa7c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800aa80:	ee06 1a10 	vmov	s12, r1
 800aa84:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800aa88:	ee14 ca90 	vmov	ip, s9
 800aa8c:	ea02 0c0c 	and.w	ip, r2, ip
 800aa90:	ee05 ca10 	vmov	s10, ip
 800aa94:	eeb1 4a45 	vneg.f32	s8, s10
 800aa98:	eee4 5a06 	vfma.f32	s11, s8, s12
 800aa9c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aaa0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800abd0 <__ieee754_powf+0x3dc>
 800aaa4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800aaa8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800aaac:	eee4 5a06 	vfma.f32	s11, s8, s12
 800aab0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800aab4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800aab8:	eddf 5a46 	vldr	s11, [pc, #280]	; 800abd4 <__ieee754_powf+0x3e0>
 800aabc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800aac0:	eddf 5a45 	vldr	s11, [pc, #276]	; 800abd8 <__ieee754_powf+0x3e4>
 800aac4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800aac8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800abac <__ieee754_powf+0x3b8>
 800aacc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800aad0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800abdc <__ieee754_powf+0x3e8>
 800aad4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800aad8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800abe0 <__ieee754_powf+0x3ec>
 800aadc:	ee75 6a24 	vadd.f32	s13, s10, s9
 800aae0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800aae4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800aae8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800aaec:	eef0 7a65 	vmov.f32	s15, s11
 800aaf0:	eee3 6a87 	vfma.f32	s13, s7, s14
 800aaf4:	eee5 7a05 	vfma.f32	s15, s10, s10
 800aaf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafc:	ee17 1a90 	vmov	r1, s15
 800ab00:	4011      	ands	r1, r2
 800ab02:	ee07 1a90 	vmov	s15, r1
 800ab06:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800ab0a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800abe4 <__ieee754_powf+0x3f0>
 800ab0e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800ab12:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ab16:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ab1a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800ab1e:	eeb0 6a47 	vmov.f32	s12, s14
 800ab22:	eea5 6a27 	vfma.f32	s12, s10, s15
 800ab26:	ee16 1a10 	vmov	r1, s12
 800ab2a:	4011      	ands	r1, r2
 800ab2c:	ee06 1a90 	vmov	s13, r1
 800ab30:	eee4 6a27 	vfma.f32	s13, s8, s15
 800ab34:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800abe8 <__ieee754_powf+0x3f4>
 800ab38:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ab3c:	ee06 1a10 	vmov	s12, r1
 800ab40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab44:	eddf 7a29 	vldr	s15, [pc, #164]	; 800abec <__ieee754_powf+0x3f8>
 800ab48:	4929      	ldr	r1, [pc, #164]	; (800abf0 <__ieee754_powf+0x3fc>)
 800ab4a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ab4e:	4439      	add	r1, r7
 800ab50:	edd1 7a00 	vldr	s15, [r1]
 800ab54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab58:	ee07 3a90 	vmov	s15, r3
 800ab5c:	eef0 0a47 	vmov.f32	s1, s14
 800ab60:	4b24      	ldr	r3, [pc, #144]	; (800abf4 <__ieee754_powf+0x400>)
 800ab62:	eee6 0a25 	vfma.f32	s1, s12, s11
 800ab66:	443b      	add	r3, r7
 800ab68:	ed93 5a00 	vldr	s10, [r3]
 800ab6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ab70:	ee70 0a85 	vadd.f32	s1, s1, s10
 800ab74:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800ab78:	ee17 3a90 	vmov	r3, s15
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ab86:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ab8a:	eee6 7a65 	vfms.f32	s15, s12, s11
 800ab8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab92:	e70e      	b.n	800a9b2 <__ieee754_powf+0x1be>
 800ab94:	2401      	movs	r4, #1
 800ab96:	e75c      	b.n	800aa52 <__ieee754_powf+0x25e>
 800ab98:	0800b169 	.word	0x0800b169
 800ab9c:	00000000 	.word	0x00000000
 800aba0:	3f7ffff7 	.word	0x3f7ffff7
 800aba4:	7149f2ca 	.word	0x7149f2ca
 800aba8:	3f800007 	.word	0x3f800007
 800abac:	3eaaaaab 	.word	0x3eaaaaab
 800abb0:	36eca570 	.word	0x36eca570
 800abb4:	3fb8aa3b 	.word	0x3fb8aa3b
 800abb8:	3fb8aa00 	.word	0x3fb8aa00
 800abbc:	4b800000 	.word	0x4b800000
 800abc0:	001cc471 	.word	0x001cc471
 800abc4:	005db3d6 	.word	0x005db3d6
 800abc8:	0800b288 	.word	0x0800b288
 800abcc:	fffff000 	.word	0xfffff000
 800abd0:	3e6c3255 	.word	0x3e6c3255
 800abd4:	3e53f142 	.word	0x3e53f142
 800abd8:	3e8ba305 	.word	0x3e8ba305
 800abdc:	3edb6db7 	.word	0x3edb6db7
 800abe0:	3f19999a 	.word	0x3f19999a
 800abe4:	3f763800 	.word	0x3f763800
 800abe8:	3f76384f 	.word	0x3f76384f
 800abec:	369dc3a0 	.word	0x369dc3a0
 800abf0:	0800b298 	.word	0x0800b298
 800abf4:	0800b290 	.word	0x0800b290
 800abf8:	3338aa3c 	.word	0x3338aa3c
 800abfc:	f040 8092 	bne.w	800ad24 <__ieee754_powf+0x530>
 800ac00:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800abf8 <__ieee754_powf+0x404>
 800ac04:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac08:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ac0c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac14:	f73f aef6 	bgt.w	800aa04 <__ieee754_powf+0x210>
 800ac18:	15db      	asrs	r3, r3, #23
 800ac1a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ac1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac22:	4103      	asrs	r3, r0
 800ac24:	4423      	add	r3, r4
 800ac26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ac2a:	4947      	ldr	r1, [pc, #284]	; (800ad48 <__ieee754_powf+0x554>)
 800ac2c:	3a7f      	subs	r2, #127	; 0x7f
 800ac2e:	4111      	asrs	r1, r2
 800ac30:	ea23 0101 	bic.w	r1, r3, r1
 800ac34:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ac38:	ee07 1a10 	vmov	s14, r1
 800ac3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ac40:	f1c2 0217 	rsb	r2, r2, #23
 800ac44:	4110      	asrs	r0, r2
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac4c:	bfb8      	it	lt
 800ac4e:	4240      	neglt	r0, r0
 800ac50:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ac54:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad4c <__ieee754_powf+0x558>
 800ac58:	ee17 3a10 	vmov	r3, s14
 800ac5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ac60:	f023 030f 	bic.w	r3, r3, #15
 800ac64:	ee07 3a10 	vmov	s14, r3
 800ac68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac6c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ac70:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ad50 <__ieee754_powf+0x55c>
 800ac74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac78:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ac7c:	eddf 6a35 	vldr	s13, [pc, #212]	; 800ad54 <__ieee754_powf+0x560>
 800ac80:	eeb0 0a67 	vmov.f32	s0, s15
 800ac84:	eea7 0a26 	vfma.f32	s0, s14, s13
 800ac88:	eeb0 6a40 	vmov.f32	s12, s0
 800ac8c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ac90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ac94:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ac98:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ad58 <__ieee754_powf+0x564>
 800ac9c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ad5c <__ieee754_powf+0x568>
 800aca0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800aca4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800ad60 <__ieee754_powf+0x56c>
 800aca8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800acac:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ad64 <__ieee754_powf+0x570>
 800acb0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800acb4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800ad68 <__ieee754_powf+0x574>
 800acb8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800acbc:	eeb0 6a40 	vmov.f32	s12, s0
 800acc0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800acc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800acc8:	eeb0 7a46 	vmov.f32	s14, s12
 800accc:	ee77 6a66 	vsub.f32	s13, s14, s13
 800acd0:	ee20 6a06 	vmul.f32	s12, s0, s12
 800acd4:	eee0 7a27 	vfma.f32	s15, s0, s15
 800acd8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800acdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ace0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ace4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ace8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800acec:	ee10 3a10 	vmov	r3, s0
 800acf0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800acf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acf8:	da1a      	bge.n	800ad30 <__ieee754_powf+0x53c>
 800acfa:	f000 f8b1 	bl	800ae60 <scalbnf>
 800acfe:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ad02:	e5c9      	b.n	800a898 <__ieee754_powf+0xa4>
 800ad04:	4a19      	ldr	r2, [pc, #100]	; (800ad6c <__ieee754_powf+0x578>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	dd02      	ble.n	800ad10 <__ieee754_powf+0x51c>
 800ad0a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ad70 <__ieee754_powf+0x57c>
 800ad0e:	e67b      	b.n	800aa08 <__ieee754_powf+0x214>
 800ad10:	d108      	bne.n	800ad24 <__ieee754_powf+0x530>
 800ad12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad16:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ad1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad1e:	f6ff af7b 	blt.w	800ac18 <__ieee754_powf+0x424>
 800ad22:	e7f2      	b.n	800ad0a <__ieee754_powf+0x516>
 800ad24:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ad28:	f73f af76 	bgt.w	800ac18 <__ieee754_powf+0x424>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e78f      	b.n	800ac50 <__ieee754_powf+0x45c>
 800ad30:	ee00 3a10 	vmov	s0, r3
 800ad34:	e7e3      	b.n	800acfe <__ieee754_powf+0x50a>
 800ad36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad3a:	e5ad      	b.n	800a898 <__ieee754_powf+0xa4>
 800ad3c:	eeb0 0a68 	vmov.f32	s0, s17
 800ad40:	e5aa      	b.n	800a898 <__ieee754_powf+0xa4>
 800ad42:	eeb0 0a48 	vmov.f32	s0, s16
 800ad46:	e5a7      	b.n	800a898 <__ieee754_powf+0xa4>
 800ad48:	007fffff 	.word	0x007fffff
 800ad4c:	3f317218 	.word	0x3f317218
 800ad50:	35bfbe8c 	.word	0x35bfbe8c
 800ad54:	3f317200 	.word	0x3f317200
 800ad58:	3331bb4c 	.word	0x3331bb4c
 800ad5c:	b5ddea0e 	.word	0xb5ddea0e
 800ad60:	388ab355 	.word	0x388ab355
 800ad64:	bb360b61 	.word	0xbb360b61
 800ad68:	3e2aaaab 	.word	0x3e2aaaab
 800ad6c:	43160000 	.word	0x43160000
 800ad70:	0da24260 	.word	0x0da24260

0800ad74 <__ieee754_sqrtf>:
 800ad74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ad78:	4770      	bx	lr

0800ad7a <matherr>:
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	4770      	bx	lr

0800ad7e <fabsf>:
 800ad7e:	ee10 3a10 	vmov	r3, s0
 800ad82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad86:	ee00 3a10 	vmov	s0, r3
 800ad8a:	4770      	bx	lr

0800ad8c <finitef>:
 800ad8c:	ee10 3a10 	vmov	r3, s0
 800ad90:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800ad94:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ad98:	bfac      	ite	ge
 800ad9a:	2000      	movge	r0, #0
 800ad9c:	2001      	movlt	r0, #1
 800ad9e:	4770      	bx	lr

0800ada0 <nanf>:
 800ada0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ada8 <nanf+0x8>
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	7fc00000 	.word	0x7fc00000

0800adac <rintf>:
 800adac:	b513      	push	{r0, r1, r4, lr}
 800adae:	ee10 1a10 	vmov	r1, s0
 800adb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800adb6:	0ddc      	lsrs	r4, r3, #23
 800adb8:	3c7f      	subs	r4, #127	; 0x7f
 800adba:	2c16      	cmp	r4, #22
 800adbc:	dc46      	bgt.n	800ae4c <rintf+0xa0>
 800adbe:	b32b      	cbz	r3, 800ae0c <rintf+0x60>
 800adc0:	2c00      	cmp	r4, #0
 800adc2:	ee10 2a10 	vmov	r2, s0
 800adc6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800adca:	da21      	bge.n	800ae10 <rintf+0x64>
 800adcc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800add0:	425b      	negs	r3, r3
 800add2:	4a21      	ldr	r2, [pc, #132]	; (800ae58 <rintf+0xac>)
 800add4:	0a5b      	lsrs	r3, r3, #9
 800add6:	0d09      	lsrs	r1, r1, #20
 800add8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800addc:	0509      	lsls	r1, r1, #20
 800adde:	430b      	orrs	r3, r1
 800ade0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ade4:	ee07 3a90 	vmov	s15, r3
 800ade8:	edd2 6a00 	vldr	s13, [r2]
 800adec:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800adf0:	ed8d 7a01 	vstr	s14, [sp, #4]
 800adf4:	eddd 7a01 	vldr	s15, [sp, #4]
 800adf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800adfc:	ee17 3a90 	vmov	r3, s15
 800ae00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae04:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800ae08:	ee00 3a10 	vmov	s0, r3
 800ae0c:	b002      	add	sp, #8
 800ae0e:	bd10      	pop	{r4, pc}
 800ae10:	4b12      	ldr	r3, [pc, #72]	; (800ae5c <rintf+0xb0>)
 800ae12:	4123      	asrs	r3, r4
 800ae14:	4219      	tst	r1, r3
 800ae16:	d0f9      	beq.n	800ae0c <rintf+0x60>
 800ae18:	085b      	lsrs	r3, r3, #1
 800ae1a:	4219      	tst	r1, r3
 800ae1c:	d006      	beq.n	800ae2c <rintf+0x80>
 800ae1e:	ea21 0203 	bic.w	r2, r1, r3
 800ae22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ae26:	fa43 f404 	asr.w	r4, r3, r4
 800ae2a:	4322      	orrs	r2, r4
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <rintf+0xac>)
 800ae2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae32:	ed90 7a00 	vldr	s14, [r0]
 800ae36:	ee07 2a90 	vmov	s15, r2
 800ae3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae3e:	edcd 7a01 	vstr	s15, [sp, #4]
 800ae42:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ae46:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ae4a:	e7df      	b.n	800ae0c <rintf+0x60>
 800ae4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae50:	d3dc      	bcc.n	800ae0c <rintf+0x60>
 800ae52:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae56:	e7d9      	b.n	800ae0c <rintf+0x60>
 800ae58:	0800b2a0 	.word	0x0800b2a0
 800ae5c:	007fffff 	.word	0x007fffff

0800ae60 <scalbnf>:
 800ae60:	b508      	push	{r3, lr}
 800ae62:	ee10 2a10 	vmov	r2, s0
 800ae66:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800ae6a:	ed2d 8b02 	vpush	{d8}
 800ae6e:	eef0 0a40 	vmov.f32	s1, s0
 800ae72:	d004      	beq.n	800ae7e <scalbnf+0x1e>
 800ae74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae78:	d306      	bcc.n	800ae88 <scalbnf+0x28>
 800ae7a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800ae7e:	ecbd 8b02 	vpop	{d8}
 800ae82:	eeb0 0a60 	vmov.f32	s0, s1
 800ae86:	bd08      	pop	{r3, pc}
 800ae88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae8c:	d21c      	bcs.n	800aec8 <scalbnf+0x68>
 800ae8e:	4b1f      	ldr	r3, [pc, #124]	; (800af0c <scalbnf+0xac>)
 800ae90:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800af10 <scalbnf+0xb0>
 800ae94:	4298      	cmp	r0, r3
 800ae96:	ee60 0a27 	vmul.f32	s1, s0, s15
 800ae9a:	db10      	blt.n	800aebe <scalbnf+0x5e>
 800ae9c:	ee10 2a90 	vmov	r2, s1
 800aea0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800aea4:	3b19      	subs	r3, #25
 800aea6:	4403      	add	r3, r0
 800aea8:	2bfe      	cmp	r3, #254	; 0xfe
 800aeaa:	dd0f      	ble.n	800aecc <scalbnf+0x6c>
 800aeac:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800af14 <scalbnf+0xb4>
 800aeb0:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb4:	f000 f834 	bl	800af20 <copysignf>
 800aeb8:	ee60 0a08 	vmul.f32	s1, s0, s16
 800aebc:	e7df      	b.n	800ae7e <scalbnf+0x1e>
 800aebe:	eddf 7a16 	vldr	s15, [pc, #88]	; 800af18 <scalbnf+0xb8>
 800aec2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800aec6:	e7da      	b.n	800ae7e <scalbnf+0x1e>
 800aec8:	0ddb      	lsrs	r3, r3, #23
 800aeca:	e7ec      	b.n	800aea6 <scalbnf+0x46>
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd06      	ble.n	800aede <scalbnf+0x7e>
 800aed0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aed4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800aed8:	ee00 3a90 	vmov	s1, r3
 800aedc:	e7cf      	b.n	800ae7e <scalbnf+0x1e>
 800aede:	f113 0f16 	cmn.w	r3, #22
 800aee2:	da06      	bge.n	800aef2 <scalbnf+0x92>
 800aee4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aee8:	4298      	cmp	r0, r3
 800aeea:	dcdf      	bgt.n	800aeac <scalbnf+0x4c>
 800aeec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800af18 <scalbnf+0xb8>
 800aef0:	e7de      	b.n	800aeb0 <scalbnf+0x50>
 800aef2:	3319      	adds	r3, #25
 800aef4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aef8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800aefc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800af1c <scalbnf+0xbc>
 800af00:	ee07 3a10 	vmov	s14, r3
 800af04:	ee67 0a27 	vmul.f32	s1, s14, s15
 800af08:	e7b9      	b.n	800ae7e <scalbnf+0x1e>
 800af0a:	bf00      	nop
 800af0c:	ffff3cb0 	.word	0xffff3cb0
 800af10:	4c000000 	.word	0x4c000000
 800af14:	7149f2ca 	.word	0x7149f2ca
 800af18:	0da24260 	.word	0x0da24260
 800af1c:	33000000 	.word	0x33000000

0800af20 <copysignf>:
 800af20:	ee10 3a10 	vmov	r3, s0
 800af24:	ee10 2a90 	vmov	r2, s1
 800af28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800af30:	4313      	orrs	r3, r2
 800af32:	ee00 3a10 	vmov	s0, r3
 800af36:	4770      	bx	lr

0800af38 <_init>:
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	bf00      	nop
 800af3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3e:	bc08      	pop	{r3}
 800af40:	469e      	mov	lr, r3
 800af42:	4770      	bx	lr

0800af44 <_fini>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr
