
F303k_Frontboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000990c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08009aa0  08009aa0  00019aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e00  08009e00  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009e00  08009e00  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e00  08009e00  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e04  08009e04  00019e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001dc  08009fe4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08009fe4  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018237  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003424  00000000  00000000  00038443  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001280  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  0003cae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bfc5  00000000  00000000  0003dba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000118e5  00000000  00000000  00059b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000971d5  00000000  00000000  0006b44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010261f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  0010269c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a84 	.word	0x08009a84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009a84 	.word	0x08009a84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c60:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <MX_ADC2_Init+0xb8>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000cba:	f001 f9f3 	bl	80020a4 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000cc4:	f000 fe08 	bl	80018d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000ce6:	f001 fcb3 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000cf0:	f000 fdf2 	bl	80018d8 <Error_Handler>
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000022c 	.word	0x2000022c
 8000d00:	50000100 	.word	0x50000100

08000d04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <HAL_ADC_MspInit+0xc8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d14d      	bne.n	8000dc2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <HAL_ADC_MspInit+0xcc>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <HAL_ADC_MspInit+0xcc>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_ADC_MspInit+0xcc>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <HAL_ADC_MspInit+0xcc>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <HAL_ADC_MspInit+0xcc>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_ADC_MspInit+0xcc>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d56:	2320      	movs	r3, #32
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f003 f978 	bl	8004060 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000d72:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_ADC_MspInit+0xd4>)
 8000d74:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d96:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000da6:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000da8:	f002 ffc3 	bl	8003d32 <HAL_DMA_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000db2:	f000 fd91 	bl	80018d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <HAL_ADC_MspInit+0xd0>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	50000100 	.word	0x50000100
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	20000310 	.word	0x20000310
 8000dd8:	4002001c 	.word	0x4002001c

08000ddc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_CAN_Init+0x64>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <MX_CAN_Init+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_CAN_Init+0x64>)
 8000de8:	2206      	movs	r2, #6
 8000dea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_CAN_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_CAN_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_CAN_Init+0x64>)
 8000dfa:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000dfe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_CAN_Init+0x64>)
 8000e2c:	f001 fff5 	bl	8002e1a <HAL_CAN_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000e36:	f000 fd4f 	bl	80018d8 <Error_Handler>
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000390 	.word	0x20000390
 8000e44:	40006400 	.word	0x40006400

08000e48 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <HAL_CAN_MspInit+0xc0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d149      	bne.n	8000efe <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <HAL_CAN_MspInit+0xc4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_CAN_MspInit+0xc4>)
 8000e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <HAL_CAN_MspInit+0xc4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_CAN_MspInit+0xc4>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_CAN_MspInit+0xc4>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_CAN_MspInit+0xc4>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000eac:	2309      	movs	r3, #9
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f003 f8d1 	bl	8004060 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 1, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2013      	movs	r0, #19
 8000ec4:	f002 feff 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000ec8:	2013      	movs	r0, #19
 8000eca:	f002 ff18 	bl	8003cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 2, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	2014      	movs	r0, #20
 8000ed4:	f002 fef7 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ed8:	2014      	movs	r0, #20
 8000eda:	f002 ff10 	bl	8003cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 3, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	2015      	movs	r0, #21
 8000ee4:	f002 feef 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000ee8:	2015      	movs	r0, #21
 8000eea:	f002 ff08 	bl	8003cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 4, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	2016      	movs	r0, #22
 8000ef4:	f002 fee7 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000ef8:	2016      	movs	r0, #22
 8000efa:	f002 ff00 	bl	8003cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	; 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40006400 	.word	0x40006400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <can_init>:
 */

#include "can_ibis.h"


void can_init(CAN_HandleTypeDef* handler){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	  CAN_ibis = handler;
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <can_init+0x78>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
	  CAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.FilterBank = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterMode =  CAN_FILTERMODE_IDMASK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
	  sFilterConfig.FilterIdHigh = 0x000;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIdLow = 0x000;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterMaskIdHigh = 0x000;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterMaskIdLow = 0x000;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterActivation = ENABLE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
	  sFilterConfig.SlaveStartFilterBank = 14;
 8000f42:	230e      	movs	r3, #14
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){  Error_Handler();}
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <can_init+0x7c>)
 8000f4e:	f002 f85f 	bl	8003010 <HAL_CAN_ConfigFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <can_init+0x4c>
 8000f58:	f000 fcbe 	bl	80018d8 <Error_Handler>
	  if (HAL_CAN_Start(&hcan) != HAL_OK){ Error_Handler();}
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <can_init+0x7c>)
 8000f5e:	f002 f921 	bl	80031a4 <HAL_CAN_Start>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <can_init+0x5c>
 8000f68:	f000 fcb6 	bl	80018d8 <Error_Handler>
	  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {Error_Handler(); }
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <can_init+0x7c>)
 8000f70:	f002 fb7e 	bl	8003670 <HAL_CAN_ActivateNotification>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <can_init+0x6e>
 8000f7a:	f000 fcad 	bl	80018d8 <Error_Handler>
}
 8000f7e:	bf00      	nop
 8000f80:	3730      	adds	r7, #48	; 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000288 	.word	0x20000288
 8000f8c:	20000390 	.word	0x20000390

08000f90 <can_send>:

void can_send(int id, uint8_t senddata[8]){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]

	TxHeader.StdId = id;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <can_send+0x68>)
 8000f9e:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <can_send+0x68>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <can_send+0x68>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <can_send+0x68>)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <can_send+0x68>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	751a      	strb	r2, [r3, #20]

	/* Request transmission */
	if(HAL_CAN_AddTxMessage(&hcan,&TxHeader,senddata, &TxMailbox) != HAL_OK)
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <can_send+0x6c>)
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <can_send+0x68>)
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <can_send+0x70>)
 8000fc0:	f002 f934 	bl	800322c <HAL_CAN_AddTxMessage>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <can_send+0x4a>
	{
		Error_Handler();
 8000fca:	f000 fc85 	bl	80018d8 <Error_Handler>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 8000fce:	e004      	b.n	8000fda <can_send+0x4a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <can_send+0x74>)
 8000fd6:	f003 f9cd 	bl	8004374 <HAL_GPIO_WritePin>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <can_send+0x70>)
 8000fdc:	f002 fa01 	bl	80033e2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d1f4      	bne.n	8000fd0 <can_send+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <can_send+0x74>)
 8000fec:	f003 f9c2 	bl	8004374 <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000354 	.word	0x20000354
 8000ffc:	200002e4 	.word	0x200002e4
 8001000:	20000390 	.word	0x20000390
 8001004:	48000400 	.word	0x48000400

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_DMA_Init+0x38>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <MX_DMA_Init+0x38>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6153      	str	r3, [r2, #20]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_DMA_Init+0x38>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 6, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2106      	movs	r1, #6
 800102a:	200c      	movs	r0, #12
 800102c:	f002 fe4b 	bl	8003cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001030:	200c      	movs	r0, #12
 8001032:	f002 fe64 	bl	8003cfe <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <MX_GPIO_Init+0xec>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a34      	ldr	r2, [pc, #208]	; (8001130 <MX_GPIO_Init+0xec>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_GPIO_Init+0xec>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <MX_GPIO_Init+0xec>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <MX_GPIO_Init+0xec>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_GPIO_Init+0xec>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_GPIO_Init+0xec>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a28      	ldr	r2, [pc, #160]	; (8001130 <MX_GPIO_Init+0xec>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_GPIO_Init+0xec>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2117      	movs	r1, #23
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f003 f963 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2103      	movs	r1, #3
 80010b2:	4820      	ldr	r0, [pc, #128]	; (8001134 <MX_GPIO_Init+0xf0>)
 80010b4:	f003 f95e 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80010b8:	2317      	movs	r3, #23
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f002 ffc5 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d6:	2303      	movs	r3, #3
 80010d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_GPIO_Init+0xf0>)
 80010ee:	f002 ffb7 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80010f2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f002 ffa9 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800110e:	23f8      	movs	r3, #248	; 0xf8
 8001110:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_GPIO_Init+0xf0>)
 8001122:	f002 ff9d 	bl	8004060 <HAL_GPIO_Init>

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_IWDG_Init+0x34>)
 800113e:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <MX_IWDG_Init+0x38>)
 8001140:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_IWDG_Init+0x34>)
 8001144:	2201      	movs	r2, #1
 8001146:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_IWDG_Init+0x34>)
 800114a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800114e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_IWDG_Init+0x34>)
 8001152:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001156:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_IWDG_Init+0x34>)
 800115a:	f003 f93d 	bl	80043d8 <HAL_IWDG_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001164:	f000 fbb8 	bl	80018d8 <Error_Handler>
  }

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200003b8 	.word	0x200003b8
 8001170:	40003000 	.word	0x40003000

08001174 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001178:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <__NVIC_SystemReset+0x20>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001184:	4903      	ldr	r1, [pc, #12]	; (8001194 <__NVIC_SystemReset+0x20>)
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_SystemReset+0x24>)
 8001188:	4313      	orrs	r3, r2
 800118a:	60cb      	str	r3, [r1, #12]
 800118c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <__NVIC_SystemReset+0x1c>
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	05fa0004 	.word	0x05fa0004

0800119c <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80011a6:	1df9      	adds	r1, r7, #7
 80011a8:	2301      	movs	r3, #1
 80011aa:	2201      	movs	r2, #1
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <__io_putchar+0x20>)
 80011ae:	f005 fb1f 	bl	80067f0 <HAL_UART_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000488 	.word	0x20000488

080011c0 <int_sort>:
uint16_t sortdata[5];
uint16_t out_lowpass;
uint32_t count;
uint16_t medianfilter_out;
uint16_t out_lowpass_temp;
int int_sort( const void *p, const void *q ) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    return *(uint16_t*)p - *(uint16_t*)q;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	1ad3      	subs	r3, r2, r3
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f000 feb5 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f935 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f7ff ff27 	bl	8001044 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f6:	f7ff ff07 	bl	8001008 <MX_DMA_Init>
  MX_ADC2_Init();
 80011fa:	f7ff fd25 	bl	8000c48 <MX_ADC2_Init>
  MX_CAN_Init();
 80011fe:	f7ff fded 	bl	8000ddc <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001202:	f000 fdd3 	bl	8001dac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001206:	f000 fcc9 	bl	8001b9c <MX_TIM2_Init>
  MX_TIM7_Init();
 800120a:	f000 fd21 	bl	8001c50 <MX_TIM7_Init>
  MX_IWDG_Init();
 800120e:	f7ff ff93 	bl	8001138 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8001212:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <main+0x1dc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f006 fcc9 	bl	8007bb2 <setbuf>
  can_init(&hcan);
 8001220:	4868      	ldr	r0, [pc, #416]	; (80013c4 <main+0x1e0>)
 8001222:	f7ff fe75 	bl	8000f10 <can_init>
  HAL_ADC_Init(&hadc2);
 8001226:	4868      	ldr	r0, [pc, #416]	; (80013c8 <main+0x1e4>)
 8001228:	f000 ff3c 	bl	80020a4 <HAL_ADC_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800122c:	2100      	movs	r1, #0
 800122e:	4866      	ldr	r0, [pc, #408]	; (80013c8 <main+0x1e4>)
 8001230:	f001 f9a4 	bl	800257c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8001234:	4965      	ldr	r1, [pc, #404]	; (80013cc <main+0x1e8>)
 8001236:	4864      	ldr	r0, [pc, #400]	; (80013c8 <main+0x1e4>)
 8001238:	f001 fa0a 	bl	8002650 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADCdata,1);
 800123c:	2201      	movs	r2, #1
 800123e:	4964      	ldr	r1, [pc, #400]	; (80013d0 <main+0x1ec>)
 8001240:	4861      	ldr	r0, [pc, #388]	; (80013c8 <main+0x1e4>)
 8001242:	f001 f8c1 	bl	80023c8 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001246:	210c      	movs	r1, #12
 8001248:	4862      	ldr	r0, [pc, #392]	; (80013d4 <main+0x1f0>)
 800124a:	f004 fc01 	bl	8005a50 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800124e:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <main+0x1f0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	641a      	str	r2, [r3, #64]	; 0x40

  count=0;
 8001256:	4b60      	ldr	r3, [pc, #384]	; (80013d8 <main+0x1f4>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
  for(uint16_t start_wait_delay=0;start_wait_delay<50;start_wait_delay++){
 800125c:	2300      	movs	r3, #0
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	e052      	b.n	8001308 <main+0x124>
  tempdata[count]=ADCdata[0];
 8001262:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <main+0x1f4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a5a      	ldr	r2, [pc, #360]	; (80013d0 <main+0x1ec>)
 8001268:	8811      	ldrh	r1, [r2, #0]
 800126a:	4a5c      	ldr	r2, [pc, #368]	; (80013dc <main+0x1f8>)
 800126c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	  for(uint8_t i=0;i<5;i++){
 8001270:	2300      	movs	r3, #0
 8001272:	717b      	strb	r3, [r7, #5]
 8001274:	e00a      	b.n	800128c <main+0xa8>
  	  sortdata[i]=tempdata[i];
 8001276:	797a      	ldrb	r2, [r7, #5]
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	4958      	ldr	r1, [pc, #352]	; (80013dc <main+0x1f8>)
 800127c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001280:	4a57      	ldr	r2, [pc, #348]	; (80013e0 <main+0x1fc>)
 8001282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	  for(uint8_t i=0;i<5;i++){
 8001286:	797b      	ldrb	r3, [r7, #5]
 8001288:	3301      	adds	r3, #1
 800128a:	717b      	strb	r3, [r7, #5]
 800128c:	797b      	ldrb	r3, [r7, #5]
 800128e:	2b04      	cmp	r3, #4
 8001290:	d9f1      	bls.n	8001276 <main+0x92>
  	  }
  	  qsort(sortdata,data_cnt,2,int_sort );
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <main+0x200>)
 8001294:	2202      	movs	r2, #2
 8001296:	2105      	movs	r1, #5
 8001298:	4851      	ldr	r0, [pc, #324]	; (80013e0 <main+0x1fc>)
 800129a:	f006 fb63 	bl	8007964 <qsort>
  	  medianfilter_out=tempdata[2];
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <main+0x1f8>)
 80012a0:	889a      	ldrh	r2, [r3, #4]
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <main+0x204>)
 80012a4:	801a      	strh	r2, [r3, #0]
  	  out_lowpass=(float)((float)rate*medianfilter_out+(float)(1-rate)*out_lowpass_temp);
 80012a6:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <main+0x204>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80013ec <main+0x208>
 80012b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <main+0x20c>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80013f4 <main+0x210>
 80012ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d6:	ee17 3a90 	vmov	r3, s15
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <main+0x214>)
 80012de:	801a      	strh	r2, [r3, #0]
  	  out_lowpass_temp=out_lowpass;
 80012e0:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <main+0x214>)
 80012e2:	881a      	ldrh	r2, [r3, #0]
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <main+0x20c>)
 80012e6:	801a      	strh	r2, [r3, #0]
  	  if(count>=4){
 80012e8:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <main+0x1f4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d903      	bls.n	80012f8 <main+0x114>
  		  count=0;
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <main+0x1f4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e004      	b.n	8001302 <main+0x11e>
  	  }
  	  else{
  		  count++;
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <main+0x1f4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a36      	ldr	r2, [pc, #216]	; (80013d8 <main+0x1f4>)
 8001300:	6013      	str	r3, [r2, #0]
  for(uint16_t start_wait_delay=0;start_wait_delay<50;start_wait_delay++){
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	3301      	adds	r3, #1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	2b31      	cmp	r3, #49	; 0x31
 800130c:	d9a9      	bls.n	8001262 <main+0x7e>
  	  }
  }

  HAL_TIM_Base_Start_IT(&htim7);
 800130e:	483b      	ldr	r0, [pc, #236]	; (80013fc <main+0x218>)
 8001310:	f004 fb48 	bl	80059a4 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  printf(" slot=%f",slot);
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <main+0x21c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	461a      	mov	r2, r3
 8001324:	4623      	mov	r3, r4
 8001326:	4837      	ldr	r0, [pc, #220]	; (8001404 <main+0x220>)
 8001328:	f006 fa68 	bl	80077fc <iprintf>
	  printf(" speed=%f",speed);
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <main+0x224>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	461a      	mov	r2, r3
 800133c:	4623      	mov	r3, r4
 800133e:	4833      	ldr	r0, [pc, #204]	; (800140c <main+0x228>)
 8001340:	f006 fa5c 	bl	80077fc <iprintf>
	  printf(" ADC=%d",out_lowpass);
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <main+0x214>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	4831      	ldr	r0, [pc, #196]	; (8001410 <main+0x22c>)
 800134c:	f006 fa56 	bl	80077fc <iprintf>
	  printf(" C=%d",cnt_Craction);
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <main+0x230>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	4830      	ldr	r0, [pc, #192]	; (8001418 <main+0x234>)
 8001358:	f006 fa50 	bl	80077fc <iprintf>
	  printf(" F=%d",Flont_Lamp_in);
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <main+0x238>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	482f      	ldr	r0, [pc, #188]	; (8001420 <main+0x23c>)
 8001364:	f006 fa4a 	bl	80077fc <iprintf>
	  printf(" B=%d",Break_in);
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <main+0x240>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	482e      	ldr	r0, [pc, #184]	; (8001428 <main+0x244>)
 8001370:	f006 fa44 	bl	80077fc <iprintf>
	  printf(" L=%d",cnt_Winker_L);
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <main+0x248>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	482d      	ldr	r0, [pc, #180]	; (8001430 <main+0x24c>)
 800137c:	f006 fa3e 	bl	80077fc <iprintf>
	  printf(" R=%d",cnt_Winker_R);
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <main+0x250>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	482c      	ldr	r0, [pc, #176]	; (8001438 <main+0x254>)
 8001388:	f006 fa38 	bl	80077fc <iprintf>
	  printf(" K=%d",Key_in);
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <main+0x258>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	482b      	ldr	r0, [pc, #172]	; (8001440 <main+0x25c>)
 8001394:	f006 fa32 	bl	80077fc <iprintf>
	  printf(" E=%d",EX_in);
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <main+0x260>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	482a      	ldr	r0, [pc, #168]	; (8001448 <main+0x264>)
 80013a0:	f006 fa2c 	bl	80077fc <iprintf>
	  printf(" state=%d",state[0]);
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <main+0x268>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4829      	ldr	r0, [pc, #164]	; (8001450 <main+0x26c>)
 80013ac:	f006 fa26 	bl	80077fc <iprintf>
	  printf("\r\n");
 80013b0:	4828      	ldr	r0, [pc, #160]	; (8001454 <main+0x270>)
 80013b2:	f006 fa97 	bl	80078e4 <puts>
	  HAL_IWDG_Refresh(&hiwdg);
 80013b6:	4828      	ldr	r0, [pc, #160]	; (8001458 <main+0x274>)
 80013b8:	f003 f854 	bl	8004464 <HAL_IWDG_Refresh>
	  printf(" slot=%f",slot);
 80013bc:	e7aa      	b.n	8001314 <main+0x130>
 80013be:	bf00      	nop
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	20000390 	.word	0x20000390
 80013c8:	2000022c 	.word	0x2000022c
 80013cc:	200002ec 	.word	0x200002ec
 80013d0:	200003e8 	.word	0x200003e8
 80013d4:	20000408 	.word	0x20000408
 80013d8:	200003f8 	.word	0x200003f8
 80013dc:	200003dc 	.word	0x200003dc
 80013e0:	200003cc 	.word	0x200003cc
 80013e4:	080011c1 	.word	0x080011c1
 80013e8:	200003f0 	.word	0x200003f0
 80013ec:	3ecccccd 	.word	0x3ecccccd
 80013f0:	200003f4 	.word	0x200003f4
 80013f4:	3f19999a 	.word	0x3f19999a
 80013f8:	200003d8 	.word	0x200003d8
 80013fc:	20000448 	.word	0x20000448
 8001400:	20000404 	.word	0x20000404
 8001404:	08009aa0 	.word	0x08009aa0
 8001408:	200003fc 	.word	0x200003fc
 800140c:	08009aac 	.word	0x08009aac
 8001410:	08009ab8 	.word	0x08009ab8
 8001414:	200003ed 	.word	0x200003ed
 8001418:	08009ac0 	.word	0x08009ac0
 800141c:	200003c8 	.word	0x200003c8
 8001420:	08009ac8 	.word	0x08009ac8
 8001424:	200003d6 	.word	0x200003d6
 8001428:	08009ad0 	.word	0x08009ad0
 800142c:	200003ea 	.word	0x200003ea
 8001430:	08009ad8 	.word	0x08009ad8
 8001434:	200003ee 	.word	0x200003ee
 8001438:	08009ae0 	.word	0x08009ae0
 800143c:	200003d7 	.word	0x200003d7
 8001440:	08009ae8 	.word	0x08009ae8
 8001444:	200003c9 	.word	0x200003c9
 8001448:	08009af0 	.word	0x08009af0
 800144c:	200003ec 	.word	0x200003ec
 8001450:	08009af8 	.word	0x08009af8
 8001454:	08009b04 	.word	0x08009b04
 8001458:	200003b8 	.word	0x200003b8

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b096      	sub	sp, #88	; 0x58
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001466:	2228      	movs	r2, #40	; 0x28
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f005 fd62 	bl	8006f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001490:	230a      	movs	r3, #10
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2310      	movs	r3, #16
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014a8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 ffe6 	bl	8004484 <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014be:	f000 fa0b 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	230f      	movs	r3, #15
 80014c4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c6:	2302      	movs	r3, #2
 80014c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	2102      	movs	r1, #2
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fed8 	bl	8005294 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014ea:	f000 f9f5 	bl	80018d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4618      	mov	r0, r3
 80014fa:	f004 f901 	bl	8005700 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001504:	f000 f9e8 	bl	80018d8 <Error_Handler>
  }
}
 8001508:	bf00      	nop
 800150a:	3758      	adds	r7, #88	; 0x58
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800151c:	2100      	movs	r1, #0
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f001 ff94 	bl	800344c <HAL_CAN_GetRxMessage>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  	{
	    		Error_Handler();
 800152a:	f000 f9d5 	bl	80018d8 <Error_Handler>
	  	}
	switch (RxHeader.StdId){
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8001536:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800153a:	d002      	beq.n	8001542 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	case 0x102:
		speed=uchar4_to_float(RxData);
		break;

	}
}
 800153c:	e00a      	b.n	8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		NVIC_SystemReset();
 800153e:	f7ff fe19 	bl	8001174 <__NVIC_SystemReset>
		speed=uchar4_to_float(RxData);
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001544:	f000 fca6 	bl	8001e94 <uchar4_to_float>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800154e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001552:	bf00      	nop
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000308 	.word	0x20000308
 8001560:	2000036c 	.word	0x2000036c
 8001564:	200003fc 	.word	0x200003fc

08001568 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

	tempdata[count]=ADCdata[0];
 8001570:	4bb9      	ldr	r3, [pc, #740]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4ab9      	ldr	r2, [pc, #740]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001576:	8811      	ldrh	r1, [r2, #0]
 8001578:	4ab9      	ldr	r2, [pc, #740]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800157a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0;i<5;i++){
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e00a      	b.n	800159a <HAL_TIM_PeriodElapsedCallback+0x32>
		sortdata[i]=tempdata[i];
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	49b5      	ldr	r1, [pc, #724]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800158a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800158e:	4ab5      	ldr	r2, [pc, #724]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001590:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0;i<5;i++){
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	3301      	adds	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d9f1      	bls.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x1c>
	}
	qsort(sortdata,data_cnt,2,int_sort);
 80015a0:	4bb1      	ldr	r3, [pc, #708]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80015a2:	2202      	movs	r2, #2
 80015a4:	2105      	movs	r1, #5
 80015a6:	48af      	ldr	r0, [pc, #700]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80015a8:	f006 f9dc 	bl	8007964 <qsort>
	medianfilter_out=tempdata[2];
 80015ac:	4bac      	ldr	r3, [pc, #688]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80015ae:	889a      	ldrh	r2, [r3, #4]
 80015b0:	4bae      	ldr	r3, [pc, #696]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015b2:	801a      	strh	r2, [r3, #0]
	out_lowpass=(float)((float)rate*medianfilter_out+(float)(1-rate)*out_lowpass_temp);
 80015b4:	4bad      	ldr	r3, [pc, #692]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001870 <HAL_TIM_PeriodElapsedCallback+0x308>
 80015c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015c8:	4baa      	ldr	r3, [pc, #680]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d4:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8001878 <HAL_TIM_PeriodElapsedCallback+0x310>
 80015d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e4:	ee17 3a90 	vmov	r3, s15
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4ba4      	ldr	r3, [pc, #656]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80015ec:	801a      	strh	r2, [r3, #0]
	out_lowpass_temp=out_lowpass;
 80015ee:	4ba3      	ldr	r3, [pc, #652]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	4ba0      	ldr	r3, [pc, #640]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80015f4:	801a      	strh	r2, [r3, #0]

	if(count>=4){
 80015f6:	4b98      	ldr	r3, [pc, #608]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d903      	bls.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x9e>
		count=0;
 80015fe:	4b96      	ldr	r3, [pc, #600]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e004      	b.n	8001610 <HAL_TIM_PeriodElapsedCallback+0xa8>
	}
	else{
		count++;
 8001606:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a92      	ldr	r2, [pc, #584]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800160e:	6013      	str	r3, [r2, #0]
	}


	TxData[0]=state[0];
 8001610:	4b9b      	ldr	r3, [pc, #620]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	4b9b      	ldr	r3, [pc, #620]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001616:	701a      	strb	r2, [r3, #0]
	can_send(0x100,(uint8_t*)TxData);
 8001618:	499a      	ldr	r1, [pc, #616]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800161a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800161e:	f7ff fcb7 	bl	8000f90 <can_send>

	float_to_uchar4(TxData,slot);
 8001622:	4b99      	ldr	r3, [pc, #612]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	4895      	ldr	r0, [pc, #596]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800162e:	f000 fc4b 	bl	8001ec8 <float_to_uchar4>
	can_send(0x101,(uint8_t*)TxData);
 8001632:	4994      	ldr	r1, [pc, #592]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001634:	f240 1001 	movw	r0, #257	; 0x101
 8001638:	f7ff fcaa 	bl	8000f90 <can_send>

	 Craction_in=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800163c:	2120      	movs	r1, #32
 800163e:	4893      	ldr	r0, [pc, #588]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001640:	f002 fe80 	bl	8004344 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b91      	ldr	r3, [pc, #580]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800164a:	701a      	strb	r2, [r3, #0]
	 Break_in=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800164c:	2110      	movs	r1, #16
 800164e:	488f      	ldr	r0, [pc, #572]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001650:	f002 fe78 	bl	8004344 <HAL_GPIO_ReadPin>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	4b8e      	ldr	r3, [pc, #568]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800165a:	701a      	strb	r2, [r3, #0]
	 Flont_Lamp_in=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	488b      	ldr	r0, [pc, #556]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001660:	f002 fe70 	bl	8004344 <HAL_GPIO_ReadPin>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800166a:	701a      	strb	r2, [r3, #0]
	 Key_in=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	4887      	ldr	r0, [pc, #540]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001670:	f002 fe68 	bl	8004344 <HAL_GPIO_ReadPin>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800167a:	701a      	strb	r2, [r3, #0]
	 EX_in=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800167c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f002 fe5e 	bl	8004344 <HAL_GPIO_ReadPin>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800168e:	701a      	strb	r2, [r3, #0]
	 Winker_L_in=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f002 fe54 	bl	8004344 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016a2:	701a      	strb	r2, [r3, #0]
	 Winker_R_in=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80016a4:	2108      	movs	r1, #8
 80016a6:	4879      	ldr	r0, [pc, #484]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016a8:	f002 fe4c 	bl	8004344 <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016b2:	701a      	strb	r2, [r3, #0]
	 state[0]=(Winker_L_in << 6)+(Winker_R_in << 5) +(Craction_in<<4)+(Break_in<<3)+(Flont_Lamp_in<<2)
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	019b      	lsls	r3, r3, #6
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b71      	ldr	r3, [pc, #452]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	b2da      	uxtb	r2, r3
				  	  			 +(Key_in<<1)+EX_in;
 80016ec:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	b2da      	uxtb	r2, r3
	 state[0]=(Winker_L_in << 6)+(Winker_R_in << 5) +(Craction_in<<4)+(Break_in<<3)+(Flont_Lamp_in<<2)
 8001700:	4b5f      	ldr	r3, [pc, #380]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001702:	701a      	strb	r2, [r3, #0]

	 if(Flont_Lamp_in==0){
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 9000);
 800170c:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x344>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f242 3228 	movw	r2, #9000	; 0x2328
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
 8001716:	e003      	b.n	8001720 <HAL_TIM_PeriodElapsedCallback+0x1b8>
	 }
	 else{
		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100);
 8001718:	4b64      	ldr	r3, [pc, #400]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x344>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2264      	movs	r2, #100	; 0x64
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
	 }

	 slot=(float)out_lowpass/4096.0*3.3*25000.0/15000.0/4.26*3.3;
 8001720:	4b56      	ldr	r3, [pc, #344]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172c:	ee17 0a90 	vmov	r0, s15
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800173a:	f7ff f887 	bl	800084c <__aeabi_ddiv>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4618      	mov	r0, r3
 8001744:	4621      	mov	r1, r4
 8001746:	a33c      	add	r3, pc, #240	; (adr r3, 8001838 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe ff54 	bl	80005f8 <__aeabi_dmul>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	4618      	mov	r0, r3
 8001756:	4621      	mov	r1, r4
 8001758:	a339      	add	r3, pc, #228	; (adr r3, 8001840 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe ff4b 	bl	80005f8 <__aeabi_dmul>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	4618      	mov	r0, r3
 8001768:	4621      	mov	r1, r4
 800176a:	a337      	add	r3, pc, #220	; (adr r3, 8001848 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7ff f86c 	bl	800084c <__aeabi_ddiv>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	4618      	mov	r0, r3
 800177a:	4621      	mov	r1, r4
 800177c:	a334      	add	r3, pc, #208	; (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7ff f863 	bl	800084c <__aeabi_ddiv>
 8001786:	4603      	mov	r3, r0
 8001788:	460c      	mov	r4, r1
 800178a:	4618      	mov	r0, r3
 800178c:	4621      	mov	r1, r4
 800178e:	a32a      	add	r3, pc, #168	; (adr r3, 8001838 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe ff30 	bl	80005f8 <__aeabi_dmul>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	4618      	mov	r0, r3
 800179e:	4621      	mov	r1, r4
 80017a0:	f7ff fa02 	bl	8000ba8 <__aeabi_d2f>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80017a8:	601a      	str	r2, [r3, #0]

	 if(Craction_in==0){
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10d      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x266>
		 cnt_Craction++;
 80017b2:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017bc:	701a      	strb	r2, [r3, #0]
		 if(cnt_Craction>250){cnt_Craction=10;}
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2bfa      	cmp	r3, #250	; 0xfa
 80017c4:	d906      	bls.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x26c>
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017c8:	220a      	movs	r2, #10
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	e002      	b.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x26c>
		}
	else{
		cnt_Craction=0;
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
		}

		if(cnt_Craction>3){
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d909      	bls.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0x288>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80017dc:	2201      	movs	r2, #1
 80017de:	2104      	movs	r1, #4
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e4:	f002 fdc6 	bl	8004374 <HAL_GPIO_WritePin>
			cnt_Craction=3;
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e005      	b.n	80017fc <HAL_TIM_PeriodElapsedCallback+0x294>
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2104      	movs	r1, #4
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f002 fdbc 	bl	8004374 <HAL_GPIO_WritePin>
		}


		if(Winker_L_in==0){
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d106      	bne.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x2aa>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,1);
 8001804:	2201      	movs	r2, #1
 8001806:	2101      	movs	r1, #1
 8001808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180c:	f002 fdb2 	bl	8004374 <HAL_GPIO_WritePin>
 8001810:	e005      	b.n	800181e <HAL_TIM_PeriodElapsedCallback+0x2b6>
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,0);
 8001812:	2200      	movs	r2, #0
 8001814:	2101      	movs	r1, #1
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f002 fdab 	bl	8004374 <HAL_GPIO_WritePin>
		}

		if(Winker_R_in==0){
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d148      	bne.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x350>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,1);
 8001826:	2201      	movs	r2, #1
 8001828:	2102      	movs	r1, #2
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f002 fda1 	bl	8004374 <HAL_GPIO_WritePin>
 8001832:	e047      	b.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x35c>
 8001834:	f3af 8000 	nop.w
 8001838:	66666666 	.word	0x66666666
 800183c:	400a6666 	.word	0x400a6666
 8001840:	00000000 	.word	0x00000000
 8001844:	40d86a00 	.word	0x40d86a00
 8001848:	00000000 	.word	0x00000000
 800184c:	40cd4c00 	.word	0x40cd4c00
 8001850:	70a3d70a 	.word	0x70a3d70a
 8001854:	40110a3d 	.word	0x40110a3d
 8001858:	200003f8 	.word	0x200003f8
 800185c:	200003e8 	.word	0x200003e8
 8001860:	200003dc 	.word	0x200003dc
 8001864:	200003cc 	.word	0x200003cc
 8001868:	080011c1 	.word	0x080011c1
 800186c:	200003f0 	.word	0x200003f0
 8001870:	3ecccccd 	.word	0x3ecccccd
 8001874:	200003f4 	.word	0x200003f4
 8001878:	3f19999a 	.word	0x3f19999a
 800187c:	200003d8 	.word	0x200003d8
 8001880:	200003ec 	.word	0x200003ec
 8001884:	200002d8 	.word	0x200002d8
 8001888:	20000404 	.word	0x20000404
 800188c:	48000400 	.word	0x48000400
 8001890:	200003f2 	.word	0x200003f2
 8001894:	200003d6 	.word	0x200003d6
 8001898:	200003c8 	.word	0x200003c8
 800189c:	200003d7 	.word	0x200003d7
 80018a0:	200003c9 	.word	0x200003c9
 80018a4:	20000401 	.word	0x20000401
 80018a8:	20000400 	.word	0x20000400
 80018ac:	20000408 	.word	0x20000408
 80018b0:	40b00000 	.word	0x40b00000
 80018b4:	200003ed 	.word	0x200003ed
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2102      	movs	r1, #2
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f002 fd58 	bl	8004374 <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80018c4:	2102      	movs	r1, #2
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80018c8:	f002 fd6c 	bl	80043a4 <HAL_GPIO_TogglePin>
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	48000400 	.word	0x48000400

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	TxData[0]=0x01;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <Error_Handler+0x2c>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
	TxData[1]=0xFF;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <Error_Handler+0x2c>)
 80018e4:	22ff      	movs	r2, #255	; 0xff
 80018e6:	705a      	strb	r2, [r3, #1]
	can_send(0x000,(uint8_t*)TxData);
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <Error_Handler+0x2c>)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fb50 	bl	8000f90 <can_send>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80018f0:	2101      	movs	r1, #1
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <Error_Handler+0x30>)
 80018f4:	f002 fd56 	bl	80043a4 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80018f8:	2064      	movs	r0, #100	; 0x64
 80018fa:	f000 fb93 	bl	8002024 <HAL_Delay>


  /* USER CODE END Error_Handler_Debug */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002d8 	.word	0x200002d8
 8001908:	48000400 	.word	0x48000400

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_MspInit+0x44>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_MspInit+0x44>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_MspInit+0x44>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_MspInit+0x44>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_MspInit+0x44>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_MspInit+0x44>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 fb1c 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Channel2_IRQHandler+0x10>)
 80019b6:	f002 fa62 	bl	8003e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000310 	.word	0x20000310

080019c4 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <CAN_TX_IRQHandler+0x10>)
 80019ca:	f001 fe77 	bl	80036bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000390 	.word	0x20000390

080019d8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <CAN_RX0_IRQHandler+0x10>)
 80019de:	f001 fe6d 	bl	80036bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000390 	.word	0x20000390

080019ec <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <CAN_RX1_IRQHandler+0x10>)
 80019f2:	f001 fe63 	bl	80036bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000390 	.word	0x20000390

08001a00 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <CAN_SCE_IRQHandler+0x10>)
 8001a06:	f001 fe59 	bl	80036bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000390 	.word	0x20000390

08001a14 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM7_DAC2_IRQHandler+0x10>)
 8001a1a:	f004 f86b 	bl	8005af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000448 	.word	0x20000448

08001a28 <_read>:
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00a      	b.n	8001a50 <_read+0x28>
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4601      	mov	r1, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf0      	blt.n	8001a3a <_read+0x12>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_write>:
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e009      	b.n	8001a88 <_write+0x26>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fb8d 	bl	800119c <__io_putchar>
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf1      	blt.n	8001a74 <_write+0x12>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_close>:
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_fstat>:
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	2301      	movs	r3, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_lseek>:
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	2300      	movs	r3, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
 8001b34:	f005 f9d4 	bl	8006ee0 <__errno>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20003000 	.word	0x20003000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	200001f8 	.word	0x200001f8
 8001b6c:	20000510 	.word	0x20000510

08001b70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <SystemInit+0x28>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <SystemInit+0x28>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SystemInit+0x28>)
 8001b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001bc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001bca:	2248      	movs	r2, #72	; 0x48
 8001bcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001bd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001be8:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001bea:	f003 ff05 	bl	80059f8 <HAL_TIM_PWM_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001bf4:	f7ff fe70 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001c08:	f004 fd18 	bl	800663c <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c12:	f7ff fe61 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	; 0x60
 8001c18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	220c      	movs	r2, #12
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001c2e:	f004 f881 	bl	8005d34 <HAL_TIM_PWM_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c38:	f7ff fe4e 	bl	80018d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM2_Init+0xb0>)
 8001c3e:	f000 f881 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000408 	.word	0x20000408

08001c50 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_TIM7_Init+0x64>)
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <MX_TIM7_Init+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_TIM7_Init+0x64>)
 8001c68:	2248      	movs	r2, #72	; 0x48
 8001c6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_TIM7_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_TIM7_Init+0x64>)
 8001c74:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_TIM7_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <MX_TIM7_Init+0x64>)
 8001c82:	f003 fe63 	bl	800594c <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c8c:	f7ff fe24 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_TIM7_Init+0x64>)
 8001c9e:	f004 fccd 	bl	800663c <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ca8:	f7ff fe16 	bl	80018d8 <Error_Handler>
  }

}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000448 	.word	0x20000448
 8001cb8:	40001400 	.word	0x40001400

08001cbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_TIM_PWM_MspInit+0x38>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_TIM_PWM_MspInit+0x38>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_TIM_PWM_MspInit+0x38>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <HAL_TIM_Base_MspInit+0x44>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d113      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_TIM_Base_MspInit+0x48>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <HAL_TIM_Base_MspInit+0x48>)
 8001d10:	f043 0320 	orr.w	r3, r3, #32
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_TIM_Base_MspInit+0x48>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 5, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2105      	movs	r1, #5
 8001d26:	2037      	movs	r0, #55	; 0x37
 8001d28:	f001 ffcd 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001d2c:	2037      	movs	r0, #55	; 0x37
 8001d2e:	f001 ffe6 	bl	8003cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40001400 	.word	0x40001400
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d11c      	bne.n	8001da0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_TIM_MspPostInit+0x64>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_TIM_MspPostInit+0x64>)
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	6153      	str	r3, [r2, #20]
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_TIM_MspPostInit+0x64>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d7e:	2308      	movs	r3, #8
 8001d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9c:	f002 f960 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000

08001dac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001db2:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <MX_USART1_UART_Init+0x5c>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_USART1_UART_Init+0x58>)
 8001df0:	f004 fcb0 	bl	8006754 <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dfa:	f7ff fd6d 	bl	80018d8 <Error_Handler>
  }

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000488 	.word	0x20000488
 8001e08:	40013800 	.word	0x40013800

08001e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_UART_MspInit+0x80>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d129      	bne.n	8001e82 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6193      	str	r3, [r2, #24]
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e70:	2307      	movs	r3, #7
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f002 f8ef 	bl	8004060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40021000 	.word	0x40021000

08001e94 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	789b      	ldrb	r3, [r3, #2]
 8001eac:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	78db      	ldrb	r3, [r3, #3]
 8001eb2:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	ee07 3a90 	vmov	s15, r3
}
 8001eba:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	ed87 0a00 	vstr	s0, [r7]
    Float_char4 tmp;
    tmp.float_value=float_value;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
    value[0]=tmp.char4_value[0];
 8001ed8:	7b3a      	ldrb	r2, [r7, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	701a      	strb	r2, [r3, #0]
    value[1]=tmp.char4_value[1];
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	7b7a      	ldrb	r2, [r7, #13]
 8001ee4:	701a      	strb	r2, [r3, #0]
    value[2]=tmp.char4_value[2];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3302      	adds	r3, #2
 8001eea:	7bba      	ldrb	r2, [r7, #14]
 8001eec:	701a      	strb	r2, [r3, #0]
    value[3]=tmp.char4_value[3];
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <Reset_Handler>:
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f3c <LoopForever+0x2>
 8001f08:	2100      	movs	r1, #0
 8001f0a:	e003      	b.n	8001f14 <LoopCopyDataInit>

08001f0c <CopyDataInit>:
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <LoopForever+0x6>)
 8001f0e:	585b      	ldr	r3, [r3, r1]
 8001f10:	5043      	str	r3, [r0, r1]
 8001f12:	3104      	adds	r1, #4

08001f14 <LoopCopyDataInit>:
 8001f14:	480b      	ldr	r0, [pc, #44]	; (8001f44 <LoopForever+0xa>)
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <LoopForever+0xe>)
 8001f18:	1842      	adds	r2, r0, r1
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3f6      	bcc.n	8001f0c <CopyDataInit>
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <LoopForever+0x12>)
 8001f20:	e002      	b.n	8001f28 <LoopFillZerobss>

08001f22 <FillZerobss>:
 8001f22:	2300      	movs	r3, #0
 8001f24:	f842 3b04 	str.w	r3, [r2], #4

08001f28 <LoopFillZerobss>:
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <LoopForever+0x16>)
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d3f9      	bcc.n	8001f22 <FillZerobss>
 8001f2e:	f7ff fe1f 	bl	8001b70 <SystemInit>
 8001f32:	f004 ffdb 	bl	8006eec <__libc_init_array>
 8001f36:	f7ff f955 	bl	80011e4 <main>

08001f3a <LoopForever>:
 8001f3a:	e7fe      	b.n	8001f3a <LoopForever>
 8001f3c:	20003000 	.word	0x20003000
 8001f40:	08009e08 	.word	0x08009e08
 8001f44:	20000000 	.word	0x20000000
 8001f48:	200001dc 	.word	0x200001dc
 8001f4c:	200001dc 	.word	0x200001dc
 8001f50:	20000510 	.word	0x20000510

08001f54 <ADC1_2_IRQHandler>:
 8001f54:	e7fe      	b.n	8001f54 <ADC1_2_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_Init+0x28>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_Init+0x28>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f001 fea1 	bl	8003cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff fcca 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 feb9 	bl	8003d1a <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f001 fe81 	bl	8003cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008
 8002008:	20000508 	.word	0x20000508

0800200c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000508 	.word	0x20000508

08002024 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff ffee 	bl	800200c <HAL_GetTick>
 8002030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d005      	beq.n	800204a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_Delay+0x40>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800204a:	bf00      	nop
 800204c:	f7ff ffde 	bl	800200c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8f7      	bhi.n	800204c <HAL_Delay+0x28>
  {
  }
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000008 	.word	0x20000008

08002068 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b09a      	sub	sp, #104	; 0x68
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e172      	b.n	80023aa <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d176      	bne.n	80021c4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d152      	bne.n	8002184 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe fe03 	bl	8000d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d13b      	bne.n	8002184 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fe25 	bl	8002d5c <ADC_Disable>
 8002112:	4603      	mov	r3, r0
 8002114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d12f      	bne.n	8002184 <HAL_ADC_Init+0xe0>
 8002124:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002128:	2b00      	cmp	r3, #0
 800212a:	d12b      	bne.n	8002184 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	f043 0202 	orr.w	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800214e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800215e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002160:	4b94      	ldr	r3, [pc, #592]	; (80023b4 <HAL_ADC_Init+0x310>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a94      	ldr	r2, [pc, #592]	; (80023b8 <HAL_ADC_Init+0x314>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9a      	lsrs	r2, r3, #18
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002176:	e002      	b.n	800217e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3b01      	subs	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800219c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a0:	d110      	bne.n	80021c4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f023 0312 	bic.w	r3, r3, #18
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 80df 	bne.w	8002390 <HAL_ADC_Init+0x2ec>
 80021d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80da 	bne.w	8002390 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 80d2 	bne.w	8002390 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021f4:	f043 0202 	orr.w	r2, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_ADC_Init+0x318>)
 80021fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002208:	d102      	bne.n	8002210 <HAL_ADC_Init+0x16c>
 800220a:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_ADC_Init+0x31c>)
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e002      	b.n	8002216 <HAL_ADC_Init+0x172>
 8002210:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002214:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_ADC_Init+0x192>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Init+0x192>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_ADC_Init+0x194>
 8002236:	2300      	movs	r3, #0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11c      	bne.n	8002276 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800223c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_ADC_Init+0x1ba>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0x1ba>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_ADC_Init+0x1bc>
 800225e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	431a      	orrs	r2, r3
 8002272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002274:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e5b      	ldrb	r3, [r3, #25]
 800227a:	035b      	lsls	r3, r3, #13
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002280:	2a01      	cmp	r2, #1
 8002282:	d002      	beq.n	800228a <HAL_ADC_Init+0x1e6>
 8002284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002288:	e000      	b.n	800228c <HAL_ADC_Init+0x1e8>
 800228a:	2200      	movs	r2, #0
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4313      	orrs	r3, r2
 800229a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800229c:	4313      	orrs	r3, r2
 800229e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d11b      	bne.n	80022e2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7e5b      	ldrb	r3, [r3, #25]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	3b01      	subs	r3, #1
 80022b8:	045a      	lsls	r2, r3, #17
 80022ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022bc:	4313      	orrs	r3, r2
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	663b      	str	r3, [r7, #96]	; 0x60
 80022c4:	e00d      	b.n	80022e2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d007      	beq.n	80022fa <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	4313      	orrs	r3, r2
 80022f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022f6:	4313      	orrs	r3, r2
 80022f8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	d114      	bne.n	8002332 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002316:	f023 0302 	bic.w	r3, r3, #2
 800231a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7e1b      	ldrb	r3, [r3, #24]
 8002320:	039a      	lsls	r2, r3, #14
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4313      	orrs	r3, r2
 800232c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800232e:	4313      	orrs	r3, r2
 8002330:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_ADC_Init+0x320>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002342:	430b      	orrs	r3, r1
 8002344:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10c      	bne.n	8002368 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f023 010f 	bic.w	r1, r3, #15
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
 8002366:	e007      	b.n	8002378 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 020f 	bic.w	r2, r2, #15
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
 800238e:	e00a      	b.n	80023a6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f023 0312 	bic.w	r3, r3, #18
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3768      	adds	r7, #104	; 0x68
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000000 	.word	0x20000000
 80023b8:	431bde83 	.word	0x431bde83
 80023bc:	50000300 	.word	0x50000300
 80023c0:	50000100 	.word	0x50000100
 80023c4:	fff0c007 	.word	0xfff0c007

080023c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 80b9 	bne.w	800255a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Start_DMA+0x2e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0b4      	b.n	8002560 <HAL_ADC_Start_DMA+0x198>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <HAL_ADC_Start_DMA+0x1a0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 80a0 	bne.w	800254c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fc47 	bl	8002ca0 <ADC_Enable>
 8002412:	4603      	mov	r3, r0
 8002414:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002416:	7dfb      	ldrb	r3, [r7, #23]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 8092 	bne.w	8002542 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_ADC_Start_DMA+0x1a0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_ADC_Start_DMA+0x80>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002446:	d115      	bne.n	8002474 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d027      	beq.n	80024b2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800246a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002472:	e01e      	b.n	80024b2 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002488:	d004      	beq.n	8002494 <HAL_ADC_Start_DMA+0xcc>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a37      	ldr	r2, [pc, #220]	; (800256c <HAL_ADC_Start_DMA+0x1a4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d10e      	bne.n	80024b2 <HAL_ADC_Start_DMA+0xea>
 8002494:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d106      	bne.n	80024ce <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f023 0206 	bic.w	r2, r3, #6
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44
 80024cc:	e002      	b.n	80024d4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <HAL_ADC_Start_DMA+0x1a8>)
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <HAL_ADC_Start_DMA+0x1ac>)
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_ADC_Start_DMA+0x1b0>)
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	221c      	movs	r2, #28
 80024fa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0210 	orr.w	r2, r2, #16
 800250a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3340      	adds	r3, #64	; 0x40
 8002526:	4619      	mov	r1, r3
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f001 fc48 	bl	8003dc0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0204 	orr.w	r2, r2, #4
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	e00d      	b.n	800255e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800254a:	e008      	b.n	800255e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002558:	e001      	b.n	800255e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	50000300 	.word	0x50000300
 800256c:	50000100 	.word	0x50000100
 8002570:	08002bd5 	.word	0x08002bd5
 8002574:	08002c4f 	.word	0x08002c4f
 8002578:	08002c6b 	.word	0x08002c6b

0800257c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_ADCEx_Calibration_Start+0x1c>
 8002594:	2302      	movs	r3, #2
 8002596:	e057      	b.n	8002648 <HAL_ADCEx_Calibration_Start+0xcc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fbdb 	bl	8002d5c <ADC_Disable>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d146      	bne.n	800263e <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80025c4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025da:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025ea:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80025ec:	f7ff fd0e 	bl	800200c <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80025f2:	e014      	b.n	800261e <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80025f4:	f7ff fd0a 	bl	800200c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b0a      	cmp	r3, #10
 8002600:	d90d      	bls.n	800261e <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f023 0312 	bic.w	r3, r3, #18
 800260a:	f043 0210 	orr.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e014      	b.n	8002648 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800262c:	d0e2      	beq.n	80025f4 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b09b      	sub	sp, #108	; 0x6c
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x22>
 800266e:	2302      	movs	r3, #2
 8002670:	e2a5      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x56e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 8289 	bne.w	8002b9c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d81c      	bhi.n	80026cc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	461a      	mov	r2, r3
 80026a6:	231f      	movs	r3, #31
 80026a8:	4093      	lsls	r3, r2
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4019      	ands	r1, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa00 f203 	lsl.w	r2, r0, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ca:	e063      	b.n	8002794 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d81e      	bhi.n	8002712 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	4019      	ands	r1, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	3b1e      	subs	r3, #30
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
 8002710:	e040      	b.n	8002794 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b0e      	cmp	r3, #14
 8002718:	d81e      	bhi.n	8002758 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	3b3c      	subs	r3, #60	; 0x3c
 800272e:	221f      	movs	r2, #31
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	4019      	ands	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	3b3c      	subs	r3, #60	; 0x3c
 800274a:	fa00 f203 	lsl.w	r2, r0, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
 8002756:	e01d      	b.n	8002794 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	3b5a      	subs	r3, #90	; 0x5a
 800276c:	221f      	movs	r2, #31
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	4019      	ands	r1, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	3b5a      	subs	r3, #90	; 0x5a
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 80e5 	bne.w	800296e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	d91c      	bls.n	80027e6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6999      	ldr	r1, [r3, #24]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	3b1e      	subs	r3, #30
 80027be:	2207      	movs	r2, #7
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4019      	ands	r1, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6898      	ldr	r0, [r3, #8]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	3b1e      	subs	r3, #30
 80027d8:	fa00 f203 	lsl.w	r2, r0, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	619a      	str	r2, [r3, #24]
 80027e4:	e019      	b.n	800281a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6959      	ldr	r1, [r3, #20]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	2207      	movs	r2, #7
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4019      	ands	r1, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6898      	ldr	r0, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	fa00 f203 	lsl.w	r2, r0, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	08db      	lsrs	r3, r3, #3
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	3b01      	subs	r3, #1
 8002838:	2b03      	cmp	r3, #3
 800283a:	d84f      	bhi.n	80028dc <HAL_ADC_ConfigChannel+0x28c>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <HAL_ADC_ConfigChannel+0x1f4>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002855 	.word	0x08002855
 8002848:	08002877 	.word	0x08002877
 800284c:	08002899 	.word	0x08002899
 8002850:	080028bb 	.word	0x080028bb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285a:	4b9e      	ldr	r3, [pc, #632]	; (8002ad4 <HAL_ADC_ConfigChannel+0x484>)
 800285c:	4013      	ands	r3, r2
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	0691      	lsls	r1, r2, #26
 8002864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002866:	430a      	orrs	r2, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002872:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002874:	e07e      	b.n	8002974 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800287c:	4b95      	ldr	r3, [pc, #596]	; (8002ad4 <HAL_ADC_ConfigChannel+0x484>)
 800287e:	4013      	ands	r3, r2
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	0691      	lsls	r1, r2, #26
 8002886:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002888:	430a      	orrs	r2, r1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002894:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002896:	e06d      	b.n	8002974 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800289e:	4b8d      	ldr	r3, [pc, #564]	; (8002ad4 <HAL_ADC_ConfigChannel+0x484>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	0691      	lsls	r1, r2, #26
 80028a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028aa:	430a      	orrs	r2, r1
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028b6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028b8:	e05c      	b.n	8002974 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028c0:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <HAL_ADC_ConfigChannel+0x484>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	0691      	lsls	r1, r2, #26
 80028ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028cc:	430a      	orrs	r2, r1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028d8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028da:	e04b      	b.n	8002974 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	069b      	lsls	r3, r3, #26
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	069b      	lsls	r3, r3, #26
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002922:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800292a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	069b      	lsls	r3, r3, #26
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002946:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	429a      	cmp	r2, r3
 800295a:	d10a      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800296a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800296c:	e001      	b.n	8002972 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002972:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x344>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x344>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_ADC_ConfigChannel+0x346>
 8002994:	2300      	movs	r3, #0
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 810b 	bne.w	8002bb2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d00f      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	400a      	ands	r2, r1
 80029be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80029c2:	e049      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	409a      	lsls	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b09      	cmp	r3, #9
 80029e4:	d91c      	bls.n	8002a20 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6999      	ldr	r1, [r3, #24]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	3b1b      	subs	r3, #27
 80029f8:	2207      	movs	r2, #7
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	4019      	ands	r1, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6898      	ldr	r0, [r3, #8]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b1b      	subs	r3, #27
 8002a12:	fa00 f203 	lsl.w	r2, r0, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	619a      	str	r2, [r3, #24]
 8002a1e:	e01b      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6959      	ldr	r1, [r3, #20]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	2207      	movs	r2, #7
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	4019      	ands	r1, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6898      	ldr	r0, [r3, #8]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_ADC_ConfigChannel+0x488>)
 8002a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d105      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a74:	2b11      	cmp	r3, #17
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a88:	2b12      	cmp	r3, #18
 8002a8a:	f040 8092 	bne.w	8002bb2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 808b 	bne.w	8002bb2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa4:	d102      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x45c>
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_ADC_ConfigChannel+0x48c>)
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e002      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x462>
 8002aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10f      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x490>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d108      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x490>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x492>
 8002ad2:	bf00      	nop
 8002ad4:	83fff000 	.word	0x83fff000
 8002ad8:	50000300 	.word	0x50000300
 8002adc:	50000100 	.word	0x50000100
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d150      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d010      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x4b8>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x4b8>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x4ba>
 8002b08:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d13c      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d11d      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x502>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1e:	d118      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_ADC_ConfigChannel+0x57c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_ADC_ConfigChannel+0x580>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0c9a      	lsrs	r2, r3, #18
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b42:	e002      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f9      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b50:	e02e      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b11      	cmp	r3, #17
 8002b58:	d10b      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x522>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b62:	d106      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b70:	e01e      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b12      	cmp	r3, #18
 8002b78:	d11a      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b84:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b86:	e013      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b9a:	e00a      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bae:	e000      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bb0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	376c      	adds	r7, #108	; 0x6c
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	431bde83 	.word	0x431bde83

08002bd4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d126      	bne.n	8002c3c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d115      	bne.n	8002c34 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7ff fa17 	bl	8002068 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c3a:	e004      	b.n	8002c46 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7ff fa0d 	bl	800207c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff f9fd 	bl	8002090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d108      	bne.n	8002ccc <ADC_Enable+0x2c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <ADC_Enable+0x2c>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <ADC_Enable+0x2e>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d13c      	bne.n	8002d4c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <ADC_Enable+0xb8>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0210 	orr.w	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e028      	b.n	8002d4e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002d0c:	f7ff f97e 	bl	800200c <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d12:	e014      	b.n	8002d3e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d14:	f7ff f97a 	bl	800200c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d90d      	bls.n	8002d3e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e007      	b.n	8002d4e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d1e3      	bne.n	8002d14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	8000003f 	.word	0x8000003f

08002d5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <ADC_Disable+0x2c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <ADC_Disable+0x2c>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <ADC_Disable+0x2e>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d040      	beq.n	8002e10 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030d 	and.w	r3, r3, #13
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10f      	bne.n	8002dbc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0202 	orr.w	r2, r2, #2
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2203      	movs	r2, #3
 8002db2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002db4:	f7ff f92a 	bl	800200c <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dba:	e022      	b.n	8002e02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f043 0210 	orr.w	r2, r3, #16
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e01c      	b.n	8002e12 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dd8:	f7ff f918 	bl	800200c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d90d      	bls.n	8002e02 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0210 	orr.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e007      	b.n	8002e12 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d0e3      	beq.n	8002dd8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0ed      	b.n	8003008 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fe f805 	bl	8000e48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0202 	bic.w	r2, r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4e:	f7ff f8dd 	bl	800200c <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e54:	e012      	b.n	8002e7c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e56:	f7ff f8d9 	bl	800200c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b0a      	cmp	r3, #10
 8002e62:	d90b      	bls.n	8002e7c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2205      	movs	r2, #5
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0c5      	b.n	8003008 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e5      	bne.n	8002e56 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e9a:	f7ff f8b7 	bl	800200c <HAL_GetTick>
 8002e9e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ea0:	e012      	b.n	8002ec8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ea2:	f7ff f8b3 	bl	800200c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b0a      	cmp	r3, #10
 8002eae:	d90b      	bls.n	8002ec8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2205      	movs	r2, #5
 8002ec0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e09f      	b.n	8003008 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0e5      	beq.n	8002ea2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7e1b      	ldrb	r3, [r3, #24]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e007      	b.n	8002f00 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7e5b      	ldrb	r3, [r3, #25]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d108      	bne.n	8002f1a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e007      	b.n	8002f2a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7e9b      	ldrb	r3, [r3, #26]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d108      	bne.n	8002f44 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0220 	orr.w	r2, r2, #32
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e007      	b.n	8002f54 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0220 	bic.w	r2, r2, #32
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7edb      	ldrb	r3, [r3, #27]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d108      	bne.n	8002f6e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e007      	b.n	8002f7e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0210 	orr.w	r2, r2, #16
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7f1b      	ldrb	r3, [r3, #28]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0208 	orr.w	r2, r2, #8
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e007      	b.n	8002fa8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0208 	bic.w	r2, r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7f5b      	ldrb	r3, [r3, #29]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d108      	bne.n	8002fc2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0204 	orr.w	r2, r2, #4
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e007      	b.n	8002fd2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0204 	bic.w	r2, r2, #4
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	ea42 0103 	orr.w	r1, r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003026:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d003      	beq.n	8003036 <HAL_CAN_ConfigFilter+0x26>
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b02      	cmp	r3, #2
 8003032:	f040 80aa 	bne.w	800318a <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d123      	bne.n	80030b8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003092:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3248      	adds	r2, #72	; 0x48
 8003098:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	3348      	adds	r3, #72	; 0x48
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d122      	bne.n	8003106 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3248      	adds	r2, #72	; 0x48
 80030e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	3348      	adds	r3, #72	; 0x48
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43db      	mvns	r3, r3
 8003118:	401a      	ands	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003120:	e007      	b.n	8003132 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	431a      	orrs	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	401a      	ands	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800314c:	e007      	b.n	800315e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	431a      	orrs	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800317c:	f023 0201 	bic.w	r2, r3, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e006      	b.n	8003198 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
  }
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d12e      	bne.n	8003216 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fe ff1c 	bl	800200c <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031d6:	e012      	b.n	80031fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031d8:	f7fe ff18 	bl	800200c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b0a      	cmp	r3, #10
 80031e4:	d90b      	bls.n	80031fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2205      	movs	r2, #5
 80031f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e012      	b.n	8003224 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e006      	b.n	8003224 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003240:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d003      	beq.n	8003258 <HAL_CAN_AddTxMessage+0x2c>
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	2b02      	cmp	r3, #2
 8003254:	f040 80b8 	bne.w	80033c8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a0 	beq.w	80033b8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	0e1b      	lsrs	r3, r3, #24
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d907      	bls.n	8003298 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e09e      	b.n	80033d6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003298:	2201      	movs	r2, #1
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	409a      	lsls	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	6809      	ldr	r1, [r1, #0]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3318      	adds	r3, #24
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	440b      	add	r3, r1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e00f      	b.n	80032e6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3318      	adds	r3, #24
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	440b      	add	r3, r1
 80032e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3318      	adds	r3, #24
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	440b      	add	r3, r1
 80032f6:	3304      	adds	r3, #4
 80032f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	7d1b      	ldrb	r3, [r3, #20]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d111      	bne.n	8003326 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3318      	adds	r3, #24
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6811      	ldr	r1, [r2, #0]
 8003316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3318      	adds	r3, #24
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	440b      	add	r3, r1
 8003322:	3304      	adds	r3, #4
 8003324:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3307      	adds	r3, #7
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	061a      	lsls	r2, r3, #24
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3306      	adds	r3, #6
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3305      	adds	r3, #5
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	4313      	orrs	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	3204      	adds	r2, #4
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	4610      	mov	r0, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6811      	ldr	r1, [r2, #0]
 800334e:	ea43 0200 	orr.w	r2, r3, r0
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	440b      	add	r3, r1
 8003358:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800335c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3303      	adds	r3, #3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	061a      	lsls	r2, r3, #24
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3302      	adds	r3, #2
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3301      	adds	r3, #1
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	4313      	orrs	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	4610      	mov	r0, r2
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	6811      	ldr	r1, [r2, #0]
 8003384:	ea43 0200 	orr.w	r2, r3, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	440b      	add	r3, r1
 800338e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003392:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	3318      	adds	r3, #24
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	4413      	add	r3, r2
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	6811      	ldr	r1, [r2, #0]
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3318      	adds	r3, #24
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	440b      	add	r3, r1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e00e      	b.n	80033d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e006      	b.n	80033d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3724      	adds	r7, #36	; 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80033f6:	7afb      	ldrb	r3, [r7, #11]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d002      	beq.n	8003402 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d11d      	bne.n	800343e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d003      	beq.n	8003470 <HAL_CAN_GetRxMessage+0x24>
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b02      	cmp	r3, #2
 800346c:	f040 80f3 	bne.w	8003656 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10e      	bne.n	8003494 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0e7      	b.n	8003664 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0d8      	b.n	8003664 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	331b      	adds	r3, #27
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	4413      	add	r3, r2
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0204 	and.w	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10c      	bne.n	80034ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	331b      	adds	r3, #27
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	4413      	add	r3, r2
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0d5b      	lsrs	r3, r3, #21
 80034e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e00b      	b.n	8003502 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	331b      	adds	r3, #27
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	4413      	add	r3, r2
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	08db      	lsrs	r3, r3, #3
 80034fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	331b      	adds	r3, #27
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0202 	and.w	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	331b      	adds	r3, #27
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4413      	add	r3, r2
 8003524:	3304      	adds	r3, #4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	331b      	adds	r3, #27
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	331b      	adds	r3, #27
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	4413      	add	r3, r2
 8003554:	3304      	adds	r3, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	4413      	add	r3, r2
 800356a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	4413      	add	r3, r2
 8003580:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0a1a      	lsrs	r2, r3, #8
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4413      	add	r3, r2
 800359a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0c1a      	lsrs	r2, r3, #16
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	3302      	adds	r3, #2
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0e1a      	lsrs	r2, r3, #24
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	3303      	adds	r3, #3
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	3304      	adds	r3, #4
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0a1a      	lsrs	r2, r3, #8
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	3305      	adds	r3, #5
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	4413      	add	r3, r2
 8003600:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0c1a      	lsrs	r2, r3, #16
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	3306      	adds	r3, #6
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	4413      	add	r3, r2
 800361a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0e1a      	lsrs	r2, r3, #24
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	3307      	adds	r3, #7
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d108      	bne.n	8003642 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	60da      	str	r2, [r3, #12]
 8003640:	e007      	b.n	8003652 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e006      	b.n	8003664 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003680:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d002      	beq.n	800368e <HAL_CAN_ActivateNotification+0x1e>
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d109      	bne.n	80036a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6959      	ldr	r1, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e006      	b.n	80036b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d07c      	beq.n	80037fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d023      	beq.n	8003754 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2201      	movs	r2, #1
 8003712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f97d 	bl	8003a1e <HAL_CAN_TxMailbox0CompleteCallback>
 8003724:	e016      	b.n	8003754 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
 8003738:	e00c      	b.n	8003754 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	e002      	b.n	8003754 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f983 	bl	8003a5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d024      	beq.n	80037a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003766:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f95d 	bl	8003a32 <HAL_CAN_TxMailbox1CompleteCallback>
 8003778:	e016      	b.n	80037a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	e00c      	b.n	80037a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	e002      	b.n	80037a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f963 	bl	8003a6e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d024      	beq.n	80037fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f93d 	bl	8003a46 <HAL_CAN_TxMailbox2CompleteCallback>
 80037cc:	e016      	b.n	80037fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
 80037e0:	e00c      	b.n	80037fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	e002      	b.n	80037fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f943 	bl	8003a82 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003816:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2210      	movs	r2, #16
 800381e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2208      	movs	r2, #8
 800383a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f92a 	bl	8003a96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd fe58 	bl	8001510 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2210      	movs	r2, #16
 8003882:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2208      	movs	r2, #8
 800389e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f90c 	bl	8003abe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8f3 	bl	8003aaa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2210      	movs	r2, #16
 80038de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8f6 	bl	8003ad2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2208      	movs	r2, #8
 8003900:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f8ef 	bl	8003ae6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d075      	beq.n	80039fe <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d06c      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	2b00      	cmp	r3, #0
 8003978:	d03d      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003980:	2b00      	cmp	r3, #0
 8003982:	d038      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800398a:	2b30      	cmp	r3, #48	; 0x30
 800398c:	d017      	beq.n	80039be <HAL_CAN_IRQHandler+0x302>
 800398e:	2b30      	cmp	r3, #48	; 0x30
 8003990:	d804      	bhi.n	800399c <HAL_CAN_IRQHandler+0x2e0>
 8003992:	2b10      	cmp	r3, #16
 8003994:	d009      	beq.n	80039aa <HAL_CAN_IRQHandler+0x2ee>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d00c      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800399a:	e024      	b.n	80039e6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800399c:	2b50      	cmp	r3, #80	; 0x50
 800399e:	d018      	beq.n	80039d2 <HAL_CAN_IRQHandler+0x316>
 80039a0:	2b60      	cmp	r3, #96	; 0x60
 80039a2:	d01b      	beq.n	80039dc <HAL_CAN_IRQHandler+0x320>
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d00f      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x30c>
            break;
 80039a8:	e01d      	b.n	80039e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	f043 0308 	orr.w	r3, r3, #8
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039b2:	e018      	b.n	80039e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	f043 0310 	orr.w	r3, r3, #16
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039bc:	e013      	b.n	80039e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	f043 0320 	orr.w	r3, r3, #32
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c6:	e00e      	b.n	80039e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d0:	e009      	b.n	80039e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039da:	e004      	b.n	80039e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2204      	movs	r2, #4
 80039fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f872 	bl	8003afa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a16:	bf00      	nop
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <__NVIC_SetPriorityGrouping>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <__NVIC_SetPriorityGrouping+0x44>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b42:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <__NVIC_SetPriorityGrouping+0x44>)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	60d3      	str	r3, [r2, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <__NVIC_GetPriorityGrouping>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <__NVIC_GetPriorityGrouping+0x18>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	f003 0307 	and.w	r3, r3, #7
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <__NVIC_EnableIRQ>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	db0b      	blt.n	8003b9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	4907      	ldr	r1, [pc, #28]	; (8003bac <__NVIC_EnableIRQ+0x38>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2001      	movs	r0, #1
 8003b96:	fa00 f202 	lsl.w	r2, r0, r2
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e100 	.word	0xe000e100

08003bb0 <__NVIC_SetPriority>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	db0a      	blt.n	8003bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	490c      	ldr	r1, [pc, #48]	; (8003bfc <__NVIC_SetPriority+0x4c>)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bd8:	e00a      	b.n	8003bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4908      	ldr	r1, [pc, #32]	; (8003c00 <__NVIC_SetPriority+0x50>)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	3b04      	subs	r3, #4
 8003be8:	0112      	lsls	r2, r2, #4
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	440b      	add	r3, r1
 8003bee:	761a      	strb	r2, [r3, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000e100 	.word	0xe000e100
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <NVIC_EncodePriority>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f1c3 0307 	rsb	r3, r3, #7
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	bf28      	it	cs
 8003c22:	2304      	movcs	r3, #4
 8003c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d902      	bls.n	8003c34 <NVIC_EncodePriority+0x30>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3b03      	subs	r3, #3
 8003c32:	e000      	b.n	8003c36 <NVIC_EncodePriority+0x32>
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43da      	mvns	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	401a      	ands	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	43d9      	mvns	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	4313      	orrs	r3, r2
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c7c:	d301      	bcc.n	8003c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00f      	b.n	8003ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <SysTick_Config+0x40>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c8a:	210f      	movs	r1, #15
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	f7ff ff8e 	bl	8003bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <SysTick_Config+0x40>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c9a:	4b04      	ldr	r3, [pc, #16]	; (8003cac <SysTick_Config+0x40>)
 8003c9c:	2207      	movs	r2, #7
 8003c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	e000e010 	.word	0xe000e010

08003cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff29 	bl	8003b10 <__NVIC_SetPriorityGrouping>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd8:	f7ff ff3e 	bl	8003b58 <__NVIC_GetPriorityGrouping>
 8003cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f7ff ff8e 	bl	8003c04 <NVIC_EncodePriority>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff5d 	bl	8003bb0 <__NVIC_SetPriority>
}
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff31 	bl	8003b74 <__NVIC_EnableIRQ>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ffa2 	bl	8003c6c <SysTick_Config>
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e037      	b.n	8003db8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f940 	bl	8004020 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}  
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_DMA_Start_IT+0x20>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e04a      	b.n	8003e76 <HAL_DMA_Start_IT+0xb6>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d13a      	bne.n	8003e68 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f8d4 	bl	8003fc4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 020e 	orr.w	r2, r2, #14
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e00f      	b.n	8003e56 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 020a 	orr.w	r2, r2, #10
 8003e44:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0204 	bic.w	r2, r2, #4
 8003e54:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e005      	b.n	8003e74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
 8003e72:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d024      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x72>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01f      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0204 	bic.w	r2, r2, #4
 8003ecc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8003edc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d06a      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003eee:	e065      	b.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02c      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xdc>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 020a 	bic.w	r2, r2, #10
 8003f26:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	2102      	movs	r1, #2
 8003f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d035      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003f58:	e030      	b.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2208      	movs	r2, #8
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d028      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d023      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 020e 	bic.w	r2, r2, #14
 8003f82:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f92:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
    }
  }
}  
 8003fba:	e7ff      	b.n	8003fbc <HAL_DMA_IRQHandler+0x13e>
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d108      	bne.n	8004004 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004002:	e007      	b.n	8004014 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <DMA_CalcBaseAndBitshift+0x34>)
 8004030:	4413      	add	r3, r2
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <DMA_CalcBaseAndBitshift+0x38>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a06      	ldr	r2, [pc, #24]	; (800405c <DMA_CalcBaseAndBitshift+0x3c>)
 8004044:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	bffdfff8 	.word	0xbffdfff8
 8004058:	cccccccd 	.word	0xcccccccd
 800405c:	40020000 	.word	0x40020000

08004060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800406e:	e14e      	b.n	800430e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8140 	beq.w	8004308 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d00b      	beq.n	80040a8 <HAL_GPIO_Init+0x48>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d007      	beq.n	80040a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800409c:	2b11      	cmp	r3, #17
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b12      	cmp	r3, #18
 80040a6:	d130      	bne.n	800410a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040de:	2201      	movs	r2, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0201 	and.w	r2, r3, #1
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0xea>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b12      	cmp	r3, #18
 8004148:	d123      	bne.n	8004192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	08da      	lsrs	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3208      	adds	r2, #8
 8004152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	220f      	movs	r2, #15
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	08da      	lsrs	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3208      	adds	r2, #8
 800418c:	6939      	ldr	r1, [r7, #16]
 800418e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0203 	and.w	r2, r3, #3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 809a 	beq.w	8004308 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041d4:	4b55      	ldr	r3, [pc, #340]	; (800432c <HAL_GPIO_Init+0x2cc>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	4a54      	ldr	r2, [pc, #336]	; (800432c <HAL_GPIO_Init+0x2cc>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6193      	str	r3, [r2, #24]
 80041e0:	4b52      	ldr	r3, [pc, #328]	; (800432c <HAL_GPIO_Init+0x2cc>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041ec:	4a50      	ldr	r2, [pc, #320]	; (8004330 <HAL_GPIO_Init+0x2d0>)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	3302      	adds	r3, #2
 80041f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	220f      	movs	r2, #15
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004216:	d013      	beq.n	8004240 <HAL_GPIO_Init+0x1e0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a46      	ldr	r2, [pc, #280]	; (8004334 <HAL_GPIO_Init+0x2d4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00d      	beq.n	800423c <HAL_GPIO_Init+0x1dc>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a45      	ldr	r2, [pc, #276]	; (8004338 <HAL_GPIO_Init+0x2d8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <HAL_GPIO_Init+0x1d8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a44      	ldr	r2, [pc, #272]	; (800433c <HAL_GPIO_Init+0x2dc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_GPIO_Init+0x1d4>
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <HAL_GPIO_Init+0x1e2>
 8004234:	2305      	movs	r3, #5
 8004236:	e004      	b.n	8004242 <HAL_GPIO_Init+0x1e2>
 8004238:	2302      	movs	r3, #2
 800423a:	e002      	b.n	8004242 <HAL_GPIO_Init+0x1e2>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_GPIO_Init+0x1e2>
 8004240:	2300      	movs	r3, #0
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	f002 0203 	and.w	r2, r2, #3
 8004248:	0092      	lsls	r2, r2, #2
 800424a:	4093      	lsls	r3, r2
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004252:	4937      	ldr	r1, [pc, #220]	; (8004330 <HAL_GPIO_Init+0x2d0>)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	3302      	adds	r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004260:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	43db      	mvns	r3, r3
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004284:	4a2e      	ldr	r2, [pc, #184]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800428a:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	43db      	mvns	r3, r3
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042ae:	4a24      	ldr	r2, [pc, #144]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	43db      	mvns	r3, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004302:	4a0f      	ldr	r2, [pc, #60]	; (8004340 <HAL_GPIO_Init+0x2e0>)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3301      	adds	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f aea9 	bne.w	8004070 <HAL_GPIO_Init+0x10>
  }
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	40010000 	.word	0x40010000
 8004334:	48000400 	.word	0x48000400
 8004338:	48000800 	.word	0x48000800
 800433c:	48000c00 	.word	0x48000c00
 8004340:	40010400 	.word	0x40010400

08004344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e001      	b.n	8004366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
 8004380:	4613      	mov	r3, r2
 8004382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004384:	787b      	ldrb	r3, [r7, #1]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004390:	e002      	b.n	8004398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004392:	887a      	ldrh	r2, [r7, #2]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4013      	ands	r3, r2
 80043bc:	041a      	lsls	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	43d9      	mvns	r1, r3
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	400b      	ands	r3, r1
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e038      	b.n	800445c <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80043f2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f245 5255 	movw	r2, #21845	; 0x5555
 80043fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6852      	ldr	r2, [r2, #4]
 8004406:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004412:	f7fd fdfb 	bl	800200c <HAL_GetTick>
 8004416:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004418:	e008      	b.n	800442c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800441a:	f7fd fdf7 	bl	800200c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b30      	cmp	r3, #48	; 0x30
 8004426:	d901      	bls.n	800442c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e017      	b.n	800445c <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f1      	bne.n	800441a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	429a      	cmp	r2, r3
 8004442:	d005      	beq.n	8004450 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68d2      	ldr	r2, [r2, #12]
 800444c:	611a      	str	r2, [r3, #16]
 800444e:	e004      	b.n	800445a <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004474:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800448a:	af00      	add	r7, sp, #0
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f000 bef4 	b.w	8005286 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	1d3b      	adds	r3, r7, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 816a 	beq.w	8004782 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044ae:	4bb3      	ldr	r3, [pc, #716]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d00c      	beq.n	80044d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044ba:	4bb0      	ldr	r3, [pc, #704]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d159      	bne.n	800457a <HAL_RCC_OscConfig+0xf6>
 80044c6:	4bad      	ldr	r3, [pc, #692]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d152      	bne.n	800457a <HAL_RCC_OscConfig+0xf6>
 80044d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d102      	bne.n	8004506 <HAL_RCC_OscConfig+0x82>
 8004500:	4b9e      	ldr	r3, [pc, #632]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	e015      	b.n	8004532 <HAL_RCC_OscConfig+0xae>
 8004506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800450a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800451a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800451e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004522:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800452e:	4b93      	ldr	r3, [pc, #588]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004536:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800453a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800453e:	fa92 f2a2 	rbit	r2, r2
 8004542:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004546:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800454a:	fab2 f282 	clz	r2, r2
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	f042 0220 	orr.w	r2, r2, #32
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	f002 021f 	and.w	r2, r2, #31
 800455a:	2101      	movs	r1, #1
 800455c:	fa01 f202 	lsl.w	r2, r1, r2
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 810c 	beq.w	8004780 <HAL_RCC_OscConfig+0x2fc>
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 8106 	bne.w	8004780 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f000 be86 	b.w	8005286 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004584:	d106      	bne.n	8004594 <HAL_RCC_OscConfig+0x110>
 8004586:	4b7d      	ldr	r3, [pc, #500]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7c      	ldr	r2, [pc, #496]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e030      	b.n	80045f6 <HAL_RCC_OscConfig+0x172>
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x134>
 800459e:	4b77      	ldr	r3, [pc, #476]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a76      	ldr	r2, [pc, #472]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b74      	ldr	r3, [pc, #464]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a73      	ldr	r2, [pc, #460]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e01e      	b.n	80045f6 <HAL_RCC_OscConfig+0x172>
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c2:	d10c      	bne.n	80045de <HAL_RCC_OscConfig+0x15a>
 80045c4:	4b6d      	ldr	r3, [pc, #436]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a6c      	ldr	r2, [pc, #432]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a69      	ldr	r2, [pc, #420]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e00b      	b.n	80045f6 <HAL_RCC_OscConfig+0x172>
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a66      	ldr	r2, [pc, #408]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b64      	ldr	r3, [pc, #400]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a63      	ldr	r2, [pc, #396]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045f6:	4b61      	ldr	r3, [pc, #388]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	f023 020f 	bic.w	r2, r3, #15
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	495d      	ldr	r1, [pc, #372]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800460a:	1d3b      	adds	r3, r7, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d059      	beq.n	80046c8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fd fcfa 	bl	800200c <HAL_GetTick>
 8004618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800461e:	f7fd fcf5 	bl	800200c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d902      	bls.n	8004634 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	f000 be29 	b.w	8005286 <HAL_RCC_OscConfig+0xe02>
 8004634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004638:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004648:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464c:	fab3 f383 	clz	r3, r3
 8004650:	b2db      	uxtb	r3, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d102      	bne.n	8004666 <HAL_RCC_OscConfig+0x1e2>
 8004660:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	e015      	b.n	8004692 <HAL_RCC_OscConfig+0x20e>
 8004666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800466a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800467a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800467e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004682:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004696:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800469a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800469e:	fa92 f2a2 	rbit	r2, r2
 80046a2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80046a6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80046aa:	fab2 f282 	clz	r2, r2
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	f042 0220 	orr.w	r2, r2, #32
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	f002 021f 	and.w	r2, r2, #31
 80046ba:	2101      	movs	r1, #1
 80046bc:	fa01 f202 	lsl.w	r2, r1, r2
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ab      	beq.n	800461e <HAL_RCC_OscConfig+0x19a>
 80046c6:	e05c      	b.n	8004782 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fd fca0 	bl	800200c <HAL_GetTick>
 80046cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d2:	f7fd fc9b 	bl	800200c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d902      	bls.n	80046e8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	f000 bdcf 	b.w	8005286 <HAL_RCC_OscConfig+0xe02>
 80046e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80046fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <HAL_RCC_OscConfig+0x296>
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	e015      	b.n	8004746 <HAL_RCC_OscConfig+0x2c2>
 800471a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800471e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800472e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004732:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004736:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004742:	4b0e      	ldr	r3, [pc, #56]	; (800477c <HAL_RCC_OscConfig+0x2f8>)
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800474a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800474e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004752:	fa92 f2a2 	rbit	r2, r2
 8004756:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800475a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800475e:	fab2 f282 	clz	r2, r2
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	f042 0220 	orr.w	r2, r2, #32
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	f002 021f 	and.w	r2, r2, #31
 800476e:	2101      	movs	r1, #1
 8004770:	fa01 f202 	lsl.w	r2, r1, r2
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ab      	bne.n	80046d2 <HAL_RCC_OscConfig+0x24e>
 800477a:	e002      	b.n	8004782 <HAL_RCC_OscConfig+0x2fe>
 800477c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 816f 	beq.w	8004a70 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004792:	4bd0      	ldr	r3, [pc, #832]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800479e:	4bcd      	ldr	r3, [pc, #820]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d16c      	bne.n	8004884 <HAL_RCC_OscConfig+0x400>
 80047aa:	4bca      	ldr	r3, [pc, #808]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d166      	bne.n	8004884 <HAL_RCC_OscConfig+0x400>
 80047b6:	2302      	movs	r3, #2
 80047b8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80047c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <HAL_RCC_OscConfig+0x362>
 80047e0:	4bbc      	ldr	r3, [pc, #752]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	e013      	b.n	800480e <HAL_RCC_OscConfig+0x38a>
 80047e6:	2302      	movs	r3, #2
 80047e8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80047f8:	2302      	movs	r3, #2
 80047fa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80047fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800480a:	4bb2      	ldr	r3, [pc, #712]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2202      	movs	r2, #2
 8004810:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004814:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004818:	fa92 f2a2 	rbit	r2, r2
 800481c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004820:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004824:	fab2 f282 	clz	r2, r2
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	f042 0220 	orr.w	r2, r2, #32
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	f002 021f 	and.w	r2, r2, #31
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f202 	lsl.w	r2, r1, r2
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_RCC_OscConfig+0x3cc>
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d002      	beq.n	8004850 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f000 bd1b 	b.w	8005286 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4ba0      	ldr	r3, [pc, #640]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	21f8      	movs	r1, #248	; 0xf8
 8004860:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004868:	fa91 f1a1 	rbit	r1, r1
 800486c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004870:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004874:	fab1 f181 	clz	r1, r1
 8004878:	b2c9      	uxtb	r1, r1
 800487a:	408b      	lsls	r3, r1
 800487c:	4995      	ldr	r1, [pc, #596]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e0f5      	b.n	8004a70 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8085 	beq.w	800499a <HAL_RCC_OscConfig+0x516>
 8004890:	2301      	movs	r3, #1
 8004892:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80048a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	461a      	mov	r2, r3
 80048b8:	2301      	movs	r3, #1
 80048ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fd fba6 	bl	800200c <HAL_GetTick>
 80048c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c6:	f7fd fba1 	bl	800200c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d902      	bls.n	80048dc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	f000 bcd5 	b.w	8005286 <HAL_RCC_OscConfig+0xe02>
 80048dc:	2302      	movs	r3, #2
 80048de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80048ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d102      	bne.n	800490c <HAL_RCC_OscConfig+0x488>
 8004906:	4b73      	ldr	r3, [pc, #460]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e013      	b.n	8004934 <HAL_RCC_OscConfig+0x4b0>
 800490c:	2302      	movs	r3, #2
 800490e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800491e:	2302      	movs	r3, #2
 8004920:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004924:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004930:	4b68      	ldr	r3, [pc, #416]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2202      	movs	r2, #2
 8004936:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800493a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800493e:	fa92 f2a2 	rbit	r2, r2
 8004942:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004946:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800494a:	fab2 f282 	clz	r2, r2
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	f042 0220 	orr.w	r2, r2, #32
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	f002 021f 	and.w	r2, r2, #31
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f202 	lsl.w	r2, r1, r2
 8004960:	4013      	ands	r3, r2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0af      	beq.n	80048c6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004966:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	21f8      	movs	r1, #248	; 0xf8
 8004976:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800497e:	fa91 f1a1 	rbit	r1, r1
 8004982:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004986:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800498a:	fab1 f181 	clz	r1, r1
 800498e:	b2c9      	uxtb	r1, r1
 8004990:	408b      	lsls	r3, r1
 8004992:	4950      	ldr	r1, [pc, #320]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]
 8004998:	e06a      	b.n	8004a70 <HAL_RCC_OscConfig+0x5ec>
 800499a:	2301      	movs	r3, #1
 800499c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80049ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	461a      	mov	r2, r3
 80049c2:	2300      	movs	r3, #0
 80049c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c6:	f7fd fb21 	bl	800200c <HAL_GetTick>
 80049ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fd fb1c 	bl	800200c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d902      	bls.n	80049e6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	f000 bc50 	b.w	8005286 <HAL_RCC_OscConfig+0xe02>
 80049e6:	2302      	movs	r3, #2
 80049e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80049f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d102      	bne.n	8004a16 <HAL_RCC_OscConfig+0x592>
 8004a10:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	e013      	b.n	8004a3e <HAL_RCC_OscConfig+0x5ba>
 8004a16:	2302      	movs	r3, #2
 8004a18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_OscConfig+0x650>)
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004a44:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004a48:	fa92 f2a2 	rbit	r2, r2
 8004a4c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004a50:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a54:	fab2 f282 	clz	r2, r2
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	f042 0220 	orr.w	r2, r2, #32
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	f002 021f 	and.w	r2, r2, #31
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f202 	lsl.w	r2, r1, r2
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1af      	bne.n	80049d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80da 	beq.w	8004c34 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d069      	beq.n	8004b5e <HAL_RCC_OscConfig+0x6da>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa0:	fab3 f383 	clz	r3, r3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_OscConfig+0x654>)
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab4:	f7fd faaa 	bl	800200c <HAL_GetTick>
 8004ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abc:	e00e      	b.n	8004adc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004abe:	f7fd faa5 	bl	800200c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d906      	bls.n	8004adc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e3d9      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	10908120 	.word	0x10908120
 8004adc:	2302      	movs	r3, #2
 8004ade:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004aee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004af2:	2202      	movs	r2, #2
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	fa93 f2a3 	rbit	r2, r3
 8004b00:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	fa93 f2a3 	rbit	r2, r3
 8004b18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004b1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	4ba5      	ldr	r3, [pc, #660]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004b26:	2102      	movs	r1, #2
 8004b28:	6019      	str	r1, [r3, #0]
 8004b2a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	fa93 f1a3 	rbit	r1, r3
 8004b34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004b38:	6019      	str	r1, [r3, #0]
  return result;
 8004b3a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0b0      	beq.n	8004abe <HAL_RCC_OscConfig+0x63a>
 8004b5c:	e06a      	b.n	8004c34 <HAL_RCC_OscConfig+0x7b0>
 8004b5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	fa93 f2a3 	rbit	r2, r3
 8004b70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b74:	601a      	str	r2, [r3, #0]
  return result;
 8004b76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b7a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7c:	fab3 f383 	clz	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b8c      	ldr	r3, [pc, #560]	; (8004db8 <HAL_RCC_OscConfig+0x934>)
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b90:	f7fd fa3c 	bl	800200c <HAL_GetTick>
 8004b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b98:	e009      	b.n	8004bae <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fd fa37 	bl	800200c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e36b      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
 8004bae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	fa93 f2a3 	rbit	r2, r3
 8004bc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004bca:	2202      	movs	r2, #2
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	fa93 f2a3 	rbit	r2, r3
 8004bd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004be2:	2202      	movs	r2, #2
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	fa93 f2a3 	rbit	r2, r3
 8004bf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004bf4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf6:	4b6f      	ldr	r3, [pc, #444]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bfa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004bfe:	2102      	movs	r1, #2
 8004c00:	6019      	str	r1, [r3, #0]
 8004c02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	fa93 f1a3 	rbit	r1, r3
 8004c0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004c10:	6019      	str	r1, [r3, #0]
  return result;
 8004c12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	2101      	movs	r1, #1
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1b2      	bne.n	8004b9a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8158 	beq.w	8004ef4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4a:	4b5a      	ldr	r3, [pc, #360]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d112      	bne.n	8004c7c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	4b57      	ldr	r3, [pc, #348]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4a56      	ldr	r2, [pc, #344]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c60:	61d3      	str	r3, [r2, #28]
 8004c62:	4b54      	ldr	r3, [pc, #336]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f107 0308 	add.w	r3, r7, #8
 8004c74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <HAL_RCC_OscConfig+0x938>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d11a      	bne.n	8004cbe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c88:	4b4c      	ldr	r3, [pc, #304]	; (8004dbc <HAL_RCC_OscConfig+0x938>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a4b      	ldr	r2, [pc, #300]	; (8004dbc <HAL_RCC_OscConfig+0x938>)
 8004c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c94:	f7fd f9ba 	bl	800200c <HAL_GetTick>
 8004c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	e009      	b.n	8004cb2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fd f9b5 	bl	800200c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e2e9      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb2:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <HAL_RCC_OscConfig+0x938>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0ef      	beq.n	8004c9e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cbe:	1d3b      	adds	r3, r7, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x852>
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4a39      	ldr	r2, [pc, #228]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6213      	str	r3, [r2, #32]
 8004cd4:	e02f      	b.n	8004d36 <HAL_RCC_OscConfig+0x8b2>
 8004cd6:	1d3b      	adds	r3, r7, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCC_OscConfig+0x876>
 8004ce0:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	4a33      	ldr	r2, [pc, #204]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6213      	str	r3, [r2, #32]
 8004cec:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004cf2:	f023 0304 	bic.w	r3, r3, #4
 8004cf6:	6213      	str	r3, [r2, #32]
 8004cf8:	e01d      	b.n	8004d36 <HAL_RCC_OscConfig+0x8b2>
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d10c      	bne.n	8004d1e <HAL_RCC_OscConfig+0x89a>
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d0a:	f043 0304 	orr.w	r3, r3, #4
 8004d0e:	6213      	str	r3, [r2, #32]
 8004d10:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	4a27      	ldr	r2, [pc, #156]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6213      	str	r3, [r2, #32]
 8004d1c:	e00b      	b.n	8004d36 <HAL_RCC_OscConfig+0x8b2>
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	6213      	str	r3, [r2, #32]
 8004d2a:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d06b      	beq.n	8004e18 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d40:	f7fd f964 	bl	800200c <HAL_GetTick>
 8004d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d48:	e00b      	b.n	8004d62 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f7fd f95f 	bl	800200c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e291      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
 8004d62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004d66:	2202      	movs	r2, #2
 8004d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	fa93 f2a3 	rbit	r2, r3
 8004d74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004d7e:	2202      	movs	r2, #2
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	fa93 f2a3 	rbit	r2, r3
 8004d8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004d90:	601a      	str	r2, [r3, #0]
  return result;
 8004d92:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004d96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	fab3 f383 	clz	r3, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f043 0302 	orr.w	r3, r3, #2
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d109      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x93c>
 8004dac:	4b01      	ldr	r3, [pc, #4]	; (8004db4 <HAL_RCC_OscConfig+0x930>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	e014      	b.n	8004ddc <HAL_RCC_OscConfig+0x958>
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	10908120 	.word	0x10908120
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	fa93 f2a3 	rbit	r2, r3
 8004dd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	4bbb      	ldr	r3, [pc, #748]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004de0:	2102      	movs	r1, #2
 8004de2:	6011      	str	r1, [r2, #0]
 8004de4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	fa92 f1a2 	rbit	r1, r2
 8004dee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004df2:	6011      	str	r1, [r2, #0]
  return result;
 8004df4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	fab2 f282 	clz	r2, r2
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	f002 021f 	and.w	r2, r2, #31
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d099      	beq.n	8004d4a <HAL_RCC_OscConfig+0x8c6>
 8004e16:	e063      	b.n	8004ee0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e18:	f7fd f8f8 	bl	800200c <HAL_GetTick>
 8004e1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	e00b      	b.n	8004e3a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd f8f3 	bl	800200c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e225      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
 8004e3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004e3e:	2202      	movs	r2, #2
 8004e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	fa93 f2a3 	rbit	r2, r3
 8004e4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004e56:	2202      	movs	r2, #2
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	fa93 f2a3 	rbit	r2, r3
 8004e64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004e68:	601a      	str	r2, [r3, #0]
  return result;
 8004e6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004e6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e70:	fab3 f383 	clz	r3, r3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f043 0302 	orr.w	r3, r3, #2
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d102      	bne.n	8004e8a <HAL_RCC_OscConfig+0xa06>
 8004e84:	4b90      	ldr	r3, [pc, #576]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	e00d      	b.n	8004ea6 <HAL_RCC_OscConfig+0xa22>
 8004e8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004e8e:	2202      	movs	r2, #2
 8004e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	fa93 f2a3 	rbit	r2, r3
 8004e9c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	4b89      	ldr	r3, [pc, #548]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004eaa:	2102      	movs	r1, #2
 8004eac:	6011      	str	r1, [r2, #0]
 8004eae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	fa92 f1a2 	rbit	r1, r2
 8004eb8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004ebc:	6011      	str	r1, [r2, #0]
  return result;
 8004ebe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	fab2 f282 	clz	r2, r2
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f002 021f 	and.w	r2, r2, #31
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1a0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ee0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee8:	4b77      	ldr	r3, [pc, #476]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4a76      	ldr	r2, [pc, #472]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 81c2 	beq.w	8005284 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f00:	4b71      	ldr	r3, [pc, #452]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	f000 819c 	beq.w	8005246 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	f040 8114 	bne.w	8005142 <HAL_RCC_OscConfig+0xcbe>
 8004f1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004f1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	fa93 f2a3 	rbit	r2, r3
 8004f2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f32:	601a      	str	r2, [r3, #0]
  return result;
 8004f34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	fab3 f383 	clz	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fd f85c 	bl	800200c <HAL_GetTick>
 8004f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f58:	e009      	b.n	8004f6e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fd f857 	bl	800200c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e18b      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
 8004f6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	fa93 f2a3 	rbit	r2, r3
 8004f82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f86:	601a      	str	r2, [r3, #0]
  return result;
 8004f88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCC_OscConfig+0xb24>
 8004fa2:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	e01b      	b.n	8004fe0 <HAL_RCC_OscConfig+0xb5c>
 8004fa8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fa93 f2a3 	rbit	r2, r3
 8004fbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	fa93 f2a3 	rbit	r2, r3
 8004fd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	fa92 f1a2 	rbit	r1, r2
 8004ff4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ff8:	6011      	str	r1, [r2, #0]
  return result;
 8004ffa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	fab2 f282 	clz	r2, r2
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	f042 0220 	orr.w	r2, r2, #32
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	f002 021f 	and.w	r2, r2, #31
 8005010:	2101      	movs	r1, #1
 8005012:	fa01 f202 	lsl.w	r2, r1, r2
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d19e      	bne.n	8004f5a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800501c:	4b2a      	ldr	r3, [pc, #168]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005024:	1d3b      	adds	r3, r7, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	430b      	orrs	r3, r1
 8005032:	4925      	ldr	r1, [pc, #148]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
 8005038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800503c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	fa93 f2a3 	rbit	r2, r3
 800504c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005050:	601a      	str	r2, [r3, #0]
  return result;
 8005052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005056:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005058:	fab3 f383 	clz	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005062:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	461a      	mov	r2, r3
 800506a:	2301      	movs	r3, #1
 800506c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506e:	f7fc ffcd 	bl	800200c <HAL_GetTick>
 8005072:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005076:	e009      	b.n	800508c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005078:	f7fc ffc8 	bl	800200c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0fc      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
 800508c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	fa93 f2a3 	rbit	r2, r3
 80050a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050a4:	601a      	str	r2, [r3, #0]
  return result;
 80050a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ac:	fab3 f383 	clz	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <HAL_RCC_OscConfig+0xc48>
 80050c0:	4b01      	ldr	r3, [pc, #4]	; (80050c8 <HAL_RCC_OscConfig+0xc44>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	e01e      	b.n	8005104 <HAL_RCC_OscConfig+0xc80>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	fa93 f2a3 	rbit	r2, r3
 80050e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80050ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	fa93 f2a3 	rbit	r2, r3
 80050fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0xe0c>)
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005108:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800510c:	6011      	str	r1, [r2, #0]
 800510e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	fa92 f1a2 	rbit	r1, r2
 8005118:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800511c:	6011      	str	r1, [r2, #0]
  return result;
 800511e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	fab2 f282 	clz	r2, r2
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	f042 0220 	orr.w	r2, r2, #32
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	f002 021f 	and.w	r2, r2, #31
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d09b      	beq.n	8005078 <HAL_RCC_OscConfig+0xbf4>
 8005140:	e0a0      	b.n	8005284 <HAL_RCC_OscConfig+0xe00>
 8005142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800514a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	fa93 f2a3 	rbit	r2, r3
 8005156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800515a:	601a      	str	r2, [r3, #0]
  return result;
 800515c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005160:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800516c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fc ff48 	bl	800200c <HAL_GetTick>
 800517c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005180:	e009      	b.n	8005196 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005182:	f7fc ff43 	bl	800200c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e077      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
 8005196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800519a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800519e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	fa93 f2a3 	rbit	r2, r3
 80051aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ae:	601a      	str	r2, [r3, #0]
  return result;
 80051b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b6:	fab3 f383 	clz	r3, r3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d102      	bne.n	80051d0 <HAL_RCC_OscConfig+0xd4c>
 80051ca:	4b31      	ldr	r3, [pc, #196]	; (8005290 <HAL_RCC_OscConfig+0xe0c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	e01b      	b.n	8005208 <HAL_RCC_OscConfig+0xd84>
 80051d0:	f107 0320 	add.w	r3, r7, #32
 80051d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	f107 0320 	add.w	r3, r7, #32
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	fa93 f2a3 	rbit	r2, r3
 80051e4:	f107 031c 	add.w	r3, r7, #28
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f107 0318 	add.w	r3, r7, #24
 80051ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f107 0318 	add.w	r3, r7, #24
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	fa93 f2a3 	rbit	r2, r3
 80051fe:	f107 0314 	add.w	r3, r7, #20
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	4b22      	ldr	r3, [pc, #136]	; (8005290 <HAL_RCC_OscConfig+0xe0c>)
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f107 0210 	add.w	r2, r7, #16
 800520c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	f107 0210 	add.w	r2, r7, #16
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	fa92 f1a2 	rbit	r1, r2
 800521c:	f107 020c 	add.w	r2, r7, #12
 8005220:	6011      	str	r1, [r2, #0]
  return result;
 8005222:	f107 020c 	add.w	r2, r7, #12
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	fab2 f282 	clz	r2, r2
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	f042 0220 	orr.w	r2, r2, #32
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	f002 021f 	and.w	r2, r2, #31
 8005238:	2101      	movs	r1, #1
 800523a:	fa01 f202 	lsl.w	r2, r1, r2
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d19e      	bne.n	8005182 <HAL_RCC_OscConfig+0xcfe>
 8005244:	e01e      	b.n	8005284 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e018      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005254:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <HAL_RCC_OscConfig+0xe0c>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800525c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005260:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	429a      	cmp	r2, r3
 800526c:	d108      	bne.n	8005280 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800526e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000

08005294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b09e      	sub	sp, #120	; 0x78
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e162      	b.n	8005572 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052ac:	4b90      	ldr	r3, [pc, #576]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d910      	bls.n	80052dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b8d      	ldr	r3, [pc, #564]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 0207 	bic.w	r2, r3, #7
 80052c2:	498b      	ldr	r1, [pc, #556]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b89      	ldr	r3, [pc, #548]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e14a      	b.n	8005572 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e8:	4b82      	ldr	r3, [pc, #520]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	497f      	ldr	r1, [pc, #508]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80dc 	beq.w	80054c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d13c      	bne.n	800538a <HAL_RCC_ClockConfig+0xf6>
 8005310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005314:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005318:	fa93 f3a3 	rbit	r3, r3
 800531c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	b2db      	uxtb	r3, r3
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d102      	bne.n	800533a <HAL_RCC_ClockConfig+0xa6>
 8005334:	4b6f      	ldr	r3, [pc, #444]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	e00f      	b.n	800535a <HAL_RCC_ClockConfig+0xc6>
 800533a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800533e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	667b      	str	r3, [r7, #100]	; 0x64
 8005348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800534c:	663b      	str	r3, [r7, #96]	; 0x60
 800534e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005356:	4b67      	ldr	r3, [pc, #412]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800535e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005362:	fa92 f2a2 	rbit	r2, r2
 8005366:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800536a:	fab2 f282 	clz	r2, r2
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	f042 0220 	orr.w	r2, r2, #32
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	f002 021f 	and.w	r2, r2, #31
 800537a:	2101      	movs	r1, #1
 800537c:	fa01 f202 	lsl.w	r2, r1, r2
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d17b      	bne.n	800547e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0f3      	b.n	8005572 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d13c      	bne.n	800540c <HAL_RCC_ClockConfig+0x178>
 8005392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005396:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539a:	fa93 f3a3 	rbit	r3, r3
 800539e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80053a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a2:	fab3 f383 	clz	r3, r3
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d102      	bne.n	80053bc <HAL_RCC_ClockConfig+0x128>
 80053b6:	4b4f      	ldr	r3, [pc, #316]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	e00f      	b.n	80053dc <HAL_RCC_ClockConfig+0x148>
 80053bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c4:	fa93 f3a3 	rbit	r3, r3
 80053c8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d8:	4b46      	ldr	r3, [pc, #280]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80053e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e4:	fa92 f2a2 	rbit	r2, r2
 80053e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80053ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ec:	fab2 f282 	clz	r2, r2
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	f042 0220 	orr.w	r2, r2, #32
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	f002 021f 	and.w	r2, r2, #31
 80053fc:	2101      	movs	r1, #1
 80053fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005402:	4013      	ands	r3, r2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d13a      	bne.n	800547e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0b2      	b.n	8005572 <HAL_RCC_ClockConfig+0x2de>
 800540c:	2302      	movs	r3, #2
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	fa93 f3a3 	rbit	r3, r3
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b01      	cmp	r3, #1
 800542c:	d102      	bne.n	8005434 <HAL_RCC_ClockConfig+0x1a0>
 800542e:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	e00d      	b.n	8005450 <HAL_RCC_ClockConfig+0x1bc>
 8005434:	2302      	movs	r3, #2
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	fa93 f3a3 	rbit	r3, r3
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
 8005440:	2302      	movs	r3, #2
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	fa93 f3a3 	rbit	r3, r3
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	4b29      	ldr	r3, [pc, #164]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2202      	movs	r2, #2
 8005452:	61ba      	str	r2, [r7, #24]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	fa92 f2a2 	rbit	r2, r2
 800545a:	617a      	str	r2, [r7, #20]
  return result;
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	fab2 f282 	clz	r2, r2
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	f042 0220 	orr.w	r2, r2, #32
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	f002 021f 	and.w	r2, r2, #31
 800546e:	2101      	movs	r1, #1
 8005470:	fa01 f202 	lsl.w	r2, r1, r2
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e079      	b.n	8005572 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800547e:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f023 0203 	bic.w	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	491a      	ldr	r1, [pc, #104]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 800548c:	4313      	orrs	r3, r2
 800548e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005490:	f7fc fdbc 	bl	800200c <HAL_GetTick>
 8005494:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	e00a      	b.n	80054ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005498:	f7fc fdb8 	bl	800200c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e061      	b.n	8005572 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <HAL_RCC_ClockConfig+0x260>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 020c 	and.w	r2, r3, #12
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	429a      	cmp	r2, r3
 80054be:	d1eb      	bne.n	8005498 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d214      	bcs.n	80054f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 0207 	bic.w	r2, r3, #7
 80054d6:	4906      	ldr	r1, [pc, #24]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <HAL_RCC_ClockConfig+0x25c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d005      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e040      	b.n	8005572 <HAL_RCC_ClockConfig+0x2de>
 80054f0:	40022000 	.word	0x40022000
 80054f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005504:	4b1d      	ldr	r3, [pc, #116]	; (800557c <HAL_RCC_ClockConfig+0x2e8>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	491a      	ldr	r1, [pc, #104]	; (800557c <HAL_RCC_ClockConfig+0x2e8>)
 8005512:	4313      	orrs	r3, r2
 8005514:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005522:	4b16      	ldr	r3, [pc, #88]	; (800557c <HAL_RCC_ClockConfig+0x2e8>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4912      	ldr	r1, [pc, #72]	; (800557c <HAL_RCC_ClockConfig+0x2e8>)
 8005532:	4313      	orrs	r3, r2
 8005534:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005536:	f000 f829 	bl	800558c <HAL_RCC_GetSysClockFreq>
 800553a:	4601      	mov	r1, r0
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_RCC_ClockConfig+0x2e8>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005544:	22f0      	movs	r2, #240	; 0xf0
 8005546:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	fa92 f2a2 	rbit	r2, r2
 800554e:	60fa      	str	r2, [r7, #12]
  return result;
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	fab2 f282 	clz	r2, r2
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	40d3      	lsrs	r3, r2
 800555a:	4a09      	ldr	r2, [pc, #36]	; (8005580 <HAL_RCC_ClockConfig+0x2ec>)
 800555c:	5cd3      	ldrb	r3, [r2, r3]
 800555e:	fa21 f303 	lsr.w	r3, r1, r3
 8005562:	4a08      	ldr	r2, [pc, #32]	; (8005584 <HAL_RCC_ClockConfig+0x2f0>)
 8005564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005566:	4b08      	ldr	r3, [pc, #32]	; (8005588 <HAL_RCC_ClockConfig+0x2f4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7fc fd0a 	bl	8001f84 <HAL_InitTick>
  
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3778      	adds	r7, #120	; 0x78
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	08009b08 	.word	0x08009b08
 8005584:	20000000 	.word	0x20000000
 8005588:	20000004 	.word	0x20000004

0800558c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800558c:	b480      	push	{r7}
 800558e:	b08b      	sub	sp, #44	; 0x2c
 8005590:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	2300      	movs	r3, #0
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80055a6:	4b29      	ldr	r3, [pc, #164]	; (800564c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d002      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x30>
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d003      	beq.n	80055c2 <HAL_RCC_GetSysClockFreq+0x36>
 80055ba:	e03c      	b.n	8005636 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055bc:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_GetSysClockFreq+0xc4>)
 80055be:	623b      	str	r3, [r7, #32]
      break;
 80055c0:	e03c      	b.n	800563c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80055cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	fa92 f2a2 	rbit	r2, r2
 80055d4:	607a      	str	r2, [r7, #4]
  return result;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	fab2 f282 	clz	r2, r2
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	40d3      	lsrs	r3, r2
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055e2:	5cd3      	ldrb	r3, [r2, r3]
 80055e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80055e6:	4b19      	ldr	r3, [pc, #100]	; (800564c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	220f      	movs	r2, #15
 80055f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	fa92 f2a2 	rbit	r2, r2
 80055f8:	60fa      	str	r2, [r7, #12]
  return result;
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	fab2 f282 	clz	r2, r2
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	40d3      	lsrs	r3, r2
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005606:	5cd3      	ldrb	r3, [r2, r3]
 8005608:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005614:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	fbb2 f2f3 	udiv	r2, r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	e004      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4a0c      	ldr	r2, [pc, #48]	; (800565c <HAL_RCC_GetSysClockFreq+0xd0>)
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	623b      	str	r3, [r7, #32]
      break;
 8005634:	e002      	b.n	800563c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005638:	623b      	str	r3, [r7, #32]
      break;
 800563a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563c:	6a3b      	ldr	r3, [r7, #32]
}
 800563e:	4618      	mov	r0, r3
 8005640:	372c      	adds	r7, #44	; 0x2c
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	007a1200 	.word	0x007a1200
 8005654:	08009b20 	.word	0x08009b20
 8005658:	08009b30 	.word	0x08009b30
 800565c:	003d0900 	.word	0x003d0900

08005660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005664:	4b03      	ldr	r3, [pc, #12]	; (8005674 <HAL_RCC_GetHCLKFreq+0x14>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000000 	.word	0x20000000

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800567e:	f7ff ffef 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 8005682:	4601      	mov	r1, r0
 8005684:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800568c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005690:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	fa92 f2a2 	rbit	r2, r2
 8005698:	603a      	str	r2, [r7, #0]
  return result;
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	fab2 f282 	clz	r2, r2
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	40d3      	lsrs	r3, r2
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80056a6:	5cd3      	ldrb	r3, [r2, r3]
 80056a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40021000 	.word	0x40021000
 80056b8:	08009b18 	.word	0x08009b18

080056bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80056c2:	f7ff ffcd 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80056c6:	4601      	mov	r1, r0
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80056d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80056d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	fa92 f2a2 	rbit	r2, r2
 80056dc:	603a      	str	r2, [r7, #0]
  return result;
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	fab2 f282 	clz	r2, r2
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	40d3      	lsrs	r3, r2
 80056e8:	4a04      	ldr	r2, [pc, #16]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021000 	.word	0x40021000
 80056fc:	08009b18 	.word	0x08009b18

08005700 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b092      	sub	sp, #72	; 0x48
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80d0 	beq.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800571e:	2300      	movs	r3, #0
 8005720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005724:	4b86      	ldr	r3, [pc, #536]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10e      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005730:	4b83      	ldr	r3, [pc, #524]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	4a82      	ldr	r2, [pc, #520]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573a:	61d3      	str	r3, [r2, #28]
 800573c:	4b80      	ldr	r3, [pc, #512]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800574e:	4b7d      	ldr	r3, [pc, #500]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d118      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800575a:	4b7a      	ldr	r3, [pc, #488]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a79      	ldr	r2, [pc, #484]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005764:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005766:	f7fc fc51 	bl	800200c <HAL_GetTick>
 800576a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800576c:	e008      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fc fc4d 	bl	800200c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b64      	cmp	r3, #100	; 0x64
 800577a:	d901      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0db      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	4b70      	ldr	r3, [pc, #448]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800578c:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d07d      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d076      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057aa:	4b65      	ldr	r3, [pc, #404]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057c4:	fab3 f383 	clz	r3, r3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	4b5e      	ldr	r3, [pc, #376]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	2301      	movs	r3, #1
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057e8:	fab3 f383 	clz	r3, r3
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	4b55      	ldr	r3, [pc, #340]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	461a      	mov	r2, r3
 80057f8:	2300      	movs	r3, #0
 80057fa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057fc:	4a50      	ldr	r2, [pc, #320]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d045      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580c:	f7fc fbfe 	bl	800200c <HAL_GetTick>
 8005810:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005812:	e00a      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fc fbfa 	bl	800200c <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e086      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800582a:	2302      	movs	r3, #2
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	fa93 f3a3 	rbit	r3, r3
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	2302      	movs	r3, #2
 8005838:	623b      	str	r3, [r7, #32]
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	61fb      	str	r3, [r7, #28]
  return result;
 8005842:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005844:	fab3 f383 	clz	r3, r3
 8005848:	b2db      	uxtb	r3, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f043 0302 	orr.w	r3, r3, #2
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d102      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005858:	4b39      	ldr	r3, [pc, #228]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	e007      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800585e:	2302      	movs	r3, #2
 8005860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	fa93 f3a3 	rbit	r3, r3
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	4b35      	ldr	r3, [pc, #212]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2202      	movs	r2, #2
 8005870:	613a      	str	r2, [r7, #16]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	fa92 f2a2 	rbit	r2, r2
 8005878:	60fa      	str	r2, [r7, #12]
  return result;
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	fab2 f282 	clz	r2, r2
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	f002 021f 	and.w	r2, r2, #31
 800588c:	2101      	movs	r1, #1
 800588e:	fa01 f202 	lsl.w	r2, r1, r2
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0bd      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005898:	4b29      	ldr	r3, [pc, #164]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4926      	ldr	r1, [pc, #152]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d105      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4a22      	ldr	r2, [pc, #136]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058bc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f023 0203 	bic.w	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	491a      	ldr	r1, [pc, #104]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	f023 0210 	bic.w	r2, r3, #16
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4912      	ldr	r1, [pc, #72]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d008      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005906:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	490b      	ldr	r1, [pc, #44]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005914:	4313      	orrs	r3, r2
 8005916:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	4903      	ldr	r1, [pc, #12]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005932:	4313      	orrs	r3, r2
 8005934:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3748      	adds	r7, #72	; 0x48
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	40007000 	.word	0x40007000
 8005948:	10908100 	.word	0x10908100

0800594c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e01d      	b.n	800599a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fc f9c0 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f000 fb12 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <HAL_TIM_Base_Start_IT+0x50>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b06      	cmp	r3, #6
 80059cc:	d00b      	beq.n	80059e6 <HAL_TIM_Base_Start_IT+0x42>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d4:	d007      	beq.n	80059e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0201 	orr.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	00010007 	.word	0x00010007

080059f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e01d      	b.n	8005a46 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fc f94c 	bl	8001cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f000 fabc 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fdc4 	bl	80065f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <HAL_TIM_PWM_Start+0x90>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x40>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIM_PWM_Start+0x94>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <HAL_TIM_PWM_Start+0x98>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x40>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a18      	ldr	r2, [pc, #96]	; (8005aec <HAL_TIM_PWM_Start+0x9c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x44>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <HAL_TIM_PWM_Start+0x46>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <HAL_TIM_PWM_Start+0xa0>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d00b      	beq.n	8005ad4 <HAL_TIM_PWM_Start+0x84>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac2:	d007      	beq.n	8005ad4 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800
 8005af0:	00010007 	.word	0x00010007

08005af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0202 	mvn.w	r2, #2
 8005b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa1e 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa10 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fa21 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d122      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0204 	mvn.w	r2, #4
 8005b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9f4 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005b90:	e005      	b.n	8005b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f9e6 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f9f7 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d122      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d11b      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0208 	mvn.w	r2, #8
 8005bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2204      	movs	r2, #4
 8005bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f9ca 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005be4:	e005      	b.n	8005bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f9bc 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f9cd 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d122      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d11b      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0210 	mvn.w	r2, #16
 8005c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2208      	movs	r2, #8
 8005c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f9a0 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f992 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f9a3 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d10e      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0201 	mvn.w	r2, #1
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fb fc78 	bl	8001568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d10e      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d107      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fd44 	bl	800672c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	d10e      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b80      	cmp	r3, #128	; 0x80
 8005cc0:	d107      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fd37 	bl	8006740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d10e      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d107      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f951 	bl	8005fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d10e      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0220 	mvn.w	r2, #32
 8005d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fcf7 	bl	8006718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e105      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x226>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b14      	cmp	r3, #20
 8005d62:	f200 80f0 	bhi.w	8005f46 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005f47 	.word	0x08005f47
 8005d74:	08005f47 	.word	0x08005f47
 8005d78:	08005f47 	.word	0x08005f47
 8005d7c:	08005e01 	.word	0x08005e01
 8005d80:	08005f47 	.word	0x08005f47
 8005d84:	08005f47 	.word	0x08005f47
 8005d88:	08005f47 	.word	0x08005f47
 8005d8c:	08005e43 	.word	0x08005e43
 8005d90:	08005f47 	.word	0x08005f47
 8005d94:	08005f47 	.word	0x08005f47
 8005d98:	08005f47 	.word	0x08005f47
 8005d9c:	08005e83 	.word	0x08005e83
 8005da0:	08005f47 	.word	0x08005f47
 8005da4:	08005f47 	.word	0x08005f47
 8005da8:	08005f47 	.word	0x08005f47
 8005dac:	08005ec5 	.word	0x08005ec5
 8005db0:	08005f47 	.word	0x08005f47
 8005db4:	08005f47 	.word	0x08005f47
 8005db8:	08005f47 	.word	0x08005f47
 8005dbc:	08005f05 	.word	0x08005f05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f96c 	bl	80060a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0208 	orr.w	r2, r2, #8
 8005dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0204 	bic.w	r2, r2, #4
 8005dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6999      	ldr	r1, [r3, #24]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	619a      	str	r2, [r3, #24]
      break;
 8005dfe:	e0a3      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f9d2 	bl	80061b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6999      	ldr	r1, [r3, #24]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	021a      	lsls	r2, r3, #8
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	619a      	str	r2, [r3, #24]
      break;
 8005e40:	e082      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fa31 	bl	80062b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0208 	orr.w	r2, r2, #8
 8005e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0204 	bic.w	r2, r2, #4
 8005e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69d9      	ldr	r1, [r3, #28]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	61da      	str	r2, [r3, #28]
      break;
 8005e80:	e062      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fa8f 	bl	80063ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69d9      	ldr	r1, [r3, #28]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	021a      	lsls	r2, r3, #8
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	61da      	str	r2, [r3, #28]
      break;
 8005ec2:	e041      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fad2 	bl	8006474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0208 	orr.w	r2, r2, #8
 8005ede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0204 	bic.w	r2, r2, #4
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f02:	e021      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fb10 	bl	8006530 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	021a      	lsls	r2, r3, #8
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f44:	e000      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8005f46:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop

08005f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a32      	ldr	r2, [pc, #200]	; (8006090 <TIM_Base_SetConfig+0xdc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x28>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x28>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a2f      	ldr	r2, [pc, #188]	; (8006094 <TIM_Base_SetConfig+0xe0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a27      	ldr	r2, [pc, #156]	; (8006090 <TIM_Base_SetConfig+0xdc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <TIM_Base_SetConfig+0x6a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d00f      	beq.n	800601e <TIM_Base_SetConfig+0x6a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a24      	ldr	r2, [pc, #144]	; (8006094 <TIM_Base_SetConfig+0xe0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_Base_SetConfig+0x6a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a23      	ldr	r2, [pc, #140]	; (8006098 <TIM_Base_SetConfig+0xe4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d007      	beq.n	800601e <TIM_Base_SetConfig+0x6a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a22      	ldr	r2, [pc, #136]	; (800609c <TIM_Base_SetConfig+0xe8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_Base_SetConfig+0x6a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <TIM_Base_SetConfig+0xec>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <TIM_Base_SetConfig+0xdc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0xc0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a0e      	ldr	r2, [pc, #56]	; (8006098 <TIM_Base_SetConfig+0xe4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0xc0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a0d      	ldr	r2, [pc, #52]	; (800609c <TIM_Base_SetConfig+0xe8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0xc0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <TIM_Base_SetConfig+0xec>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d103      	bne.n	800607c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	615a      	str	r2, [r3, #20]
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40000400 	.word	0x40000400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800

080060a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0201 	bic.w	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f023 0302 	bic.w	r3, r3, #2
 80060f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <TIM_OC1_SetConfig+0xfc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_OC1_SetConfig+0x78>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <TIM_OC1_SetConfig+0x100>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_OC1_SetConfig+0x78>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <TIM_OC1_SetConfig+0x104>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC1_SetConfig+0x78>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a25      	ldr	r2, [pc, #148]	; (80061ac <TIM_OC1_SetConfig+0x108>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10c      	bne.n	8006136 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0308 	bic.w	r3, r3, #8
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <TIM_OC1_SetConfig+0xfc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00b      	beq.n	8006156 <TIM_OC1_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <TIM_OC1_SetConfig+0x100>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_OC1_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <TIM_OC1_SetConfig+0x104>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC1_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a16      	ldr	r2, [pc, #88]	; (80061ac <TIM_OC1_SetConfig+0x108>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d111      	bne.n	800617a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800615c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	621a      	str	r2, [r3, #32]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40014400 	.word	0x40014400
 80061ac:	40014800 	.word	0x40014800

080061b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0210 	bic.w	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 0320 	bic.w	r3, r3, #32
 80061fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a24      	ldr	r2, [pc, #144]	; (80062a0 <TIM_OC2_SetConfig+0xf0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10d      	bne.n	8006230 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <TIM_OC2_SetConfig+0xf0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_OC2_SetConfig+0xa0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <TIM_OC2_SetConfig+0xf4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_OC2_SetConfig+0xa0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a19      	ldr	r2, [pc, #100]	; (80062a8 <TIM_OC2_SetConfig+0xf8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC2_SetConfig+0xa0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a18      	ldr	r2, [pc, #96]	; (80062ac <TIM_OC2_SetConfig+0xfc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d113      	bne.n	8006278 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006256:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800625e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a23      	ldr	r2, [pc, #140]	; (800639c <TIM_OC3_SetConfig+0xec>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10d      	bne.n	800632e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800632c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a1a      	ldr	r2, [pc, #104]	; (800639c <TIM_OC3_SetConfig+0xec>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00b      	beq.n	800634e <TIM_OC3_SetConfig+0x9e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a19      	ldr	r2, [pc, #100]	; (80063a0 <TIM_OC3_SetConfig+0xf0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d007      	beq.n	800634e <TIM_OC3_SetConfig+0x9e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <TIM_OC3_SetConfig+0xf4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <TIM_OC3_SetConfig+0x9e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <TIM_OC3_SetConfig+0xf8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d113      	bne.n	8006376 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	621a      	str	r2, [r3, #32]
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800

080063ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	031b      	lsls	r3, r3, #12
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a16      	ldr	r2, [pc, #88]	; (8006464 <TIM_OC4_SetConfig+0xb8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00b      	beq.n	8006428 <TIM_OC4_SetConfig+0x7c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a15      	ldr	r2, [pc, #84]	; (8006468 <TIM_OC4_SetConfig+0xbc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d007      	beq.n	8006428 <TIM_OC4_SetConfig+0x7c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a14      	ldr	r2, [pc, #80]	; (800646c <TIM_OC4_SetConfig+0xc0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC4_SetConfig+0x7c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a13      	ldr	r2, [pc, #76]	; (8006470 <TIM_OC4_SetConfig+0xc4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d109      	bne.n	800643c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800642e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	019b      	lsls	r3, r3, #6
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800

08006474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a15      	ldr	r2, [pc, #84]	; (8006520 <TIM_OC5_SetConfig+0xac>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00b      	beq.n	80064e6 <TIM_OC5_SetConfig+0x72>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a14      	ldr	r2, [pc, #80]	; (8006524 <TIM_OC5_SetConfig+0xb0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d007      	beq.n	80064e6 <TIM_OC5_SetConfig+0x72>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a13      	ldr	r2, [pc, #76]	; (8006528 <TIM_OC5_SetConfig+0xb4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_OC5_SetConfig+0x72>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a12      	ldr	r2, [pc, #72]	; (800652c <TIM_OC5_SetConfig+0xb8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d109      	bne.n	80064fa <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	621a      	str	r2, [r3, #32]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800

08006530 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	051b      	lsls	r3, r3, #20
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <TIM_OC6_SetConfig+0xb0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00b      	beq.n	80065a4 <TIM_OC6_SetConfig+0x74>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a15      	ldr	r2, [pc, #84]	; (80065e4 <TIM_OC6_SetConfig+0xb4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d007      	beq.n	80065a4 <TIM_OC6_SetConfig+0x74>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <TIM_OC6_SetConfig+0xb8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_OC6_SetConfig+0x74>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a13      	ldr	r2, [pc, #76]	; (80065ec <TIM_OC6_SetConfig+0xbc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d109      	bne.n	80065b8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800

080065f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2201      	movs	r2, #1
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	43db      	mvns	r3, r3
 8006612:	401a      	ands	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1a      	ldr	r2, [r3, #32]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	fa01 f303 	lsl.w	r3, r1, r3
 8006628:	431a      	orrs	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
	...

0800663c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006650:	2302      	movs	r3, #2
 8006652:	e054      	b.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a24      	ldr	r2, [pc, #144]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006684:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00e      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066bc:	d009      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d004      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a11      	ldr	r2, [pc, #68]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10c      	bne.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40000400 	.word	0x40000400
 8006714:	40014000 	.word	0x40014000

08006718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e040      	b.n	80067e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb fb48 	bl	8001e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	; 0x24
 8006780:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f8c0 	bl	8006918 <UART_SetConfig>
 8006798:	4603      	mov	r3, r0
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e022      	b.n	80067e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa36 	bl	8006c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fabd 	bl	8006d60 <UART_CheckIdleState>
 80067e6:	4603      	mov	r3, r0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006804:	2b20      	cmp	r3, #32
 8006806:	f040 8081 	bne.w	800690c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_UART_Transmit+0x26>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e079      	b.n	800690e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_UART_Transmit+0x38>
 8006824:	2302      	movs	r3, #2
 8006826:	e072      	b.n	800690e <HAL_UART_Transmit+0x11e>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	; 0x21
 800683a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800683c:	f7fb fbe6 	bl	800200c <HAL_GetTick>
 8006840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	88fa      	ldrh	r2, [r7, #6]
 8006846:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	88fa      	ldrh	r2, [r7, #6]
 800684e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685a:	d108      	bne.n	800686e <HAL_UART_Transmit+0x7e>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e003      	b.n	8006876 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006876:	e02d      	b.n	80068d4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2200      	movs	r2, #0
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fab1 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e03d      	b.n	800690e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	881a      	ldrh	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a4:	b292      	uxth	r2, r2
 80068a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	3302      	adds	r3, #2
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e008      	b.n	80068c2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	b292      	uxth	r2, r2
 80068ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3301      	adds	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1cb      	bne.n	8006878 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fa7d 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e009      	b.n	800690e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800690c:	2302      	movs	r3, #2
  }
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006920:	2300      	movs	r3, #0
 8006922:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4ba2      	ldr	r3, [pc, #648]	; (8006bd0 <UART_SetConfig+0x2b8>)
 8006948:	4013      	ands	r3, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6939      	ldr	r1, [r7, #16]
 8006950:	430b      	orrs	r3, r1
 8006952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	430a      	orrs	r2, r1
 800698c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a90      	ldr	r2, [pc, #576]	; (8006bd4 <UART_SetConfig+0x2bc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d121      	bne.n	80069dc <UART_SetConfig+0xc4>
 8006998:	4b8f      	ldr	r3, [pc, #572]	; (8006bd8 <UART_SetConfig+0x2c0>)
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d817      	bhi.n	80069d4 <UART_SetConfig+0xbc>
 80069a4:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <UART_SetConfig+0x94>)
 80069a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069aa:	bf00      	nop
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069c9 	.word	0x080069c9
 80069b4:	080069cf 	.word	0x080069cf
 80069b8:	080069c3 	.word	0x080069c3
 80069bc:	2300      	movs	r3, #0
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e01e      	b.n	8006a00 <UART_SetConfig+0xe8>
 80069c2:	2302      	movs	r3, #2
 80069c4:	77fb      	strb	r3, [r7, #31]
 80069c6:	e01b      	b.n	8006a00 <UART_SetConfig+0xe8>
 80069c8:	2304      	movs	r3, #4
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e018      	b.n	8006a00 <UART_SetConfig+0xe8>
 80069ce:	2308      	movs	r3, #8
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e015      	b.n	8006a00 <UART_SetConfig+0xe8>
 80069d4:	2310      	movs	r3, #16
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	bf00      	nop
 80069da:	e011      	b.n	8006a00 <UART_SetConfig+0xe8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a7e      	ldr	r2, [pc, #504]	; (8006bdc <UART_SetConfig+0x2c4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d102      	bne.n	80069ec <UART_SetConfig+0xd4>
 80069e6:	2300      	movs	r3, #0
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e009      	b.n	8006a00 <UART_SetConfig+0xe8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a7b      	ldr	r2, [pc, #492]	; (8006be0 <UART_SetConfig+0x2c8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d102      	bne.n	80069fc <UART_SetConfig+0xe4>
 80069f6:	2300      	movs	r3, #0
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e001      	b.n	8006a00 <UART_SetConfig+0xe8>
 80069fc:	2310      	movs	r3, #16
 80069fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a08:	f040 8082 	bne.w	8006b10 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8006a0c:	7ffb      	ldrb	r3, [r7, #31]
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d85e      	bhi.n	8006ad0 <UART_SetConfig+0x1b8>
 8006a12:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <UART_SetConfig+0x100>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006a3d 	.word	0x08006a3d
 8006a1c:	08006a5d 	.word	0x08006a5d
 8006a20:	08006a7d 	.word	0x08006a7d
 8006a24:	08006ad1 	.word	0x08006ad1
 8006a28:	08006a99 	.word	0x08006a99
 8006a2c:	08006ad1 	.word	0x08006ad1
 8006a30:	08006ad1 	.word	0x08006ad1
 8006a34:	08006ad1 	.word	0x08006ad1
 8006a38:	08006ab9 	.word	0x08006ab9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a3c:	f7fe fe1c 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8006a40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	005a      	lsls	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	61bb      	str	r3, [r7, #24]
        break;
 8006a5a:	e03c      	b.n	8006ad6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fe fe2e 	bl	80056bc <HAL_RCC_GetPCLK2Freq>
 8006a60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	005a      	lsls	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	441a      	add	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	61bb      	str	r3, [r7, #24]
        break;
 8006a7a:	e02c      	b.n	8006ad6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006a86:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6852      	ldr	r2, [r2, #4]
 8006a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	61bb      	str	r3, [r7, #24]
        break;
 8006a96:	e01e      	b.n	8006ad6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a98:	f7fe fd78 	bl	800558c <HAL_RCC_GetSysClockFreq>
 8006a9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	005a      	lsls	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	441a      	add	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	61bb      	str	r3, [r7, #24]
        break;
 8006ab6:	e00e      	b.n	8006ad6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	61bb      	str	r3, [r7, #24]
        break;
 8006ace:	e002      	b.n	8006ad6 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
        break;
 8006ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b0f      	cmp	r3, #15
 8006ada:	d916      	bls.n	8006b0a <UART_SetConfig+0x1f2>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae2:	d212      	bcs.n	8006b0a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f023 030f 	bic.w	r3, r3, #15
 8006aec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	897b      	ldrh	r3, [r7, #10]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	897a      	ldrh	r2, [r7, #10]
 8006b06:	60da      	str	r2, [r3, #12]
 8006b08:	e07d      	b.n	8006c06 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
 8006b0e:	e07a      	b.n	8006c06 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8006b10:	7ffb      	ldrb	r3, [r7, #31]
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d866      	bhi.n	8006be4 <UART_SetConfig+0x2cc>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <UART_SetConfig+0x204>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b41 	.word	0x08006b41
 8006b20:	08006b5f 	.word	0x08006b5f
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006be5 	.word	0x08006be5
 8006b2c:	08006b99 	.word	0x08006b99
 8006b30:	08006be5 	.word	0x08006be5
 8006b34:	08006be5 	.word	0x08006be5
 8006b38:	08006be5 	.word	0x08006be5
 8006b3c:	08006bb7 	.word	0x08006bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b40:	f7fe fd9a 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8006b44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	085a      	lsrs	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	441a      	add	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	61bb      	str	r3, [r7, #24]
        break;
 8006b5c:	e045      	b.n	8006bea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b5e:	f7fe fdad 	bl	80056bc <HAL_RCC_GetPCLK2Freq>
 8006b62:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	085a      	lsrs	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	61bb      	str	r3, [r7, #24]
        break;
 8006b7a:	e036      	b.n	8006bea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	085b      	lsrs	r3, r3, #1
 8006b82:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8006b86:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6852      	ldr	r2, [r2, #4]
 8006b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	61bb      	str	r3, [r7, #24]
        break;
 8006b96:	e028      	b.n	8006bea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b98:	f7fe fcf8 	bl	800558c <HAL_RCC_GetSysClockFreq>
 8006b9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	085a      	lsrs	r2, r3, #1
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	441a      	add	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	61bb      	str	r3, [r7, #24]
        break;
 8006bb4:	e019      	b.n	8006bea <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	61bb      	str	r3, [r7, #24]
        break;
 8006bcc:	e00d      	b.n	8006bea <UART_SetConfig+0x2d2>
 8006bce:	bf00      	nop
 8006bd0:	efff69f3 	.word	0xefff69f3
 8006bd4:	40013800 	.word	0x40013800
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	40004400 	.word	0x40004400
 8006be0:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
        break;
 8006be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b0f      	cmp	r3, #15
 8006bee:	d908      	bls.n	8006c02 <UART_SetConfig+0x2ea>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf6:	d204      	bcs.n	8006c02 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	60da      	str	r2, [r3, #12]
 8006c00:	e001      	b.n	8006c06 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1a:	d10a      	bne.n	8006d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d6e:	f7fb f94d 	bl	800200c <HAL_GetTick>
 8006d72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d10e      	bne.n	8006da0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f82a 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e020      	b.n	8006de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d10e      	bne.n	8006dcc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f814 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e00a      	b.n	8006de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	4613      	mov	r3, r2
 8006df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfa:	e05d      	b.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d059      	beq.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e04:	f7fb f902 	bl	800200c <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d302      	bcc.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d11b      	bne.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e042      	b.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02b      	beq.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6e:	d123      	bne.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e00f      	b.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69da      	ldr	r2, [r3, #28]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2301      	moveq	r3, #1
 8006eca:	2300      	movne	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d092      	beq.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <__errno>:
 8006ee0:	4b01      	ldr	r3, [pc, #4]	; (8006ee8 <__errno+0x8>)
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	2000000c 	.word	0x2000000c

08006eec <__libc_init_array>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	4e0d      	ldr	r6, [pc, #52]	; (8006f24 <__libc_init_array+0x38>)
 8006ef0:	4c0d      	ldr	r4, [pc, #52]	; (8006f28 <__libc_init_array+0x3c>)
 8006ef2:	1ba4      	subs	r4, r4, r6
 8006ef4:	10a4      	asrs	r4, r4, #2
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	42a5      	cmp	r5, r4
 8006efa:	d109      	bne.n	8006f10 <__libc_init_array+0x24>
 8006efc:	4e0b      	ldr	r6, [pc, #44]	; (8006f2c <__libc_init_array+0x40>)
 8006efe:	4c0c      	ldr	r4, [pc, #48]	; (8006f30 <__libc_init_array+0x44>)
 8006f00:	f002 fdc0 	bl	8009a84 <_init>
 8006f04:	1ba4      	subs	r4, r4, r6
 8006f06:	10a4      	asrs	r4, r4, #2
 8006f08:	2500      	movs	r5, #0
 8006f0a:	42a5      	cmp	r5, r4
 8006f0c:	d105      	bne.n	8006f1a <__libc_init_array+0x2e>
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f14:	4798      	blx	r3
 8006f16:	3501      	adds	r5, #1
 8006f18:	e7ee      	b.n	8006ef8 <__libc_init_array+0xc>
 8006f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f1e:	4798      	blx	r3
 8006f20:	3501      	adds	r5, #1
 8006f22:	e7f2      	b.n	8006f0a <__libc_init_array+0x1e>
 8006f24:	08009e00 	.word	0x08009e00
 8006f28:	08009e00 	.word	0x08009e00
 8006f2c:	08009e00 	.word	0x08009e00
 8006f30:	08009e04 	.word	0x08009e04

08006f34 <memset>:
 8006f34:	4402      	add	r2, r0
 8006f36:	4603      	mov	r3, r0
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d100      	bne.n	8006f3e <memset+0xa>
 8006f3c:	4770      	bx	lr
 8006f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f42:	e7f9      	b.n	8006f38 <memset+0x4>

08006f44 <__cvt>:
 8006f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	ec55 4b10 	vmov	r4, r5, d0
 8006f4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006f4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f52:	2d00      	cmp	r5, #0
 8006f54:	460e      	mov	r6, r1
 8006f56:	4691      	mov	r9, r2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	bfb8      	it	lt
 8006f5c:	4622      	movlt	r2, r4
 8006f5e:	462b      	mov	r3, r5
 8006f60:	f027 0720 	bic.w	r7, r7, #32
 8006f64:	bfbb      	ittet	lt
 8006f66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f6a:	461d      	movlt	r5, r3
 8006f6c:	2300      	movge	r3, #0
 8006f6e:	232d      	movlt	r3, #45	; 0x2d
 8006f70:	bfb8      	it	lt
 8006f72:	4614      	movlt	r4, r2
 8006f74:	2f46      	cmp	r7, #70	; 0x46
 8006f76:	700b      	strb	r3, [r1, #0]
 8006f78:	d004      	beq.n	8006f84 <__cvt+0x40>
 8006f7a:	2f45      	cmp	r7, #69	; 0x45
 8006f7c:	d100      	bne.n	8006f80 <__cvt+0x3c>
 8006f7e:	3601      	adds	r6, #1
 8006f80:	2102      	movs	r1, #2
 8006f82:	e000      	b.n	8006f86 <__cvt+0x42>
 8006f84:	2103      	movs	r1, #3
 8006f86:	ab03      	add	r3, sp, #12
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	ab02      	add	r3, sp, #8
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	4632      	mov	r2, r6
 8006f90:	4653      	mov	r3, sl
 8006f92:	ec45 4b10 	vmov	d0, r4, r5
 8006f96:	f001 f80f 	bl	8007fb8 <_dtoa_r>
 8006f9a:	2f47      	cmp	r7, #71	; 0x47
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	d102      	bne.n	8006fa6 <__cvt+0x62>
 8006fa0:	f019 0f01 	tst.w	r9, #1
 8006fa4:	d026      	beq.n	8006ff4 <__cvt+0xb0>
 8006fa6:	2f46      	cmp	r7, #70	; 0x46
 8006fa8:	eb08 0906 	add.w	r9, r8, r6
 8006fac:	d111      	bne.n	8006fd2 <__cvt+0x8e>
 8006fae:	f898 3000 	ldrb.w	r3, [r8]
 8006fb2:	2b30      	cmp	r3, #48	; 0x30
 8006fb4:	d10a      	bne.n	8006fcc <__cvt+0x88>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f7f9 fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fc2:	b918      	cbnz	r0, 8006fcc <__cvt+0x88>
 8006fc4:	f1c6 0601 	rsb	r6, r6, #1
 8006fc8:	f8ca 6000 	str.w	r6, [sl]
 8006fcc:	f8da 3000 	ldr.w	r3, [sl]
 8006fd0:	4499      	add	r9, r3
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fde:	b938      	cbnz	r0, 8006ff0 <__cvt+0xac>
 8006fe0:	2230      	movs	r2, #48	; 0x30
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	454b      	cmp	r3, r9
 8006fe6:	d205      	bcs.n	8006ff4 <__cvt+0xb0>
 8006fe8:	1c59      	adds	r1, r3, #1
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e7f8      	b.n	8006fe2 <__cvt+0x9e>
 8006ff0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ff8:	eba3 0308 	sub.w	r3, r3, r8
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	b004      	add	sp, #16
 8007002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007006 <__exponent>:
 8007006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007008:	2900      	cmp	r1, #0
 800700a:	4604      	mov	r4, r0
 800700c:	bfba      	itte	lt
 800700e:	4249      	neglt	r1, r1
 8007010:	232d      	movlt	r3, #45	; 0x2d
 8007012:	232b      	movge	r3, #43	; 0x2b
 8007014:	2909      	cmp	r1, #9
 8007016:	f804 2b02 	strb.w	r2, [r4], #2
 800701a:	7043      	strb	r3, [r0, #1]
 800701c:	dd20      	ble.n	8007060 <__exponent+0x5a>
 800701e:	f10d 0307 	add.w	r3, sp, #7
 8007022:	461f      	mov	r7, r3
 8007024:	260a      	movs	r6, #10
 8007026:	fb91 f5f6 	sdiv	r5, r1, r6
 800702a:	fb06 1115 	mls	r1, r6, r5, r1
 800702e:	3130      	adds	r1, #48	; 0x30
 8007030:	2d09      	cmp	r5, #9
 8007032:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007036:	f103 32ff 	add.w	r2, r3, #4294967295
 800703a:	4629      	mov	r1, r5
 800703c:	dc09      	bgt.n	8007052 <__exponent+0x4c>
 800703e:	3130      	adds	r1, #48	; 0x30
 8007040:	3b02      	subs	r3, #2
 8007042:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007046:	42bb      	cmp	r3, r7
 8007048:	4622      	mov	r2, r4
 800704a:	d304      	bcc.n	8007056 <__exponent+0x50>
 800704c:	1a10      	subs	r0, r2, r0
 800704e:	b003      	add	sp, #12
 8007050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007052:	4613      	mov	r3, r2
 8007054:	e7e7      	b.n	8007026 <__exponent+0x20>
 8007056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705a:	f804 2b01 	strb.w	r2, [r4], #1
 800705e:	e7f2      	b.n	8007046 <__exponent+0x40>
 8007060:	2330      	movs	r3, #48	; 0x30
 8007062:	4419      	add	r1, r3
 8007064:	7083      	strb	r3, [r0, #2]
 8007066:	1d02      	adds	r2, r0, #4
 8007068:	70c1      	strb	r1, [r0, #3]
 800706a:	e7ef      	b.n	800704c <__exponent+0x46>

0800706c <_printf_float>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	b08d      	sub	sp, #52	; 0x34
 8007072:	460c      	mov	r4, r1
 8007074:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007078:	4616      	mov	r6, r2
 800707a:	461f      	mov	r7, r3
 800707c:	4605      	mov	r5, r0
 800707e:	f001 fecd 	bl	8008e1c <_localeconv_r>
 8007082:	6803      	ldr	r3, [r0, #0]
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	4618      	mov	r0, r3
 8007088:	f7f9 f8a2 	bl	80001d0 <strlen>
 800708c:	2300      	movs	r3, #0
 800708e:	930a      	str	r3, [sp, #40]	; 0x28
 8007090:	f8d8 3000 	ldr.w	r3, [r8]
 8007094:	9005      	str	r0, [sp, #20]
 8007096:	3307      	adds	r3, #7
 8007098:	f023 0307 	bic.w	r3, r3, #7
 800709c:	f103 0208 	add.w	r2, r3, #8
 80070a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070a4:	f8d4 b000 	ldr.w	fp, [r4]
 80070a8:	f8c8 2000 	str.w	r2, [r8]
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070bc:	9307      	str	r3, [sp, #28]
 80070be:	f8cd 8018 	str.w	r8, [sp, #24]
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295
 80070c6:	4ba7      	ldr	r3, [pc, #668]	; (8007364 <_printf_float+0x2f8>)
 80070c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070cc:	f7f9 fd2e 	bl	8000b2c <__aeabi_dcmpun>
 80070d0:	bb70      	cbnz	r0, 8007130 <_printf_float+0xc4>
 80070d2:	f04f 32ff 	mov.w	r2, #4294967295
 80070d6:	4ba3      	ldr	r3, [pc, #652]	; (8007364 <_printf_float+0x2f8>)
 80070d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070dc:	f7f9 fd08 	bl	8000af0 <__aeabi_dcmple>
 80070e0:	bb30      	cbnz	r0, 8007130 <_printf_float+0xc4>
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 fcf7 	bl	8000adc <__aeabi_dcmplt>
 80070ee:	b110      	cbz	r0, 80070f6 <_printf_float+0x8a>
 80070f0:	232d      	movs	r3, #45	; 0x2d
 80070f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f6:	4a9c      	ldr	r2, [pc, #624]	; (8007368 <_printf_float+0x2fc>)
 80070f8:	4b9c      	ldr	r3, [pc, #624]	; (800736c <_printf_float+0x300>)
 80070fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80070fe:	bf8c      	ite	hi
 8007100:	4690      	movhi	r8, r2
 8007102:	4698      	movls	r8, r3
 8007104:	2303      	movs	r3, #3
 8007106:	f02b 0204 	bic.w	r2, fp, #4
 800710a:	6123      	str	r3, [r4, #16]
 800710c:	6022      	str	r2, [r4, #0]
 800710e:	f04f 0900 	mov.w	r9, #0
 8007112:	9700      	str	r7, [sp, #0]
 8007114:	4633      	mov	r3, r6
 8007116:	aa0b      	add	r2, sp, #44	; 0x2c
 8007118:	4621      	mov	r1, r4
 800711a:	4628      	mov	r0, r5
 800711c:	f000 f9e6 	bl	80074ec <_printf_common>
 8007120:	3001      	adds	r0, #1
 8007122:	f040 808d 	bne.w	8007240 <_printf_float+0x1d4>
 8007126:	f04f 30ff 	mov.w	r0, #4294967295
 800712a:	b00d      	add	sp, #52	; 0x34
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 fcf8 	bl	8000b2c <__aeabi_dcmpun>
 800713c:	b110      	cbz	r0, 8007144 <_printf_float+0xd8>
 800713e:	4a8c      	ldr	r2, [pc, #560]	; (8007370 <_printf_float+0x304>)
 8007140:	4b8c      	ldr	r3, [pc, #560]	; (8007374 <_printf_float+0x308>)
 8007142:	e7da      	b.n	80070fa <_printf_float+0x8e>
 8007144:	6861      	ldr	r1, [r4, #4]
 8007146:	1c4b      	adds	r3, r1, #1
 8007148:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800714c:	a80a      	add	r0, sp, #40	; 0x28
 800714e:	d13e      	bne.n	80071ce <_printf_float+0x162>
 8007150:	2306      	movs	r3, #6
 8007152:	6063      	str	r3, [r4, #4]
 8007154:	2300      	movs	r3, #0
 8007156:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800715a:	ab09      	add	r3, sp, #36	; 0x24
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	ec49 8b10 	vmov	d0, r8, r9
 8007162:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	f8cd a004 	str.w	sl, [sp, #4]
 800716c:	6861      	ldr	r1, [r4, #4]
 800716e:	4628      	mov	r0, r5
 8007170:	f7ff fee8 	bl	8006f44 <__cvt>
 8007174:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007178:	2b47      	cmp	r3, #71	; 0x47
 800717a:	4680      	mov	r8, r0
 800717c:	d109      	bne.n	8007192 <_printf_float+0x126>
 800717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007180:	1cd8      	adds	r0, r3, #3
 8007182:	db02      	blt.n	800718a <_printf_float+0x11e>
 8007184:	6862      	ldr	r2, [r4, #4]
 8007186:	4293      	cmp	r3, r2
 8007188:	dd47      	ble.n	800721a <_printf_float+0x1ae>
 800718a:	f1aa 0a02 	sub.w	sl, sl, #2
 800718e:	fa5f fa8a 	uxtb.w	sl, sl
 8007192:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007198:	d824      	bhi.n	80071e4 <_printf_float+0x178>
 800719a:	3901      	subs	r1, #1
 800719c:	4652      	mov	r2, sl
 800719e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071a2:	9109      	str	r1, [sp, #36]	; 0x24
 80071a4:	f7ff ff2f 	bl	8007006 <__exponent>
 80071a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071aa:	1813      	adds	r3, r2, r0
 80071ac:	2a01      	cmp	r2, #1
 80071ae:	4681      	mov	r9, r0
 80071b0:	6123      	str	r3, [r4, #16]
 80071b2:	dc02      	bgt.n	80071ba <_printf_float+0x14e>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	07d1      	lsls	r1, r2, #31
 80071b8:	d501      	bpl.n	80071be <_printf_float+0x152>
 80071ba:	3301      	adds	r3, #1
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0a5      	beq.n	8007112 <_printf_float+0xa6>
 80071c6:	232d      	movs	r3, #45	; 0x2d
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071cc:	e7a1      	b.n	8007112 <_printf_float+0xa6>
 80071ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80071d2:	f000 8177 	beq.w	80074c4 <_printf_float+0x458>
 80071d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80071da:	d1bb      	bne.n	8007154 <_printf_float+0xe8>
 80071dc:	2900      	cmp	r1, #0
 80071de:	d1b9      	bne.n	8007154 <_printf_float+0xe8>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e7b6      	b.n	8007152 <_printf_float+0xe6>
 80071e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80071e8:	d119      	bne.n	800721e <_printf_float+0x1b2>
 80071ea:	2900      	cmp	r1, #0
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	dd0c      	ble.n	800720a <_printf_float+0x19e>
 80071f0:	6121      	str	r1, [r4, #16]
 80071f2:	b913      	cbnz	r3, 80071fa <_printf_float+0x18e>
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	07d2      	lsls	r2, r2, #31
 80071f8:	d502      	bpl.n	8007200 <_printf_float+0x194>
 80071fa:	3301      	adds	r3, #1
 80071fc:	440b      	add	r3, r1
 80071fe:	6123      	str	r3, [r4, #16]
 8007200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007202:	65a3      	str	r3, [r4, #88]	; 0x58
 8007204:	f04f 0900 	mov.w	r9, #0
 8007208:	e7d9      	b.n	80071be <_printf_float+0x152>
 800720a:	b913      	cbnz	r3, 8007212 <_printf_float+0x1a6>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	07d0      	lsls	r0, r2, #31
 8007210:	d501      	bpl.n	8007216 <_printf_float+0x1aa>
 8007212:	3302      	adds	r3, #2
 8007214:	e7f3      	b.n	80071fe <_printf_float+0x192>
 8007216:	2301      	movs	r3, #1
 8007218:	e7f1      	b.n	80071fe <_printf_float+0x192>
 800721a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800721e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007222:	4293      	cmp	r3, r2
 8007224:	db05      	blt.n	8007232 <_printf_float+0x1c6>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	07d1      	lsls	r1, r2, #31
 800722c:	d5e8      	bpl.n	8007200 <_printf_float+0x194>
 800722e:	3301      	adds	r3, #1
 8007230:	e7e5      	b.n	80071fe <_printf_float+0x192>
 8007232:	2b00      	cmp	r3, #0
 8007234:	bfd4      	ite	le
 8007236:	f1c3 0302 	rsble	r3, r3, #2
 800723a:	2301      	movgt	r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	e7de      	b.n	80071fe <_printf_float+0x192>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	055a      	lsls	r2, r3, #21
 8007244:	d407      	bmi.n	8007256 <_printf_float+0x1ea>
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	4642      	mov	r2, r8
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	d12b      	bne.n	80072ac <_printf_float+0x240>
 8007254:	e767      	b.n	8007126 <_printf_float+0xba>
 8007256:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800725a:	f240 80dc 	bls.w	8007416 <_printf_float+0x3aa>
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007266:	f7f9 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800726a:	2800      	cmp	r0, #0
 800726c:	d033      	beq.n	80072d6 <_printf_float+0x26a>
 800726e:	2301      	movs	r3, #1
 8007270:	4a41      	ldr	r2, [pc, #260]	; (8007378 <_printf_float+0x30c>)
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	f43f af54 	beq.w	8007126 <_printf_float+0xba>
 800727e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007282:	429a      	cmp	r2, r3
 8007284:	db02      	blt.n	800728c <_printf_float+0x220>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	07d8      	lsls	r0, r3, #31
 800728a:	d50f      	bpl.n	80072ac <_printf_float+0x240>
 800728c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	f43f af45 	beq.w	8007126 <_printf_float+0xba>
 800729c:	f04f 0800 	mov.w	r8, #0
 80072a0:	f104 091a 	add.w	r9, r4, #26
 80072a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4543      	cmp	r3, r8
 80072aa:	dc09      	bgt.n	80072c0 <_printf_float+0x254>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	079b      	lsls	r3, r3, #30
 80072b0:	f100 8103 	bmi.w	80074ba <_printf_float+0x44e>
 80072b4:	68e0      	ldr	r0, [r4, #12]
 80072b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b8:	4298      	cmp	r0, r3
 80072ba:	bfb8      	it	lt
 80072bc:	4618      	movlt	r0, r3
 80072be:	e734      	b.n	800712a <_printf_float+0xbe>
 80072c0:	2301      	movs	r3, #1
 80072c2:	464a      	mov	r2, r9
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f af2b 	beq.w	8007126 <_printf_float+0xba>
 80072d0:	f108 0801 	add.w	r8, r8, #1
 80072d4:	e7e6      	b.n	80072a4 <_printf_float+0x238>
 80072d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dc2b      	bgt.n	8007334 <_printf_float+0x2c8>
 80072dc:	2301      	movs	r3, #1
 80072de:	4a26      	ldr	r2, [pc, #152]	; (8007378 <_printf_float+0x30c>)
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af1d 	beq.w	8007126 <_printf_float+0xba>
 80072ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ee:	b923      	cbnz	r3, 80072fa <_printf_float+0x28e>
 80072f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f2:	b913      	cbnz	r3, 80072fa <_printf_float+0x28e>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	07d9      	lsls	r1, r3, #31
 80072f8:	d5d8      	bpl.n	80072ac <_printf_float+0x240>
 80072fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	f43f af0e 	beq.w	8007126 <_printf_float+0xba>
 800730a:	f04f 0900 	mov.w	r9, #0
 800730e:	f104 0a1a 	add.w	sl, r4, #26
 8007312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007314:	425b      	negs	r3, r3
 8007316:	454b      	cmp	r3, r9
 8007318:	dc01      	bgt.n	800731e <_printf_float+0x2b2>
 800731a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800731c:	e794      	b.n	8007248 <_printf_float+0x1dc>
 800731e:	2301      	movs	r3, #1
 8007320:	4652      	mov	r2, sl
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f aefc 	beq.w	8007126 <_printf_float+0xba>
 800732e:	f109 0901 	add.w	r9, r9, #1
 8007332:	e7ee      	b.n	8007312 <_printf_float+0x2a6>
 8007334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007338:	429a      	cmp	r2, r3
 800733a:	bfa8      	it	ge
 800733c:	461a      	movge	r2, r3
 800733e:	2a00      	cmp	r2, #0
 8007340:	4691      	mov	r9, r2
 8007342:	dd07      	ble.n	8007354 <_printf_float+0x2e8>
 8007344:	4613      	mov	r3, r2
 8007346:	4631      	mov	r1, r6
 8007348:	4642      	mov	r2, r8
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f aee9 	beq.w	8007126 <_printf_float+0xba>
 8007354:	f104 031a 	add.w	r3, r4, #26
 8007358:	f04f 0b00 	mov.w	fp, #0
 800735c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007360:	9306      	str	r3, [sp, #24]
 8007362:	e015      	b.n	8007390 <_printf_float+0x324>
 8007364:	7fefffff 	.word	0x7fefffff
 8007368:	08009b48 	.word	0x08009b48
 800736c:	08009b44 	.word	0x08009b44
 8007370:	08009b50 	.word	0x08009b50
 8007374:	08009b4c 	.word	0x08009b4c
 8007378:	08009b54 	.word	0x08009b54
 800737c:	2301      	movs	r3, #1
 800737e:	9a06      	ldr	r2, [sp, #24]
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	f43f aecd 	beq.w	8007126 <_printf_float+0xba>
 800738c:	f10b 0b01 	add.w	fp, fp, #1
 8007390:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007394:	ebaa 0309 	sub.w	r3, sl, r9
 8007398:	455b      	cmp	r3, fp
 800739a:	dcef      	bgt.n	800737c <_printf_float+0x310>
 800739c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a0:	429a      	cmp	r2, r3
 80073a2:	44d0      	add	r8, sl
 80073a4:	db15      	blt.n	80073d2 <_printf_float+0x366>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	07da      	lsls	r2, r3, #31
 80073aa:	d412      	bmi.n	80073d2 <_printf_float+0x366>
 80073ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b0:	eba3 020a 	sub.w	r2, r3, sl
 80073b4:	eba3 0a01 	sub.w	sl, r3, r1
 80073b8:	4592      	cmp	sl, r2
 80073ba:	bfa8      	it	ge
 80073bc:	4692      	movge	sl, r2
 80073be:	f1ba 0f00 	cmp.w	sl, #0
 80073c2:	dc0e      	bgt.n	80073e2 <_printf_float+0x376>
 80073c4:	f04f 0800 	mov.w	r8, #0
 80073c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073cc:	f104 091a 	add.w	r9, r4, #26
 80073d0:	e019      	b.n	8007406 <_printf_float+0x39a>
 80073d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	d1e5      	bne.n	80073ac <_printf_float+0x340>
 80073e0:	e6a1      	b.n	8007126 <_printf_float+0xba>
 80073e2:	4653      	mov	r3, sl
 80073e4:	4642      	mov	r2, r8
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d1e9      	bne.n	80073c4 <_printf_float+0x358>
 80073f0:	e699      	b.n	8007126 <_printf_float+0xba>
 80073f2:	2301      	movs	r3, #1
 80073f4:	464a      	mov	r2, r9
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f ae92 	beq.w	8007126 <_printf_float+0xba>
 8007402:	f108 0801 	add.w	r8, r8, #1
 8007406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	eba3 030a 	sub.w	r3, r3, sl
 8007410:	4543      	cmp	r3, r8
 8007412:	dcee      	bgt.n	80073f2 <_printf_float+0x386>
 8007414:	e74a      	b.n	80072ac <_printf_float+0x240>
 8007416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007418:	2a01      	cmp	r2, #1
 800741a:	dc01      	bgt.n	8007420 <_printf_float+0x3b4>
 800741c:	07db      	lsls	r3, r3, #31
 800741e:	d53a      	bpl.n	8007496 <_printf_float+0x42a>
 8007420:	2301      	movs	r3, #1
 8007422:	4642      	mov	r2, r8
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae7b 	beq.w	8007126 <_printf_float+0xba>
 8007430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	f108 0801 	add.w	r8, r8, #1
 8007440:	f43f ae71 	beq.w	8007126 <_printf_float+0xba>
 8007444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007446:	2200      	movs	r2, #0
 8007448:	f103 3aff 	add.w	sl, r3, #4294967295
 800744c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007450:	2300      	movs	r3, #0
 8007452:	f7f9 fb39 	bl	8000ac8 <__aeabi_dcmpeq>
 8007456:	b9c8      	cbnz	r0, 800748c <_printf_float+0x420>
 8007458:	4653      	mov	r3, sl
 800745a:	4642      	mov	r2, r8
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	d10e      	bne.n	8007484 <_printf_float+0x418>
 8007466:	e65e      	b.n	8007126 <_printf_float+0xba>
 8007468:	2301      	movs	r3, #1
 800746a:	4652      	mov	r2, sl
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f ae57 	beq.w	8007126 <_printf_float+0xba>
 8007478:	f108 0801 	add.w	r8, r8, #1
 800747c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747e:	3b01      	subs	r3, #1
 8007480:	4543      	cmp	r3, r8
 8007482:	dcf1      	bgt.n	8007468 <_printf_float+0x3fc>
 8007484:	464b      	mov	r3, r9
 8007486:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800748a:	e6de      	b.n	800724a <_printf_float+0x1de>
 800748c:	f04f 0800 	mov.w	r8, #0
 8007490:	f104 0a1a 	add.w	sl, r4, #26
 8007494:	e7f2      	b.n	800747c <_printf_float+0x410>
 8007496:	2301      	movs	r3, #1
 8007498:	e7df      	b.n	800745a <_printf_float+0x3ee>
 800749a:	2301      	movs	r3, #1
 800749c:	464a      	mov	r2, r9
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	f43f ae3e 	beq.w	8007126 <_printf_float+0xba>
 80074aa:	f108 0801 	add.w	r8, r8, #1
 80074ae:	68e3      	ldr	r3, [r4, #12]
 80074b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	4543      	cmp	r3, r8
 80074b6:	dcf0      	bgt.n	800749a <_printf_float+0x42e>
 80074b8:	e6fc      	b.n	80072b4 <_printf_float+0x248>
 80074ba:	f04f 0800 	mov.w	r8, #0
 80074be:	f104 0919 	add.w	r9, r4, #25
 80074c2:	e7f4      	b.n	80074ae <_printf_float+0x442>
 80074c4:	2900      	cmp	r1, #0
 80074c6:	f43f ae8b 	beq.w	80071e0 <_printf_float+0x174>
 80074ca:	2300      	movs	r3, #0
 80074cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80074d0:	ab09      	add	r3, sp, #36	; 0x24
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	ec49 8b10 	vmov	d0, r8, r9
 80074d8:	6022      	str	r2, [r4, #0]
 80074da:	f8cd a004 	str.w	sl, [sp, #4]
 80074de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074e2:	4628      	mov	r0, r5
 80074e4:	f7ff fd2e 	bl	8006f44 <__cvt>
 80074e8:	4680      	mov	r8, r0
 80074ea:	e648      	b.n	800717e <_printf_float+0x112>

080074ec <_printf_common>:
 80074ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	4691      	mov	r9, r2
 80074f2:	461f      	mov	r7, r3
 80074f4:	688a      	ldr	r2, [r1, #8]
 80074f6:	690b      	ldr	r3, [r1, #16]
 80074f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	bfb8      	it	lt
 8007500:	4613      	movlt	r3, r2
 8007502:	f8c9 3000 	str.w	r3, [r9]
 8007506:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	b112      	cbz	r2, 8007516 <_printf_common+0x2a>
 8007510:	3301      	adds	r3, #1
 8007512:	f8c9 3000 	str.w	r3, [r9]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	0699      	lsls	r1, r3, #26
 800751a:	bf42      	ittt	mi
 800751c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007520:	3302      	addmi	r3, #2
 8007522:	f8c9 3000 	strmi.w	r3, [r9]
 8007526:	6825      	ldr	r5, [r4, #0]
 8007528:	f015 0506 	ands.w	r5, r5, #6
 800752c:	d107      	bne.n	800753e <_printf_common+0x52>
 800752e:	f104 0a19 	add.w	sl, r4, #25
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	f8d9 2000 	ldr.w	r2, [r9]
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	42ab      	cmp	r3, r5
 800753c:	dc28      	bgt.n	8007590 <_printf_common+0xa4>
 800753e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007542:	6822      	ldr	r2, [r4, #0]
 8007544:	3300      	adds	r3, #0
 8007546:	bf18      	it	ne
 8007548:	2301      	movne	r3, #1
 800754a:	0692      	lsls	r2, r2, #26
 800754c:	d42d      	bmi.n	80075aa <_printf_common+0xbe>
 800754e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007552:	4639      	mov	r1, r7
 8007554:	4630      	mov	r0, r6
 8007556:	47c0      	blx	r8
 8007558:	3001      	adds	r0, #1
 800755a:	d020      	beq.n	800759e <_printf_common+0xb2>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	68e5      	ldr	r5, [r4, #12]
 8007560:	f8d9 2000 	ldr.w	r2, [r9]
 8007564:	f003 0306 	and.w	r3, r3, #6
 8007568:	2b04      	cmp	r3, #4
 800756a:	bf08      	it	eq
 800756c:	1aad      	subeq	r5, r5, r2
 800756e:	68a3      	ldr	r3, [r4, #8]
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	bf0c      	ite	eq
 8007574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007578:	2500      	movne	r5, #0
 800757a:	4293      	cmp	r3, r2
 800757c:	bfc4      	itt	gt
 800757e:	1a9b      	subgt	r3, r3, r2
 8007580:	18ed      	addgt	r5, r5, r3
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	341a      	adds	r4, #26
 8007588:	454d      	cmp	r5, r9
 800758a:	d11a      	bne.n	80075c2 <_printf_common+0xd6>
 800758c:	2000      	movs	r0, #0
 800758e:	e008      	b.n	80075a2 <_printf_common+0xb6>
 8007590:	2301      	movs	r3, #1
 8007592:	4652      	mov	r2, sl
 8007594:	4639      	mov	r1, r7
 8007596:	4630      	mov	r0, r6
 8007598:	47c0      	blx	r8
 800759a:	3001      	adds	r0, #1
 800759c:	d103      	bne.n	80075a6 <_printf_common+0xba>
 800759e:	f04f 30ff 	mov.w	r0, #4294967295
 80075a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a6:	3501      	adds	r5, #1
 80075a8:	e7c3      	b.n	8007532 <_printf_common+0x46>
 80075aa:	18e1      	adds	r1, r4, r3
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	2030      	movs	r0, #48	; 0x30
 80075b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b4:	4422      	add	r2, r4
 80075b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075be:	3302      	adds	r3, #2
 80075c0:	e7c5      	b.n	800754e <_printf_common+0x62>
 80075c2:	2301      	movs	r3, #1
 80075c4:	4622      	mov	r2, r4
 80075c6:	4639      	mov	r1, r7
 80075c8:	4630      	mov	r0, r6
 80075ca:	47c0      	blx	r8
 80075cc:	3001      	adds	r0, #1
 80075ce:	d0e6      	beq.n	800759e <_printf_common+0xb2>
 80075d0:	f109 0901 	add.w	r9, r9, #1
 80075d4:	e7d8      	b.n	8007588 <_printf_common+0x9c>
	...

080075d8 <_printf_i>:
 80075d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80075e0:	460c      	mov	r4, r1
 80075e2:	7e09      	ldrb	r1, [r1, #24]
 80075e4:	b085      	sub	sp, #20
 80075e6:	296e      	cmp	r1, #110	; 0x6e
 80075e8:	4617      	mov	r7, r2
 80075ea:	4606      	mov	r6, r0
 80075ec:	4698      	mov	r8, r3
 80075ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075f0:	f000 80b3 	beq.w	800775a <_printf_i+0x182>
 80075f4:	d822      	bhi.n	800763c <_printf_i+0x64>
 80075f6:	2963      	cmp	r1, #99	; 0x63
 80075f8:	d036      	beq.n	8007668 <_printf_i+0x90>
 80075fa:	d80a      	bhi.n	8007612 <_printf_i+0x3a>
 80075fc:	2900      	cmp	r1, #0
 80075fe:	f000 80b9 	beq.w	8007774 <_printf_i+0x19c>
 8007602:	2958      	cmp	r1, #88	; 0x58
 8007604:	f000 8083 	beq.w	800770e <_printf_i+0x136>
 8007608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800760c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007610:	e032      	b.n	8007678 <_printf_i+0xa0>
 8007612:	2964      	cmp	r1, #100	; 0x64
 8007614:	d001      	beq.n	800761a <_printf_i+0x42>
 8007616:	2969      	cmp	r1, #105	; 0x69
 8007618:	d1f6      	bne.n	8007608 <_printf_i+0x30>
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	6813      	ldr	r3, [r2, #0]
 800761e:	0605      	lsls	r5, r0, #24
 8007620:	f103 0104 	add.w	r1, r3, #4
 8007624:	d52a      	bpl.n	800767c <_printf_i+0xa4>
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6011      	str	r1, [r2, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	da03      	bge.n	8007636 <_printf_i+0x5e>
 800762e:	222d      	movs	r2, #45	; 0x2d
 8007630:	425b      	negs	r3, r3
 8007632:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007636:	486f      	ldr	r0, [pc, #444]	; (80077f4 <_printf_i+0x21c>)
 8007638:	220a      	movs	r2, #10
 800763a:	e039      	b.n	80076b0 <_printf_i+0xd8>
 800763c:	2973      	cmp	r1, #115	; 0x73
 800763e:	f000 809d 	beq.w	800777c <_printf_i+0x1a4>
 8007642:	d808      	bhi.n	8007656 <_printf_i+0x7e>
 8007644:	296f      	cmp	r1, #111	; 0x6f
 8007646:	d020      	beq.n	800768a <_printf_i+0xb2>
 8007648:	2970      	cmp	r1, #112	; 0x70
 800764a:	d1dd      	bne.n	8007608 <_printf_i+0x30>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	f043 0320 	orr.w	r3, r3, #32
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	e003      	b.n	800765e <_printf_i+0x86>
 8007656:	2975      	cmp	r1, #117	; 0x75
 8007658:	d017      	beq.n	800768a <_printf_i+0xb2>
 800765a:	2978      	cmp	r1, #120	; 0x78
 800765c:	d1d4      	bne.n	8007608 <_printf_i+0x30>
 800765e:	2378      	movs	r3, #120	; 0x78
 8007660:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007664:	4864      	ldr	r0, [pc, #400]	; (80077f8 <_printf_i+0x220>)
 8007666:	e055      	b.n	8007714 <_printf_i+0x13c>
 8007668:	6813      	ldr	r3, [r2, #0]
 800766a:	1d19      	adds	r1, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6011      	str	r1, [r2, #0]
 8007670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007678:	2301      	movs	r3, #1
 800767a:	e08c      	b.n	8007796 <_printf_i+0x1be>
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6011      	str	r1, [r2, #0]
 8007680:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007684:	bf18      	it	ne
 8007686:	b21b      	sxthne	r3, r3
 8007688:	e7cf      	b.n	800762a <_printf_i+0x52>
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	6825      	ldr	r5, [r4, #0]
 800768e:	1d18      	adds	r0, r3, #4
 8007690:	6010      	str	r0, [r2, #0]
 8007692:	0628      	lsls	r0, r5, #24
 8007694:	d501      	bpl.n	800769a <_printf_i+0xc2>
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	e002      	b.n	80076a0 <_printf_i+0xc8>
 800769a:	0668      	lsls	r0, r5, #25
 800769c:	d5fb      	bpl.n	8007696 <_printf_i+0xbe>
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	4854      	ldr	r0, [pc, #336]	; (80077f4 <_printf_i+0x21c>)
 80076a2:	296f      	cmp	r1, #111	; 0x6f
 80076a4:	bf14      	ite	ne
 80076a6:	220a      	movne	r2, #10
 80076a8:	2208      	moveq	r2, #8
 80076aa:	2100      	movs	r1, #0
 80076ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076b0:	6865      	ldr	r5, [r4, #4]
 80076b2:	60a5      	str	r5, [r4, #8]
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	f2c0 8095 	blt.w	80077e4 <_printf_i+0x20c>
 80076ba:	6821      	ldr	r1, [r4, #0]
 80076bc:	f021 0104 	bic.w	r1, r1, #4
 80076c0:	6021      	str	r1, [r4, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d13d      	bne.n	8007742 <_printf_i+0x16a>
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	f040 808e 	bne.w	80077e8 <_printf_i+0x210>
 80076cc:	4665      	mov	r5, ip
 80076ce:	2a08      	cmp	r2, #8
 80076d0:	d10b      	bne.n	80076ea <_printf_i+0x112>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	07db      	lsls	r3, r3, #31
 80076d6:	d508      	bpl.n	80076ea <_printf_i+0x112>
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	6862      	ldr	r2, [r4, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	bfde      	ittt	le
 80076e0:	2330      	movle	r3, #48	; 0x30
 80076e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076ea:	ebac 0305 	sub.w	r3, ip, r5
 80076ee:	6123      	str	r3, [r4, #16]
 80076f0:	f8cd 8000 	str.w	r8, [sp]
 80076f4:	463b      	mov	r3, r7
 80076f6:	aa03      	add	r2, sp, #12
 80076f8:	4621      	mov	r1, r4
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff fef6 	bl	80074ec <_printf_common>
 8007700:	3001      	adds	r0, #1
 8007702:	d14d      	bne.n	80077a0 <_printf_i+0x1c8>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	b005      	add	sp, #20
 800770a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800770e:	4839      	ldr	r0, [pc, #228]	; (80077f4 <_printf_i+0x21c>)
 8007710:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007714:	6813      	ldr	r3, [r2, #0]
 8007716:	6821      	ldr	r1, [r4, #0]
 8007718:	1d1d      	adds	r5, r3, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6015      	str	r5, [r2, #0]
 800771e:	060a      	lsls	r2, r1, #24
 8007720:	d50b      	bpl.n	800773a <_printf_i+0x162>
 8007722:	07ca      	lsls	r2, r1, #31
 8007724:	bf44      	itt	mi
 8007726:	f041 0120 	orrmi.w	r1, r1, #32
 800772a:	6021      	strmi	r1, [r4, #0]
 800772c:	b91b      	cbnz	r3, 8007736 <_printf_i+0x15e>
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	f022 0220 	bic.w	r2, r2, #32
 8007734:	6022      	str	r2, [r4, #0]
 8007736:	2210      	movs	r2, #16
 8007738:	e7b7      	b.n	80076aa <_printf_i+0xd2>
 800773a:	064d      	lsls	r5, r1, #25
 800773c:	bf48      	it	mi
 800773e:	b29b      	uxthmi	r3, r3
 8007740:	e7ef      	b.n	8007722 <_printf_i+0x14a>
 8007742:	4665      	mov	r5, ip
 8007744:	fbb3 f1f2 	udiv	r1, r3, r2
 8007748:	fb02 3311 	mls	r3, r2, r1, r3
 800774c:	5cc3      	ldrb	r3, [r0, r3]
 800774e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007752:	460b      	mov	r3, r1
 8007754:	2900      	cmp	r1, #0
 8007756:	d1f5      	bne.n	8007744 <_printf_i+0x16c>
 8007758:	e7b9      	b.n	80076ce <_printf_i+0xf6>
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	6825      	ldr	r5, [r4, #0]
 800775e:	6961      	ldr	r1, [r4, #20]
 8007760:	1d18      	adds	r0, r3, #4
 8007762:	6010      	str	r0, [r2, #0]
 8007764:	0628      	lsls	r0, r5, #24
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	d501      	bpl.n	800776e <_printf_i+0x196>
 800776a:	6019      	str	r1, [r3, #0]
 800776c:	e002      	b.n	8007774 <_printf_i+0x19c>
 800776e:	066a      	lsls	r2, r5, #25
 8007770:	d5fb      	bpl.n	800776a <_printf_i+0x192>
 8007772:	8019      	strh	r1, [r3, #0]
 8007774:	2300      	movs	r3, #0
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	4665      	mov	r5, ip
 800777a:	e7b9      	b.n	80076f0 <_printf_i+0x118>
 800777c:	6813      	ldr	r3, [r2, #0]
 800777e:	1d19      	adds	r1, r3, #4
 8007780:	6011      	str	r1, [r2, #0]
 8007782:	681d      	ldr	r5, [r3, #0]
 8007784:	6862      	ldr	r2, [r4, #4]
 8007786:	2100      	movs	r1, #0
 8007788:	4628      	mov	r0, r5
 800778a:	f7f8 fd29 	bl	80001e0 <memchr>
 800778e:	b108      	cbz	r0, 8007794 <_printf_i+0x1bc>
 8007790:	1b40      	subs	r0, r0, r5
 8007792:	6060      	str	r0, [r4, #4]
 8007794:	6863      	ldr	r3, [r4, #4]
 8007796:	6123      	str	r3, [r4, #16]
 8007798:	2300      	movs	r3, #0
 800779a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800779e:	e7a7      	b.n	80076f0 <_printf_i+0x118>
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	462a      	mov	r2, r5
 80077a4:	4639      	mov	r1, r7
 80077a6:	4630      	mov	r0, r6
 80077a8:	47c0      	blx	r8
 80077aa:	3001      	adds	r0, #1
 80077ac:	d0aa      	beq.n	8007704 <_printf_i+0x12c>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	079b      	lsls	r3, r3, #30
 80077b2:	d413      	bmi.n	80077dc <_printf_i+0x204>
 80077b4:	68e0      	ldr	r0, [r4, #12]
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	4298      	cmp	r0, r3
 80077ba:	bfb8      	it	lt
 80077bc:	4618      	movlt	r0, r3
 80077be:	e7a3      	b.n	8007708 <_printf_i+0x130>
 80077c0:	2301      	movs	r3, #1
 80077c2:	464a      	mov	r2, r9
 80077c4:	4639      	mov	r1, r7
 80077c6:	4630      	mov	r0, r6
 80077c8:	47c0      	blx	r8
 80077ca:	3001      	adds	r0, #1
 80077cc:	d09a      	beq.n	8007704 <_printf_i+0x12c>
 80077ce:	3501      	adds	r5, #1
 80077d0:	68e3      	ldr	r3, [r4, #12]
 80077d2:	9a03      	ldr	r2, [sp, #12]
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	42ab      	cmp	r3, r5
 80077d8:	dcf2      	bgt.n	80077c0 <_printf_i+0x1e8>
 80077da:	e7eb      	b.n	80077b4 <_printf_i+0x1dc>
 80077dc:	2500      	movs	r5, #0
 80077de:	f104 0919 	add.w	r9, r4, #25
 80077e2:	e7f5      	b.n	80077d0 <_printf_i+0x1f8>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ac      	bne.n	8007742 <_printf_i+0x16a>
 80077e8:	7803      	ldrb	r3, [r0, #0]
 80077ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f2:	e76c      	b.n	80076ce <_printf_i+0xf6>
 80077f4:	08009b56 	.word	0x08009b56
 80077f8:	08009b67 	.word	0x08009b67

080077fc <iprintf>:
 80077fc:	b40f      	push	{r0, r1, r2, r3}
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <iprintf+0x2c>)
 8007800:	b513      	push	{r0, r1, r4, lr}
 8007802:	681c      	ldr	r4, [r3, #0]
 8007804:	b124      	cbz	r4, 8007810 <iprintf+0x14>
 8007806:	69a3      	ldr	r3, [r4, #24]
 8007808:	b913      	cbnz	r3, 8007810 <iprintf+0x14>
 800780a:	4620      	mov	r0, r4
 800780c:	f001 fa7c 	bl	8008d08 <__sinit>
 8007810:	ab05      	add	r3, sp, #20
 8007812:	9a04      	ldr	r2, [sp, #16]
 8007814:	68a1      	ldr	r1, [r4, #8]
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	4620      	mov	r0, r4
 800781a:	f001 ff3f 	bl	800969c <_vfiprintf_r>
 800781e:	b002      	add	sp, #8
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	b004      	add	sp, #16
 8007826:	4770      	bx	lr
 8007828:	2000000c 	.word	0x2000000c

0800782c <_puts_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	460e      	mov	r6, r1
 8007830:	4605      	mov	r5, r0
 8007832:	b118      	cbz	r0, 800783c <_puts_r+0x10>
 8007834:	6983      	ldr	r3, [r0, #24]
 8007836:	b90b      	cbnz	r3, 800783c <_puts_r+0x10>
 8007838:	f001 fa66 	bl	8008d08 <__sinit>
 800783c:	69ab      	ldr	r3, [r5, #24]
 800783e:	68ac      	ldr	r4, [r5, #8]
 8007840:	b913      	cbnz	r3, 8007848 <_puts_r+0x1c>
 8007842:	4628      	mov	r0, r5
 8007844:	f001 fa60 	bl	8008d08 <__sinit>
 8007848:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <_puts_r+0xac>)
 800784a:	429c      	cmp	r4, r3
 800784c:	d117      	bne.n	800787e <_puts_r+0x52>
 800784e:	686c      	ldr	r4, [r5, #4]
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	071b      	lsls	r3, r3, #28
 8007854:	d51d      	bpl.n	8007892 <_puts_r+0x66>
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	b1db      	cbz	r3, 8007892 <_puts_r+0x66>
 800785a:	3e01      	subs	r6, #1
 800785c:	68a3      	ldr	r3, [r4, #8]
 800785e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007862:	3b01      	subs	r3, #1
 8007864:	60a3      	str	r3, [r4, #8]
 8007866:	b9e9      	cbnz	r1, 80078a4 <_puts_r+0x78>
 8007868:	2b00      	cmp	r3, #0
 800786a:	da2e      	bge.n	80078ca <_puts_r+0x9e>
 800786c:	4622      	mov	r2, r4
 800786e:	210a      	movs	r1, #10
 8007870:	4628      	mov	r0, r5
 8007872:	f000 fa55 	bl	8007d20 <__swbuf_r>
 8007876:	3001      	adds	r0, #1
 8007878:	d011      	beq.n	800789e <_puts_r+0x72>
 800787a:	200a      	movs	r0, #10
 800787c:	e011      	b.n	80078a2 <_puts_r+0x76>
 800787e:	4b17      	ldr	r3, [pc, #92]	; (80078dc <_puts_r+0xb0>)
 8007880:	429c      	cmp	r4, r3
 8007882:	d101      	bne.n	8007888 <_puts_r+0x5c>
 8007884:	68ac      	ldr	r4, [r5, #8]
 8007886:	e7e3      	b.n	8007850 <_puts_r+0x24>
 8007888:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <_puts_r+0xb4>)
 800788a:	429c      	cmp	r4, r3
 800788c:	bf08      	it	eq
 800788e:	68ec      	ldreq	r4, [r5, #12]
 8007890:	e7de      	b.n	8007850 <_puts_r+0x24>
 8007892:	4621      	mov	r1, r4
 8007894:	4628      	mov	r0, r5
 8007896:	f000 fa95 	bl	8007dc4 <__swsetup_r>
 800789a:	2800      	cmp	r0, #0
 800789c:	d0dd      	beq.n	800785a <_puts_r+0x2e>
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	da04      	bge.n	80078b2 <_puts_r+0x86>
 80078a8:	69a2      	ldr	r2, [r4, #24]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	dc06      	bgt.n	80078bc <_puts_r+0x90>
 80078ae:	290a      	cmp	r1, #10
 80078b0:	d004      	beq.n	80078bc <_puts_r+0x90>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	7019      	strb	r1, [r3, #0]
 80078ba:	e7cf      	b.n	800785c <_puts_r+0x30>
 80078bc:	4622      	mov	r2, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fa2e 	bl	8007d20 <__swbuf_r>
 80078c4:	3001      	adds	r0, #1
 80078c6:	d1c9      	bne.n	800785c <_puts_r+0x30>
 80078c8:	e7e9      	b.n	800789e <_puts_r+0x72>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	200a      	movs	r0, #10
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6022      	str	r2, [r4, #0]
 80078d2:	7018      	strb	r0, [r3, #0]
 80078d4:	e7e5      	b.n	80078a2 <_puts_r+0x76>
 80078d6:	bf00      	nop
 80078d8:	08009ba8 	.word	0x08009ba8
 80078dc:	08009bc8 	.word	0x08009bc8
 80078e0:	08009b88 	.word	0x08009b88

080078e4 <puts>:
 80078e4:	4b02      	ldr	r3, [pc, #8]	; (80078f0 <puts+0xc>)
 80078e6:	4601      	mov	r1, r0
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	f7ff bf9f 	b.w	800782c <_puts_r>
 80078ee:	bf00      	nop
 80078f0:	2000000c 	.word	0x2000000c

080078f4 <swapfunc>:
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	b510      	push	{r4, lr}
 80078f8:	d00a      	beq.n	8007910 <swapfunc+0x1c>
 80078fa:	0892      	lsrs	r2, r2, #2
 80078fc:	3a01      	subs	r2, #1
 80078fe:	6803      	ldr	r3, [r0, #0]
 8007900:	680c      	ldr	r4, [r1, #0]
 8007902:	f840 4b04 	str.w	r4, [r0], #4
 8007906:	2a00      	cmp	r2, #0
 8007908:	f841 3b04 	str.w	r3, [r1], #4
 800790c:	dcf6      	bgt.n	80078fc <swapfunc+0x8>
 800790e:	bd10      	pop	{r4, pc}
 8007910:	4402      	add	r2, r0
 8007912:	780c      	ldrb	r4, [r1, #0]
 8007914:	7803      	ldrb	r3, [r0, #0]
 8007916:	f800 4b01 	strb.w	r4, [r0], #1
 800791a:	f801 3b01 	strb.w	r3, [r1], #1
 800791e:	1a13      	subs	r3, r2, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	dcf6      	bgt.n	8007912 <swapfunc+0x1e>
 8007924:	e7f3      	b.n	800790e <swapfunc+0x1a>

08007926 <med3.isra.1>:
 8007926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007928:	460c      	mov	r4, r1
 800792a:	4615      	mov	r5, r2
 800792c:	4607      	mov	r7, r0
 800792e:	461e      	mov	r6, r3
 8007930:	4798      	blx	r3
 8007932:	2800      	cmp	r0, #0
 8007934:	4629      	mov	r1, r5
 8007936:	4620      	mov	r0, r4
 8007938:	da0a      	bge.n	8007950 <med3.isra.1+0x2a>
 800793a:	47b0      	blx	r6
 800793c:	2800      	cmp	r0, #0
 800793e:	db05      	blt.n	800794c <med3.isra.1+0x26>
 8007940:	4629      	mov	r1, r5
 8007942:	4638      	mov	r0, r7
 8007944:	47b0      	blx	r6
 8007946:	2800      	cmp	r0, #0
 8007948:	db0a      	blt.n	8007960 <med3.isra.1+0x3a>
 800794a:	463c      	mov	r4, r7
 800794c:	4620      	mov	r0, r4
 800794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007950:	47b0      	blx	r6
 8007952:	2800      	cmp	r0, #0
 8007954:	dcfa      	bgt.n	800794c <med3.isra.1+0x26>
 8007956:	4629      	mov	r1, r5
 8007958:	4638      	mov	r0, r7
 800795a:	47b0      	blx	r6
 800795c:	2800      	cmp	r0, #0
 800795e:	dbf4      	blt.n	800794a <med3.isra.1+0x24>
 8007960:	462c      	mov	r4, r5
 8007962:	e7f3      	b.n	800794c <med3.isra.1+0x26>

08007964 <qsort>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	b085      	sub	sp, #20
 800796a:	4606      	mov	r6, r0
 800796c:	468a      	mov	sl, r1
 800796e:	4614      	mov	r4, r2
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	07b2      	lsls	r2, r6, #30
 8007974:	d110      	bne.n	8007998 <qsort+0x34>
 8007976:	07a3      	lsls	r3, r4, #30
 8007978:	d10e      	bne.n	8007998 <qsort+0x34>
 800797a:	1f27      	subs	r7, r4, #4
 800797c:	bf18      	it	ne
 800797e:	2701      	movne	r7, #1
 8007980:	f1ba 0f06 	cmp.w	sl, #6
 8007984:	eb06 0b04 	add.w	fp, r6, r4
 8007988:	d828      	bhi.n	80079dc <qsort+0x78>
 800798a:	fb04 6a0a 	mla	sl, r4, sl, r6
 800798e:	45da      	cmp	sl, fp
 8007990:	d80b      	bhi.n	80079aa <qsort+0x46>
 8007992:	b005      	add	sp, #20
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	2702      	movs	r7, #2
 800799a:	e7f1      	b.n	8007980 <qsort+0x1c>
 800799c:	463b      	mov	r3, r7
 800799e:	4622      	mov	r2, r4
 80079a0:	4649      	mov	r1, r9
 80079a2:	4640      	mov	r0, r8
 80079a4:	f7ff ffa6 	bl	80078f4 <swapfunc>
 80079a8:	e013      	b.n	80079d2 <qsort+0x6e>
 80079aa:	46d8      	mov	r8, fp
 80079ac:	e012      	b.n	80079d4 <qsort+0x70>
 80079ae:	eba8 0904 	sub.w	r9, r8, r4
 80079b2:	4641      	mov	r1, r8
 80079b4:	4648      	mov	r0, r9
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	4798      	blx	r3
 80079ba:	2800      	cmp	r0, #0
 80079bc:	dd0c      	ble.n	80079d8 <qsort+0x74>
 80079be:	2f00      	cmp	r7, #0
 80079c0:	d1ec      	bne.n	800799c <qsort+0x38>
 80079c2:	f8d8 3000 	ldr.w	r3, [r8]
 80079c6:	f8d9 2000 	ldr.w	r2, [r9]
 80079ca:	f8c8 2000 	str.w	r2, [r8]
 80079ce:	f8c9 3000 	str.w	r3, [r9]
 80079d2:	46c8      	mov	r8, r9
 80079d4:	4546      	cmp	r6, r8
 80079d6:	d3ea      	bcc.n	80079ae <qsort+0x4a>
 80079d8:	44a3      	add	fp, r4
 80079da:	e7d8      	b.n	800798e <qsort+0x2a>
 80079dc:	ea4f 085a 	mov.w	r8, sl, lsr #1
 80079e0:	f10a 35ff 	add.w	r5, sl, #4294967295
 80079e4:	f1ba 0f07 	cmp.w	sl, #7
 80079e8:	fb04 6808 	mla	r8, r4, r8, r6
 80079ec:	fb04 6505 	mla	r5, r4, r5, r6
 80079f0:	d027      	beq.n	8007a42 <qsort+0xde>
 80079f2:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 80079f6:	d94a      	bls.n	8007a8e <qsort+0x12a>
 80079f8:	ea4f 09da 	mov.w	r9, sl, lsr #3
 80079fc:	fb04 f909 	mul.w	r9, r4, r9
 8007a00:	eb06 0109 	add.w	r1, r6, r9
 8007a04:	eb01 0209 	add.w	r2, r1, r9
 8007a08:	9b00      	ldr	r3, [sp, #0]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ff8b 	bl	8007926 <med3.isra.1>
 8007a10:	eb08 0209 	add.w	r2, r8, r9
 8007a14:	4641      	mov	r1, r8
 8007a16:	9001      	str	r0, [sp, #4]
 8007a18:	9b00      	ldr	r3, [sp, #0]
 8007a1a:	eba8 0009 	sub.w	r0, r8, r9
 8007a1e:	f7ff ff82 	bl	8007926 <med3.isra.1>
 8007a22:	4680      	mov	r8, r0
 8007a24:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 8007a28:	462a      	mov	r2, r5
 8007a2a:	9b00      	ldr	r3, [sp, #0]
 8007a2c:	eb00 0109 	add.w	r1, r0, r9
 8007a30:	f7ff ff79 	bl	8007926 <med3.isra.1>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4641      	mov	r1, r8
 8007a38:	9b00      	ldr	r3, [sp, #0]
 8007a3a:	9801      	ldr	r0, [sp, #4]
 8007a3c:	f7ff ff73 	bl	8007926 <med3.isra.1>
 8007a40:	4680      	mov	r8, r0
 8007a42:	bb3f      	cbnz	r7, 8007a94 <qsort+0x130>
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	f8d8 2000 	ldr.w	r2, [r8]
 8007a4a:	6032      	str	r2, [r6, #0]
 8007a4c:	f8c8 3000 	str.w	r3, [r8]
 8007a50:	46d8      	mov	r8, fp
 8007a52:	46a9      	mov	r9, r5
 8007a54:	f8cd b004 	str.w	fp, [sp, #4]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	45a8      	cmp	r8, r5
 8007a5c:	d857      	bhi.n	8007b0e <qsort+0x1aa>
 8007a5e:	9302      	str	r3, [sp, #8]
 8007a60:	4631      	mov	r1, r6
 8007a62:	9b00      	ldr	r3, [sp, #0]
 8007a64:	4640      	mov	r0, r8
 8007a66:	4798      	blx	r3
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	9b02      	ldr	r3, [sp, #8]
 8007a6c:	dc2e      	bgt.n	8007acc <qsort+0x168>
 8007a6e:	d10c      	bne.n	8007a8a <qsort+0x126>
 8007a70:	b9bf      	cbnz	r7, 8007aa2 <qsort+0x13e>
 8007a72:	9b01      	ldr	r3, [sp, #4]
 8007a74:	9901      	ldr	r1, [sp, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f8d8 2000 	ldr.w	r2, [r8]
 8007a7c:	600a      	str	r2, [r1, #0]
 8007a7e:	f8c8 3000 	str.w	r3, [r8]
 8007a82:	9b01      	ldr	r3, [sp, #4]
 8007a84:	4423      	add	r3, r4
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	44a0      	add	r8, r4
 8007a8c:	e7e5      	b.n	8007a5a <qsort+0xf6>
 8007a8e:	462a      	mov	r2, r5
 8007a90:	9601      	str	r6, [sp, #4]
 8007a92:	e7d0      	b.n	8007a36 <qsort+0xd2>
 8007a94:	463b      	mov	r3, r7
 8007a96:	4622      	mov	r2, r4
 8007a98:	4641      	mov	r1, r8
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff ff2a 	bl	80078f4 <swapfunc>
 8007aa0:	e7d6      	b.n	8007a50 <qsort+0xec>
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	9801      	ldr	r0, [sp, #4]
 8007aaa:	f7ff ff23 	bl	80078f4 <swapfunc>
 8007aae:	e7e8      	b.n	8007a82 <qsort+0x11e>
 8007ab0:	d109      	bne.n	8007ac6 <qsort+0x162>
 8007ab2:	b9f7      	cbnz	r7, 8007af2 <qsort+0x18e>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	f8d9 2000 	ldr.w	r2, [r9]
 8007aba:	602a      	str	r2, [r5, #0]
 8007abc:	f8c9 3000 	str.w	r3, [r9]
 8007ac0:	eba9 0904 	sub.w	r9, r9, r4
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	9d02      	ldr	r5, [sp, #8]
 8007ac8:	45a8      	cmp	r8, r5
 8007aca:	d820      	bhi.n	8007b0e <qsort+0x1aa>
 8007acc:	9303      	str	r3, [sp, #12]
 8007ace:	4631      	mov	r1, r6
 8007ad0:	9b00      	ldr	r3, [sp, #0]
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	4798      	blx	r3
 8007ad6:	1b2b      	subs	r3, r5, r4
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	9302      	str	r3, [sp, #8]
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	dae7      	bge.n	8007ab0 <qsort+0x14c>
 8007ae0:	b977      	cbnz	r7, 8007b00 <qsort+0x19c>
 8007ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae6:	682a      	ldr	r2, [r5, #0]
 8007ae8:	f8c8 2000 	str.w	r2, [r8]
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	9d02      	ldr	r5, [sp, #8]
 8007af0:	e7ca      	b.n	8007a88 <qsort+0x124>
 8007af2:	463b      	mov	r3, r7
 8007af4:	4622      	mov	r2, r4
 8007af6:	4649      	mov	r1, r9
 8007af8:	4628      	mov	r0, r5
 8007afa:	f7ff fefb 	bl	80078f4 <swapfunc>
 8007afe:	e7df      	b.n	8007ac0 <qsort+0x15c>
 8007b00:	463b      	mov	r3, r7
 8007b02:	4622      	mov	r2, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	4640      	mov	r0, r8
 8007b08:	f7ff fef4 	bl	80078f4 <swapfunc>
 8007b0c:	e7ef      	b.n	8007aee <qsort+0x18a>
 8007b0e:	fb04 6a0a 	mla	sl, r4, sl, r6
 8007b12:	bb03      	cbnz	r3, 8007b56 <qsort+0x1f2>
 8007b14:	45d3      	cmp	fp, sl
 8007b16:	f4bf af3c 	bcs.w	8007992 <qsort+0x2e>
 8007b1a:	465d      	mov	r5, fp
 8007b1c:	e017      	b.n	8007b4e <qsort+0x1ea>
 8007b1e:	463b      	mov	r3, r7
 8007b20:	4622      	mov	r2, r4
 8007b22:	4641      	mov	r1, r8
 8007b24:	4628      	mov	r0, r5
 8007b26:	f7ff fee5 	bl	80078f4 <swapfunc>
 8007b2a:	e00f      	b.n	8007b4c <qsort+0x1e8>
 8007b2c:	eba5 0804 	sub.w	r8, r5, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	4640      	mov	r0, r8
 8007b34:	9b00      	ldr	r3, [sp, #0]
 8007b36:	4798      	blx	r3
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dd0a      	ble.n	8007b52 <qsort+0x1ee>
 8007b3c:	2f00      	cmp	r7, #0
 8007b3e:	d1ee      	bne.n	8007b1e <qsort+0x1ba>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	f8d8 2000 	ldr.w	r2, [r8]
 8007b46:	602a      	str	r2, [r5, #0]
 8007b48:	f8c8 3000 	str.w	r3, [r8]
 8007b4c:	4645      	mov	r5, r8
 8007b4e:	42ae      	cmp	r6, r5
 8007b50:	d3ec      	bcc.n	8007b2c <qsort+0x1c8>
 8007b52:	44a3      	add	fp, r4
 8007b54:	e7de      	b.n	8007b14 <qsort+0x1b0>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	eba8 0b03 	sub.w	fp, r8, r3
 8007b5c:	1b9a      	subs	r2, r3, r6
 8007b5e:	455a      	cmp	r2, fp
 8007b60:	bfa8      	it	ge
 8007b62:	465a      	movge	r2, fp
 8007b64:	b12a      	cbz	r2, 8007b72 <qsort+0x20e>
 8007b66:	463b      	mov	r3, r7
 8007b68:	eba8 0102 	sub.w	r1, r8, r2
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff fec1 	bl	80078f4 <swapfunc>
 8007b72:	ebaa 0209 	sub.w	r2, sl, r9
 8007b76:	eba9 0505 	sub.w	r5, r9, r5
 8007b7a:	1b12      	subs	r2, r2, r4
 8007b7c:	42aa      	cmp	r2, r5
 8007b7e:	bf28      	it	cs
 8007b80:	462a      	movcs	r2, r5
 8007b82:	b12a      	cbz	r2, 8007b90 <qsort+0x22c>
 8007b84:	463b      	mov	r3, r7
 8007b86:	ebaa 0102 	sub.w	r1, sl, r2
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f7ff feb2 	bl	80078f4 <swapfunc>
 8007b90:	455c      	cmp	r4, fp
 8007b92:	d206      	bcs.n	8007ba2 <qsort+0x23e>
 8007b94:	fbbb f1f4 	udiv	r1, fp, r4
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7ff fee1 	bl	8007964 <qsort>
 8007ba2:	42a5      	cmp	r5, r4
 8007ba4:	f67f aef5 	bls.w	8007992 <qsort+0x2e>
 8007ba8:	ebaa 0605 	sub.w	r6, sl, r5
 8007bac:	fbb5 faf4 	udiv	sl, r5, r4
 8007bb0:	e6df      	b.n	8007972 <qsort+0xe>

08007bb2 <setbuf>:
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb8:	bf0c      	ite	eq
 8007bba:	2202      	moveq	r2, #2
 8007bbc:	2200      	movne	r2, #0
 8007bbe:	f000 b801 	b.w	8007bc4 <setvbuf>
	...

08007bc4 <setvbuf>:
 8007bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	461d      	mov	r5, r3
 8007bca:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <setvbuf+0x14c>)
 8007bcc:	681e      	ldr	r6, [r3, #0]
 8007bce:	4604      	mov	r4, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	4690      	mov	r8, r2
 8007bd4:	b126      	cbz	r6, 8007be0 <setvbuf+0x1c>
 8007bd6:	69b3      	ldr	r3, [r6, #24]
 8007bd8:	b913      	cbnz	r3, 8007be0 <setvbuf+0x1c>
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f001 f894 	bl	8008d08 <__sinit>
 8007be0:	4b4c      	ldr	r3, [pc, #304]	; (8007d14 <setvbuf+0x150>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d152      	bne.n	8007c8c <setvbuf+0xc8>
 8007be6:	6874      	ldr	r4, [r6, #4]
 8007be8:	f1b8 0f02 	cmp.w	r8, #2
 8007bec:	d006      	beq.n	8007bfc <setvbuf+0x38>
 8007bee:	f1b8 0f01 	cmp.w	r8, #1
 8007bf2:	f200 8089 	bhi.w	8007d08 <setvbuf+0x144>
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	f2c0 8086 	blt.w	8007d08 <setvbuf+0x144>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f001 f818 	bl	8008c34 <_fflush_r>
 8007c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c06:	b141      	cbz	r1, 8007c1a <setvbuf+0x56>
 8007c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c0c:	4299      	cmp	r1, r3
 8007c0e:	d002      	beq.n	8007c16 <setvbuf+0x52>
 8007c10:	4630      	mov	r0, r6
 8007c12:	f001 fc71 	bl	80094f8 <_free_r>
 8007c16:	2300      	movs	r3, #0
 8007c18:	6363      	str	r3, [r4, #52]	; 0x34
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61a3      	str	r3, [r4, #24]
 8007c1e:	6063      	str	r3, [r4, #4]
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	061b      	lsls	r3, r3, #24
 8007c24:	d503      	bpl.n	8007c2e <setvbuf+0x6a>
 8007c26:	6921      	ldr	r1, [r4, #16]
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f001 fc65 	bl	80094f8 <_free_r>
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007c34:	f023 0303 	bic.w	r3, r3, #3
 8007c38:	f1b8 0f02 	cmp.w	r8, #2
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	d05d      	beq.n	8007cfc <setvbuf+0x138>
 8007c40:	ab01      	add	r3, sp, #4
 8007c42:	466a      	mov	r2, sp
 8007c44:	4621      	mov	r1, r4
 8007c46:	4630      	mov	r0, r6
 8007c48:	f001 f8f6 	bl	8008e38 <__swhatbuf_r>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	4318      	orrs	r0, r3
 8007c50:	81a0      	strh	r0, [r4, #12]
 8007c52:	bb2d      	cbnz	r5, 8007ca0 <setvbuf+0xdc>
 8007c54:	9d00      	ldr	r5, [sp, #0]
 8007c56:	4628      	mov	r0, r5
 8007c58:	f001 f952 	bl	8008f00 <malloc>
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d14e      	bne.n	8007d00 <setvbuf+0x13c>
 8007c62:	f8dd 9000 	ldr.w	r9, [sp]
 8007c66:	45a9      	cmp	r9, r5
 8007c68:	d13c      	bne.n	8007ce4 <setvbuf+0x120>
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	f043 0302 	orr.w	r3, r3, #2
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	2300      	movs	r3, #0
 8007c78:	60a3      	str	r3, [r4, #8]
 8007c7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	2301      	movs	r3, #1
 8007c84:	6163      	str	r3, [r4, #20]
 8007c86:	b003      	add	sp, #12
 8007c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c8c:	4b22      	ldr	r3, [pc, #136]	; (8007d18 <setvbuf+0x154>)
 8007c8e:	429c      	cmp	r4, r3
 8007c90:	d101      	bne.n	8007c96 <setvbuf+0xd2>
 8007c92:	68b4      	ldr	r4, [r6, #8]
 8007c94:	e7a8      	b.n	8007be8 <setvbuf+0x24>
 8007c96:	4b21      	ldr	r3, [pc, #132]	; (8007d1c <setvbuf+0x158>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	bf08      	it	eq
 8007c9c:	68f4      	ldreq	r4, [r6, #12]
 8007c9e:	e7a3      	b.n	8007be8 <setvbuf+0x24>
 8007ca0:	2f00      	cmp	r7, #0
 8007ca2:	d0d8      	beq.n	8007c56 <setvbuf+0x92>
 8007ca4:	69b3      	ldr	r3, [r6, #24]
 8007ca6:	b913      	cbnz	r3, 8007cae <setvbuf+0xea>
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f001 f82d 	bl	8008d08 <__sinit>
 8007cae:	f1b8 0f01 	cmp.w	r8, #1
 8007cb2:	bf08      	it	eq
 8007cb4:	89a3      	ldrheq	r3, [r4, #12]
 8007cb6:	6027      	str	r7, [r4, #0]
 8007cb8:	bf04      	itt	eq
 8007cba:	f043 0301 	orreq.w	r3, r3, #1
 8007cbe:	81a3      	strheq	r3, [r4, #12]
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f013 0008 	ands.w	r0, r3, #8
 8007cc6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007cca:	d01b      	beq.n	8007d04 <setvbuf+0x140>
 8007ccc:	f013 0001 	ands.w	r0, r3, #1
 8007cd0:	bf18      	it	ne
 8007cd2:	426d      	negne	r5, r5
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	bf1d      	ittte	ne
 8007cda:	60a3      	strne	r3, [r4, #8]
 8007cdc:	61a5      	strne	r5, [r4, #24]
 8007cde:	4618      	movne	r0, r3
 8007ce0:	60a5      	streq	r5, [r4, #8]
 8007ce2:	e7d0      	b.n	8007c86 <setvbuf+0xc2>
 8007ce4:	4648      	mov	r0, r9
 8007ce6:	f001 f90b 	bl	8008f00 <malloc>
 8007cea:	4607      	mov	r7, r0
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d0bc      	beq.n	8007c6a <setvbuf+0xa6>
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	464d      	mov	r5, r9
 8007cfa:	e7d3      	b.n	8007ca4 <setvbuf+0xe0>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e7b6      	b.n	8007c6e <setvbuf+0xaa>
 8007d00:	46a9      	mov	r9, r5
 8007d02:	e7f5      	b.n	8007cf0 <setvbuf+0x12c>
 8007d04:	60a0      	str	r0, [r4, #8]
 8007d06:	e7be      	b.n	8007c86 <setvbuf+0xc2>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	e7bb      	b.n	8007c86 <setvbuf+0xc2>
 8007d0e:	bf00      	nop
 8007d10:	2000000c 	.word	0x2000000c
 8007d14:	08009ba8 	.word	0x08009ba8
 8007d18:	08009bc8 	.word	0x08009bc8
 8007d1c:	08009b88 	.word	0x08009b88

08007d20 <__swbuf_r>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	460e      	mov	r6, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	4605      	mov	r5, r0
 8007d28:	b118      	cbz	r0, 8007d32 <__swbuf_r+0x12>
 8007d2a:	6983      	ldr	r3, [r0, #24]
 8007d2c:	b90b      	cbnz	r3, 8007d32 <__swbuf_r+0x12>
 8007d2e:	f000 ffeb 	bl	8008d08 <__sinit>
 8007d32:	4b21      	ldr	r3, [pc, #132]	; (8007db8 <__swbuf_r+0x98>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d12a      	bne.n	8007d8e <__swbuf_r+0x6e>
 8007d38:	686c      	ldr	r4, [r5, #4]
 8007d3a:	69a3      	ldr	r3, [r4, #24]
 8007d3c:	60a3      	str	r3, [r4, #8]
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	071a      	lsls	r2, r3, #28
 8007d42:	d52e      	bpl.n	8007da2 <__swbuf_r+0x82>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	b363      	cbz	r3, 8007da2 <__swbuf_r+0x82>
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	1ac0      	subs	r0, r0, r3
 8007d4e:	6963      	ldr	r3, [r4, #20]
 8007d50:	b2f6      	uxtb	r6, r6
 8007d52:	4283      	cmp	r3, r0
 8007d54:	4637      	mov	r7, r6
 8007d56:	dc04      	bgt.n	8007d62 <__swbuf_r+0x42>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 ff6a 	bl	8008c34 <_fflush_r>
 8007d60:	bb28      	cbnz	r0, 8007dae <__swbuf_r+0x8e>
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	60a3      	str	r3, [r4, #8]
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	701e      	strb	r6, [r3, #0]
 8007d70:	6963      	ldr	r3, [r4, #20]
 8007d72:	3001      	adds	r0, #1
 8007d74:	4283      	cmp	r3, r0
 8007d76:	d004      	beq.n	8007d82 <__swbuf_r+0x62>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	07db      	lsls	r3, r3, #31
 8007d7c:	d519      	bpl.n	8007db2 <__swbuf_r+0x92>
 8007d7e:	2e0a      	cmp	r6, #10
 8007d80:	d117      	bne.n	8007db2 <__swbuf_r+0x92>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 ff55 	bl	8008c34 <_fflush_r>
 8007d8a:	b190      	cbz	r0, 8007db2 <__swbuf_r+0x92>
 8007d8c:	e00f      	b.n	8007dae <__swbuf_r+0x8e>
 8007d8e:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <__swbuf_r+0x9c>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d101      	bne.n	8007d98 <__swbuf_r+0x78>
 8007d94:	68ac      	ldr	r4, [r5, #8]
 8007d96:	e7d0      	b.n	8007d3a <__swbuf_r+0x1a>
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <__swbuf_r+0xa0>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	bf08      	it	eq
 8007d9e:	68ec      	ldreq	r4, [r5, #12]
 8007da0:	e7cb      	b.n	8007d3a <__swbuf_r+0x1a>
 8007da2:	4621      	mov	r1, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 f80d 	bl	8007dc4 <__swsetup_r>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d0cc      	beq.n	8007d48 <__swbuf_r+0x28>
 8007dae:	f04f 37ff 	mov.w	r7, #4294967295
 8007db2:	4638      	mov	r0, r7
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db6:	bf00      	nop
 8007db8:	08009ba8 	.word	0x08009ba8
 8007dbc:	08009bc8 	.word	0x08009bc8
 8007dc0:	08009b88 	.word	0x08009b88

08007dc4 <__swsetup_r>:
 8007dc4:	4b32      	ldr	r3, [pc, #200]	; (8007e90 <__swsetup_r+0xcc>)
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	b125      	cbz	r5, 8007dda <__swsetup_r+0x16>
 8007dd0:	69ab      	ldr	r3, [r5, #24]
 8007dd2:	b913      	cbnz	r3, 8007dda <__swsetup_r+0x16>
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f000 ff97 	bl	8008d08 <__sinit>
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <__swsetup_r+0xd0>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	d10f      	bne.n	8007e00 <__swsetup_r+0x3c>
 8007de0:	686c      	ldr	r4, [r5, #4]
 8007de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	0715      	lsls	r5, r2, #28
 8007dea:	d42c      	bmi.n	8007e46 <__swsetup_r+0x82>
 8007dec:	06d0      	lsls	r0, r2, #27
 8007dee:	d411      	bmi.n	8007e14 <__swsetup_r+0x50>
 8007df0:	2209      	movs	r2, #9
 8007df2:	6032      	str	r2, [r6, #0]
 8007df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfe:	e03e      	b.n	8007e7e <__swsetup_r+0xba>
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <__swsetup_r+0xd4>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d101      	bne.n	8007e0a <__swsetup_r+0x46>
 8007e06:	68ac      	ldr	r4, [r5, #8]
 8007e08:	e7eb      	b.n	8007de2 <__swsetup_r+0x1e>
 8007e0a:	4b24      	ldr	r3, [pc, #144]	; (8007e9c <__swsetup_r+0xd8>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	bf08      	it	eq
 8007e10:	68ec      	ldreq	r4, [r5, #12]
 8007e12:	e7e6      	b.n	8007de2 <__swsetup_r+0x1e>
 8007e14:	0751      	lsls	r1, r2, #29
 8007e16:	d512      	bpl.n	8007e3e <__swsetup_r+0x7a>
 8007e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e1a:	b141      	cbz	r1, 8007e2e <__swsetup_r+0x6a>
 8007e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e20:	4299      	cmp	r1, r3
 8007e22:	d002      	beq.n	8007e2a <__swsetup_r+0x66>
 8007e24:	4630      	mov	r0, r6
 8007e26:	f001 fb67 	bl	80094f8 <_free_r>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	2300      	movs	r3, #0
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	f043 0308 	orr.w	r3, r3, #8
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	b94b      	cbnz	r3, 8007e5e <__swsetup_r+0x9a>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e54:	d003      	beq.n	8007e5e <__swsetup_r+0x9a>
 8007e56:	4621      	mov	r1, r4
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f001 f811 	bl	8008e80 <__smakebuf_r>
 8007e5e:	89a2      	ldrh	r2, [r4, #12]
 8007e60:	f012 0301 	ands.w	r3, r2, #1
 8007e64:	d00c      	beq.n	8007e80 <__swsetup_r+0xbc>
 8007e66:	2300      	movs	r3, #0
 8007e68:	60a3      	str	r3, [r4, #8]
 8007e6a:	6963      	ldr	r3, [r4, #20]
 8007e6c:	425b      	negs	r3, r3
 8007e6e:	61a3      	str	r3, [r4, #24]
 8007e70:	6923      	ldr	r3, [r4, #16]
 8007e72:	b953      	cbnz	r3, 8007e8a <__swsetup_r+0xc6>
 8007e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e7c:	d1ba      	bne.n	8007df4 <__swsetup_r+0x30>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	0792      	lsls	r2, r2, #30
 8007e82:	bf58      	it	pl
 8007e84:	6963      	ldrpl	r3, [r4, #20]
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	e7f2      	b.n	8007e70 <__swsetup_r+0xac>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e7f7      	b.n	8007e7e <__swsetup_r+0xba>
 8007e8e:	bf00      	nop
 8007e90:	2000000c 	.word	0x2000000c
 8007e94:	08009ba8 	.word	0x08009ba8
 8007e98:	08009bc8 	.word	0x08009bc8
 8007e9c:	08009b88 	.word	0x08009b88

08007ea0 <quorem>:
 8007ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	6903      	ldr	r3, [r0, #16]
 8007ea6:	690c      	ldr	r4, [r1, #16]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	4680      	mov	r8, r0
 8007eac:	f2c0 8082 	blt.w	8007fb4 <quorem+0x114>
 8007eb0:	3c01      	subs	r4, #1
 8007eb2:	f101 0714 	add.w	r7, r1, #20
 8007eb6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007eba:	f100 0614 	add.w	r6, r0, #20
 8007ebe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007ec2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007ec6:	eb06 030c 	add.w	r3, r6, ip
 8007eca:	3501      	adds	r5, #1
 8007ecc:	eb07 090c 	add.w	r9, r7, ip
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ed6:	b395      	cbz	r5, 8007f3e <quorem+0x9e>
 8007ed8:	f04f 0a00 	mov.w	sl, #0
 8007edc:	4638      	mov	r0, r7
 8007ede:	46b6      	mov	lr, r6
 8007ee0:	46d3      	mov	fp, sl
 8007ee2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ee6:	b293      	uxth	r3, r2
 8007ee8:	fb05 a303 	mla	r3, r5, r3, sl
 8007eec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	ebab 0303 	sub.w	r3, fp, r3
 8007ef6:	0c12      	lsrs	r2, r2, #16
 8007ef8:	f8de b000 	ldr.w	fp, [lr]
 8007efc:	fb05 a202 	mla	r2, r5, r2, sl
 8007f00:	fa13 f38b 	uxtah	r3, r3, fp
 8007f04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f08:	fa1f fb82 	uxth.w	fp, r2
 8007f0c:	f8de 2000 	ldr.w	r2, [lr]
 8007f10:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f1e:	4581      	cmp	r9, r0
 8007f20:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f24:	f84e 3b04 	str.w	r3, [lr], #4
 8007f28:	d2db      	bcs.n	8007ee2 <quorem+0x42>
 8007f2a:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f2e:	b933      	cbnz	r3, 8007f3e <quorem+0x9e>
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	3b04      	subs	r3, #4
 8007f34:	429e      	cmp	r6, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	d330      	bcc.n	8007f9c <quorem+0xfc>
 8007f3a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f3e:	4640      	mov	r0, r8
 8007f40:	f001 fa06 	bl	8009350 <__mcmp>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	db25      	blt.n	8007f94 <quorem+0xf4>
 8007f48:	3501      	adds	r5, #1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f04f 0c00 	mov.w	ip, #0
 8007f50:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f54:	f8d0 e000 	ldr.w	lr, [r0]
 8007f58:	b293      	uxth	r3, r2
 8007f5a:	ebac 0303 	sub.w	r3, ip, r3
 8007f5e:	0c12      	lsrs	r2, r2, #16
 8007f60:	fa13 f38e 	uxtah	r3, r3, lr
 8007f64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f72:	45b9      	cmp	r9, r7
 8007f74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f78:	f840 3b04 	str.w	r3, [r0], #4
 8007f7c:	d2e8      	bcs.n	8007f50 <quorem+0xb0>
 8007f7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f86:	b92a      	cbnz	r2, 8007f94 <quorem+0xf4>
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	429e      	cmp	r6, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	d30b      	bcc.n	8007fa8 <quorem+0x108>
 8007f90:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f94:	4628      	mov	r0, r5
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	3b04      	subs	r3, #4
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d1ca      	bne.n	8007f3a <quorem+0x9a>
 8007fa4:	3c01      	subs	r4, #1
 8007fa6:	e7c5      	b.n	8007f34 <quorem+0x94>
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	3b04      	subs	r3, #4
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	d1ef      	bne.n	8007f90 <quorem+0xf0>
 8007fb0:	3c01      	subs	r4, #1
 8007fb2:	e7ea      	b.n	8007f8a <quorem+0xea>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e7ee      	b.n	8007f96 <quorem+0xf6>

08007fb8 <_dtoa_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	ec57 6b10 	vmov	r6, r7, d0
 8007fc0:	b097      	sub	sp, #92	; 0x5c
 8007fc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fc4:	9106      	str	r1, [sp, #24]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fca:	9312      	str	r3, [sp, #72]	; 0x48
 8007fcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fd0:	e9cd 6700 	strd	r6, r7, [sp]
 8007fd4:	b93d      	cbnz	r5, 8007fe6 <_dtoa_r+0x2e>
 8007fd6:	2010      	movs	r0, #16
 8007fd8:	f000 ff92 	bl	8008f00 <malloc>
 8007fdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007fde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fe2:	6005      	str	r5, [r0, #0]
 8007fe4:	60c5      	str	r5, [r0, #12]
 8007fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe8:	6819      	ldr	r1, [r3, #0]
 8007fea:	b151      	cbz	r1, 8008002 <_dtoa_r+0x4a>
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	604a      	str	r2, [r1, #4]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4093      	lsls	r3, r2
 8007ff4:	608b      	str	r3, [r1, #8]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 ffc9 	bl	8008f8e <_Bfree>
 8007ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	1e3b      	subs	r3, r7, #0
 8008004:	bfbb      	ittet	lt
 8008006:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800800a:	9301      	strlt	r3, [sp, #4]
 800800c:	2300      	movge	r3, #0
 800800e:	2201      	movlt	r2, #1
 8008010:	bfac      	ite	ge
 8008012:	f8c8 3000 	strge.w	r3, [r8]
 8008016:	f8c8 2000 	strlt.w	r2, [r8]
 800801a:	4baf      	ldr	r3, [pc, #700]	; (80082d8 <_dtoa_r+0x320>)
 800801c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008020:	ea33 0308 	bics.w	r3, r3, r8
 8008024:	d114      	bne.n	8008050 <_dtoa_r+0x98>
 8008026:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008028:	f242 730f 	movw	r3, #9999	; 0x270f
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	9b00      	ldr	r3, [sp, #0]
 8008030:	b923      	cbnz	r3, 800803c <_dtoa_r+0x84>
 8008032:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008036:	2800      	cmp	r0, #0
 8008038:	f000 8542 	beq.w	8008ac0 <_dtoa_r+0xb08>
 800803c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800803e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80082ec <_dtoa_r+0x334>
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8544 	beq.w	8008ad0 <_dtoa_r+0xb18>
 8008048:	f10b 0303 	add.w	r3, fp, #3
 800804c:	f000 bd3e 	b.w	8008acc <_dtoa_r+0xb14>
 8008050:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008054:	2200      	movs	r2, #0
 8008056:	2300      	movs	r3, #0
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 8008060:	4681      	mov	r9, r0
 8008062:	b168      	cbz	r0, 8008080 <_dtoa_r+0xc8>
 8008064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008066:	2301      	movs	r3, #1
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8524 	beq.w	8008aba <_dtoa_r+0xb02>
 8008072:	4b9a      	ldr	r3, [pc, #616]	; (80082dc <_dtoa_r+0x324>)
 8008074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008076:	f103 3bff 	add.w	fp, r3, #4294967295
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	f000 bd28 	b.w	8008ad0 <_dtoa_r+0xb18>
 8008080:	aa14      	add	r2, sp, #80	; 0x50
 8008082:	a915      	add	r1, sp, #84	; 0x54
 8008084:	ec47 6b10 	vmov	d0, r6, r7
 8008088:	4620      	mov	r0, r4
 800808a:	f001 f9d8 	bl	800943e <__d2b>
 800808e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008092:	9004      	str	r0, [sp, #16]
 8008094:	2d00      	cmp	r5, #0
 8008096:	d07c      	beq.n	8008192 <_dtoa_r+0x1da>
 8008098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800809c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80080a0:	46b2      	mov	sl, r6
 80080a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80080a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80080ae:	2200      	movs	r2, #0
 80080b0:	4b8b      	ldr	r3, [pc, #556]	; (80082e0 <_dtoa_r+0x328>)
 80080b2:	4650      	mov	r0, sl
 80080b4:	4659      	mov	r1, fp
 80080b6:	f7f8 f8e7 	bl	8000288 <__aeabi_dsub>
 80080ba:	a381      	add	r3, pc, #516	; (adr r3, 80082c0 <_dtoa_r+0x308>)
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	a380      	add	r3, pc, #512	; (adr r3, 80082c8 <_dtoa_r+0x310>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 f8df 	bl	800028c <__adddf3>
 80080ce:	4606      	mov	r6, r0
 80080d0:	4628      	mov	r0, r5
 80080d2:	460f      	mov	r7, r1
 80080d4:	f7f8 fa26 	bl	8000524 <__aeabi_i2d>
 80080d8:	a37d      	add	r3, pc, #500	; (adr r3, 80082d0 <_dtoa_r+0x318>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f7f8 fa8b 	bl	80005f8 <__aeabi_dmul>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 f8cf 	bl	800028c <__adddf3>
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	f7f8 fd31 	bl	8000b58 <__aeabi_d2iz>
 80080f6:	2200      	movs	r2, #0
 80080f8:	4682      	mov	sl, r0
 80080fa:	2300      	movs	r3, #0
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 fcec 	bl	8000adc <__aeabi_dcmplt>
 8008104:	b148      	cbz	r0, 800811a <_dtoa_r+0x162>
 8008106:	4650      	mov	r0, sl
 8008108:	f7f8 fa0c 	bl	8000524 <__aeabi_i2d>
 800810c:	4632      	mov	r2, r6
 800810e:	463b      	mov	r3, r7
 8008110:	f7f8 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008114:	b908      	cbnz	r0, 800811a <_dtoa_r+0x162>
 8008116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800811a:	f1ba 0f16 	cmp.w	sl, #22
 800811e:	d859      	bhi.n	80081d4 <_dtoa_r+0x21c>
 8008120:	4970      	ldr	r1, [pc, #448]	; (80082e4 <_dtoa_r+0x32c>)
 8008122:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800812a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800812e:	f7f8 fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 8008132:	2800      	cmp	r0, #0
 8008134:	d050      	beq.n	80081d8 <_dtoa_r+0x220>
 8008136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800813a:	2300      	movs	r3, #0
 800813c:	930f      	str	r3, [sp, #60]	; 0x3c
 800813e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008140:	1b5d      	subs	r5, r3, r5
 8008142:	f1b5 0801 	subs.w	r8, r5, #1
 8008146:	bf49      	itett	mi
 8008148:	f1c5 0301 	rsbmi	r3, r5, #1
 800814c:	2300      	movpl	r3, #0
 800814e:	9305      	strmi	r3, [sp, #20]
 8008150:	f04f 0800 	movmi.w	r8, #0
 8008154:	bf58      	it	pl
 8008156:	9305      	strpl	r3, [sp, #20]
 8008158:	f1ba 0f00 	cmp.w	sl, #0
 800815c:	db3e      	blt.n	80081dc <_dtoa_r+0x224>
 800815e:	2300      	movs	r3, #0
 8008160:	44d0      	add	r8, sl
 8008162:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	2b09      	cmp	r3, #9
 800816c:	f200 8090 	bhi.w	8008290 <_dtoa_r+0x2d8>
 8008170:	2b05      	cmp	r3, #5
 8008172:	bfc4      	itt	gt
 8008174:	3b04      	subgt	r3, #4
 8008176:	9306      	strgt	r3, [sp, #24]
 8008178:	9b06      	ldr	r3, [sp, #24]
 800817a:	f1a3 0302 	sub.w	r3, r3, #2
 800817e:	bfcc      	ite	gt
 8008180:	2500      	movgt	r5, #0
 8008182:	2501      	movle	r5, #1
 8008184:	2b03      	cmp	r3, #3
 8008186:	f200 808f 	bhi.w	80082a8 <_dtoa_r+0x2f0>
 800818a:	e8df f003 	tbb	[pc, r3]
 800818e:	7f7d      	.short	0x7f7d
 8008190:	7131      	.short	0x7131
 8008192:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008196:	441d      	add	r5, r3
 8008198:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800819c:	2820      	cmp	r0, #32
 800819e:	dd13      	ble.n	80081c8 <_dtoa_r+0x210>
 80081a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	fa08 f800 	lsl.w	r8, r8, r0
 80081aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80081ae:	fa23 f000 	lsr.w	r0, r3, r0
 80081b2:	ea48 0000 	orr.w	r0, r8, r0
 80081b6:	f7f8 f9a5 	bl	8000504 <__aeabi_ui2d>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4682      	mov	sl, r0
 80081be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80081c2:	3d01      	subs	r5, #1
 80081c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80081c6:	e772      	b.n	80080ae <_dtoa_r+0xf6>
 80081c8:	9b00      	ldr	r3, [sp, #0]
 80081ca:	f1c0 0020 	rsb	r0, r0, #32
 80081ce:	fa03 f000 	lsl.w	r0, r3, r0
 80081d2:	e7f0      	b.n	80081b6 <_dtoa_r+0x1fe>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e7b1      	b.n	800813c <_dtoa_r+0x184>
 80081d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80081da:	e7b0      	b.n	800813e <_dtoa_r+0x186>
 80081dc:	9b05      	ldr	r3, [sp, #20]
 80081de:	eba3 030a 	sub.w	r3, r3, sl
 80081e2:	9305      	str	r3, [sp, #20]
 80081e4:	f1ca 0300 	rsb	r3, sl, #0
 80081e8:	9307      	str	r3, [sp, #28]
 80081ea:	2300      	movs	r3, #0
 80081ec:	930e      	str	r3, [sp, #56]	; 0x38
 80081ee:	e7bb      	b.n	8008168 <_dtoa_r+0x1b0>
 80081f0:	2301      	movs	r3, #1
 80081f2:	930a      	str	r3, [sp, #40]	; 0x28
 80081f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd59      	ble.n	80082ae <_dtoa_r+0x2f6>
 80081fa:	9302      	str	r3, [sp, #8]
 80081fc:	4699      	mov	r9, r3
 80081fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008200:	2200      	movs	r2, #0
 8008202:	6072      	str	r2, [r6, #4]
 8008204:	2204      	movs	r2, #4
 8008206:	f102 0014 	add.w	r0, r2, #20
 800820a:	4298      	cmp	r0, r3
 800820c:	6871      	ldr	r1, [r6, #4]
 800820e:	d953      	bls.n	80082b8 <_dtoa_r+0x300>
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fe88 	bl	8008f26 <_Balloc>
 8008216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008218:	6030      	str	r0, [r6, #0]
 800821a:	f1b9 0f0e 	cmp.w	r9, #14
 800821e:	f8d3 b000 	ldr.w	fp, [r3]
 8008222:	f200 80e6 	bhi.w	80083f2 <_dtoa_r+0x43a>
 8008226:	2d00      	cmp	r5, #0
 8008228:	f000 80e3 	beq.w	80083f2 <_dtoa_r+0x43a>
 800822c:	ed9d 7b00 	vldr	d7, [sp]
 8008230:	f1ba 0f00 	cmp.w	sl, #0
 8008234:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008238:	dd74      	ble.n	8008324 <_dtoa_r+0x36c>
 800823a:	4a2a      	ldr	r2, [pc, #168]	; (80082e4 <_dtoa_r+0x32c>)
 800823c:	f00a 030f 	and.w	r3, sl, #15
 8008240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008244:	ed93 7b00 	vldr	d7, [r3]
 8008248:	ea4f 162a 	mov.w	r6, sl, asr #4
 800824c:	06f0      	lsls	r0, r6, #27
 800824e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008252:	d565      	bpl.n	8008320 <_dtoa_r+0x368>
 8008254:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <_dtoa_r+0x330>)
 8008256:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800825a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800825e:	f7f8 faf5 	bl	800084c <__aeabi_ddiv>
 8008262:	e9cd 0100 	strd	r0, r1, [sp]
 8008266:	f006 060f 	and.w	r6, r6, #15
 800826a:	2503      	movs	r5, #3
 800826c:	4f1e      	ldr	r7, [pc, #120]	; (80082e8 <_dtoa_r+0x330>)
 800826e:	e04c      	b.n	800830a <_dtoa_r+0x352>
 8008270:	2301      	movs	r3, #1
 8008272:	930a      	str	r3, [sp, #40]	; 0x28
 8008274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008276:	4453      	add	r3, sl
 8008278:	f103 0901 	add.w	r9, r3, #1
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	464b      	mov	r3, r9
 8008280:	2b01      	cmp	r3, #1
 8008282:	bfb8      	it	lt
 8008284:	2301      	movlt	r3, #1
 8008286:	e7ba      	b.n	80081fe <_dtoa_r+0x246>
 8008288:	2300      	movs	r3, #0
 800828a:	e7b2      	b.n	80081f2 <_dtoa_r+0x23a>
 800828c:	2300      	movs	r3, #0
 800828e:	e7f0      	b.n	8008272 <_dtoa_r+0x2ba>
 8008290:	2501      	movs	r5, #1
 8008292:	2300      	movs	r3, #0
 8008294:	9306      	str	r3, [sp, #24]
 8008296:	950a      	str	r5, [sp, #40]	; 0x28
 8008298:	f04f 33ff 	mov.w	r3, #4294967295
 800829c:	9302      	str	r3, [sp, #8]
 800829e:	4699      	mov	r9, r3
 80082a0:	2200      	movs	r2, #0
 80082a2:	2312      	movs	r3, #18
 80082a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80082a6:	e7aa      	b.n	80081fe <_dtoa_r+0x246>
 80082a8:	2301      	movs	r3, #1
 80082aa:	930a      	str	r3, [sp, #40]	; 0x28
 80082ac:	e7f4      	b.n	8008298 <_dtoa_r+0x2e0>
 80082ae:	2301      	movs	r3, #1
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	4699      	mov	r9, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	e7f5      	b.n	80082a4 <_dtoa_r+0x2ec>
 80082b8:	3101      	adds	r1, #1
 80082ba:	6071      	str	r1, [r6, #4]
 80082bc:	0052      	lsls	r2, r2, #1
 80082be:	e7a2      	b.n	8008206 <_dtoa_r+0x24e>
 80082c0:	636f4361 	.word	0x636f4361
 80082c4:	3fd287a7 	.word	0x3fd287a7
 80082c8:	8b60c8b3 	.word	0x8b60c8b3
 80082cc:	3fc68a28 	.word	0x3fc68a28
 80082d0:	509f79fb 	.word	0x509f79fb
 80082d4:	3fd34413 	.word	0x3fd34413
 80082d8:	7ff00000 	.word	0x7ff00000
 80082dc:	08009b55 	.word	0x08009b55
 80082e0:	3ff80000 	.word	0x3ff80000
 80082e4:	08009c10 	.word	0x08009c10
 80082e8:	08009be8 	.word	0x08009be8
 80082ec:	08009b81 	.word	0x08009b81
 80082f0:	07f1      	lsls	r1, r6, #31
 80082f2:	d508      	bpl.n	8008306 <_dtoa_r+0x34e>
 80082f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fc:	f7f8 f97c 	bl	80005f8 <__aeabi_dmul>
 8008300:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008304:	3501      	adds	r5, #1
 8008306:	1076      	asrs	r6, r6, #1
 8008308:	3708      	adds	r7, #8
 800830a:	2e00      	cmp	r6, #0
 800830c:	d1f0      	bne.n	80082f0 <_dtoa_r+0x338>
 800830e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008316:	f7f8 fa99 	bl	800084c <__aeabi_ddiv>
 800831a:	e9cd 0100 	strd	r0, r1, [sp]
 800831e:	e01a      	b.n	8008356 <_dtoa_r+0x39e>
 8008320:	2502      	movs	r5, #2
 8008322:	e7a3      	b.n	800826c <_dtoa_r+0x2b4>
 8008324:	f000 80a0 	beq.w	8008468 <_dtoa_r+0x4b0>
 8008328:	f1ca 0600 	rsb	r6, sl, #0
 800832c:	4b9f      	ldr	r3, [pc, #636]	; (80085ac <_dtoa_r+0x5f4>)
 800832e:	4fa0      	ldr	r7, [pc, #640]	; (80085b0 <_dtoa_r+0x5f8>)
 8008330:	f006 020f 	and.w	r2, r6, #15
 8008334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008340:	f7f8 f95a 	bl	80005f8 <__aeabi_dmul>
 8008344:	e9cd 0100 	strd	r0, r1, [sp]
 8008348:	1136      	asrs	r6, r6, #4
 800834a:	2300      	movs	r3, #0
 800834c:	2502      	movs	r5, #2
 800834e:	2e00      	cmp	r6, #0
 8008350:	d17f      	bne.n	8008452 <_dtoa_r+0x49a>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e1      	bne.n	800831a <_dtoa_r+0x362>
 8008356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8087 	beq.w	800846c <_dtoa_r+0x4b4>
 800835e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008362:	2200      	movs	r2, #0
 8008364:	4b93      	ldr	r3, [pc, #588]	; (80085b4 <_dtoa_r+0x5fc>)
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f8 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800836e:	2800      	cmp	r0, #0
 8008370:	d07c      	beq.n	800846c <_dtoa_r+0x4b4>
 8008372:	f1b9 0f00 	cmp.w	r9, #0
 8008376:	d079      	beq.n	800846c <_dtoa_r+0x4b4>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd35      	ble.n	80083ea <_dtoa_r+0x432>
 800837e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008382:	9308      	str	r3, [sp, #32]
 8008384:	4639      	mov	r1, r7
 8008386:	2200      	movs	r2, #0
 8008388:	4b8b      	ldr	r3, [pc, #556]	; (80085b8 <_dtoa_r+0x600>)
 800838a:	4630      	mov	r0, r6
 800838c:	f7f8 f934 	bl	80005f8 <__aeabi_dmul>
 8008390:	e9cd 0100 	strd	r0, r1, [sp]
 8008394:	9f02      	ldr	r7, [sp, #8]
 8008396:	3501      	adds	r5, #1
 8008398:	4628      	mov	r0, r5
 800839a:	f7f8 f8c3 	bl	8000524 <__aeabi_i2d>
 800839e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083a2:	f7f8 f929 	bl	80005f8 <__aeabi_dmul>
 80083a6:	2200      	movs	r2, #0
 80083a8:	4b84      	ldr	r3, [pc, #528]	; (80085bc <_dtoa_r+0x604>)
 80083aa:	f7f7 ff6f 	bl	800028c <__adddf3>
 80083ae:	4605      	mov	r5, r0
 80083b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	d15d      	bne.n	8008474 <_dtoa_r+0x4bc>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4b81      	ldr	r3, [pc, #516]	; (80085c0 <_dtoa_r+0x608>)
 80083bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083c0:	f7f7 ff62 	bl	8000288 <__aeabi_dsub>
 80083c4:	462a      	mov	r2, r5
 80083c6:	4633      	mov	r3, r6
 80083c8:	e9cd 0100 	strd	r0, r1, [sp]
 80083cc:	f7f8 fba4 	bl	8000b18 <__aeabi_dcmpgt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f040 8288 	bne.w	80088e6 <_dtoa_r+0x92e>
 80083d6:	462a      	mov	r2, r5
 80083d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083e0:	f7f8 fb7c 	bl	8000adc <__aeabi_dcmplt>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f040 827c 	bne.w	80088e2 <_dtoa_r+0x92a>
 80083ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083ee:	e9cd 2300 	strd	r2, r3, [sp]
 80083f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f2c0 8150 	blt.w	800869a <_dtoa_r+0x6e2>
 80083fa:	f1ba 0f0e 	cmp.w	sl, #14
 80083fe:	f300 814c 	bgt.w	800869a <_dtoa_r+0x6e2>
 8008402:	4b6a      	ldr	r3, [pc, #424]	; (80085ac <_dtoa_r+0x5f4>)
 8008404:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008408:	ed93 7b00 	vldr	d7, [r3]
 800840c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008414:	f280 80d8 	bge.w	80085c8 <_dtoa_r+0x610>
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	f300 80d4 	bgt.w	80085c8 <_dtoa_r+0x610>
 8008420:	f040 825e 	bne.w	80088e0 <_dtoa_r+0x928>
 8008424:	2200      	movs	r2, #0
 8008426:	4b66      	ldr	r3, [pc, #408]	; (80085c0 <_dtoa_r+0x608>)
 8008428:	ec51 0b17 	vmov	r0, r1, d7
 800842c:	f7f8 f8e4 	bl	80005f8 <__aeabi_dmul>
 8008430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008434:	f7f8 fb66 	bl	8000b04 <__aeabi_dcmpge>
 8008438:	464f      	mov	r7, r9
 800843a:	464e      	mov	r6, r9
 800843c:	2800      	cmp	r0, #0
 800843e:	f040 8234 	bne.w	80088aa <_dtoa_r+0x8f2>
 8008442:	2331      	movs	r3, #49	; 0x31
 8008444:	f10b 0501 	add.w	r5, fp, #1
 8008448:	f88b 3000 	strb.w	r3, [fp]
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	e22f      	b.n	80088b2 <_dtoa_r+0x8fa>
 8008452:	07f2      	lsls	r2, r6, #31
 8008454:	d505      	bpl.n	8008462 <_dtoa_r+0x4aa>
 8008456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845a:	f7f8 f8cd 	bl	80005f8 <__aeabi_dmul>
 800845e:	3501      	adds	r5, #1
 8008460:	2301      	movs	r3, #1
 8008462:	1076      	asrs	r6, r6, #1
 8008464:	3708      	adds	r7, #8
 8008466:	e772      	b.n	800834e <_dtoa_r+0x396>
 8008468:	2502      	movs	r5, #2
 800846a:	e774      	b.n	8008356 <_dtoa_r+0x39e>
 800846c:	f8cd a020 	str.w	sl, [sp, #32]
 8008470:	464f      	mov	r7, r9
 8008472:	e791      	b.n	8008398 <_dtoa_r+0x3e0>
 8008474:	4b4d      	ldr	r3, [pc, #308]	; (80085ac <_dtoa_r+0x5f4>)
 8008476:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800847a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	d047      	beq.n	8008514 <_dtoa_r+0x55c>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	2000      	movs	r0, #0
 800848a:	494e      	ldr	r1, [pc, #312]	; (80085c4 <_dtoa_r+0x60c>)
 800848c:	f7f8 f9de 	bl	800084c <__aeabi_ddiv>
 8008490:	462a      	mov	r2, r5
 8008492:	4633      	mov	r3, r6
 8008494:	f7f7 fef8 	bl	8000288 <__aeabi_dsub>
 8008498:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800849c:	465d      	mov	r5, fp
 800849e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a2:	f7f8 fb59 	bl	8000b58 <__aeabi_d2iz>
 80084a6:	4606      	mov	r6, r0
 80084a8:	f7f8 f83c 	bl	8000524 <__aeabi_i2d>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b4:	f7f7 fee8 	bl	8000288 <__aeabi_dsub>
 80084b8:	3630      	adds	r6, #48	; 0x30
 80084ba:	f805 6b01 	strb.w	r6, [r5], #1
 80084be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084c2:	e9cd 0100 	strd	r0, r1, [sp]
 80084c6:	f7f8 fb09 	bl	8000adc <__aeabi_dcmplt>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d163      	bne.n	8008596 <_dtoa_r+0x5de>
 80084ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084d2:	2000      	movs	r0, #0
 80084d4:	4937      	ldr	r1, [pc, #220]	; (80085b4 <_dtoa_r+0x5fc>)
 80084d6:	f7f7 fed7 	bl	8000288 <__aeabi_dsub>
 80084da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084de:	f7f8 fafd 	bl	8000adc <__aeabi_dcmplt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f040 80b7 	bne.w	8008656 <_dtoa_r+0x69e>
 80084e8:	eba5 030b 	sub.w	r3, r5, fp
 80084ec:	429f      	cmp	r7, r3
 80084ee:	f77f af7c 	ble.w	80083ea <_dtoa_r+0x432>
 80084f2:	2200      	movs	r2, #0
 80084f4:	4b30      	ldr	r3, [pc, #192]	; (80085b8 <_dtoa_r+0x600>)
 80084f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	2200      	movs	r2, #0
 8008500:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008504:	4b2c      	ldr	r3, [pc, #176]	; (80085b8 <_dtoa_r+0x600>)
 8008506:	e9dd 0100 	ldrd	r0, r1, [sp]
 800850a:	f7f8 f875 	bl	80005f8 <__aeabi_dmul>
 800850e:	e9cd 0100 	strd	r0, r1, [sp]
 8008512:	e7c4      	b.n	800849e <_dtoa_r+0x4e6>
 8008514:	462a      	mov	r2, r5
 8008516:	4633      	mov	r3, r6
 8008518:	f7f8 f86e 	bl	80005f8 <__aeabi_dmul>
 800851c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008520:	eb0b 0507 	add.w	r5, fp, r7
 8008524:	465e      	mov	r6, fp
 8008526:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852a:	f7f8 fb15 	bl	8000b58 <__aeabi_d2iz>
 800852e:	4607      	mov	r7, r0
 8008530:	f7f7 fff8 	bl	8000524 <__aeabi_i2d>
 8008534:	3730      	adds	r7, #48	; 0x30
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800853e:	f7f7 fea3 	bl	8000288 <__aeabi_dsub>
 8008542:	f806 7b01 	strb.w	r7, [r6], #1
 8008546:	42ae      	cmp	r6, r5
 8008548:	e9cd 0100 	strd	r0, r1, [sp]
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	d126      	bne.n	80085a0 <_dtoa_r+0x5e8>
 8008552:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <_dtoa_r+0x60c>)
 8008554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008564:	f7f8 fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8008568:	2800      	cmp	r0, #0
 800856a:	d174      	bne.n	8008656 <_dtoa_r+0x69e>
 800856c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008570:	2000      	movs	r0, #0
 8008572:	4914      	ldr	r1, [pc, #80]	; (80085c4 <_dtoa_r+0x60c>)
 8008574:	f7f7 fe88 	bl	8000288 <__aeabi_dsub>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008580:	f7f8 faac 	bl	8000adc <__aeabi_dcmplt>
 8008584:	2800      	cmp	r0, #0
 8008586:	f43f af30 	beq.w	80083ea <_dtoa_r+0x432>
 800858a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800858e:	2b30      	cmp	r3, #48	; 0x30
 8008590:	f105 32ff 	add.w	r2, r5, #4294967295
 8008594:	d002      	beq.n	800859c <_dtoa_r+0x5e4>
 8008596:	f8dd a020 	ldr.w	sl, [sp, #32]
 800859a:	e04a      	b.n	8008632 <_dtoa_r+0x67a>
 800859c:	4615      	mov	r5, r2
 800859e:	e7f4      	b.n	800858a <_dtoa_r+0x5d2>
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <_dtoa_r+0x600>)
 80085a2:	f7f8 f829 	bl	80005f8 <__aeabi_dmul>
 80085a6:	e9cd 0100 	strd	r0, r1, [sp]
 80085aa:	e7bc      	b.n	8008526 <_dtoa_r+0x56e>
 80085ac:	08009c10 	.word	0x08009c10
 80085b0:	08009be8 	.word	0x08009be8
 80085b4:	3ff00000 	.word	0x3ff00000
 80085b8:	40240000 	.word	0x40240000
 80085bc:	401c0000 	.word	0x401c0000
 80085c0:	40140000 	.word	0x40140000
 80085c4:	3fe00000 	.word	0x3fe00000
 80085c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085cc:	465d      	mov	r5, fp
 80085ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 f939 	bl	800084c <__aeabi_ddiv>
 80085da:	f7f8 fabd 	bl	8000b58 <__aeabi_d2iz>
 80085de:	4680      	mov	r8, r0
 80085e0:	f7f7 ffa0 	bl	8000524 <__aeabi_i2d>
 80085e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e8:	f7f8 f806 	bl	80005f8 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085f8:	f7f7 fe46 	bl	8000288 <__aeabi_dsub>
 80085fc:	f805 6b01 	strb.w	r6, [r5], #1
 8008600:	eba5 060b 	sub.w	r6, r5, fp
 8008604:	45b1      	cmp	r9, r6
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	d139      	bne.n	8008680 <_dtoa_r+0x6c8>
 800860c:	f7f7 fe3e 	bl	800028c <__adddf3>
 8008610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	f7f8 fa7e 	bl	8000b18 <__aeabi_dcmpgt>
 800861c:	b9c8      	cbnz	r0, 8008652 <_dtoa_r+0x69a>
 800861e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f8 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800862a:	b110      	cbz	r0, 8008632 <_dtoa_r+0x67a>
 800862c:	f018 0f01 	tst.w	r8, #1
 8008630:	d10f      	bne.n	8008652 <_dtoa_r+0x69a>
 8008632:	9904      	ldr	r1, [sp, #16]
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fcaa 	bl	8008f8e <_Bfree>
 800863a:	2300      	movs	r3, #0
 800863c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800863e:	702b      	strb	r3, [r5, #0]
 8008640:	f10a 0301 	add.w	r3, sl, #1
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8241 	beq.w	8008ad0 <_dtoa_r+0xb18>
 800864e:	601d      	str	r5, [r3, #0]
 8008650:	e23e      	b.n	8008ad0 <_dtoa_r+0xb18>
 8008652:	f8cd a020 	str.w	sl, [sp, #32]
 8008656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800865a:	2a39      	cmp	r2, #57	; 0x39
 800865c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008660:	d108      	bne.n	8008674 <_dtoa_r+0x6bc>
 8008662:	459b      	cmp	fp, r3
 8008664:	d10a      	bne.n	800867c <_dtoa_r+0x6c4>
 8008666:	9b08      	ldr	r3, [sp, #32]
 8008668:	3301      	adds	r3, #1
 800866a:	9308      	str	r3, [sp, #32]
 800866c:	2330      	movs	r3, #48	; 0x30
 800866e:	f88b 3000 	strb.w	r3, [fp]
 8008672:	465b      	mov	r3, fp
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	3201      	adds	r2, #1
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	e78c      	b.n	8008596 <_dtoa_r+0x5de>
 800867c:	461d      	mov	r5, r3
 800867e:	e7ea      	b.n	8008656 <_dtoa_r+0x69e>
 8008680:	2200      	movs	r2, #0
 8008682:	4b9b      	ldr	r3, [pc, #620]	; (80088f0 <_dtoa_r+0x938>)
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	2200      	movs	r2, #0
 800868a:	2300      	movs	r3, #0
 800868c:	4606      	mov	r6, r0
 800868e:	460f      	mov	r7, r1
 8008690:	f7f8 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008694:	2800      	cmp	r0, #0
 8008696:	d09a      	beq.n	80085ce <_dtoa_r+0x616>
 8008698:	e7cb      	b.n	8008632 <_dtoa_r+0x67a>
 800869a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800869c:	2a00      	cmp	r2, #0
 800869e:	f000 808b 	beq.w	80087b8 <_dtoa_r+0x800>
 80086a2:	9a06      	ldr	r2, [sp, #24]
 80086a4:	2a01      	cmp	r2, #1
 80086a6:	dc6e      	bgt.n	8008786 <_dtoa_r+0x7ce>
 80086a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d067      	beq.n	800877e <_dtoa_r+0x7c6>
 80086ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086b2:	9f07      	ldr	r7, [sp, #28]
 80086b4:	9d05      	ldr	r5, [sp, #20]
 80086b6:	9a05      	ldr	r2, [sp, #20]
 80086b8:	2101      	movs	r1, #1
 80086ba:	441a      	add	r2, r3
 80086bc:	4620      	mov	r0, r4
 80086be:	9205      	str	r2, [sp, #20]
 80086c0:	4498      	add	r8, r3
 80086c2:	f000 fd04 	bl	80090ce <__i2b>
 80086c6:	4606      	mov	r6, r0
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	dd0c      	ble.n	80086e6 <_dtoa_r+0x72e>
 80086cc:	f1b8 0f00 	cmp.w	r8, #0
 80086d0:	dd09      	ble.n	80086e6 <_dtoa_r+0x72e>
 80086d2:	4545      	cmp	r5, r8
 80086d4:	9a05      	ldr	r2, [sp, #20]
 80086d6:	462b      	mov	r3, r5
 80086d8:	bfa8      	it	ge
 80086da:	4643      	movge	r3, r8
 80086dc:	1ad2      	subs	r2, r2, r3
 80086de:	9205      	str	r2, [sp, #20]
 80086e0:	1aed      	subs	r5, r5, r3
 80086e2:	eba8 0803 	sub.w	r8, r8, r3
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	b1eb      	cbz	r3, 8008726 <_dtoa_r+0x76e>
 80086ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d067      	beq.n	80087c0 <_dtoa_r+0x808>
 80086f0:	b18f      	cbz	r7, 8008716 <_dtoa_r+0x75e>
 80086f2:	4631      	mov	r1, r6
 80086f4:	463a      	mov	r2, r7
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fd88 	bl	800920c <__pow5mult>
 80086fc:	9a04      	ldr	r2, [sp, #16]
 80086fe:	4601      	mov	r1, r0
 8008700:	4606      	mov	r6, r0
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fcec 	bl	80090e0 <__multiply>
 8008708:	9904      	ldr	r1, [sp, #16]
 800870a:	9008      	str	r0, [sp, #32]
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fc3e 	bl	8008f8e <_Bfree>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	9b07      	ldr	r3, [sp, #28]
 8008718:	1bda      	subs	r2, r3, r7
 800871a:	d004      	beq.n	8008726 <_dtoa_r+0x76e>
 800871c:	9904      	ldr	r1, [sp, #16]
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fd74 	bl	800920c <__pow5mult>
 8008724:	9004      	str	r0, [sp, #16]
 8008726:	2101      	movs	r1, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fcd0 	bl	80090ce <__i2b>
 800872e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008730:	4607      	mov	r7, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 81d0 	beq.w	8008ad8 <_dtoa_r+0xb20>
 8008738:	461a      	mov	r2, r3
 800873a:	4601      	mov	r1, r0
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fd65 	bl	800920c <__pow5mult>
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	2b01      	cmp	r3, #1
 8008746:	4607      	mov	r7, r0
 8008748:	dc40      	bgt.n	80087cc <_dtoa_r+0x814>
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d139      	bne.n	80087c4 <_dtoa_r+0x80c>
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008756:	2b00      	cmp	r3, #0
 8008758:	d136      	bne.n	80087c8 <_dtoa_r+0x810>
 800875a:	9b01      	ldr	r3, [sp, #4]
 800875c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008760:	0d1b      	lsrs	r3, r3, #20
 8008762:	051b      	lsls	r3, r3, #20
 8008764:	b12b      	cbz	r3, 8008772 <_dtoa_r+0x7ba>
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	3301      	adds	r3, #1
 800876a:	9305      	str	r3, [sp, #20]
 800876c:	f108 0801 	add.w	r8, r8, #1
 8008770:	2301      	movs	r3, #1
 8008772:	9307      	str	r3, [sp, #28]
 8008774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008776:	2b00      	cmp	r3, #0
 8008778:	d12a      	bne.n	80087d0 <_dtoa_r+0x818>
 800877a:	2001      	movs	r0, #1
 800877c:	e030      	b.n	80087e0 <_dtoa_r+0x828>
 800877e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008780:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008784:	e795      	b.n	80086b2 <_dtoa_r+0x6fa>
 8008786:	9b07      	ldr	r3, [sp, #28]
 8008788:	f109 37ff 	add.w	r7, r9, #4294967295
 800878c:	42bb      	cmp	r3, r7
 800878e:	bfbf      	itttt	lt
 8008790:	9b07      	ldrlt	r3, [sp, #28]
 8008792:	9707      	strlt	r7, [sp, #28]
 8008794:	1afa      	sublt	r2, r7, r3
 8008796:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008798:	bfbb      	ittet	lt
 800879a:	189b      	addlt	r3, r3, r2
 800879c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800879e:	1bdf      	subge	r7, r3, r7
 80087a0:	2700      	movlt	r7, #0
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	bfb5      	itete	lt
 80087a8:	9b05      	ldrlt	r3, [sp, #20]
 80087aa:	9d05      	ldrge	r5, [sp, #20]
 80087ac:	eba3 0509 	sublt.w	r5, r3, r9
 80087b0:	464b      	movge	r3, r9
 80087b2:	bfb8      	it	lt
 80087b4:	2300      	movlt	r3, #0
 80087b6:	e77e      	b.n	80086b6 <_dtoa_r+0x6fe>
 80087b8:	9f07      	ldr	r7, [sp, #28]
 80087ba:	9d05      	ldr	r5, [sp, #20]
 80087bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087be:	e783      	b.n	80086c8 <_dtoa_r+0x710>
 80087c0:	9a07      	ldr	r2, [sp, #28]
 80087c2:	e7ab      	b.n	800871c <_dtoa_r+0x764>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e7d4      	b.n	8008772 <_dtoa_r+0x7ba>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	e7d2      	b.n	8008772 <_dtoa_r+0x7ba>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9307      	str	r3, [sp, #28]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087d6:	6918      	ldr	r0, [r3, #16]
 80087d8:	f000 fc2b 	bl	8009032 <__hi0bits>
 80087dc:	f1c0 0020 	rsb	r0, r0, #32
 80087e0:	4440      	add	r0, r8
 80087e2:	f010 001f 	ands.w	r0, r0, #31
 80087e6:	d047      	beq.n	8008878 <_dtoa_r+0x8c0>
 80087e8:	f1c0 0320 	rsb	r3, r0, #32
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	dd3b      	ble.n	8008868 <_dtoa_r+0x8b0>
 80087f0:	9b05      	ldr	r3, [sp, #20]
 80087f2:	f1c0 001c 	rsb	r0, r0, #28
 80087f6:	4403      	add	r3, r0
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	4405      	add	r5, r0
 80087fc:	4480      	add	r8, r0
 80087fe:	9b05      	ldr	r3, [sp, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	dd05      	ble.n	8008810 <_dtoa_r+0x858>
 8008804:	461a      	mov	r2, r3
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fd4d 	bl	80092a8 <__lshift>
 800880e:	9004      	str	r0, [sp, #16]
 8008810:	f1b8 0f00 	cmp.w	r8, #0
 8008814:	dd05      	ble.n	8008822 <_dtoa_r+0x86a>
 8008816:	4639      	mov	r1, r7
 8008818:	4642      	mov	r2, r8
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fd44 	bl	80092a8 <__lshift>
 8008820:	4607      	mov	r7, r0
 8008822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008824:	b353      	cbz	r3, 800887c <_dtoa_r+0x8c4>
 8008826:	4639      	mov	r1, r7
 8008828:	9804      	ldr	r0, [sp, #16]
 800882a:	f000 fd91 	bl	8009350 <__mcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	da24      	bge.n	800887c <_dtoa_r+0x8c4>
 8008832:	2300      	movs	r3, #0
 8008834:	220a      	movs	r2, #10
 8008836:	9904      	ldr	r1, [sp, #16]
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fbbf 	bl	8008fbc <__multadd>
 800883e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008840:	9004      	str	r0, [sp, #16]
 8008842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 814d 	beq.w	8008ae6 <_dtoa_r+0xb2e>
 800884c:	2300      	movs	r3, #0
 800884e:	4631      	mov	r1, r6
 8008850:	220a      	movs	r2, #10
 8008852:	4620      	mov	r0, r4
 8008854:	f000 fbb2 	bl	8008fbc <__multadd>
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	4606      	mov	r6, r0
 800885e:	dc4f      	bgt.n	8008900 <_dtoa_r+0x948>
 8008860:	9b06      	ldr	r3, [sp, #24]
 8008862:	2b02      	cmp	r3, #2
 8008864:	dd4c      	ble.n	8008900 <_dtoa_r+0x948>
 8008866:	e011      	b.n	800888c <_dtoa_r+0x8d4>
 8008868:	d0c9      	beq.n	80087fe <_dtoa_r+0x846>
 800886a:	9a05      	ldr	r2, [sp, #20]
 800886c:	331c      	adds	r3, #28
 800886e:	441a      	add	r2, r3
 8008870:	9205      	str	r2, [sp, #20]
 8008872:	441d      	add	r5, r3
 8008874:	4498      	add	r8, r3
 8008876:	e7c2      	b.n	80087fe <_dtoa_r+0x846>
 8008878:	4603      	mov	r3, r0
 800887a:	e7f6      	b.n	800886a <_dtoa_r+0x8b2>
 800887c:	f1b9 0f00 	cmp.w	r9, #0
 8008880:	dc38      	bgt.n	80088f4 <_dtoa_r+0x93c>
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	2b02      	cmp	r3, #2
 8008886:	dd35      	ble.n	80088f4 <_dtoa_r+0x93c>
 8008888:	f8cd 9008 	str.w	r9, [sp, #8]
 800888c:	9b02      	ldr	r3, [sp, #8]
 800888e:	b963      	cbnz	r3, 80088aa <_dtoa_r+0x8f2>
 8008890:	4639      	mov	r1, r7
 8008892:	2205      	movs	r2, #5
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fb91 	bl	8008fbc <__multadd>
 800889a:	4601      	mov	r1, r0
 800889c:	4607      	mov	r7, r0
 800889e:	9804      	ldr	r0, [sp, #16]
 80088a0:	f000 fd56 	bl	8009350 <__mcmp>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f73f adcc 	bgt.w	8008442 <_dtoa_r+0x48a>
 80088aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ac:	465d      	mov	r5, fp
 80088ae:	ea6f 0a03 	mvn.w	sl, r3
 80088b2:	f04f 0900 	mov.w	r9, #0
 80088b6:	4639      	mov	r1, r7
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fb68 	bl	8008f8e <_Bfree>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	f43f aeb7 	beq.w	8008632 <_dtoa_r+0x67a>
 80088c4:	f1b9 0f00 	cmp.w	r9, #0
 80088c8:	d005      	beq.n	80088d6 <_dtoa_r+0x91e>
 80088ca:	45b1      	cmp	r9, r6
 80088cc:	d003      	beq.n	80088d6 <_dtoa_r+0x91e>
 80088ce:	4649      	mov	r1, r9
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fb5c 	bl	8008f8e <_Bfree>
 80088d6:	4631      	mov	r1, r6
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fb58 	bl	8008f8e <_Bfree>
 80088de:	e6a8      	b.n	8008632 <_dtoa_r+0x67a>
 80088e0:	2700      	movs	r7, #0
 80088e2:	463e      	mov	r6, r7
 80088e4:	e7e1      	b.n	80088aa <_dtoa_r+0x8f2>
 80088e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088ea:	463e      	mov	r6, r7
 80088ec:	e5a9      	b.n	8008442 <_dtoa_r+0x48a>
 80088ee:	bf00      	nop
 80088f0:	40240000 	.word	0x40240000
 80088f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80fa 	beq.w	8008af4 <_dtoa_r+0xb3c>
 8008900:	2d00      	cmp	r5, #0
 8008902:	dd05      	ble.n	8008910 <_dtoa_r+0x958>
 8008904:	4631      	mov	r1, r6
 8008906:	462a      	mov	r2, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fccd 	bl	80092a8 <__lshift>
 800890e:	4606      	mov	r6, r0
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d04c      	beq.n	80089b0 <_dtoa_r+0x9f8>
 8008916:	6871      	ldr	r1, [r6, #4]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fb04 	bl	8008f26 <_Balloc>
 800891e:	6932      	ldr	r2, [r6, #16]
 8008920:	3202      	adds	r2, #2
 8008922:	4605      	mov	r5, r0
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	f106 010c 	add.w	r1, r6, #12
 800892a:	300c      	adds	r0, #12
 800892c:	f000 faf0 	bl	8008f10 <memcpy>
 8008930:	2201      	movs	r2, #1
 8008932:	4629      	mov	r1, r5
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fcb7 	bl	80092a8 <__lshift>
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	f8cd b014 	str.w	fp, [sp, #20]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	46b1      	mov	r9, r6
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	4606      	mov	r6, r0
 800894a:	4639      	mov	r1, r7
 800894c:	9804      	ldr	r0, [sp, #16]
 800894e:	f7ff faa7 	bl	8007ea0 <quorem>
 8008952:	4649      	mov	r1, r9
 8008954:	4605      	mov	r5, r0
 8008956:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800895a:	9804      	ldr	r0, [sp, #16]
 800895c:	f000 fcf8 	bl	8009350 <__mcmp>
 8008960:	4632      	mov	r2, r6
 8008962:	9000      	str	r0, [sp, #0]
 8008964:	4639      	mov	r1, r7
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fd0c 	bl	8009384 <__mdiff>
 800896c:	68c3      	ldr	r3, [r0, #12]
 800896e:	4602      	mov	r2, r0
 8008970:	bb03      	cbnz	r3, 80089b4 <_dtoa_r+0x9fc>
 8008972:	4601      	mov	r1, r0
 8008974:	9008      	str	r0, [sp, #32]
 8008976:	9804      	ldr	r0, [sp, #16]
 8008978:	f000 fcea 	bl	8009350 <__mcmp>
 800897c:	9a08      	ldr	r2, [sp, #32]
 800897e:	4603      	mov	r3, r0
 8008980:	4611      	mov	r1, r2
 8008982:	4620      	mov	r0, r4
 8008984:	9308      	str	r3, [sp, #32]
 8008986:	f000 fb02 	bl	8008f8e <_Bfree>
 800898a:	9b08      	ldr	r3, [sp, #32]
 800898c:	b9a3      	cbnz	r3, 80089b8 <_dtoa_r+0xa00>
 800898e:	9a06      	ldr	r2, [sp, #24]
 8008990:	b992      	cbnz	r2, 80089b8 <_dtoa_r+0xa00>
 8008992:	9a07      	ldr	r2, [sp, #28]
 8008994:	b982      	cbnz	r2, 80089b8 <_dtoa_r+0xa00>
 8008996:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800899a:	d029      	beq.n	80089f0 <_dtoa_r+0xa38>
 800899c:	9b00      	ldr	r3, [sp, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dd01      	ble.n	80089a6 <_dtoa_r+0x9ee>
 80089a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	1c5d      	adds	r5, r3, #1
 80089aa:	f883 8000 	strb.w	r8, [r3]
 80089ae:	e782      	b.n	80088b6 <_dtoa_r+0x8fe>
 80089b0:	4630      	mov	r0, r6
 80089b2:	e7c2      	b.n	800893a <_dtoa_r+0x982>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e7e3      	b.n	8008980 <_dtoa_r+0x9c8>
 80089b8:	9a00      	ldr	r2, [sp, #0]
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	db04      	blt.n	80089c8 <_dtoa_r+0xa10>
 80089be:	d125      	bne.n	8008a0c <_dtoa_r+0xa54>
 80089c0:	9a06      	ldr	r2, [sp, #24]
 80089c2:	bb1a      	cbnz	r2, 8008a0c <_dtoa_r+0xa54>
 80089c4:	9a07      	ldr	r2, [sp, #28]
 80089c6:	bb0a      	cbnz	r2, 8008a0c <_dtoa_r+0xa54>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	ddec      	ble.n	80089a6 <_dtoa_r+0x9ee>
 80089cc:	2201      	movs	r2, #1
 80089ce:	9904      	ldr	r1, [sp, #16]
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 fc69 	bl	80092a8 <__lshift>
 80089d6:	4639      	mov	r1, r7
 80089d8:	9004      	str	r0, [sp, #16]
 80089da:	f000 fcb9 	bl	8009350 <__mcmp>
 80089de:	2800      	cmp	r0, #0
 80089e0:	dc03      	bgt.n	80089ea <_dtoa_r+0xa32>
 80089e2:	d1e0      	bne.n	80089a6 <_dtoa_r+0x9ee>
 80089e4:	f018 0f01 	tst.w	r8, #1
 80089e8:	d0dd      	beq.n	80089a6 <_dtoa_r+0x9ee>
 80089ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ee:	d1d8      	bne.n	80089a2 <_dtoa_r+0x9ea>
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	9a05      	ldr	r2, [sp, #20]
 80089f4:	1c5d      	adds	r5, r3, #1
 80089f6:	2339      	movs	r3, #57	; 0x39
 80089f8:	7013      	strb	r3, [r2, #0]
 80089fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089fe:	2b39      	cmp	r3, #57	; 0x39
 8008a00:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a04:	d04f      	beq.n	8008aa6 <_dtoa_r+0xaee>
 8008a06:	3301      	adds	r3, #1
 8008a08:	7013      	strb	r3, [r2, #0]
 8008a0a:	e754      	b.n	80088b6 <_dtoa_r+0x8fe>
 8008a0c:	9a05      	ldr	r2, [sp, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f102 0501 	add.w	r5, r2, #1
 8008a14:	dd06      	ble.n	8008a24 <_dtoa_r+0xa6c>
 8008a16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a1a:	d0e9      	beq.n	80089f0 <_dtoa_r+0xa38>
 8008a1c:	f108 0801 	add.w	r8, r8, #1
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	e7c2      	b.n	80089aa <_dtoa_r+0x9f2>
 8008a24:	9a02      	ldr	r2, [sp, #8]
 8008a26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a2a:	eba5 030b 	sub.w	r3, r5, fp
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d021      	beq.n	8008a76 <_dtoa_r+0xabe>
 8008a32:	2300      	movs	r3, #0
 8008a34:	220a      	movs	r2, #10
 8008a36:	9904      	ldr	r1, [sp, #16]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fabf 	bl	8008fbc <__multadd>
 8008a3e:	45b1      	cmp	r9, r6
 8008a40:	9004      	str	r0, [sp, #16]
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	f04f 020a 	mov.w	r2, #10
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	d105      	bne.n	8008a5c <_dtoa_r+0xaa4>
 8008a50:	f000 fab4 	bl	8008fbc <__multadd>
 8008a54:	4681      	mov	r9, r0
 8008a56:	4606      	mov	r6, r0
 8008a58:	9505      	str	r5, [sp, #20]
 8008a5a:	e776      	b.n	800894a <_dtoa_r+0x992>
 8008a5c:	f000 faae 	bl	8008fbc <__multadd>
 8008a60:	4631      	mov	r1, r6
 8008a62:	4681      	mov	r9, r0
 8008a64:	2300      	movs	r3, #0
 8008a66:	220a      	movs	r2, #10
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 faa7 	bl	8008fbc <__multadd>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	e7f2      	b.n	8008a58 <_dtoa_r+0xaa0>
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	2201      	movs	r2, #1
 8008a78:	9904      	ldr	r1, [sp, #16]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fc14 	bl	80092a8 <__lshift>
 8008a80:	4639      	mov	r1, r7
 8008a82:	9004      	str	r0, [sp, #16]
 8008a84:	f000 fc64 	bl	8009350 <__mcmp>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dcb6      	bgt.n	80089fa <_dtoa_r+0xa42>
 8008a8c:	d102      	bne.n	8008a94 <_dtoa_r+0xadc>
 8008a8e:	f018 0f01 	tst.w	r8, #1
 8008a92:	d1b2      	bne.n	80089fa <_dtoa_r+0xa42>
 8008a94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a98:	2b30      	cmp	r3, #48	; 0x30
 8008a9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a9e:	f47f af0a 	bne.w	80088b6 <_dtoa_r+0x8fe>
 8008aa2:	4615      	mov	r5, r2
 8008aa4:	e7f6      	b.n	8008a94 <_dtoa_r+0xadc>
 8008aa6:	4593      	cmp	fp, r2
 8008aa8:	d105      	bne.n	8008ab6 <_dtoa_r+0xafe>
 8008aaa:	2331      	movs	r3, #49	; 0x31
 8008aac:	f10a 0a01 	add.w	sl, sl, #1
 8008ab0:	f88b 3000 	strb.w	r3, [fp]
 8008ab4:	e6ff      	b.n	80088b6 <_dtoa_r+0x8fe>
 8008ab6:	4615      	mov	r5, r2
 8008ab8:	e79f      	b.n	80089fa <_dtoa_r+0xa42>
 8008aba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b20 <_dtoa_r+0xb68>
 8008abe:	e007      	b.n	8008ad0 <_dtoa_r+0xb18>
 8008ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ac2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b24 <_dtoa_r+0xb6c>
 8008ac6:	b11b      	cbz	r3, 8008ad0 <_dtoa_r+0xb18>
 8008ac8:	f10b 0308 	add.w	r3, fp, #8
 8008acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	4658      	mov	r0, fp
 8008ad2:	b017      	add	sp, #92	; 0x5c
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	f77f ae35 	ble.w	800874a <_dtoa_r+0x792>
 8008ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae2:	9307      	str	r3, [sp, #28]
 8008ae4:	e649      	b.n	800877a <_dtoa_r+0x7c2>
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc03      	bgt.n	8008af4 <_dtoa_r+0xb3c>
 8008aec:	9b06      	ldr	r3, [sp, #24]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	f73f aecc 	bgt.w	800888c <_dtoa_r+0x8d4>
 8008af4:	465d      	mov	r5, fp
 8008af6:	4639      	mov	r1, r7
 8008af8:	9804      	ldr	r0, [sp, #16]
 8008afa:	f7ff f9d1 	bl	8007ea0 <quorem>
 8008afe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b02:	f805 8b01 	strb.w	r8, [r5], #1
 8008b06:	9a02      	ldr	r2, [sp, #8]
 8008b08:	eba5 030b 	sub.w	r3, r5, fp
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	ddb0      	ble.n	8008a72 <_dtoa_r+0xaba>
 8008b10:	2300      	movs	r3, #0
 8008b12:	220a      	movs	r2, #10
 8008b14:	9904      	ldr	r1, [sp, #16]
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fa50 	bl	8008fbc <__multadd>
 8008b1c:	9004      	str	r0, [sp, #16]
 8008b1e:	e7ea      	b.n	8008af6 <_dtoa_r+0xb3e>
 8008b20:	08009b54 	.word	0x08009b54
 8008b24:	08009b78 	.word	0x08009b78

08008b28 <__sflush_r>:
 8008b28:	898a      	ldrh	r2, [r1, #12]
 8008b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2e:	4605      	mov	r5, r0
 8008b30:	0710      	lsls	r0, r2, #28
 8008b32:	460c      	mov	r4, r1
 8008b34:	d458      	bmi.n	8008be8 <__sflush_r+0xc0>
 8008b36:	684b      	ldr	r3, [r1, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dc05      	bgt.n	8008b48 <__sflush_r+0x20>
 8008b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dc02      	bgt.n	8008b48 <__sflush_r+0x20>
 8008b42:	2000      	movs	r0, #0
 8008b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b4a:	2e00      	cmp	r6, #0
 8008b4c:	d0f9      	beq.n	8008b42 <__sflush_r+0x1a>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b54:	682f      	ldr	r7, [r5, #0]
 8008b56:	6a21      	ldr	r1, [r4, #32]
 8008b58:	602b      	str	r3, [r5, #0]
 8008b5a:	d032      	beq.n	8008bc2 <__sflush_r+0x9a>
 8008b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b5e:	89a3      	ldrh	r3, [r4, #12]
 8008b60:	075a      	lsls	r2, r3, #29
 8008b62:	d505      	bpl.n	8008b70 <__sflush_r+0x48>
 8008b64:	6863      	ldr	r3, [r4, #4]
 8008b66:	1ac0      	subs	r0, r0, r3
 8008b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b6a:	b10b      	cbz	r3, 8008b70 <__sflush_r+0x48>
 8008b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b6e:	1ac0      	subs	r0, r0, r3
 8008b70:	2300      	movs	r3, #0
 8008b72:	4602      	mov	r2, r0
 8008b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b76:	6a21      	ldr	r1, [r4, #32]
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b0      	blx	r6
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	d106      	bne.n	8008b90 <__sflush_r+0x68>
 8008b82:	6829      	ldr	r1, [r5, #0]
 8008b84:	291d      	cmp	r1, #29
 8008b86:	d848      	bhi.n	8008c1a <__sflush_r+0xf2>
 8008b88:	4a29      	ldr	r2, [pc, #164]	; (8008c30 <__sflush_r+0x108>)
 8008b8a:	40ca      	lsrs	r2, r1
 8008b8c:	07d6      	lsls	r6, r2, #31
 8008b8e:	d544      	bpl.n	8008c1a <__sflush_r+0xf2>
 8008b90:	2200      	movs	r2, #0
 8008b92:	6062      	str	r2, [r4, #4]
 8008b94:	04d9      	lsls	r1, r3, #19
 8008b96:	6922      	ldr	r2, [r4, #16]
 8008b98:	6022      	str	r2, [r4, #0]
 8008b9a:	d504      	bpl.n	8008ba6 <__sflush_r+0x7e>
 8008b9c:	1c42      	adds	r2, r0, #1
 8008b9e:	d101      	bne.n	8008ba4 <__sflush_r+0x7c>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b903      	cbnz	r3, 8008ba6 <__sflush_r+0x7e>
 8008ba4:	6560      	str	r0, [r4, #84]	; 0x54
 8008ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba8:	602f      	str	r7, [r5, #0]
 8008baa:	2900      	cmp	r1, #0
 8008bac:	d0c9      	beq.n	8008b42 <__sflush_r+0x1a>
 8008bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	d002      	beq.n	8008bbc <__sflush_r+0x94>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f000 fc9e 	bl	80094f8 <_free_r>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	6360      	str	r0, [r4, #52]	; 0x34
 8008bc0:	e7c0      	b.n	8008b44 <__sflush_r+0x1c>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b0      	blx	r6
 8008bc8:	1c41      	adds	r1, r0, #1
 8008bca:	d1c8      	bne.n	8008b5e <__sflush_r+0x36>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0c5      	beq.n	8008b5e <__sflush_r+0x36>
 8008bd2:	2b1d      	cmp	r3, #29
 8008bd4:	d001      	beq.n	8008bda <__sflush_r+0xb2>
 8008bd6:	2b16      	cmp	r3, #22
 8008bd8:	d101      	bne.n	8008bde <__sflush_r+0xb6>
 8008bda:	602f      	str	r7, [r5, #0]
 8008bdc:	e7b1      	b.n	8008b42 <__sflush_r+0x1a>
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	e7ad      	b.n	8008b44 <__sflush_r+0x1c>
 8008be8:	690f      	ldr	r7, [r1, #16]
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d0a9      	beq.n	8008b42 <__sflush_r+0x1a>
 8008bee:	0793      	lsls	r3, r2, #30
 8008bf0:	680e      	ldr	r6, [r1, #0]
 8008bf2:	bf08      	it	eq
 8008bf4:	694b      	ldreq	r3, [r1, #20]
 8008bf6:	600f      	str	r7, [r1, #0]
 8008bf8:	bf18      	it	ne
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	eba6 0807 	sub.w	r8, r6, r7
 8008c00:	608b      	str	r3, [r1, #8]
 8008c02:	f1b8 0f00 	cmp.w	r8, #0
 8008c06:	dd9c      	ble.n	8008b42 <__sflush_r+0x1a>
 8008c08:	4643      	mov	r3, r8
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	6a21      	ldr	r1, [r4, #32]
 8008c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b0      	blx	r6
 8008c14:	2800      	cmp	r0, #0
 8008c16:	dc06      	bgt.n	8008c26 <__sflush_r+0xfe>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	e78e      	b.n	8008b44 <__sflush_r+0x1c>
 8008c26:	4407      	add	r7, r0
 8008c28:	eba8 0800 	sub.w	r8, r8, r0
 8008c2c:	e7e9      	b.n	8008c02 <__sflush_r+0xda>
 8008c2e:	bf00      	nop
 8008c30:	20400001 	.word	0x20400001

08008c34 <_fflush_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	690b      	ldr	r3, [r1, #16]
 8008c38:	4605      	mov	r5, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	b1db      	cbz	r3, 8008c76 <_fflush_r+0x42>
 8008c3e:	b118      	cbz	r0, 8008c48 <_fflush_r+0x14>
 8008c40:	6983      	ldr	r3, [r0, #24]
 8008c42:	b90b      	cbnz	r3, 8008c48 <_fflush_r+0x14>
 8008c44:	f000 f860 	bl	8008d08 <__sinit>
 8008c48:	4b0c      	ldr	r3, [pc, #48]	; (8008c7c <_fflush_r+0x48>)
 8008c4a:	429c      	cmp	r4, r3
 8008c4c:	d109      	bne.n	8008c62 <_fflush_r+0x2e>
 8008c4e:	686c      	ldr	r4, [r5, #4]
 8008c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c54:	b17b      	cbz	r3, 8008c76 <_fflush_r+0x42>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4628      	mov	r0, r5
 8008c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c5e:	f7ff bf63 	b.w	8008b28 <__sflush_r>
 8008c62:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <_fflush_r+0x4c>)
 8008c64:	429c      	cmp	r4, r3
 8008c66:	d101      	bne.n	8008c6c <_fflush_r+0x38>
 8008c68:	68ac      	ldr	r4, [r5, #8]
 8008c6a:	e7f1      	b.n	8008c50 <_fflush_r+0x1c>
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <_fflush_r+0x50>)
 8008c6e:	429c      	cmp	r4, r3
 8008c70:	bf08      	it	eq
 8008c72:	68ec      	ldreq	r4, [r5, #12]
 8008c74:	e7ec      	b.n	8008c50 <_fflush_r+0x1c>
 8008c76:	2000      	movs	r0, #0
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	bf00      	nop
 8008c7c:	08009ba8 	.word	0x08009ba8
 8008c80:	08009bc8 	.word	0x08009bc8
 8008c84:	08009b88 	.word	0x08009b88

08008c88 <std>:
 8008c88:	2300      	movs	r3, #0
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c92:	6083      	str	r3, [r0, #8]
 8008c94:	8181      	strh	r1, [r0, #12]
 8008c96:	6643      	str	r3, [r0, #100]	; 0x64
 8008c98:	81c2      	strh	r2, [r0, #14]
 8008c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c9e:	6183      	str	r3, [r0, #24]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	2208      	movs	r2, #8
 8008ca4:	305c      	adds	r0, #92	; 0x5c
 8008ca6:	f7fe f945 	bl	8006f34 <memset>
 8008caa:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <std+0x38>)
 8008cac:	6263      	str	r3, [r4, #36]	; 0x24
 8008cae:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <std+0x3c>)
 8008cb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cb2:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <std+0x40>)
 8008cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cb6:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <std+0x44>)
 8008cb8:	6224      	str	r4, [r4, #32]
 8008cba:	6323      	str	r3, [r4, #48]	; 0x30
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	bf00      	nop
 8008cc0:	080098e9 	.word	0x080098e9
 8008cc4:	0800990b 	.word	0x0800990b
 8008cc8:	08009943 	.word	0x08009943
 8008ccc:	08009967 	.word	0x08009967

08008cd0 <_cleanup_r>:
 8008cd0:	4901      	ldr	r1, [pc, #4]	; (8008cd8 <_cleanup_r+0x8>)
 8008cd2:	f000 b885 	b.w	8008de0 <_fwalk_reent>
 8008cd6:	bf00      	nop
 8008cd8:	08008c35 	.word	0x08008c35

08008cdc <__sfmoreglue>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	1e4a      	subs	r2, r1, #1
 8008ce0:	2568      	movs	r5, #104	; 0x68
 8008ce2:	4355      	muls	r5, r2
 8008ce4:	460e      	mov	r6, r1
 8008ce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cea:	f000 fc53 	bl	8009594 <_malloc_r>
 8008cee:	4604      	mov	r4, r0
 8008cf0:	b140      	cbz	r0, 8008d04 <__sfmoreglue+0x28>
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	e9c0 1600 	strd	r1, r6, [r0]
 8008cf8:	300c      	adds	r0, #12
 8008cfa:	60a0      	str	r0, [r4, #8]
 8008cfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d00:	f7fe f918 	bl	8006f34 <memset>
 8008d04:	4620      	mov	r0, r4
 8008d06:	bd70      	pop	{r4, r5, r6, pc}

08008d08 <__sinit>:
 8008d08:	6983      	ldr	r3, [r0, #24]
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	bb33      	cbnz	r3, 8008d5e <__sinit+0x56>
 8008d10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008d14:	6503      	str	r3, [r0, #80]	; 0x50
 8008d16:	4b12      	ldr	r3, [pc, #72]	; (8008d60 <__sinit+0x58>)
 8008d18:	4a12      	ldr	r2, [pc, #72]	; (8008d64 <__sinit+0x5c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6282      	str	r2, [r0, #40]	; 0x28
 8008d1e:	4298      	cmp	r0, r3
 8008d20:	bf04      	itt	eq
 8008d22:	2301      	moveq	r3, #1
 8008d24:	6183      	streq	r3, [r0, #24]
 8008d26:	f000 f81f 	bl	8008d68 <__sfp>
 8008d2a:	6060      	str	r0, [r4, #4]
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 f81b 	bl	8008d68 <__sfp>
 8008d32:	60a0      	str	r0, [r4, #8]
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 f817 	bl	8008d68 <__sfp>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	60e0      	str	r0, [r4, #12]
 8008d3e:	2104      	movs	r1, #4
 8008d40:	6860      	ldr	r0, [r4, #4]
 8008d42:	f7ff ffa1 	bl	8008c88 <std>
 8008d46:	2201      	movs	r2, #1
 8008d48:	2109      	movs	r1, #9
 8008d4a:	68a0      	ldr	r0, [r4, #8]
 8008d4c:	f7ff ff9c 	bl	8008c88 <std>
 8008d50:	2202      	movs	r2, #2
 8008d52:	2112      	movs	r1, #18
 8008d54:	68e0      	ldr	r0, [r4, #12]
 8008d56:	f7ff ff97 	bl	8008c88 <std>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	61a3      	str	r3, [r4, #24]
 8008d5e:	bd10      	pop	{r4, pc}
 8008d60:	08009b40 	.word	0x08009b40
 8008d64:	08008cd1 	.word	0x08008cd1

08008d68 <__sfp>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	; (8008dd8 <__sfp+0x70>)
 8008d6c:	681e      	ldr	r6, [r3, #0]
 8008d6e:	69b3      	ldr	r3, [r6, #24]
 8008d70:	4607      	mov	r7, r0
 8008d72:	b913      	cbnz	r3, 8008d7a <__sfp+0x12>
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff ffc7 	bl	8008d08 <__sinit>
 8008d7a:	3648      	adds	r6, #72	; 0x48
 8008d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	d503      	bpl.n	8008d8c <__sfp+0x24>
 8008d84:	6833      	ldr	r3, [r6, #0]
 8008d86:	b133      	cbz	r3, 8008d96 <__sfp+0x2e>
 8008d88:	6836      	ldr	r6, [r6, #0]
 8008d8a:	e7f7      	b.n	8008d7c <__sfp+0x14>
 8008d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d90:	b16d      	cbz	r5, 8008dae <__sfp+0x46>
 8008d92:	3468      	adds	r4, #104	; 0x68
 8008d94:	e7f4      	b.n	8008d80 <__sfp+0x18>
 8008d96:	2104      	movs	r1, #4
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff ff9f 	bl	8008cdc <__sfmoreglue>
 8008d9e:	6030      	str	r0, [r6, #0]
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1f1      	bne.n	8008d88 <__sfp+0x20>
 8008da4:	230c      	movs	r3, #12
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	4604      	mov	r4, r0
 8008daa:	4620      	mov	r0, r4
 8008dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <__sfp+0x74>)
 8008db0:	6665      	str	r5, [r4, #100]	; 0x64
 8008db2:	e9c4 5500 	strd	r5, r5, [r4]
 8008db6:	60a5      	str	r5, [r4, #8]
 8008db8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008dbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dc8:	f7fe f8b4 	bl	8006f34 <memset>
 8008dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dd4:	e7e9      	b.n	8008daa <__sfp+0x42>
 8008dd6:	bf00      	nop
 8008dd8:	08009b40 	.word	0x08009b40
 8008ddc:	ffff0001 	.word	0xffff0001

08008de0 <_fwalk_reent>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dec:	2600      	movs	r6, #0
 8008dee:	b914      	cbnz	r4, 8008df6 <_fwalk_reent+0x16>
 8008df0:	4630      	mov	r0, r6
 8008df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008df6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008dfa:	3f01      	subs	r7, #1
 8008dfc:	d501      	bpl.n	8008e02 <_fwalk_reent+0x22>
 8008dfe:	6824      	ldr	r4, [r4, #0]
 8008e00:	e7f5      	b.n	8008dee <_fwalk_reent+0xe>
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d907      	bls.n	8008e18 <_fwalk_reent+0x38>
 8008e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	d003      	beq.n	8008e18 <_fwalk_reent+0x38>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4640      	mov	r0, r8
 8008e14:	47c8      	blx	r9
 8008e16:	4306      	orrs	r6, r0
 8008e18:	3568      	adds	r5, #104	; 0x68
 8008e1a:	e7ee      	b.n	8008dfa <_fwalk_reent+0x1a>

08008e1c <_localeconv_r>:
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <_localeconv_r+0x14>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6a18      	ldr	r0, [r3, #32]
 8008e22:	4b04      	ldr	r3, [pc, #16]	; (8008e34 <_localeconv_r+0x18>)
 8008e24:	2800      	cmp	r0, #0
 8008e26:	bf08      	it	eq
 8008e28:	4618      	moveq	r0, r3
 8008e2a:	30f0      	adds	r0, #240	; 0xf0
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	2000000c 	.word	0x2000000c
 8008e34:	20000070 	.word	0x20000070

08008e38 <__swhatbuf_r>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	460e      	mov	r6, r1
 8008e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e40:	2900      	cmp	r1, #0
 8008e42:	b096      	sub	sp, #88	; 0x58
 8008e44:	4614      	mov	r4, r2
 8008e46:	461d      	mov	r5, r3
 8008e48:	da07      	bge.n	8008e5a <__swhatbuf_r+0x22>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	89b3      	ldrh	r3, [r6, #12]
 8008e50:	061a      	lsls	r2, r3, #24
 8008e52:	d410      	bmi.n	8008e76 <__swhatbuf_r+0x3e>
 8008e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e58:	e00e      	b.n	8008e78 <__swhatbuf_r+0x40>
 8008e5a:	466a      	mov	r2, sp
 8008e5c:	f000 fdaa 	bl	80099b4 <_fstat_r>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	dbf2      	blt.n	8008e4a <__swhatbuf_r+0x12>
 8008e64:	9a01      	ldr	r2, [sp, #4]
 8008e66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e6e:	425a      	negs	r2, r3
 8008e70:	415a      	adcs	r2, r3
 8008e72:	602a      	str	r2, [r5, #0]
 8008e74:	e7ee      	b.n	8008e54 <__swhatbuf_r+0x1c>
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	2000      	movs	r0, #0
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	b016      	add	sp, #88	; 0x58
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}

08008e80 <__smakebuf_r>:
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e84:	079d      	lsls	r5, r3, #30
 8008e86:	4606      	mov	r6, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d507      	bpl.n	8008e9c <__smakebuf_r+0x1c>
 8008e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2301      	movs	r3, #1
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f7ff ffca 	bl	8008e38 <__swhatbuf_r>
 8008ea4:	9900      	ldr	r1, [sp, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 fb73 	bl	8009594 <_malloc_r>
 8008eae:	b948      	cbnz	r0, 8008ec4 <__smakebuf_r+0x44>
 8008eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb4:	059a      	lsls	r2, r3, #22
 8008eb6:	d4ef      	bmi.n	8008e98 <__smakebuf_r+0x18>
 8008eb8:	f023 0303 	bic.w	r3, r3, #3
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	e7e3      	b.n	8008e8c <__smakebuf_r+0xc>
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <__smakebuf_r+0x7c>)
 8008ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	6163      	str	r3, [r4, #20]
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	6120      	str	r0, [r4, #16]
 8008eda:	b15b      	cbz	r3, 8008ef4 <__smakebuf_r+0x74>
 8008edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f000 fd79 	bl	80099d8 <_isatty_r>
 8008ee6:	b128      	cbz	r0, 8008ef4 <__smakebuf_r+0x74>
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	f023 0303 	bic.w	r3, r3, #3
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	431d      	orrs	r5, r3
 8008ef8:	81a5      	strh	r5, [r4, #12]
 8008efa:	e7cd      	b.n	8008e98 <__smakebuf_r+0x18>
 8008efc:	08008cd1 	.word	0x08008cd1

08008f00 <malloc>:
 8008f00:	4b02      	ldr	r3, [pc, #8]	; (8008f0c <malloc+0xc>)
 8008f02:	4601      	mov	r1, r0
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	f000 bb45 	b.w	8009594 <_malloc_r>
 8008f0a:	bf00      	nop
 8008f0c:	2000000c 	.word	0x2000000c

08008f10 <memcpy>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	1e43      	subs	r3, r0, #1
 8008f14:	440a      	add	r2, r1
 8008f16:	4291      	cmp	r1, r2
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	bd10      	pop	{r4, pc}
 8008f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f24:	e7f7      	b.n	8008f16 <memcpy+0x6>

08008f26 <_Balloc>:
 8008f26:	b570      	push	{r4, r5, r6, lr}
 8008f28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	460e      	mov	r6, r1
 8008f2e:	b93d      	cbnz	r5, 8008f40 <_Balloc+0x1a>
 8008f30:	2010      	movs	r0, #16
 8008f32:	f7ff ffe5 	bl	8008f00 <malloc>
 8008f36:	6260      	str	r0, [r4, #36]	; 0x24
 8008f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f3c:	6005      	str	r5, [r0, #0]
 8008f3e:	60c5      	str	r5, [r0, #12]
 8008f40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008f42:	68eb      	ldr	r3, [r5, #12]
 8008f44:	b183      	cbz	r3, 8008f68 <_Balloc+0x42>
 8008f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f4e:	b9b8      	cbnz	r0, 8008f80 <_Balloc+0x5a>
 8008f50:	2101      	movs	r1, #1
 8008f52:	fa01 f506 	lsl.w	r5, r1, r6
 8008f56:	1d6a      	adds	r2, r5, #5
 8008f58:	0092      	lsls	r2, r2, #2
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 fabe 	bl	80094dc <_calloc_r>
 8008f60:	b160      	cbz	r0, 8008f7c <_Balloc+0x56>
 8008f62:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f66:	e00e      	b.n	8008f86 <_Balloc+0x60>
 8008f68:	2221      	movs	r2, #33	; 0x21
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 fab5 	bl	80094dc <_calloc_r>
 8008f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f74:	60e8      	str	r0, [r5, #12]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e4      	bne.n	8008f46 <_Balloc+0x20>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	6802      	ldr	r2, [r0, #0]
 8008f82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f86:	2300      	movs	r3, #0
 8008f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f8c:	e7f7      	b.n	8008f7e <_Balloc+0x58>

08008f8e <_Bfree>:
 8008f8e:	b570      	push	{r4, r5, r6, lr}
 8008f90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f92:	4606      	mov	r6, r0
 8008f94:	460d      	mov	r5, r1
 8008f96:	b93c      	cbnz	r4, 8008fa8 <_Bfree+0x1a>
 8008f98:	2010      	movs	r0, #16
 8008f9a:	f7ff ffb1 	bl	8008f00 <malloc>
 8008f9e:	6270      	str	r0, [r6, #36]	; 0x24
 8008fa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fa4:	6004      	str	r4, [r0, #0]
 8008fa6:	60c4      	str	r4, [r0, #12]
 8008fa8:	b13d      	cbz	r5, 8008fba <_Bfree+0x2c>
 8008faa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008fac:	686a      	ldr	r2, [r5, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fb4:	6029      	str	r1, [r5, #0]
 8008fb6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008fba:	bd70      	pop	{r4, r5, r6, pc}

08008fbc <__multadd>:
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	690d      	ldr	r5, [r1, #16]
 8008fc2:	461f      	mov	r7, r3
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	f101 0c14 	add.w	ip, r1, #20
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f8dc 0000 	ldr.w	r0, [ip]
 8008fd2:	b281      	uxth	r1, r0
 8008fd4:	fb02 7101 	mla	r1, r2, r1, r7
 8008fd8:	0c0f      	lsrs	r7, r1, #16
 8008fda:	0c00      	lsrs	r0, r0, #16
 8008fdc:	fb02 7000 	mla	r0, r2, r0, r7
 8008fe0:	b289      	uxth	r1, r1
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008fe8:	429d      	cmp	r5, r3
 8008fea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008fee:	f84c 1b04 	str.w	r1, [ip], #4
 8008ff2:	dcec      	bgt.n	8008fce <__multadd+0x12>
 8008ff4:	b1d7      	cbz	r7, 800902c <__multadd+0x70>
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	dc12      	bgt.n	8009022 <__multadd+0x66>
 8008ffc:	6861      	ldr	r1, [r4, #4]
 8008ffe:	4630      	mov	r0, r6
 8009000:	3101      	adds	r1, #1
 8009002:	f7ff ff90 	bl	8008f26 <_Balloc>
 8009006:	6922      	ldr	r2, [r4, #16]
 8009008:	3202      	adds	r2, #2
 800900a:	f104 010c 	add.w	r1, r4, #12
 800900e:	4680      	mov	r8, r0
 8009010:	0092      	lsls	r2, r2, #2
 8009012:	300c      	adds	r0, #12
 8009014:	f7ff ff7c 	bl	8008f10 <memcpy>
 8009018:	4621      	mov	r1, r4
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff ffb7 	bl	8008f8e <_Bfree>
 8009020:	4644      	mov	r4, r8
 8009022:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009026:	3501      	adds	r5, #1
 8009028:	615f      	str	r7, [r3, #20]
 800902a:	6125      	str	r5, [r4, #16]
 800902c:	4620      	mov	r0, r4
 800902e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009032 <__hi0bits>:
 8009032:	0c02      	lsrs	r2, r0, #16
 8009034:	0412      	lsls	r2, r2, #16
 8009036:	4603      	mov	r3, r0
 8009038:	b9b2      	cbnz	r2, 8009068 <__hi0bits+0x36>
 800903a:	0403      	lsls	r3, r0, #16
 800903c:	2010      	movs	r0, #16
 800903e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009042:	bf04      	itt	eq
 8009044:	021b      	lsleq	r3, r3, #8
 8009046:	3008      	addeq	r0, #8
 8009048:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800904c:	bf04      	itt	eq
 800904e:	011b      	lsleq	r3, r3, #4
 8009050:	3004      	addeq	r0, #4
 8009052:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009056:	bf04      	itt	eq
 8009058:	009b      	lsleq	r3, r3, #2
 800905a:	3002      	addeq	r0, #2
 800905c:	2b00      	cmp	r3, #0
 800905e:	db06      	blt.n	800906e <__hi0bits+0x3c>
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	d503      	bpl.n	800906c <__hi0bits+0x3a>
 8009064:	3001      	adds	r0, #1
 8009066:	4770      	bx	lr
 8009068:	2000      	movs	r0, #0
 800906a:	e7e8      	b.n	800903e <__hi0bits+0xc>
 800906c:	2020      	movs	r0, #32
 800906e:	4770      	bx	lr

08009070 <__lo0bits>:
 8009070:	6803      	ldr	r3, [r0, #0]
 8009072:	f013 0207 	ands.w	r2, r3, #7
 8009076:	4601      	mov	r1, r0
 8009078:	d00b      	beq.n	8009092 <__lo0bits+0x22>
 800907a:	07da      	lsls	r2, r3, #31
 800907c:	d423      	bmi.n	80090c6 <__lo0bits+0x56>
 800907e:	0798      	lsls	r0, r3, #30
 8009080:	bf49      	itett	mi
 8009082:	085b      	lsrmi	r3, r3, #1
 8009084:	089b      	lsrpl	r3, r3, #2
 8009086:	2001      	movmi	r0, #1
 8009088:	600b      	strmi	r3, [r1, #0]
 800908a:	bf5c      	itt	pl
 800908c:	600b      	strpl	r3, [r1, #0]
 800908e:	2002      	movpl	r0, #2
 8009090:	4770      	bx	lr
 8009092:	b298      	uxth	r0, r3
 8009094:	b9a8      	cbnz	r0, 80090c2 <__lo0bits+0x52>
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	2010      	movs	r0, #16
 800909a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800909e:	bf04      	itt	eq
 80090a0:	0a1b      	lsreq	r3, r3, #8
 80090a2:	3008      	addeq	r0, #8
 80090a4:	071a      	lsls	r2, r3, #28
 80090a6:	bf04      	itt	eq
 80090a8:	091b      	lsreq	r3, r3, #4
 80090aa:	3004      	addeq	r0, #4
 80090ac:	079a      	lsls	r2, r3, #30
 80090ae:	bf04      	itt	eq
 80090b0:	089b      	lsreq	r3, r3, #2
 80090b2:	3002      	addeq	r0, #2
 80090b4:	07da      	lsls	r2, r3, #31
 80090b6:	d402      	bmi.n	80090be <__lo0bits+0x4e>
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	d006      	beq.n	80090ca <__lo0bits+0x5a>
 80090bc:	3001      	adds	r0, #1
 80090be:	600b      	str	r3, [r1, #0]
 80090c0:	4770      	bx	lr
 80090c2:	4610      	mov	r0, r2
 80090c4:	e7e9      	b.n	800909a <__lo0bits+0x2a>
 80090c6:	2000      	movs	r0, #0
 80090c8:	4770      	bx	lr
 80090ca:	2020      	movs	r0, #32
 80090cc:	4770      	bx	lr

080090ce <__i2b>:
 80090ce:	b510      	push	{r4, lr}
 80090d0:	460c      	mov	r4, r1
 80090d2:	2101      	movs	r1, #1
 80090d4:	f7ff ff27 	bl	8008f26 <_Balloc>
 80090d8:	2201      	movs	r2, #1
 80090da:	6144      	str	r4, [r0, #20]
 80090dc:	6102      	str	r2, [r0, #16]
 80090de:	bd10      	pop	{r4, pc}

080090e0 <__multiply>:
 80090e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4614      	mov	r4, r2
 80090e6:	690a      	ldr	r2, [r1, #16]
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	bfb8      	it	lt
 80090ee:	460b      	movlt	r3, r1
 80090f0:	4688      	mov	r8, r1
 80090f2:	bfbc      	itt	lt
 80090f4:	46a0      	movlt	r8, r4
 80090f6:	461c      	movlt	r4, r3
 80090f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009100:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009104:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009108:	eb07 0609 	add.w	r6, r7, r9
 800910c:	42b3      	cmp	r3, r6
 800910e:	bfb8      	it	lt
 8009110:	3101      	addlt	r1, #1
 8009112:	f7ff ff08 	bl	8008f26 <_Balloc>
 8009116:	f100 0514 	add.w	r5, r0, #20
 800911a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800911e:	462b      	mov	r3, r5
 8009120:	2200      	movs	r2, #0
 8009122:	4573      	cmp	r3, lr
 8009124:	d316      	bcc.n	8009154 <__multiply+0x74>
 8009126:	f104 0214 	add.w	r2, r4, #20
 800912a:	f108 0114 	add.w	r1, r8, #20
 800912e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009132:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	9b00      	ldr	r3, [sp, #0]
 800913a:	9201      	str	r2, [sp, #4]
 800913c:	4293      	cmp	r3, r2
 800913e:	d80c      	bhi.n	800915a <__multiply+0x7a>
 8009140:	2e00      	cmp	r6, #0
 8009142:	dd03      	ble.n	800914c <__multiply+0x6c>
 8009144:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009148:	2b00      	cmp	r3, #0
 800914a:	d05d      	beq.n	8009208 <__multiply+0x128>
 800914c:	6106      	str	r6, [r0, #16]
 800914e:	b003      	add	sp, #12
 8009150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009154:	f843 2b04 	str.w	r2, [r3], #4
 8009158:	e7e3      	b.n	8009122 <__multiply+0x42>
 800915a:	f8b2 b000 	ldrh.w	fp, [r2]
 800915e:	f1bb 0f00 	cmp.w	fp, #0
 8009162:	d023      	beq.n	80091ac <__multiply+0xcc>
 8009164:	4689      	mov	r9, r1
 8009166:	46ac      	mov	ip, r5
 8009168:	f04f 0800 	mov.w	r8, #0
 800916c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009170:	f8dc a000 	ldr.w	sl, [ip]
 8009174:	b2a3      	uxth	r3, r4
 8009176:	fa1f fa8a 	uxth.w	sl, sl
 800917a:	fb0b a303 	mla	r3, fp, r3, sl
 800917e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009182:	f8dc 4000 	ldr.w	r4, [ip]
 8009186:	4443      	add	r3, r8
 8009188:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800918c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009190:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009194:	46e2      	mov	sl, ip
 8009196:	b29b      	uxth	r3, r3
 8009198:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800919c:	454f      	cmp	r7, r9
 800919e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091a2:	f84a 3b04 	str.w	r3, [sl], #4
 80091a6:	d82b      	bhi.n	8009200 <__multiply+0x120>
 80091a8:	f8cc 8004 	str.w	r8, [ip, #4]
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80091b2:	3204      	adds	r2, #4
 80091b4:	f1ba 0f00 	cmp.w	sl, #0
 80091b8:	d020      	beq.n	80091fc <__multiply+0x11c>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	4689      	mov	r9, r1
 80091be:	46a8      	mov	r8, r5
 80091c0:	f04f 0b00 	mov.w	fp, #0
 80091c4:	f8b9 c000 	ldrh.w	ip, [r9]
 80091c8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80091cc:	fb0a 440c 	mla	r4, sl, ip, r4
 80091d0:	445c      	add	r4, fp
 80091d2:	46c4      	mov	ip, r8
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091da:	f84c 3b04 	str.w	r3, [ip], #4
 80091de:	f859 3b04 	ldr.w	r3, [r9], #4
 80091e2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80091e6:	0c1b      	lsrs	r3, r3, #16
 80091e8:	fb0a b303 	mla	r3, sl, r3, fp
 80091ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80091f0:	454f      	cmp	r7, r9
 80091f2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80091f6:	d805      	bhi.n	8009204 <__multiply+0x124>
 80091f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80091fc:	3504      	adds	r5, #4
 80091fe:	e79b      	b.n	8009138 <__multiply+0x58>
 8009200:	46d4      	mov	ip, sl
 8009202:	e7b3      	b.n	800916c <__multiply+0x8c>
 8009204:	46e0      	mov	r8, ip
 8009206:	e7dd      	b.n	80091c4 <__multiply+0xe4>
 8009208:	3e01      	subs	r6, #1
 800920a:	e799      	b.n	8009140 <__multiply+0x60>

0800920c <__pow5mult>:
 800920c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009210:	4615      	mov	r5, r2
 8009212:	f012 0203 	ands.w	r2, r2, #3
 8009216:	4606      	mov	r6, r0
 8009218:	460f      	mov	r7, r1
 800921a:	d007      	beq.n	800922c <__pow5mult+0x20>
 800921c:	3a01      	subs	r2, #1
 800921e:	4c21      	ldr	r4, [pc, #132]	; (80092a4 <__pow5mult+0x98>)
 8009220:	2300      	movs	r3, #0
 8009222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009226:	f7ff fec9 	bl	8008fbc <__multadd>
 800922a:	4607      	mov	r7, r0
 800922c:	10ad      	asrs	r5, r5, #2
 800922e:	d035      	beq.n	800929c <__pow5mult+0x90>
 8009230:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009232:	b93c      	cbnz	r4, 8009244 <__pow5mult+0x38>
 8009234:	2010      	movs	r0, #16
 8009236:	f7ff fe63 	bl	8008f00 <malloc>
 800923a:	6270      	str	r0, [r6, #36]	; 0x24
 800923c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009240:	6004      	str	r4, [r0, #0]
 8009242:	60c4      	str	r4, [r0, #12]
 8009244:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800924c:	b94c      	cbnz	r4, 8009262 <__pow5mult+0x56>
 800924e:	f240 2171 	movw	r1, #625	; 0x271
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ff3b 	bl	80090ce <__i2b>
 8009258:	2300      	movs	r3, #0
 800925a:	f8c8 0008 	str.w	r0, [r8, #8]
 800925e:	4604      	mov	r4, r0
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	f04f 0800 	mov.w	r8, #0
 8009266:	07eb      	lsls	r3, r5, #31
 8009268:	d50a      	bpl.n	8009280 <__pow5mult+0x74>
 800926a:	4639      	mov	r1, r7
 800926c:	4622      	mov	r2, r4
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff ff36 	bl	80090e0 <__multiply>
 8009274:	4639      	mov	r1, r7
 8009276:	4681      	mov	r9, r0
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff fe88 	bl	8008f8e <_Bfree>
 800927e:	464f      	mov	r7, r9
 8009280:	106d      	asrs	r5, r5, #1
 8009282:	d00b      	beq.n	800929c <__pow5mult+0x90>
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	b938      	cbnz	r0, 8009298 <__pow5mult+0x8c>
 8009288:	4622      	mov	r2, r4
 800928a:	4621      	mov	r1, r4
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff ff27 	bl	80090e0 <__multiply>
 8009292:	6020      	str	r0, [r4, #0]
 8009294:	f8c0 8000 	str.w	r8, [r0]
 8009298:	4604      	mov	r4, r0
 800929a:	e7e4      	b.n	8009266 <__pow5mult+0x5a>
 800929c:	4638      	mov	r0, r7
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a2:	bf00      	nop
 80092a4:	08009cd8 	.word	0x08009cd8

080092a8 <__lshift>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	460c      	mov	r4, r1
 80092ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	6849      	ldr	r1, [r1, #4]
 80092b6:	eb0a 0903 	add.w	r9, sl, r3
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	4607      	mov	r7, r0
 80092be:	4616      	mov	r6, r2
 80092c0:	f109 0501 	add.w	r5, r9, #1
 80092c4:	42ab      	cmp	r3, r5
 80092c6:	db32      	blt.n	800932e <__lshift+0x86>
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7ff fe2c 	bl	8008f26 <_Balloc>
 80092ce:	2300      	movs	r3, #0
 80092d0:	4680      	mov	r8, r0
 80092d2:	f100 0114 	add.w	r1, r0, #20
 80092d6:	461a      	mov	r2, r3
 80092d8:	4553      	cmp	r3, sl
 80092da:	db2b      	blt.n	8009334 <__lshift+0x8c>
 80092dc:	6920      	ldr	r0, [r4, #16]
 80092de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092e2:	f104 0314 	add.w	r3, r4, #20
 80092e6:	f016 021f 	ands.w	r2, r6, #31
 80092ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092f2:	d025      	beq.n	8009340 <__lshift+0x98>
 80092f4:	f1c2 0e20 	rsb	lr, r2, #32
 80092f8:	2000      	movs	r0, #0
 80092fa:	681e      	ldr	r6, [r3, #0]
 80092fc:	468a      	mov	sl, r1
 80092fe:	4096      	lsls	r6, r2
 8009300:	4330      	orrs	r0, r6
 8009302:	f84a 0b04 	str.w	r0, [sl], #4
 8009306:	f853 0b04 	ldr.w	r0, [r3], #4
 800930a:	459c      	cmp	ip, r3
 800930c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009310:	d814      	bhi.n	800933c <__lshift+0x94>
 8009312:	6048      	str	r0, [r1, #4]
 8009314:	b108      	cbz	r0, 800931a <__lshift+0x72>
 8009316:	f109 0502 	add.w	r5, r9, #2
 800931a:	3d01      	subs	r5, #1
 800931c:	4638      	mov	r0, r7
 800931e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009322:	4621      	mov	r1, r4
 8009324:	f7ff fe33 	bl	8008f8e <_Bfree>
 8009328:	4640      	mov	r0, r8
 800932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932e:	3101      	adds	r1, #1
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	e7c7      	b.n	80092c4 <__lshift+0x1c>
 8009334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009338:	3301      	adds	r3, #1
 800933a:	e7cd      	b.n	80092d8 <__lshift+0x30>
 800933c:	4651      	mov	r1, sl
 800933e:	e7dc      	b.n	80092fa <__lshift+0x52>
 8009340:	3904      	subs	r1, #4
 8009342:	f853 2b04 	ldr.w	r2, [r3], #4
 8009346:	f841 2f04 	str.w	r2, [r1, #4]!
 800934a:	459c      	cmp	ip, r3
 800934c:	d8f9      	bhi.n	8009342 <__lshift+0x9a>
 800934e:	e7e4      	b.n	800931a <__lshift+0x72>

08009350 <__mcmp>:
 8009350:	6903      	ldr	r3, [r0, #16]
 8009352:	690a      	ldr	r2, [r1, #16]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	b530      	push	{r4, r5, lr}
 8009358:	d10c      	bne.n	8009374 <__mcmp+0x24>
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	3014      	adds	r0, #20
 800935e:	3114      	adds	r1, #20
 8009360:	1884      	adds	r4, r0, r2
 8009362:	4411      	add	r1, r2
 8009364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800936c:	4295      	cmp	r5, r2
 800936e:	d003      	beq.n	8009378 <__mcmp+0x28>
 8009370:	d305      	bcc.n	800937e <__mcmp+0x2e>
 8009372:	2301      	movs	r3, #1
 8009374:	4618      	mov	r0, r3
 8009376:	bd30      	pop	{r4, r5, pc}
 8009378:	42a0      	cmp	r0, r4
 800937a:	d3f3      	bcc.n	8009364 <__mcmp+0x14>
 800937c:	e7fa      	b.n	8009374 <__mcmp+0x24>
 800937e:	f04f 33ff 	mov.w	r3, #4294967295
 8009382:	e7f7      	b.n	8009374 <__mcmp+0x24>

08009384 <__mdiff>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	460d      	mov	r5, r1
 800938a:	4607      	mov	r7, r0
 800938c:	4611      	mov	r1, r2
 800938e:	4628      	mov	r0, r5
 8009390:	4614      	mov	r4, r2
 8009392:	f7ff ffdd 	bl	8009350 <__mcmp>
 8009396:	1e06      	subs	r6, r0, #0
 8009398:	d108      	bne.n	80093ac <__mdiff+0x28>
 800939a:	4631      	mov	r1, r6
 800939c:	4638      	mov	r0, r7
 800939e:	f7ff fdc2 	bl	8008f26 <_Balloc>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ac:	bfa4      	itt	ge
 80093ae:	4623      	movge	r3, r4
 80093b0:	462c      	movge	r4, r5
 80093b2:	4638      	mov	r0, r7
 80093b4:	6861      	ldr	r1, [r4, #4]
 80093b6:	bfa6      	itte	ge
 80093b8:	461d      	movge	r5, r3
 80093ba:	2600      	movge	r6, #0
 80093bc:	2601      	movlt	r6, #1
 80093be:	f7ff fdb2 	bl	8008f26 <_Balloc>
 80093c2:	692b      	ldr	r3, [r5, #16]
 80093c4:	60c6      	str	r6, [r0, #12]
 80093c6:	6926      	ldr	r6, [r4, #16]
 80093c8:	f105 0914 	add.w	r9, r5, #20
 80093cc:	f104 0214 	add.w	r2, r4, #20
 80093d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80093d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80093d8:	f100 0514 	add.w	r5, r0, #20
 80093dc:	f04f 0e00 	mov.w	lr, #0
 80093e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80093e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80093e8:	fa1e f18a 	uxtah	r1, lr, sl
 80093ec:	b2a3      	uxth	r3, r4
 80093ee:	1ac9      	subs	r1, r1, r3
 80093f0:	0c23      	lsrs	r3, r4, #16
 80093f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80093f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093fa:	b289      	uxth	r1, r1
 80093fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009400:	45c8      	cmp	r8, r9
 8009402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009406:	4694      	mov	ip, r2
 8009408:	f845 3b04 	str.w	r3, [r5], #4
 800940c:	d8e8      	bhi.n	80093e0 <__mdiff+0x5c>
 800940e:	45bc      	cmp	ip, r7
 8009410:	d304      	bcc.n	800941c <__mdiff+0x98>
 8009412:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009416:	b183      	cbz	r3, 800943a <__mdiff+0xb6>
 8009418:	6106      	str	r6, [r0, #16]
 800941a:	e7c5      	b.n	80093a8 <__mdiff+0x24>
 800941c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009420:	fa1e f381 	uxtah	r3, lr, r1
 8009424:	141a      	asrs	r2, r3, #16
 8009426:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800942a:	b29b      	uxth	r3, r3
 800942c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009430:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009434:	f845 3b04 	str.w	r3, [r5], #4
 8009438:	e7e9      	b.n	800940e <__mdiff+0x8a>
 800943a:	3e01      	subs	r6, #1
 800943c:	e7e9      	b.n	8009412 <__mdiff+0x8e>

0800943e <__d2b>:
 800943e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009442:	460e      	mov	r6, r1
 8009444:	2101      	movs	r1, #1
 8009446:	ec59 8b10 	vmov	r8, r9, d0
 800944a:	4615      	mov	r5, r2
 800944c:	f7ff fd6b 	bl	8008f26 <_Balloc>
 8009450:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009454:	4607      	mov	r7, r0
 8009456:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800945a:	bb34      	cbnz	r4, 80094aa <__d2b+0x6c>
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	f1b8 0300 	subs.w	r3, r8, #0
 8009462:	d027      	beq.n	80094b4 <__d2b+0x76>
 8009464:	a802      	add	r0, sp, #8
 8009466:	f840 3d08 	str.w	r3, [r0, #-8]!
 800946a:	f7ff fe01 	bl	8009070 <__lo0bits>
 800946e:	9900      	ldr	r1, [sp, #0]
 8009470:	b1f0      	cbz	r0, 80094b0 <__d2b+0x72>
 8009472:	9a01      	ldr	r2, [sp, #4]
 8009474:	f1c0 0320 	rsb	r3, r0, #32
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	430b      	orrs	r3, r1
 800947e:	40c2      	lsrs	r2, r0
 8009480:	617b      	str	r3, [r7, #20]
 8009482:	9201      	str	r2, [sp, #4]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	bf14      	ite	ne
 800948c:	2102      	movne	r1, #2
 800948e:	2101      	moveq	r1, #1
 8009490:	6139      	str	r1, [r7, #16]
 8009492:	b1c4      	cbz	r4, 80094c6 <__d2b+0x88>
 8009494:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009498:	4404      	add	r4, r0
 800949a:	6034      	str	r4, [r6, #0]
 800949c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094a0:	6028      	str	r0, [r5, #0]
 80094a2:	4638      	mov	r0, r7
 80094a4:	b003      	add	sp, #12
 80094a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094ae:	e7d5      	b.n	800945c <__d2b+0x1e>
 80094b0:	6179      	str	r1, [r7, #20]
 80094b2:	e7e7      	b.n	8009484 <__d2b+0x46>
 80094b4:	a801      	add	r0, sp, #4
 80094b6:	f7ff fddb 	bl	8009070 <__lo0bits>
 80094ba:	9b01      	ldr	r3, [sp, #4]
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	2101      	movs	r1, #1
 80094c0:	6139      	str	r1, [r7, #16]
 80094c2:	3020      	adds	r0, #32
 80094c4:	e7e5      	b.n	8009492 <__d2b+0x54>
 80094c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80094ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094ce:	6030      	str	r0, [r6, #0]
 80094d0:	6918      	ldr	r0, [r3, #16]
 80094d2:	f7ff fdae 	bl	8009032 <__hi0bits>
 80094d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80094da:	e7e1      	b.n	80094a0 <__d2b+0x62>

080094dc <_calloc_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	fb02 f401 	mul.w	r4, r2, r1
 80094e2:	4621      	mov	r1, r4
 80094e4:	f000 f856 	bl	8009594 <_malloc_r>
 80094e8:	4605      	mov	r5, r0
 80094ea:	b118      	cbz	r0, 80094f4 <_calloc_r+0x18>
 80094ec:	4622      	mov	r2, r4
 80094ee:	2100      	movs	r1, #0
 80094f0:	f7fd fd20 	bl	8006f34 <memset>
 80094f4:	4628      	mov	r0, r5
 80094f6:	bd38      	pop	{r3, r4, r5, pc}

080094f8 <_free_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	4605      	mov	r5, r0
 80094fc:	2900      	cmp	r1, #0
 80094fe:	d045      	beq.n	800958c <_free_r+0x94>
 8009500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009504:	1f0c      	subs	r4, r1, #4
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfb8      	it	lt
 800950a:	18e4      	addlt	r4, r4, r3
 800950c:	f000 fa98 	bl	8009a40 <__malloc_lock>
 8009510:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <_free_r+0x98>)
 8009512:	6813      	ldr	r3, [r2, #0]
 8009514:	4610      	mov	r0, r2
 8009516:	b933      	cbnz	r3, 8009526 <_free_r+0x2e>
 8009518:	6063      	str	r3, [r4, #4]
 800951a:	6014      	str	r4, [r2, #0]
 800951c:	4628      	mov	r0, r5
 800951e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009522:	f000 ba8e 	b.w	8009a42 <__malloc_unlock>
 8009526:	42a3      	cmp	r3, r4
 8009528:	d90c      	bls.n	8009544 <_free_r+0x4c>
 800952a:	6821      	ldr	r1, [r4, #0]
 800952c:	1862      	adds	r2, r4, r1
 800952e:	4293      	cmp	r3, r2
 8009530:	bf04      	itt	eq
 8009532:	681a      	ldreq	r2, [r3, #0]
 8009534:	685b      	ldreq	r3, [r3, #4]
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	bf04      	itt	eq
 800953a:	1852      	addeq	r2, r2, r1
 800953c:	6022      	streq	r2, [r4, #0]
 800953e:	6004      	str	r4, [r0, #0]
 8009540:	e7ec      	b.n	800951c <_free_r+0x24>
 8009542:	4613      	mov	r3, r2
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	b10a      	cbz	r2, 800954c <_free_r+0x54>
 8009548:	42a2      	cmp	r2, r4
 800954a:	d9fa      	bls.n	8009542 <_free_r+0x4a>
 800954c:	6819      	ldr	r1, [r3, #0]
 800954e:	1858      	adds	r0, r3, r1
 8009550:	42a0      	cmp	r0, r4
 8009552:	d10b      	bne.n	800956c <_free_r+0x74>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4401      	add	r1, r0
 8009558:	1858      	adds	r0, r3, r1
 800955a:	4282      	cmp	r2, r0
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	d1dd      	bne.n	800951c <_free_r+0x24>
 8009560:	6810      	ldr	r0, [r2, #0]
 8009562:	6852      	ldr	r2, [r2, #4]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	4401      	add	r1, r0
 8009568:	6019      	str	r1, [r3, #0]
 800956a:	e7d7      	b.n	800951c <_free_r+0x24>
 800956c:	d902      	bls.n	8009574 <_free_r+0x7c>
 800956e:	230c      	movs	r3, #12
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7d3      	b.n	800951c <_free_r+0x24>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428a      	cmp	r2, r1
 800957a:	bf04      	itt	eq
 800957c:	6811      	ldreq	r1, [r2, #0]
 800957e:	6852      	ldreq	r2, [r2, #4]
 8009580:	6062      	str	r2, [r4, #4]
 8009582:	bf04      	itt	eq
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	605c      	str	r4, [r3, #4]
 800958a:	e7c7      	b.n	800951c <_free_r+0x24>
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	200001fc 	.word	0x200001fc

08009594 <_malloc_r>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	1ccd      	adds	r5, r1, #3
 8009598:	f025 0503 	bic.w	r5, r5, #3
 800959c:	3508      	adds	r5, #8
 800959e:	2d0c      	cmp	r5, #12
 80095a0:	bf38      	it	cc
 80095a2:	250c      	movcc	r5, #12
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	4606      	mov	r6, r0
 80095a8:	db01      	blt.n	80095ae <_malloc_r+0x1a>
 80095aa:	42a9      	cmp	r1, r5
 80095ac:	d903      	bls.n	80095b6 <_malloc_r+0x22>
 80095ae:	230c      	movs	r3, #12
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	2000      	movs	r0, #0
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	f000 fa43 	bl	8009a40 <__malloc_lock>
 80095ba:	4a21      	ldr	r2, [pc, #132]	; (8009640 <_malloc_r+0xac>)
 80095bc:	6814      	ldr	r4, [r2, #0]
 80095be:	4621      	mov	r1, r4
 80095c0:	b991      	cbnz	r1, 80095e8 <_malloc_r+0x54>
 80095c2:	4c20      	ldr	r4, [pc, #128]	; (8009644 <_malloc_r+0xb0>)
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	b91b      	cbnz	r3, 80095d0 <_malloc_r+0x3c>
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f97d 	bl	80098c8 <_sbrk_r>
 80095ce:	6020      	str	r0, [r4, #0]
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f978 	bl	80098c8 <_sbrk_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d124      	bne.n	8009626 <_malloc_r+0x92>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 fa2e 	bl	8009a42 <__malloc_unlock>
 80095e6:	e7e4      	b.n	80095b2 <_malloc_r+0x1e>
 80095e8:	680b      	ldr	r3, [r1, #0]
 80095ea:	1b5b      	subs	r3, r3, r5
 80095ec:	d418      	bmi.n	8009620 <_malloc_r+0x8c>
 80095ee:	2b0b      	cmp	r3, #11
 80095f0:	d90f      	bls.n	8009612 <_malloc_r+0x7e>
 80095f2:	600b      	str	r3, [r1, #0]
 80095f4:	50cd      	str	r5, [r1, r3]
 80095f6:	18cc      	adds	r4, r1, r3
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 fa22 	bl	8009a42 <__malloc_unlock>
 80095fe:	f104 000b 	add.w	r0, r4, #11
 8009602:	1d23      	adds	r3, r4, #4
 8009604:	f020 0007 	bic.w	r0, r0, #7
 8009608:	1ac3      	subs	r3, r0, r3
 800960a:	d0d3      	beq.n	80095b4 <_malloc_r+0x20>
 800960c:	425a      	negs	r2, r3
 800960e:	50e2      	str	r2, [r4, r3]
 8009610:	e7d0      	b.n	80095b4 <_malloc_r+0x20>
 8009612:	428c      	cmp	r4, r1
 8009614:	684b      	ldr	r3, [r1, #4]
 8009616:	bf16      	itet	ne
 8009618:	6063      	strne	r3, [r4, #4]
 800961a:	6013      	streq	r3, [r2, #0]
 800961c:	460c      	movne	r4, r1
 800961e:	e7eb      	b.n	80095f8 <_malloc_r+0x64>
 8009620:	460c      	mov	r4, r1
 8009622:	6849      	ldr	r1, [r1, #4]
 8009624:	e7cc      	b.n	80095c0 <_malloc_r+0x2c>
 8009626:	1cc4      	adds	r4, r0, #3
 8009628:	f024 0403 	bic.w	r4, r4, #3
 800962c:	42a0      	cmp	r0, r4
 800962e:	d005      	beq.n	800963c <_malloc_r+0xa8>
 8009630:	1a21      	subs	r1, r4, r0
 8009632:	4630      	mov	r0, r6
 8009634:	f000 f948 	bl	80098c8 <_sbrk_r>
 8009638:	3001      	adds	r0, #1
 800963a:	d0cf      	beq.n	80095dc <_malloc_r+0x48>
 800963c:	6025      	str	r5, [r4, #0]
 800963e:	e7db      	b.n	80095f8 <_malloc_r+0x64>
 8009640:	200001fc 	.word	0x200001fc
 8009644:	20000200 	.word	0x20000200

08009648 <__sfputc_r>:
 8009648:	6893      	ldr	r3, [r2, #8]
 800964a:	3b01      	subs	r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	b410      	push	{r4}
 8009650:	6093      	str	r3, [r2, #8]
 8009652:	da08      	bge.n	8009666 <__sfputc_r+0x1e>
 8009654:	6994      	ldr	r4, [r2, #24]
 8009656:	42a3      	cmp	r3, r4
 8009658:	db01      	blt.n	800965e <__sfputc_r+0x16>
 800965a:	290a      	cmp	r1, #10
 800965c:	d103      	bne.n	8009666 <__sfputc_r+0x1e>
 800965e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009662:	f7fe bb5d 	b.w	8007d20 <__swbuf_r>
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	1c58      	adds	r0, r3, #1
 800966a:	6010      	str	r0, [r2, #0]
 800966c:	7019      	strb	r1, [r3, #0]
 800966e:	4608      	mov	r0, r1
 8009670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009674:	4770      	bx	lr

08009676 <__sfputs_r>:
 8009676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	4614      	mov	r4, r2
 800967e:	18d5      	adds	r5, r2, r3
 8009680:	42ac      	cmp	r4, r5
 8009682:	d101      	bne.n	8009688 <__sfputs_r+0x12>
 8009684:	2000      	movs	r0, #0
 8009686:	e007      	b.n	8009698 <__sfputs_r+0x22>
 8009688:	463a      	mov	r2, r7
 800968a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800968e:	4630      	mov	r0, r6
 8009690:	f7ff ffda 	bl	8009648 <__sfputc_r>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d1f3      	bne.n	8009680 <__sfputs_r+0xa>
 8009698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800969c <_vfiprintf_r>:
 800969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	460c      	mov	r4, r1
 80096a2:	b09d      	sub	sp, #116	; 0x74
 80096a4:	4617      	mov	r7, r2
 80096a6:	461d      	mov	r5, r3
 80096a8:	4606      	mov	r6, r0
 80096aa:	b118      	cbz	r0, 80096b4 <_vfiprintf_r+0x18>
 80096ac:	6983      	ldr	r3, [r0, #24]
 80096ae:	b90b      	cbnz	r3, 80096b4 <_vfiprintf_r+0x18>
 80096b0:	f7ff fb2a 	bl	8008d08 <__sinit>
 80096b4:	4b7c      	ldr	r3, [pc, #496]	; (80098a8 <_vfiprintf_r+0x20c>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d158      	bne.n	800976c <_vfiprintf_r+0xd0>
 80096ba:	6874      	ldr	r4, [r6, #4]
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	0718      	lsls	r0, r3, #28
 80096c0:	d55e      	bpl.n	8009780 <_vfiprintf_r+0xe4>
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d05b      	beq.n	8009780 <_vfiprintf_r+0xe4>
 80096c8:	2300      	movs	r3, #0
 80096ca:	9309      	str	r3, [sp, #36]	; 0x24
 80096cc:	2320      	movs	r3, #32
 80096ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d2:	2330      	movs	r3, #48	; 0x30
 80096d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096d8:	9503      	str	r5, [sp, #12]
 80096da:	f04f 0b01 	mov.w	fp, #1
 80096de:	46b8      	mov	r8, r7
 80096e0:	4645      	mov	r5, r8
 80096e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80096e6:	b10b      	cbz	r3, 80096ec <_vfiprintf_r+0x50>
 80096e8:	2b25      	cmp	r3, #37	; 0x25
 80096ea:	d154      	bne.n	8009796 <_vfiprintf_r+0xfa>
 80096ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80096f0:	d00b      	beq.n	800970a <_vfiprintf_r+0x6e>
 80096f2:	4653      	mov	r3, sl
 80096f4:	463a      	mov	r2, r7
 80096f6:	4621      	mov	r1, r4
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7ff ffbc 	bl	8009676 <__sfputs_r>
 80096fe:	3001      	adds	r0, #1
 8009700:	f000 80c2 	beq.w	8009888 <_vfiprintf_r+0x1ec>
 8009704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009706:	4453      	add	r3, sl
 8009708:	9309      	str	r3, [sp, #36]	; 0x24
 800970a:	f898 3000 	ldrb.w	r3, [r8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 80ba 	beq.w	8009888 <_vfiprintf_r+0x1ec>
 8009714:	2300      	movs	r3, #0
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	9307      	str	r3, [sp, #28]
 8009722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009726:	931a      	str	r3, [sp, #104]	; 0x68
 8009728:	46a8      	mov	r8, r5
 800972a:	2205      	movs	r2, #5
 800972c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009730:	485e      	ldr	r0, [pc, #376]	; (80098ac <_vfiprintf_r+0x210>)
 8009732:	f7f6 fd55 	bl	80001e0 <memchr>
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	bb78      	cbnz	r0, 800979a <_vfiprintf_r+0xfe>
 800973a:	06d9      	lsls	r1, r3, #27
 800973c:	bf44      	itt	mi
 800973e:	2220      	movmi	r2, #32
 8009740:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009744:	071a      	lsls	r2, r3, #28
 8009746:	bf44      	itt	mi
 8009748:	222b      	movmi	r2, #43	; 0x2b
 800974a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800974e:	782a      	ldrb	r2, [r5, #0]
 8009750:	2a2a      	cmp	r2, #42	; 0x2a
 8009752:	d02a      	beq.n	80097aa <_vfiprintf_r+0x10e>
 8009754:	9a07      	ldr	r2, [sp, #28]
 8009756:	46a8      	mov	r8, r5
 8009758:	2000      	movs	r0, #0
 800975a:	250a      	movs	r5, #10
 800975c:	4641      	mov	r1, r8
 800975e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009762:	3b30      	subs	r3, #48	; 0x30
 8009764:	2b09      	cmp	r3, #9
 8009766:	d969      	bls.n	800983c <_vfiprintf_r+0x1a0>
 8009768:	b360      	cbz	r0, 80097c4 <_vfiprintf_r+0x128>
 800976a:	e024      	b.n	80097b6 <_vfiprintf_r+0x11a>
 800976c:	4b50      	ldr	r3, [pc, #320]	; (80098b0 <_vfiprintf_r+0x214>)
 800976e:	429c      	cmp	r4, r3
 8009770:	d101      	bne.n	8009776 <_vfiprintf_r+0xda>
 8009772:	68b4      	ldr	r4, [r6, #8]
 8009774:	e7a2      	b.n	80096bc <_vfiprintf_r+0x20>
 8009776:	4b4f      	ldr	r3, [pc, #316]	; (80098b4 <_vfiprintf_r+0x218>)
 8009778:	429c      	cmp	r4, r3
 800977a:	bf08      	it	eq
 800977c:	68f4      	ldreq	r4, [r6, #12]
 800977e:	e79d      	b.n	80096bc <_vfiprintf_r+0x20>
 8009780:	4621      	mov	r1, r4
 8009782:	4630      	mov	r0, r6
 8009784:	f7fe fb1e 	bl	8007dc4 <__swsetup_r>
 8009788:	2800      	cmp	r0, #0
 800978a:	d09d      	beq.n	80096c8 <_vfiprintf_r+0x2c>
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	b01d      	add	sp, #116	; 0x74
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	46a8      	mov	r8, r5
 8009798:	e7a2      	b.n	80096e0 <_vfiprintf_r+0x44>
 800979a:	4a44      	ldr	r2, [pc, #272]	; (80098ac <_vfiprintf_r+0x210>)
 800979c:	1a80      	subs	r0, r0, r2
 800979e:	fa0b f000 	lsl.w	r0, fp, r0
 80097a2:	4318      	orrs	r0, r3
 80097a4:	9004      	str	r0, [sp, #16]
 80097a6:	4645      	mov	r5, r8
 80097a8:	e7be      	b.n	8009728 <_vfiprintf_r+0x8c>
 80097aa:	9a03      	ldr	r2, [sp, #12]
 80097ac:	1d11      	adds	r1, r2, #4
 80097ae:	6812      	ldr	r2, [r2, #0]
 80097b0:	9103      	str	r1, [sp, #12]
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	db01      	blt.n	80097ba <_vfiprintf_r+0x11e>
 80097b6:	9207      	str	r2, [sp, #28]
 80097b8:	e004      	b.n	80097c4 <_vfiprintf_r+0x128>
 80097ba:	4252      	negs	r2, r2
 80097bc:	f043 0302 	orr.w	r3, r3, #2
 80097c0:	9207      	str	r2, [sp, #28]
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	f898 3000 	ldrb.w	r3, [r8]
 80097c8:	2b2e      	cmp	r3, #46	; 0x2e
 80097ca:	d10e      	bne.n	80097ea <_vfiprintf_r+0x14e>
 80097cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80097d0:	2b2a      	cmp	r3, #42	; 0x2a
 80097d2:	d138      	bne.n	8009846 <_vfiprintf_r+0x1aa>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	1d1a      	adds	r2, r3, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	9203      	str	r2, [sp, #12]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bfb8      	it	lt
 80097e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80097e4:	f108 0802 	add.w	r8, r8, #2
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	4d33      	ldr	r5, [pc, #204]	; (80098b8 <_vfiprintf_r+0x21c>)
 80097ec:	f898 1000 	ldrb.w	r1, [r8]
 80097f0:	2203      	movs	r2, #3
 80097f2:	4628      	mov	r0, r5
 80097f4:	f7f6 fcf4 	bl	80001e0 <memchr>
 80097f8:	b140      	cbz	r0, 800980c <_vfiprintf_r+0x170>
 80097fa:	2340      	movs	r3, #64	; 0x40
 80097fc:	1b40      	subs	r0, r0, r5
 80097fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009802:	9b04      	ldr	r3, [sp, #16]
 8009804:	4303      	orrs	r3, r0
 8009806:	f108 0801 	add.w	r8, r8, #1
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	f898 1000 	ldrb.w	r1, [r8]
 8009810:	482a      	ldr	r0, [pc, #168]	; (80098bc <_vfiprintf_r+0x220>)
 8009812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009816:	2206      	movs	r2, #6
 8009818:	f108 0701 	add.w	r7, r8, #1
 800981c:	f7f6 fce0 	bl	80001e0 <memchr>
 8009820:	2800      	cmp	r0, #0
 8009822:	d037      	beq.n	8009894 <_vfiprintf_r+0x1f8>
 8009824:	4b26      	ldr	r3, [pc, #152]	; (80098c0 <_vfiprintf_r+0x224>)
 8009826:	bb1b      	cbnz	r3, 8009870 <_vfiprintf_r+0x1d4>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	3307      	adds	r3, #7
 800982c:	f023 0307 	bic.w	r3, r3, #7
 8009830:	3308      	adds	r3, #8
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009836:	444b      	add	r3, r9
 8009838:	9309      	str	r3, [sp, #36]	; 0x24
 800983a:	e750      	b.n	80096de <_vfiprintf_r+0x42>
 800983c:	fb05 3202 	mla	r2, r5, r2, r3
 8009840:	2001      	movs	r0, #1
 8009842:	4688      	mov	r8, r1
 8009844:	e78a      	b.n	800975c <_vfiprintf_r+0xc0>
 8009846:	2300      	movs	r3, #0
 8009848:	f108 0801 	add.w	r8, r8, #1
 800984c:	9305      	str	r3, [sp, #20]
 800984e:	4619      	mov	r1, r3
 8009850:	250a      	movs	r5, #10
 8009852:	4640      	mov	r0, r8
 8009854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009858:	3a30      	subs	r2, #48	; 0x30
 800985a:	2a09      	cmp	r2, #9
 800985c:	d903      	bls.n	8009866 <_vfiprintf_r+0x1ca>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0c3      	beq.n	80097ea <_vfiprintf_r+0x14e>
 8009862:	9105      	str	r1, [sp, #20]
 8009864:	e7c1      	b.n	80097ea <_vfiprintf_r+0x14e>
 8009866:	fb05 2101 	mla	r1, r5, r1, r2
 800986a:	2301      	movs	r3, #1
 800986c:	4680      	mov	r8, r0
 800986e:	e7f0      	b.n	8009852 <_vfiprintf_r+0x1b6>
 8009870:	ab03      	add	r3, sp, #12
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	4622      	mov	r2, r4
 8009876:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <_vfiprintf_r+0x228>)
 8009878:	a904      	add	r1, sp, #16
 800987a:	4630      	mov	r0, r6
 800987c:	f7fd fbf6 	bl	800706c <_printf_float>
 8009880:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009884:	4681      	mov	r9, r0
 8009886:	d1d5      	bne.n	8009834 <_vfiprintf_r+0x198>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	065b      	lsls	r3, r3, #25
 800988c:	f53f af7e 	bmi.w	800978c <_vfiprintf_r+0xf0>
 8009890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009892:	e77d      	b.n	8009790 <_vfiprintf_r+0xf4>
 8009894:	ab03      	add	r3, sp, #12
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	4622      	mov	r2, r4
 800989a:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <_vfiprintf_r+0x228>)
 800989c:	a904      	add	r1, sp, #16
 800989e:	4630      	mov	r0, r6
 80098a0:	f7fd fe9a 	bl	80075d8 <_printf_i>
 80098a4:	e7ec      	b.n	8009880 <_vfiprintf_r+0x1e4>
 80098a6:	bf00      	nop
 80098a8:	08009ba8 	.word	0x08009ba8
 80098ac:	08009ce4 	.word	0x08009ce4
 80098b0:	08009bc8 	.word	0x08009bc8
 80098b4:	08009b88 	.word	0x08009b88
 80098b8:	08009cea 	.word	0x08009cea
 80098bc:	08009cee 	.word	0x08009cee
 80098c0:	0800706d 	.word	0x0800706d
 80098c4:	08009677 	.word	0x08009677

080098c8 <_sbrk_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4c06      	ldr	r4, [pc, #24]	; (80098e4 <_sbrk_r+0x1c>)
 80098cc:	2300      	movs	r3, #0
 80098ce:	4605      	mov	r5, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	f7f8 f916 	bl	8001b04 <_sbrk>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_sbrk_r+0x1a>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_sbrk_r+0x1a>
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	2000050c 	.word	0x2000050c

080098e8 <__sread>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	460c      	mov	r4, r1
 80098ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f0:	f000 f8a8 	bl	8009a44 <_read_r>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	bfab      	itete	ge
 80098f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098fa:	89a3      	ldrhlt	r3, [r4, #12]
 80098fc:	181b      	addge	r3, r3, r0
 80098fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009902:	bfac      	ite	ge
 8009904:	6563      	strge	r3, [r4, #84]	; 0x54
 8009906:	81a3      	strhlt	r3, [r4, #12]
 8009908:	bd10      	pop	{r4, pc}

0800990a <__swrite>:
 800990a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	461f      	mov	r7, r3
 8009910:	898b      	ldrh	r3, [r1, #12]
 8009912:	05db      	lsls	r3, r3, #23
 8009914:	4605      	mov	r5, r0
 8009916:	460c      	mov	r4, r1
 8009918:	4616      	mov	r6, r2
 800991a:	d505      	bpl.n	8009928 <__swrite+0x1e>
 800991c:	2302      	movs	r3, #2
 800991e:	2200      	movs	r2, #0
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	f000 f868 	bl	80099f8 <_lseek_r>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	4632      	mov	r2, r6
 8009936:	463b      	mov	r3, r7
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993e:	f000 b817 	b.w	8009970 <_write_r>

08009942 <__sseek>:
 8009942:	b510      	push	{r4, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 f855 	bl	80099f8 <_lseek_r>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	bf15      	itete	ne
 8009954:	6560      	strne	r0, [r4, #84]	; 0x54
 8009956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800995a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800995e:	81a3      	strheq	r3, [r4, #12]
 8009960:	bf18      	it	ne
 8009962:	81a3      	strhne	r3, [r4, #12]
 8009964:	bd10      	pop	{r4, pc}

08009966 <__sclose>:
 8009966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996a:	f000 b813 	b.w	8009994 <_close_r>
	...

08009970 <_write_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4c07      	ldr	r4, [pc, #28]	; (8009990 <_write_r+0x20>)
 8009974:	4605      	mov	r5, r0
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	2200      	movs	r2, #0
 800997c:	6022      	str	r2, [r4, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	f7f8 f86f 	bl	8001a62 <_write>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_write_r+0x1e>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	b103      	cbz	r3, 800998e <_write_r+0x1e>
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	2000050c 	.word	0x2000050c

08009994 <_close_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4c06      	ldr	r4, [pc, #24]	; (80099b0 <_close_r+0x1c>)
 8009998:	2300      	movs	r3, #0
 800999a:	4605      	mov	r5, r0
 800999c:	4608      	mov	r0, r1
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	f7f8 f87b 	bl	8001a9a <_close>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_close_r+0x1a>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_close_r+0x1a>
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	2000050c 	.word	0x2000050c

080099b4 <_fstat_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4c07      	ldr	r4, [pc, #28]	; (80099d4 <_fstat_r+0x20>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4605      	mov	r5, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	f7f8 f876 	bl	8001ab2 <_fstat>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	d102      	bne.n	80099d0 <_fstat_r+0x1c>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	b103      	cbz	r3, 80099d0 <_fstat_r+0x1c>
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	2000050c 	.word	0x2000050c

080099d8 <_isatty_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4c06      	ldr	r4, [pc, #24]	; (80099f4 <_isatty_r+0x1c>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4605      	mov	r5, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	f7f8 f875 	bl	8001ad2 <_isatty>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_isatty_r+0x1a>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_isatty_r+0x1a>
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	2000050c 	.word	0x2000050c

080099f8 <_lseek_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4c07      	ldr	r4, [pc, #28]	; (8009a18 <_lseek_r+0x20>)
 80099fc:	4605      	mov	r5, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	6022      	str	r2, [r4, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f8 f86e 	bl	8001ae8 <_lseek>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_lseek_r+0x1e>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_lseek_r+0x1e>
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	2000050c 	.word	0x2000050c

08009a1c <__ascii_mbtowc>:
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	b901      	cbnz	r1, 8009a22 <__ascii_mbtowc+0x6>
 8009a20:	a901      	add	r1, sp, #4
 8009a22:	b142      	cbz	r2, 8009a36 <__ascii_mbtowc+0x1a>
 8009a24:	b14b      	cbz	r3, 8009a3a <__ascii_mbtowc+0x1e>
 8009a26:	7813      	ldrb	r3, [r2, #0]
 8009a28:	600b      	str	r3, [r1, #0]
 8009a2a:	7812      	ldrb	r2, [r2, #0]
 8009a2c:	1c10      	adds	r0, r2, #0
 8009a2e:	bf18      	it	ne
 8009a30:	2001      	movne	r0, #1
 8009a32:	b002      	add	sp, #8
 8009a34:	4770      	bx	lr
 8009a36:	4610      	mov	r0, r2
 8009a38:	e7fb      	b.n	8009a32 <__ascii_mbtowc+0x16>
 8009a3a:	f06f 0001 	mvn.w	r0, #1
 8009a3e:	e7f8      	b.n	8009a32 <__ascii_mbtowc+0x16>

08009a40 <__malloc_lock>:
 8009a40:	4770      	bx	lr

08009a42 <__malloc_unlock>:
 8009a42:	4770      	bx	lr

08009a44 <_read_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4c07      	ldr	r4, [pc, #28]	; (8009a64 <_read_r+0x20>)
 8009a48:	4605      	mov	r5, r0
 8009a4a:	4608      	mov	r0, r1
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	6022      	str	r2, [r4, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f7f7 ffe8 	bl	8001a28 <_read>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d102      	bne.n	8009a62 <_read_r+0x1e>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	b103      	cbz	r3, 8009a62 <_read_r+0x1e>
 8009a60:	602b      	str	r3, [r5, #0]
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	2000050c 	.word	0x2000050c

08009a68 <__ascii_wctomb>:
 8009a68:	b149      	cbz	r1, 8009a7e <__ascii_wctomb+0x16>
 8009a6a:	2aff      	cmp	r2, #255	; 0xff
 8009a6c:	bf85      	ittet	hi
 8009a6e:	238a      	movhi	r3, #138	; 0x8a
 8009a70:	6003      	strhi	r3, [r0, #0]
 8009a72:	700a      	strbls	r2, [r1, #0]
 8009a74:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a78:	bf98      	it	ls
 8009a7a:	2001      	movls	r0, #1
 8009a7c:	4770      	bx	lr
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4770      	bx	lr
	...

08009a84 <_init>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr

08009a90 <_fini>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr
